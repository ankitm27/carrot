{"body": {"column":24,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        int[] arr = new int[];\n        int k;\n        string ans;\n        for(int i = 0; i < arr.Length; i++){\n            if(arr[i] = k){\n                ans = \"Yes\";\n                Console.\n            }\n             \n        }\n        return \n\n    }\n \n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":387,"fileType":"csharp","requestStartTime":1517907782607}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int mgi2(int n) \n    {\n        return Math.(((double)n + 0.5)/2.0)\n    }\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        int[] result = new int[2] {0, 0};\n        \n        for (int i = 0; i < doors.Length; i++) {\n            if(doors[i] == 1) {\n                result[1]++;\n            }\n        }\n        \n        if (result[1] == doors.Length) \n        {\n            result[0] =     \n        }\n        else \n        {\n            int beDoors = 0;\n\n            for (int i = 0; i < doors)\n\n\n            for (int i = 0; i < doors.Length; i++) {\n                if(doors[i] == 1) {\n                    doors[i] = 0;\n                    if (i+1 < doors.Length) {\n                        doors[i+1] = 0;\n                    }\n                    result[0]++;\n                }\n            }\n        }\n\n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            try {\n                doors[i] = Int32.Parse(doors_temp[i]);\n            }\n            catch (Exception e) {\n                doors[i] = 0;\n            }\n        }\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":162,"fileType":"csharp","requestStartTime":1517907876553}}
{"body": {"column":35,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int mgi2(int n) \n    {\n        return (int)Math.Round(((double)n + 0.5)/2.0, 0);\n    }\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        int[] result = new int[2] {0, 0};\n        \n        for (int i = 0; i < doors.Length; i++) {\n            if(doors[i] == 1) {\n                result[1]++;\n            }\n        }\n        \n        if (result[1] == doors.Length) \n        {\n            result[0] = mgi2(doors.)\n        }\n        else \n        {\n            int beDoors = 0;\n\n            for (int i = 0; i < doors)\n\n\n            for (int i = 0; i < doors.Length; i++) {\n                if(doors[i] == 1) {\n                    doors[i] = 0;\n                    if (i+1 < doors.Length) {\n                        doors[i+1] = 0;\n                    }\n                    result[0]++;\n                }\n            }\n        }\n\n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            try {\n                doors[i] = Int32.Parse(doors_temp[i]);\n            }\n            catch (Exception e) {\n                doors[i] = 0;\n            }\n        }\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":541,"fileType":"csharp","requestStartTime":1517907908220}}
{"body": {"column":41,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        int[] result = new int[2];\n        int max = 0;\n        int min = 0;\n        for(int j = 0; j< doors.Length; j = j+1)\n        {\n            max += doors[j];\n        }\n        \n        for(int i = 0; i< doors.Length-1; i = i+1)\n        {\n            if(doors[i]==1 && i == doors.)\n            if(doors[i]==1 && doors[i+1]==1)\n            {\n                i = i+1;\n                min++;\n                continue;\n            }\n            if(doors[i]==1 && doors[i+1]==0)\n            {\n                min++;\n            }\n            \n        }\n        result[0] = min;\n        result[1] = max;\n        return result;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":479,"fileType":"csharp","requestStartTime":1517907953778}}
{"body": {"column":31,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Newtonsoft.Json.Linq;\n\nclass Solution {\n    /*\n     * Complete the function below.\n     */\n    static int getNumberOfMovies(string substr) {\n        /*\n         * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n         */\n        string jayson;\n        int output;\n        string url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr\n        //http_client client(\"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr);\n        //client.request(methods::GET).then((http_resonse response) -> ():\n         //                             jayson = response.extract_json();        \n          //                               );\n        output = (jayson[\"total\"]);\n        \n        WebRequest req = WebRequest.Create(url);\n        WebResponse resp = req.\n    }\n\n    static void Main(string[] args) {\n        string s = Console.ReadLine();\n        \n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter fileOut = new StreamWriter(@fileName, true);\n        \n        fileOut.WriteLine(getNumberOfMovies(s));\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":970,"fileType":"csharp","requestStartTime":1517908987728}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n\nif (arr.)\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":204,"fileType":"csharp","requestStartTime":1517909245635}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        \n        if(n % 2 == 0) {\n            Console.\n        }\n    }\n}\n\n\n","offset":249,"fileType":"csharp","requestStartTime":1517909861354}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        Console.\n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n    }\n}\n\n\n","offset":516,"fileType":"csharp","requestStartTime":1517910528856}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString ; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        Cosole.\n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n    }\n}\n\n\n","offset":516,"fileType":"csharp","requestStartTime":1517910588845}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":193,"fileType":"csharp","requestStartTime":1517910802269}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        Console.WriteLine(arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517910811948}}
{"body": {"column":41,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        Console.WriteLine(arr.Count(x=>x>)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":218,"fileType":"csharp","requestStartTime":1517910821170}}
{"body": {"column":49,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        Console.WriteLine(arr.Count(x=>x>0)/ arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":226,"fileType":"csharp","requestStartTime":1517910832474}}
{"body": {"column":49,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = modulus(grade-multipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int nextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":225,"fileType":"csharp","requestStartTime":1517911757722}}
{"body": {"column":34,"line":19,"wordToComplete":"ab","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = ab(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":559,"fileType":"csharp","requestStartTime":1517911919407}}
{"body": {"column":34,"line":19,"wordToComplete":"sq","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = sq(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":559,"fileType":"csharp","requestStartTime":1517911930149}}
{"body": {"column":35,"line":19,"wordToComplete":"sqr","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = sqr(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":560,"fileType":"csharp","requestStartTime":1517911935725}}
{"body": {"column":35,"line":19,"wordToComplete":"sqr","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = sqr(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":560,"fileType":"csharp","requestStartTime":1517911941494}}
{"body": {"column":36,"line":19,"wordToComplete":"sqrt","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = sqrt(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":561,"fileType":"csharp","requestStartTime":1517911955319}}
{"body": {"column":38,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = Maths.(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":563,"fileType":"csharp","requestStartTime":1517911998774}}
{"body": {"column":38,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = Maths.(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":563,"fileType":"csharp","requestStartTime":1517912000397}}
{"body": {"column":38,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = Maths.(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":563,"fileType":"csharp","requestStartTime":1517912000697}}
{"body": {"column":36,"line":19,"wordToComplete":"Math","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n         for(int grades_i = 0; grades_i < grades.Length; grades_i++){\n           grades[grades_i] = returnRound(grades[grades_i]);   \n        }\n        return grades;\n    }\n    \n    static int returnRound(int grade){\n        //get next multiple of five\n        int nextMultipleOfFive = getNextMultipleOfFive(grade);\n        //get modulus difference\n        int modulusDifference = Math.Abs(grade-nextMultipleOfFive);\n        //make decision\n        if(grade < 38){\n            return grade;\n        }else if (modulusDifference < 3 ){\n            grade = nextMultipleOfFive;\n        }else{\n            return grade;\n        }\n    }\n    \n    static int getNextMultipleOfFive(int grade){\n        int value = grade;\n        \n        while(value%5 != 0){\n            value = value+ 1;\n        }\n        \n        return value;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":561,"fileType":"csharp","requestStartTime":1517912008000}}
{"body": {"column":25,"line":20,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            NodeToInsert.\n        }\n    }\n\n\n","offset":533,"fileType":"csharp","requestStartTime":1517912479937}}
{"body": {"column":33,"line":30,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            NodeToInsert.Next = head;\n            return NodeToInsert;\n        }\n        else {\n            int index = 0;\n            Node last = head;\n            \n            //traverse through linked list\n            while(last != null){\n                if(index == (position-1)){\n                    NodeToInsert.\n                }\n                else {\n                    position = position - 1;\n                }\n            }\n        }\n    }\n\n\n","offset":826,"fileType":"csharp","requestStartTime":1517912670844}}
{"body": {"column":25,"line":31,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            NodeToInsert.Next = head;\n            return NodeToInsert;\n        }\n        else {\n            int index = 0;\n            Node last = head;\n            \n            //traverse through linked list\n            while(last != null){\n                if(index == (position-1)){\n                    NodeToInsert.Next = last;\n                    last.\n                }\n                else {\n                    position = position - 1;\n                }\n            }\n        }\n    }\n\n\n","offset":864,"fileType":"csharp","requestStartTime":1517912682426}}
{"body": {"column":27,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int odds = ((r - l) / 2) + 1;\n        int[] oddArry = new int[odds];\n        \n        int nums = l;\n        \n        for(int i = 0; i < odds; i++)\n        {\n            if(nums % 2 == 0)\n            {\n                \n            }\n            else(nums % 2 >)\n            {\n                oddArry[i] = nums;\n            }\n            \n            nums = nums + 1;\n            \n            if(nums > r)\n            {\n                break;\n            }\n        }\n        \n        return oddArry;        \n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":457,"fileType":"csharp","requestStartTime":1517912682613}}
{"body": {"column":32,"line":34,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            NodeToInsert.Next = head;\n            return NodeToInsert;\n        }\n        else {\n            int index = 0;\n            Node last = head;\n            \n            //traverse through linked list\n            while(last != null){\n                if(index == (position-1)){\n                    NodeToInsert.Next = last;\n                    last.Next = NodeToInsert; //effectively inserted into list\n                }\n                else {\n                    last = last.\n                }\n            }\n        }\n    }\n\n\n","offset":991,"fileType":"csharp","requestStartTime":1517912736220}}
{"body": {"column":55,"line":20,"wordToComplete":"NodeToInsert.Next = head; nothing to add.","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            //NodeToInsert.Next = head; nothing to add.\n            return NodeToInsert;\n        }\n        else {\n            int index = 0;\n            Node last = head;\n            \n            //traverse through linked list\n            while(last != null){\n                if(index == (position-1)){\n                    NodeToInsert.Next = last;\n                    last.Next = NodeToInsert; //effectively inserted into list\n                }\n                else {\n                    last = last.Next; //move forward\n                }\n                \n                index++;\n            }\n            \n            return head;\n        }\n    }\n\n\n","offset":563,"fileType":"csharp","requestStartTime":1517912896500}}
{"body": {"column":69,"line":20,"wordToComplete":"NodeToInsert.Next = head; nothing to add. head is null.","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            //NodeToInsert.Next = head; nothing to add. head is null.\n            return NodeToInsert;\n        }\n        else {\n            int index = 0;\n            Node last = head;\n            \n            //traverse through linked list\n            while(last != null){\n                if(index == (position-1)){\n                    NodeToInsert.Next = last;\n                    last.Next = NodeToInsert; //effectively inserted into list\n                }\n                else {\n                    last = last.Next; //move forward\n                }\n                \n                index++;\n            }\n            \n            return head;\n        }\n    }\n\n\n","offset":577,"fileType":"csharp","requestStartTime":1517912902323}}
{"body": {"column":45,"line":30,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        Node NodeToInsert = new Node() {Data = data};\n        //edge cases\n        if(head == null) {\n            //NodeToInsert.Next = head; nothing to add. head is null.\n            return NodeToInsert;\n        }\n        else {\n            int index = 0;\n            Node last = head;\n            \n            //traverse through linked list\n            while(last != null){\n                if(index == (position-1)){\n                    NodeToInsert.Next = last.;\n                    last.Next = NodeToInsert; //effectively inserted into list\n                }\n                else {\n                    last = last.Next; //move forward\n                }\n                \n                index++;\n            }\n            \n            return head;\n        }\n    }\n\n\n","offset":870,"fileType":"csharp","requestStartTime":1517912960666}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            int x = Convert.ToInt32(Console.ReadLine());\n            \n            Console.\n        }\n    }\n}\n\n\n","offset":363,"fileType":"csharp","requestStartTime":1517913261195}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        bool agree = false;\n        \n        foreach(int exist in arr)\n        {\n            if(k == exist)\n            {\n                agree = true;\n            }\n        }\n        \n        if(agree)\n        {\n            Console.\n        }\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":437,"fileType":"csharp","requestStartTime":1517913565831}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int odds = ((r - l) / 2) + 1;\n        int[] oddArry = new int[odds];\n        \n        int nums = l;\n        \n        if(num % 2 >)\n        \n        return oddArry;        \n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":327,"fileType":"csharp","requestStartTime":1517913721040}}
{"body": {"column":53,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) => ar.\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":157,"fileType":"csharp","requestStartTime":1517914382696}}
{"body": {"column":24,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var n = Console.\n    }\n}\n\n","offset":265,"fileType":"csharp","requestStartTime":1517914809982}}
{"body": {"column":35,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var n = Console.ReadLine().\n    }\n}\n\n","offset":276,"fileType":"csharp","requestStartTime":1517914813976}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var n = int.Console.ReadLine()\n    }\n}\n\n","offset":261,"fileType":"csharp","requestStartTime":1517914819644}}
{"body": {"column":52,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) => ar.\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":156,"fileType":"csharp","requestStartTime":1517914939456}}
{"body": {"column":61,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var n = int.Parse(Console.ReadLine());\n        for (int i=0;i<n;i++)\n        {\n            var coords = Array.ConvertAll(Console.ReadLine()., int.Parse);\n        }\n    }\n}\n\n","offset":389,"fileType":"csharp","requestStartTime":1517914956864}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int smallest = arr[0];\n        int largest = smallest;\n        \n        for(int i = 1; i < arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1517915057567}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int smallest = arr[0];\n        int largest = smallest;\n        \n        for(int i = 1; i < arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1517915060710}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int smallest = arr[0];\n        int largest = smallest;\n        \n        for(int i = 1; i < arr.Length; i++) {\n            if(arr[i] < sa.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":289,"fileType":"csharp","requestStartTime":1517915075182}}
{"body": {"column":37,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        for(int linha = 0; linha < a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":222,"fileType":"csharp","requestStartTime":1517915101413}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var n = int.Parse(Console.ReadLine());\n        for (int i=0;i<n;i++)\n        {\n            var coords = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);\n            x = coord[2] + (coord[2] - coord[0]);\n            y = coord[3] + (coord[3] - coord[1]);\n            Console.\n        }\n    }\n}\n\n","offset":533,"fileType":"csharp","requestStartTime":1517915114471}}
{"body": {"column":50,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        for(int linha = 0; linha < a.Length; linha++)\n        {\n            for(int coluna = 0; coluna < a[linha].)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":299,"fileType":"csharp","requestStartTime":1517915147169}}
{"body": {"column":25,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length, column < a[line].Length; line++, column++)\n            firstDiagonalSum += a[linha][coluna]; \n        \n        for(int line = a., column = 0, line >= )\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":434,"fileType":"csharp","requestStartTime":1517915383998}}
{"body": {"column":71,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length, column < a[line].Length; line++, column++)\n            firstDiagonalSum += a[linha][coluna]; \n        \n        for(int line = a.Length - 1, column = 0; line >= 0, column < a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":480,"fileType":"csharp","requestStartTime":1517915442489}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length, column < a[line].Length; line++, column++)\n            firstDiagonalSum += a[line][column]; \n        \n        for(int line = a.Length - 1, column = 0; line >= 0, column < a.Length; line--, column++)\n            secondDiagonalSum += a[line][column];\n        \n        return Math.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":584,"fileType":"csharp","requestStartTime":1517915499988}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length, column < a[line].Length; line++, column++)\n            firstDiagonalSum += a[line][column]; \n        \n        for(int line = a.Length - 1, column = 0; line >= 0, column < a.Length; line--, column++)\n            secondDiagonalSum += a[line][column];\n        \n        return Math.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":584,"fileType":"csharp","requestStartTime":1517915521936}}
{"body": {"column":49,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length, column < a[line].Length; line++, column++)\n            firstDiagonalSum += a[line][column]; \n        \n        for(int line = a.Length - 1, column = 0; line >= 0, column < a.Length; line--, column++)\n            secondDiagonalSum += a[line][column];\n        \n        return Math.Abs(firstDiagonalSum) / Math.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":613,"fileType":"csharp","requestStartTime":1517915533928}}
{"body": {"column":37,"line":21,"wordToComplete":"","code":"\n    /*\n      Delete Node at a given position in a linked list\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node Delete(Node head, int position)\n    {\n                Node last = head;\n                int index = 0;\n\n                if (position == 0)\n                {\n                    return head.Next.;\n                }\n                else\n                {\n                    while (last != null)\n                    {\n                        if (index == position - 1)\n                        {\n                            last.Next = last.Next.Next; //skip specific element and move on to next element\n                        }\n                        else\n                        {\n                            last = last.Next;\n                        }\n\n                        index = index + 1;\n                    }\n                }\n\n                return head; //modifying individual elements is sticky and affects head pointer\n    }\n\n\n","offset":532,"fileType":"csharp","requestStartTime":1517915670572}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        for(int i=0;i<s.)\n        s = s.Remove(2, 1);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":212,"fileType":"csharp","requestStartTime":1517915706684}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        string start=s.\n        for(int i=0;i<s.Length; i++){\n            \n        }\n        s = s.Remove(2, 1);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517915726331}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        int counterMin = 0; \n        int counterMax = 0;\n        \n        for(int i=0; i<doors.Length; i++)\n        {\n            if (doors[i] == 1)\n            {\n                doors[i].\n                counterMin += 1;\n                counterMax += 1;\n                doors[i] = 0;\n                if (doors[i + 1] == 1)\n                {\n                    doors[i + 1] = 0;\n                    counterMax += 1;\n                }                \n            }             \n        }\n        int[] result = new int[2];\n        result[0] = counterMin;\n        result[1] = counterMax;\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517915721597}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length && column < a[line].Length; line++, column++)\n        {\n            firstDiagonalSum += a[line][column]; \n        }\n        \n        for(int line = a.Length - 1, column = 0; line >= 0 && column < a[line].Length; line--, column++)\n        {\n            secondDiagonalSum += a[line][column];\n        }\n        \n        return Math.Math.Abs(firstDiagonalSum) - Math.Abs(secondDiagonalSum);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":634,"fileType":"csharp","requestStartTime":1517915738201}}
{"body": {"column":29,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int firstDiagonalSum = 0, secondDiagonalSum = 0;\n        \n        // Complete this function\n        for(int line = 0, column = 0; line < a.Length && column < a[line].Length; line++, column++)\n        {\n            firstDiagonalSum += a[line][column]; \n        }\n        \n        for(int line = a.Length - 1, column = 0; line >= 0 && column < a[line].Length; line--, column++)\n        {\n            secondDiagonalSum += a[line][column];\n        }\n        \n        return Math.Abs(Math.firstDiagonalSum) - Math.Abs(secondDiagonalSum);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":643,"fileType":"csharp","requestStartTime":1517915754769}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char start=s[0];\n        \n        for(int i=1;i<s.Length; i++){\n            if(start==s[i]){\n                s.\n            }\n        }\n        s = s.Remove(2, 1);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":307,"fileType":"csharp","requestStartTime":1517915832961}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char start=s[0];\n        \n        for(int i=1;i<s.Length; i++){\n            if(start==s[i]){\n                s=s.\n            }\n        }\n        s = s.Remove(2, 1);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":309,"fileType":"csharp","requestStartTime":1517915837329}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long sum = arr[0];\n        int smallest = arr[0];\n        int largest = smallest;\n        \n        // Find the smallest and largest items from the input\n        for(int i = 1; i < arr.Length; i++) {\n            if(arr[i] < smallest) smallest = arr[i];\n            else if(arr[i] > largest) largest = arr[i];\n            sum += arr[i];\n        }\n        \n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":522,"fileType":"csharp","requestStartTime":1517916016797}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name)\n    { \n        string output;\n        // Complete this function\n         if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-2)==\"ic\")\n               output=\"non-metal acid\";\n               else if(acid_name.(' ')==\"ic\")\n               output=\"polyatomic acid\";\n               else\n               output=\"not an acid\";\n    }\n\n    static void Main(String[] args) {\n       \n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n           \n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n              \n    }\n}\n\n\n","offset":384,"fileType":"csharp","requestStartTime":1517916223061}}
{"body": {"column":53,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name)\n    { \n        string output;\n        // Complete this function\n         if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-2)==\"ic\")\n               output=\"non-metal acid\";\n               else if(acid_name.Substring(acid_name.)==\"ic\")\n               output=\"polyatomic acid\";\n               else\n               output=\"not an acid\";\n    }\n\n    static void Main(String[] args) {\n       \n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n           \n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n              \n    }\n}\n\n\n","offset":404,"fileType":"csharp","requestStartTime":1517916244044}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int longestSubsequence(string s) {\n        var vowels = ['a','e','i','o','u'];\n        foreach (char c in s)\n        {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        string s;\n        s = Console.ReadLine();\n\n        res = longestSubsequence(s);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":305,"fileType":"csharp","requestStartTime":1517916561672}}
{"body": {"column":34,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) \n    {\n        int[] ans = new int[2];\n        for (int i = 0; i < doors.)\n    }\n\n    static void Main(String[] args) \n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n    }\n}\n\n\n","offset":230,"fileType":"csharp","requestStartTime":1517916635447}}
{"body": {"column":30,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) \n    {\n        int[] ans = new int[2];\n        for (int i = 0; i < doors.Length; i++)\n        {\n            if (doors[i] == 1)\n            {\n                ans[1]++;\n                if (i < doors.)\n            }\n        }\n    }\n\n    static void Main(String[] args) \n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n    }\n}\n\n\n","offset":354,"fileType":"csharp","requestStartTime":1517916679618}}
{"body": {"column":50,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) \n    {\n        int[] ans = new int[2];\n        for (int i = 0; i < doors.Length; i++)\n        {\n            if (doors[i] == 1)\n            {\n                ans[1]++;\n                if (i < doors.Length - 1 && doors.)\n            }\n        }\n    }\n\n    static void Main(String[] args) \n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1517916684850}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) \n    {\n        int[] ans = new int[2];\n        for (int i = 0; i < doors.Length; i++)\n        {\n            if (doors[i] == 1)\n            {\n                ans[1]++;\n                if ((i < doors.Length - 1) && doors[i + 1] == 1)\n                {\n                    ans[0]++;\n                    ans[1]++;\n                    i++;\n                }\n            }\n        }\n        return ans;\n    }\n\n    static void Main(String[] args) \n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n    }\n}\n\n\n","offset":673,"fileType":"csharp","requestStartTime":1517916780159}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n       string s2=\"\";\n        \n        for(int i=0;i<s.Length; i++){\n            if(s[i]==s[i+1]){\n               s=s.;\n            }\n            \n        }\n      return s2;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517916835284}}
{"body": {"column":27,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int longestSubsequence(string s) {\n        var vowels = new char[]{'a','e','i','o','u'};\n        var count = 0;\n        \n        foreach (char c in s)\n        {\n            foreach(char v in vowels)\n            {\n                if (vowels.)\n                if (c == v)\n                    count++;\n            }\n            Console.WriteLine(c);\n        }\n        if (count < 5)\n            return 0;\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        string s;\n        s = Console.ReadLine();\n\n        res = longestSubsequence(s);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":406,"fileType":"csharp","requestStartTime":1517916814185}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"using System;\npublic interface AdvancedArithmetic{\n    int divisorSum(int n);\n}\nclass Calculator : AdvancedArithmetic {\n    public int divisorSum(int n){\n        int sum = 0;\n        \n        for(int i=1;i<=Math.)\n    }\n}\nclass Solution{\n    static void Main(string[] args){\n        int n = Int32.Parse(Console.ReadLine());\n      \tAdvancedArithmetic myCalculator = new Calculator();\n        int sum = myCalculator.divisorSum(n);\n        Console.WriteLine(\"I implemented: AdvancedArithmetic\\n\" + sum); \n    }\n}\n","offset":213,"fileType":"csharp","requestStartTime":1517917098328}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"\n    /*\n      Print elements of a linked list on console\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static void Print(Node head)\n    {\n       if(head == null) return;\n       Console.\n    }\n\n\n","offset":402,"fileType":"csharp","requestStartTime":1517917168825}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\n    /*\n      Print elements of a linked list on console\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static void Print(Node head)\n    {\n       if(head == null) return;\n       Console.WriteLine(head);\n       Print(head.)\n    }\n\n\n","offset":437,"fileType":"csharp","requestStartTime":1517917188870}}
{"body": {"column":30,"line":17,"wordToComplete":"","code":"\n    /*\n      Print elements of a linked list on console\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static void Print(Node head)\n    {\n       if(head == null) return;\n       Console.WriteLine(head.);\n       Print(head.Next);\n    }\n\n\n","offset":417,"fileType":"csharp","requestStartTime":1517917206445}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"using System;\n\nclass Printer\n{\n\t/**\n\t*    Name: PrintArray\n\t*    Print each element of the generic array on a new line. Do not return anything.\n\t*    @param A generic array\n\t**/\n    // Write your code here\n    void PrintArray<T>(T[] input){\n        Console.\n    }\n    \n\n    static void Main(string[] args)\n\t{\n\t\tint n = Convert.ToInt32(Console.ReadLine());\n\t\tint[] intArray = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tintArray[i] = Convert.ToInt32(Console.ReadLine());\n\t\t}\n\t\t\n\t\tn = Convert.ToInt32(Console.ReadLine());\n\t\tstring[] stringArray = new string[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tstringArray[i] = Console.ReadLine();\n\t\t}\n\t\t\n\t\tPrintArray<Int32>(intArray);\n\t\tPrintArray<String>(stringArray);\n\t}\n}\n","offset":258,"fileType":"csharp","requestStartTime":1517917302330}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"using System;\n\nclass Printer\n{\n\t/**\n\t*    Name: PrintArray\n\t*    Print each element of the generic array on a new line. Do not return anything.\n\t*    @param A generic array\n\t**/\n    // Write your code here\n    void PrintArray<T>(T[] input){\n        foreach(T el in input)\n            Console.WriteLine(el.)\n    }\n    \n\n    static void Main(string[] args)\n\t{\n\t\tint n = Convert.ToInt32(Console.ReadLine());\n\t\tint[] intArray = new int[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tintArray[i] = Convert.ToInt32(Console.ReadLine());\n\t\t}\n\t\t\n\t\tn = Convert.ToInt32(Console.ReadLine());\n\t\tstring[] stringArray = new string[n];\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tstringArray[i] = Console.ReadLine();\n\t\t}\n\t\t\n\t\tPrintArray<Int32>(intArray);\n\t\tPrintArray<String>(stringArray);\n\t}\n}\n","offset":306,"fileType":"csharp","requestStartTime":1517917321586}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":208,"fileType":"csharp","requestStartTime":1517917268230}}
{"body": {"column":58,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1517917302121}}
{"body": {"column":78,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":265,"fileType":"csharp","requestStartTime":1517917327249}}
{"body": {"column":106,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-1)=='c' && acid_name.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":293,"fileType":"csharp","requestStartTime":1517917360016}}
{"body": {"column":126,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-1)=='c' && acid_name.Substring(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":313,"fileType":"csharp","requestStartTime":1517917384138}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        string output;\n        // Complete this function\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-1)=='c' && acid_name.Substring(acid_name.Length-2)=='i')\n            output=\"non-metal acid\";\n        else if(acid_name.())\n            \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517917476813}}
{"body": {"column":46,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        string output;\n        // Complete this function\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-1)=='c' && acid_name.Substring(acid_name.Length-2)=='i')\n            output=\"non-metal acid\";\n        else if(acid_name.Substring(acid_name.))\n            \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":435,"fileType":"csharp","requestStartTime":1517917489907}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr,n) {\n        // Complete this function\n        var hashTable = new HashTable<int>(n);\n        for(int i =0; i< n: i++)\n        {\n            hashTable.\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr,n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517917668849}}
{"body": {"column":25,"line":12,"wordToComplete":"Add","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr,n) {\n        // Complete this function\n        var hashTable = new HashTable<int>(n);\n        for(int i =0; i< n: i++)\n        {\n            hashTable.Add\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr,n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":308,"fileType":"csharp","requestStartTime":1517917670328}}
{"body": {"column":25,"line":12,"wordToComplete":"Add","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr,n) {\n        // Complete this function\n        var hashTable = new HashTable<int>(n);\n        for(int i =0; i< n: i++)\n        {\n            hashTable.Add\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr,n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":308,"fileType":"csharp","requestStartTime":1517917671372}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr,n) {\n        // Complete this function\n        var hashTable = new HashTable<int>(n);\n        for(int i =0; i< n: i++)\n        {\n            hashTable.\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr,n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517917673040}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr,n) {\n        // Complete this function\n        var hashTable = new HashTable<int>(n);\n        for(int i =0; i< n: i++)\n        {\n            hashTable.\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr,n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517917673861}}
{"body": {"column":27,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n      \n        for(int i=1;i<s.Length; i++){\n            if(s[i]==s[i-1]){\n               s=s.Remove(i,1);\n                s=s.Remove(i-1,1);\n                i=1;\n            }\n            \n        }\n        if (s==\"\")s=String.\n      return s;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517917919114}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string output;\n        if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":231,"fileType":"csharp","requestStartTime":1517918522556}}
{"body": {"column":58,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string output;\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":268,"fileType":"csharp","requestStartTime":1517918580453}}
{"body": {"column":78,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string output;\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":288,"fileType":"csharp","requestStartTime":1517918606281}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string output;\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-2)==\"ic\")\n            output=\"non-metal acid\";\n        else if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":368,"fileType":"csharp","requestStartTime":1517918663809}}
{"body": {"column":46,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string output;\n        if(acid_name.Substring(0,5)==\"hydro\" && acid_name.Substring(acid_name.Length-2)==\"ic\")\n            output=\"non-metal acid\";\n        else if(acid_name.Substring(acid_name.))\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":388,"fileType":"csharp","requestStartTime":1517918681641}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string caesarCipher(string s, int k) {\n        // Complete this function\n        for(int i = 0 ; i<s.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string s = Console.ReadLine();\n        int k = Convert.ToInt32(Console.ReadLine());\n        string result = caesarCipher(s, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":216,"fileType":"csharp","requestStartTime":1517919098438}}
{"body": {"column":22,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string s = Console.ReadLine().Replace(\" \",\"\");\n        \n        while(true){\n            int len = s.Length;\n            s = s.Replace(\"00\",\"0\");\n            if(s.Length==len)\n                break;\n        }\n\n        string[] t = s.Split('0');\n        \n        int min = 0;\n        int max = 0;\n\n        foreach(string st in t){\n            max += st.\n        }\n        \n        \n        \n        Console.WriteLine(min + \" \" + max);\n    }\n}\n\n\n","offset":554,"fileType":"csharp","requestStartTime":1517919240557}}
{"body": {"column":23,"line":22,"wordToComplete":"","code":"\n    /*\n      Delete Node at a given position in a linked list\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node Delete(Node head, int position)\n    {\n      Node temp = head; int index = 0;\n      if (temp->next == NULL){\n          free(head);\n          head = NULL;\n      }\n      else {\n          temp = temp->\n        while (temp->Next != NULL){\n            index++;\n            if(temp->Data == )  \n        }      \n      }  \n    }\n\n\n","offset":535,"fileType":"csharp","requestStartTime":1517919671162}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string output;\n        if(acid_name.==\"hydro\" && acid_name.Substring[acid_name.Length-2=='i' && acid_name.Substring[acid_name.Length-1]=='c')\n            output=\"non-metal acid\";\n        else if(acid_name.Substring[0,5]!=\"hydro\" && acid_name[acid_name.Length-2]=='i' && acid_name.Substring[acid_name.Length-1]=='c')\n           output=\"polyatomic acid\"; \n        else \n            output=\"not an acid\";\n        return output;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":231,"fileType":"csharp","requestStartTime":1517919902615}}
{"body": {"column":34,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string strArray = Console.\n    }\n    public static string CheckElements(string strArray)\n        {\n            string strCheck = string.Empty;\n            if (strArray.Length % 2 != 0)\n            {\n               return strCheck =  \"False\";\n            }\n            char[] charArray = strArray.ToCharArray();\n            List<char> lstTemp = new List<char>();\n            for(int i = 0; i < charArray.Length; i++)\n            {\n                if (charArray[i].ToString() == \"(\" && charArray[i + 1].ToString() == \")\")\n                {\n                    i = i + 1;\n                }\n                else if (charArray[i].ToString() == \"{\" && charArray[i + 1].ToString() == \"}\")\n                {\n                    i = i + 1;\n                }\n                else if (charArray[i].ToString() == \"[\" && charArray[i + 1].ToString() == \"]\")\n                {\n                    i = i + 1;\n                }\n                else\n                {\n                    lstTemp.Add(charArray[i]);\n                }\n            }\n            if (lstTemp.Count == 0)\n            {\n                strCheck = \"True\";\n            }\n            else\n            {\n                string temp = string.Empty;\n                foreach (char c in lstTemp)\n                {\n                    temp += c.ToString();\n                }\n                if (strArray == temp)\n                {\n                    strCheck = \"False\";\n                }\n                else\n                    CheckElements(temp);\n            }\n            return strCheck;\n        }\n\n}\n\n","offset":275,"fileType":"csharp","requestStartTime":1517920555914}}
{"body": {"column":21,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\nList<int> calculatedList = new List<int>();\n            List<int> tList = new List<int>();\n            for (int i = 1; i <= array.Length; i++)\n            {\n                var p = array[i-1] - array[0];\n                if (calculatedList.Count > 0) {\n                    var n = (array[i - 1] - array[0]) - calculatedList.Sum();\n                    calculatedList.Add(n);\n\n                    tList.Add(-128);\n                    tList.Add(n);\n                    \n                }\n                else\n                {\n                    tList.Add(p);\n                    calculatedList.Add(p);\n                }\n            }\n            tList[0] = array[0];\n        return tList.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":886,"fileType":"csharp","requestStartTime":1517920862982}}
{"body": {"column":31,"line":27,"wordToComplete":"","code":"\n    /*\n      Delete Node at a given position in a linked list\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n  public static Node Delete(Node head, int position){\n      Node temp = head, temp2; int index = 0;\n      if (head->next == NULL){\n          free(head);\n          head = NULL;\n      }\n      else {\n          if(position == 0){\n              head = head->Next;\n              free(temp);\n          }\n          else {\n              while (temp->Next != NULL){\n                  temp = temp->\n              }\n          }               \n      }\n      return head;\n  }\n\n\n","offset":702,"fileType":"csharp","requestStartTime":1517920880703}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string solve(int[] a)\n    {\n        int leftSum = 0, rightSum = 0;\n        int i;\n        for (i = 1; i < a.)\n    }\n\n    static void Main(String[] args)\n    {\n        int T = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < T; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = solve(a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":223,"fileType":"csharp","requestStartTime":1517920893287}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string solve(int[] a)\n    {\n        int leftSum = 0, rightSum = 0;\n        int i;\n        for (i = 1; i < a.Length; i++)\n        {\n            rightSum += a[i];\n        }\n        if (leftSum == rightSum)\n        {\n            return \"YES\";\n        }\n        for (i = 1; i < a.)\n    }\n\n    static void Main(String[] args)\n    {\n        int T = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < T; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = solve(a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":391,"fileType":"csharp","requestStartTime":1517920946859}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":165,"fileType":"csharp","requestStartTime":1517921082889}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":179,"fileType":"csharp","requestStartTime":1517921087839}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":194,"fileType":"csharp","requestStartTime":1517921089599}}
{"body": {"column":31,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517921095432}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        for(var cake=0;)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1517921117271}}
{"body": {"column":36,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        for(var cake=0;cake<calorie.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517921120207}}
{"body": {"column":43,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        for(var cake=0;cake<calorie.Length;)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":255,"fileType":"csharp","requestStartTime":1517921121279}}
{"body": {"column":20,"line":10,"wordToComplete":"0.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        var sum = 0.\n        for(var cake=0;cake<calorie.Length;++cake)\n        {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":232,"fileType":"csharp","requestStartTime":1517921139304}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        var sum = 0;\n        for(var cake=0;cake<calorie.Length;++cake)\n        {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":232,"fileType":"csharp","requestStartTime":1517921142368}}
{"body": {"column":40,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        var sum = 0;\n        for(var cake=0;cake<calorie.Length;++cake)\n        {\n            sum += calorie[cake] * Math.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":334,"fileType":"csharp","requestStartTime":1517921167584}}
{"body": {"column":53,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        var sum = 0;\n        for(var cake=0;cake<calorie.Length;++cake)\n        {\n            sum += calorie[cake] * Math.Pow(2, cake);\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517921183223}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long marcsCakewalk(int[] calorie) {\n        Array.Sort(calorie);\n        Array.Reverse(calorie);\n        long sum = 0;\n        for(var cake=0;cake<calorie.Length;++cake)\n        {\n            sum += calorie[cake] * (1<<cake);\n        }\n        return sum;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] calorie_temp = Console.ReadLine().Split(' ');\n        int[] calorie = Array.ConvertAll(calorie_temp,Int32.Parse);\n        long result = marcsCakewalk(calorie);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":370,"fileType":"csharp","requestStartTime":1517921232119}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        for(int city=0;)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":169,"fileType":"csharp","requestStartTime":1517921774975}}
{"body": {"column":39,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        for(int city=0;city<arr.Length;)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1517921779944}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517921804463}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        for(int city=0;city<arr.Length;++city)\n        {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":197,"fileType":"csharp","requestStartTime":1517921813174}}
{"body": {"column":28,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        for(int city=0;city<arr.Length;++city)\n        {\n            if(arr[city] == 1)\n            {\n                last = city;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517921839126}}
{"body": {"column":48,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if(arr[city] == 1)\n                last = city;\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":303,"fileType":"csharp","requestStartTime":1517921855742}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        List<string> r = new List<string>();\n        for(int a0 = 0; a0 < N; a0++){\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if(emailID.)\n        }\n    }\n}\n\n\n","offset":488,"fileType":"csharp","requestStartTime":1517921906029}}
{"body": {"column":28,"line":15,"wordToComplete":"EndsW","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        List<string> r = new List<string>();\n        for(int a0 = 0; a0 < N; a0++){\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if(emailID.EndsW)\n        }\n    }\n}\n\n\n","offset":493,"fileType":"csharp","requestStartTime":1517921908778}}
{"body": {"column":39,"line":15,"wordToComplete":"gmail.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        List<string> r = new List<string>();\n        for(int a0 = 0; a0 < N; a0++){\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if(emailID.EndsWith(\"gmail.\")\n        }\n    }\n}\n\n\n","offset":504,"fileType":"csharp","requestStartTime":1517921913201}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        List<string> r = new List<string>();\n        for(int a0 = 0; a0 < N; a0++){\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if(emailID.EndsWith(\"@gmail.com\"))\n                r.\n        }\n    }\n}\n\n\n","offset":530,"fileType":"csharp","requestStartTime":1517921921797}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        List<string> r = new List<string>();\n        for(int a0 = 0; a0 < N; a0++){\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if(emailID.EndsWith(\"@gmail.com\"))\n                r.Add(firstName);\n        }\n        \n        r.\n    }\n}\n\n\n","offset":575,"fileType":"csharp","requestStartTime":1517921931512}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        List<string> r = new List<string>();\n        for(int a0 = 0; a0 < N; a0++){\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if(emailID.EndsWith(\"@gmail.com\"))\n                r.Add(firstName);\n        }\n        \n        r.Sort();\n        \n        foreach(var n in r)\n            Console.\n    }\n}\n\n\n","offset":640,"fileType":"csharp","requestStartTime":1517921960973}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        var switchedOnCount = 0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if((city - connectionLimit) > k)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":230,"fileType":"csharp","requestStartTime":1517921965446}}
{"body": {"column":34,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        var switchedOnCount = 0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if((city - connectionLimit) > k)\n            {\n                ++switchedOnCount;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":430,"fileType":"csharp","requestStartTime":1517921974398}}
{"body": {"column":39,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        var switchedOnCount = 0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if((city - connectionLimit) > k)\n            {\n                ++switchedOnCount;\n                connectionLimit = last;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":470,"fileType":"csharp","requestStartTime":1517921980342}}
{"body": {"column":31,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        var switchedOnCount = 0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if((city - connectionLimit) >= k)\n            {\n                ++switchedOnCount;\n                connectionLimit = last;\n            }\n        }\n        return switchedOnCount;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":527,"fileType":"csharp","requestStartTime":1517922041046}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        var switchedOnCount = 0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if((city - connectionLimit) >= k)\n            {\n                ++switchedOnCount;\n                connectionLimit = last + k;\n            }\n        }\n        \n        if(connectionLimit < (arr.Length - 1))\n            ++switchedOnCount;\n        return switchedOnCount;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":586,"fileType":"csharp","requestStartTime":1517922188870}}
{"body": {"column":26,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int pylons(int k, int[] arr) {\n        var connectionLimit=0;\n        var last=-1;\n        var switchedOnCount = 0;\n        for(int city=0;city<arr.Length;++city)\n        {\n            last = arr[city] == 1 ? city : last;\n            if(\n                ((city - connectionLimit) == k) &&\n                (last + k - 1) > connectionLimit\n                )\n            {\n                ++switchedOnCount;\n                connectionLimit = last + k - 1;\n            }\n            else if((city - connectionLimit) > k)\n            {\n                return -1;\n            }\n        }\n        \n        if(connectionLimit < (arr.Length - 1))\n            ++switchedOnCount;\n        return switchedOnCount;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = pylons(k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":672,"fileType":"csharp","requestStartTime":1517922631062}}
{"body": {"column":33,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n/*Enter your solution*/    \nclass Comparator : IComparable{\n     public int CompareTo(object obj)\n        {\n            throw new NotImplementedException();\n        }\n    \n    public bool compare(int a, int b){ return a==b; }\n    \n    public bool compare(string a,string b){\n        return a.Equals(b);\n    }\n    \n    public bool compare(int[] a,.)\n        \n        \n    \n}\n\nclass Solution {\n    static void Main(String[] args) {\n\t\tComparator comp = new Comparator();\n        int testCases = Convert.ToInt32(Console.ReadLine());\n        while(testCases-- > 0){\n            int condition = Convert.ToInt32(Console.ReadLine());\n            if(condition == 1){\n                string s1=Console.ReadLine();\n                string s2=Console.ReadLine();\n                if(comp.compare(s1,s2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 2){\n                int num1=Convert.ToInt32(Console.ReadLine());\n                int num2=Convert.ToInt32(Console.ReadLine());\n                if(comp.compare(num1,num2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 3){\n                Console.ReadLine();\n                int[] arr1 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                int[] arr2 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                if(comp.compare(arr1,arr2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n        }\n\t}\n}\n\n","offset":432,"fileType":"csharp","requestStartTime":1517923608418}}
{"body": {"column":36,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n/*Enter your solution*/    \nclass Comparator : IComparable{\n     public int CompareTo(object obj)\n        {\n            throw new NotImplementedException();\n        }\n    \n    public bool compare(int a, int b){ return a==b; }\n    \n    public bool compare(string a,string b){\n        return a.Equals(b);\n    }\n    \n    public bool compare(int[] a, int[] b){\n        if (a.Length==b.Length) return true;\n        \n        int[] arrayToUse=a.Length<b.;\n        \n    }\n        \n        \n    \n}\n\nclass Solution {\n    static void Main(String[] args) {\n\t\tComparator comp = new Comparator();\n        int testCases = Convert.ToInt32(Console.ReadLine());\n        while(testCases-- > 0){\n            int condition = Convert.ToInt32(Console.ReadLine());\n            if(condition == 1){\n                string s1=Console.ReadLine();\n                string s2=Console.ReadLine();\n                if(comp.compare(s1,s2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 2){\n                int num1=Convert.ToInt32(Console.ReadLine());\n                int num2=Convert.ToInt32(Console.ReadLine());\n                if(comp.compare(num1,num2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 3){\n                Console.ReadLine();\n                int[] arr1 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                int[] arr2 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                if(comp.compare(arr1,arr2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n        }\n\t}\n}\n\n","offset":532,"fileType":"csharp","requestStartTime":1517923736776}}
{"body": {"column":35,"line":22,"wordToComplete":"len","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n/*Enter your solution*/    \nclass Comparator : IComparable{\n     public int CompareTo(object obj)\n        {\n            throw new NotImplementedException();\n        }\n    \n    public bool compare(int a, int b){ return a==b; }\n    \n    public bool compare(string a,string b){\n        return a.Equals(b);\n    }\n    \n    public bool compare(int[] a, int[] b){\n        if (a.Length==b.Length) return true;\n        \n        int[] arrayToUse=a.Length<b.Length? a:b;\n        \n        for(var i =0;arrayToUse.len)\n    }\n        \n        \n    \n}\n\nclass Solution {\n    static void Main(String[] args) {\n\t\tComparator comp = new Comparator();\n        int testCases = Convert.ToInt32(Console.ReadLine());\n        while(testCases-- > 0){\n            int condition = Convert.ToInt32(Console.ReadLine());\n            if(condition == 1){\n                string s1=Console.ReadLine();\n                string s2=Console.ReadLine();\n                if(comp.compare(s1,s2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 2){\n                int num1=Convert.ToInt32(Console.ReadLine());\n                int num2=Convert.ToInt32(Console.ReadLine());\n                if(comp.compare(num1,num2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 3){\n                Console.ReadLine();\n                int[] arr1 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                int[] arr2 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                if(comp.compare(arr1,arr2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n        }\n\t}\n}\n\n","offset":589,"fileType":"csharp","requestStartTime":1517923756503}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = a[0];\n            for(int j = 0; j < a.)\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":304,"fileType":"csharp","requestStartTime":1517923858382}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = a[0];\n            for(int j = 0; j < a.Length; j++)\n            {\n                a[j] = a[j+1];\n            }\n            a[a.]\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":392,"fileType":"csharp","requestStartTime":1517923920606}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n/*Enter your solution*/    \nclass Comparator : IComparable{\n     public int CompareTo(object obj)\n        {\n            throw new NotImplementedException();\n        }\n    \n    public bool compare(int a, int b){ return a==b; }\n    \n    public bool compare(string a,string b){\n        return a.Equals(b);\n    }\n    \n    public bool compare(int[] a, int[] b){\n        //if (a.Length==b.Length) return true;\n        return a.\n        \n    //    int minLength=Math.Min(a.Length,b.Length);\n        \n      //  for(var i =0;i<a.Length;i++){\n        //    if (!compare(a[i],b[i])) return false;\n        //}\n        \n        //return true;\n    }\n        \n        \n    \n}\n\nclass Solution {\n    static void Main(String[] args) {\n\t\tComparator comp = new Comparator();\n        int testCases = Convert.ToInt32(Console.ReadLine());\n        while(testCases-- > 0){\n            int condition = Convert.ToInt32(Console.ReadLine());\n            if(condition == 1){\n                string s1=Console.ReadLine();\n                string s2=Console.ReadLine();\n                if(comp.compare(s1,s2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 2){\n                int num1=Convert.ToInt32(Console.ReadLine());\n                int num2=Convert.ToInt32(Console.ReadLine());\n                if(comp.compare(num1,num2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n            else if(condition == 3){\n                Console.ReadLine();\n                int[] arr1 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                int[] arr2 = Console.ReadLine().Split(' ').Select( x=> Convert.ToInt32(x)).ToArray();\n                if(comp.compare(arr1,arr2)){\n                    Console.WriteLine(\"Same\");\n                }\n                else{\n                    Console.WriteLine(\"Different\");\n                }\n            }\n        }\n\t}\n}\n\n","offset":506,"fileType":"csharp","requestStartTime":1517924149549}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n        }\n        \n        Calculation(arr);\n    }\n    \n    static void Calculation(int[][] arr){\n        int maxSum = 0; + arr[i][j];\n        for(int i = 0; i < 4; i++){\n            for(int j = 0; j < 4; j++){\n                int sum = arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];\n                if(sum > maxSum)\n                    maxSum = sum;\n            }\n        }\n        Console.\n    }\n    \n}\n\n\n","offset":797,"fileType":"csharp","requestStartTime":1517924158175}}
{"body": {"column":16,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = a[0];\n            for(int j = 0; j < a.Length - 1; j++)\n            {\n                a[j] = a[j+1];\n            }\n            a[a.Length - 1] = temp;\n        }\n        return a;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        //Console.WriteLine(String.Join(\" \", result));\n        for(int j = 0; j < result.Length - 1; j++)\n        {\n            Console.Write(result[j] + \" \");\n        }\n        Console.\n    }\n}\n\n\n","offset":991,"fileType":"csharp","requestStartTime":1517924274107}}
{"body": {"column":51,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = a[0];\n            for(int j = 0; j < a.Length - 1; j++)\n            {\n                a[j] = a[j+1];\n            }\n            a[a.Length - 1] = temp;\n        }\n        return a;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a = Console.ReadLine().Split(' ').;\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));        \n    }\n}\n\n\n","offset":700,"fileType":"csharp","requestStartTime":1517924421200}}
{"body": {"column":62,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = a[0];\n            for(int j = 0; j < a.Length - 1; j++)\n            {\n                a[j] = a[j+1];\n            }\n            a[a.Length - 1] = temp;\n        }\n        return a;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a = Console.ReadLine().Split(' ').Select(int.;\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));        \n    }\n}\n\n\n","offset":711,"fileType":"csharp","requestStartTime":1517924428178}}
{"body": {"column":69,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = a[0];\n            for(int j = 0; j < a.Length - 1; j++)\n            {\n                a[j] = a[j+1];\n            }\n            a[a.Length - 1] = temp;\n        }\n        return a;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a = Console.ReadLine().Split(' ').Select(int.Parse).;\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));        \n    }\n}\n\n\n","offset":718,"fileType":"csharp","requestStartTime":1517924435873}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":167,"fileType":"csharp","requestStartTime":1517924442385}}
{"body": {"column":27,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.ToList().\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517924446493}}
{"body": {"column":36,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.ToList().Max(x=>x.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1517924455228}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.ToList().Max(x=>x);\n       int maxB= b.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":206,"fileType":"csharp","requestStartTime":1517924470283}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x).;\n       int maxB= b.Max(x=>x);\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":177,"fileType":"csharp","requestStartTime":1517924487602}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.)\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":297,"fileType":"csharp","requestStartTime":1517924655756}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>x.)\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":308,"fileType":"csharp","requestStartTime":1517924659403}}
{"body": {"column":39,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>element%x==0).\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":320,"fileType":"csharp","requestStartTime":1517924686706}}
{"body": {"column":50,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>element%x==0).Count()==a.\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":331,"fileType":"csharp","requestStartTime":1517924690931}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] arr, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = arr[0];\n            for(int j = 0; j < arr.Length - 1; j++)\n            {\n                arr[j] = arr[j+1];\n            }\n            arr[arr.Length - 1] = temp;\n        }\n        \n        int[] temp = new int[d];\n        temp = arr.\n        return arr;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        int[] arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();        \n        arr = leftRotation(arr, d);\n        Console.WriteLine(String.Join(\" \", arr));        \n    }\n}\n\n\n","offset":501,"fileType":"csharp","requestStartTime":1517924694911}}
{"body": {"column":34,"line":32,"wordToComplete":"nu","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[nu]\n            \n            Enumerable.Range(0, numOfBuyers)\n            .Select(i=> {\n                var a = Console.ReadLine().Split(' ');\n                return new Tran(Convert.ToInt32(a[0]), Convert.ToInt32(a[1]));\n            })\n            .Where(v=> v.Weight <= weightToSell)\n            //.OrderByDescending(v=> v.Weight)\n            .ToList();\n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<=FindStopIndex();i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":860,"fileType":"csharp","requestStartTime":1517924705422}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>element%x==0).Count()==a.length){\n               if(a.)\n           }\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":360,"fileType":"csharp","requestStartTime":1517924704283}}
{"body": {"column":31,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>element%x==0).Count()==a.length){\n               if(a.Where(x=>x.)\n           }\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":371,"fileType":"csharp","requestStartTime":1517924710462}}
{"body": {"column":46,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>element%x==0).Count()==a.length){\n               if(b.Where(x=>x%element==0)==b.\n           }\n       }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":386,"fileType":"csharp","requestStartTime":1517924721827}}
{"body": {"column":32,"line":16,"wordToComplete":"could use reflectiom.","code":"using System;\npublic abstract Coffee {\n    public abstract string GetDescription();        \n}\n\npublic string DarkCoffee : Coffee {\n    public override string GetDescription() => \"I'm a Dark Coffee, brewed from roasted coffee beans\";\n}\n\npublic string Cappuccino : Coffee {\n    public override string GetDescription() => \"I'm a Cappuccino, prepared with double espresso, and steamed milk foam\";\n}\n\npublic sealed class CoffeeFactory{\n    public Coffee MakeCoffee(string typeOfCoffee){\n        \n        // could use reflectiom.\n        if (typeOfCoffee==\"Dark Coffee\") return new DarkCoffee();\n        \n        return new Cappuccino();\n    }\n}\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        \n        var coffeeFactory = new CoffeeFactory();\n        var darkCoffee = coffeeFactory.MakeCoffee(\"Dark Coffee\");\n        var cappuccino = coffeeFactory.MakeCoffee(\"Cappuccino\");\n\n        Console.WriteLine($\"I'm a {darkCoffee.GetType().Name} and extend from {darkCoffee.GetType().BaseType.Name}\");\n        Console.WriteLine($\"I'm a {cappuccino.GetType().Name} and extend from {cappuccino.GetType().BaseType.Name}\");\n\n        Console.WriteLine(darkCoffee.GetDescription());\n        Console.WriteLine(cappuccino.GetDescription());\n    }\n}\n}\n","offset":524,"fileType":"csharp","requestStartTime":1517924747375}}
{"body": {"column":25,"line":34,"wordToComplete":"nu","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        int index =0;\n        for(int i=0; i<nu)    \n            Enumerable.Range(0, numOfBuyers)\n            .Select(i=> {\n                var a = Console.ReadLine().Split(' ');\n                return new Tran(Convert.ToInt32(a[0]), Convert.ToInt32(a[1]));\n            })\n            .Where(v=> v.Weight <= weightToSell)\n            //.OrderByDescending(v=> v.Weight)\n            .ToList();\n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<=FindStopIndex();i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":919,"fileType":"csharp","requestStartTime":1517924758543}}
{"body": {"column":19,"line":36,"wordToComplete":"we","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        int index =0;\n        for(int i=0; i<numOfBuyers; i++)    {\n            var w = Convert.ToInt32(a[1]);\n            if(w>we)\n        }\n            \n            Enumerable.Range(0, numOfBuyers)\n            .Select(i=> {\n                var a = Console.ReadLine().Split(' ');\n                return new Tran(Convert.ToInt32(a[0]), Convert.ToInt32(a[1]));\n            })\n            .Where(v=> v.Weight <= weightToSell)\n            //.OrderByDescending(v=> v.Weight)\n            .ToList();\n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<=FindStopIndex();i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1002,"fileType":"csharp","requestStartTime":1517924823843}}
{"body": {"column":20,"line":36,"wordToComplete":"wei","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        int index =0;\n        for(int i=0; i<numOfBuyers; i++)    {\n            var w = Convert.ToInt32(a[1]);\n            if(w>wei)\n        }\n            \n            Enumerable.Range(0, numOfBuyers)\n            .Select(i=> {\n                var a = Console.ReadLine().Split(' ');\n                return new Tran(Convert.ToInt32(a[0]), Convert.ToInt32(a[1]));\n            })\n            .Where(v=> v.Weight <= weightToSell)\n            //.OrderByDescending(v=> v.Weight)\n            .ToList();\n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<=FindStopIndex();i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1003,"fileType":"csharp","requestStartTime":1517924826580}}
{"body": {"column":17,"line":38,"wordToComplete":"trans","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        int index =0;\n        for(int i=0; i<numOfBuyers; i++)    {\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            trans\n        }\n            \n            Enumerable.Range(0, numOfBuyers)\n            .Select(i=> {\n                var a = Console.ReadLine().Split(' ');\n                return new Tran(Convert.ToInt32(a[0]), Convert.ToInt32(a[1]));\n            })\n            .Where(v=> v.Weight <= weightToSell)\n            //.OrderByDescending(v=> v.Weight)\n            .ToList();\n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<=FindStopIndex();i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1057,"fileType":"csharp","requestStartTime":1517924849302}}
{"body": {"column":27,"line":38,"wordToComplete":"in","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        int index =0;\n        for(int i=0; i<numOfBuyers; i++)    {\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[in]\n        }\n            \n            Enumerable.Range(0, numOfBuyers)\n            .Select(i=> {\n                var a = Console.ReadLine().Split(' ');\n                return new Tran(Convert.ToInt32(a[0]), Convert.ToInt32(a[1]));\n            })\n            .Where(v=> v.Weight <= weightToSell)\n            //.OrderByDescending(v=> v.Weight)\n            .ToList();\n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<=FindStopIndex();i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1067,"fileType":"csharp","requestStartTime":1517924854818}}
{"body": {"column":13,"line":32,"wordToComplete":"","code":"using System;\nusing System.Linq;\n\nclass Person{\n\tprotected string firstName;\n\tprotected string lastName;\n\tprotected int id;\n\t\n\tpublic Person(){}\n\tpublic Person(string firstName, string lastName, int identification){\n\t\t\tthis.firstName = firstName;\n\t\t\tthis.lastName = lastName;\n\t\t\tthis.id = identification;\n\t}\n\tpublic void printPerson(){\n\t\tConsole.WriteLine(\"Name: \" + lastName + \", \" + firstName + \"\\nID: \" + id); \n\t}\n}\n\nclass Student : Person{\n    private int[] testScores;  \n  \n    /*\t\n    *   Class Constructor\n    *   \n    *   Parameters: \n    *   firstName - A string denoting the Person's first name.\n    *   lastName - A string denoting the Person's last name.\n    *   id - An integer denoting the Person's ID number.\n    *   scores - An array of integers denoting the Person's test scores.\n    */\n    public Student(String firstName, String lastName, int id, int[] scores){\n        this.firstName = firstName;\n    }\n    \n    /*\t\n    *   Method Name: Calculate\n    *   Return: A character denoting the grade.\n    */\n    // Write your method here\n}\nclass Solution {\n\tstatic void Main() {\n\t\tstring[] inputs = Console.ReadLine().Split();\n\t\tstring firstName = inputs[0];\n\t  \tstring lastName = inputs[1];\n\t\tint id = Convert.ToInt32(inputs[2]);\n\t\tint numScores = Convert.ToInt32(Console.ReadLine());\n\t\tinputs = Console.ReadLine().Split();\n\t  \tint[] scores = new int[numScores];\n\t\tfor(int i = 0; i < numScores; i++){\n\t\t\tscores[i]= Convert.ToInt32(inputs[i]);\n\t\t} \n\t  \t\n\t\tStudent s = new Student(firstName, lastName, id, scores);\n\t\ts.printPerson();\n\t\tConsole.WriteLine(\"Grade: \" + s.Calculate() + \"\\n\");\n\t}\n}\n","offset":895,"fileType":"csharp","requestStartTime":1517924865294}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] arr, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = arr[0];\n            for(int j = 0; j < arr.Length - 1; j++)\n            {\n                arr[j] = arr[j+1];\n            }\n            arr[arr.Length - 1] = temp;\n        }\n        \n        int[] temp = new int[d];\n        Array.\n        return arr;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        int[] arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();        \n        arr = leftRotation(arr, d);\n        Console.WriteLine(String.Join(\" \", arr));        \n    }\n}\n\n\n","offset":496,"fileType":"csharp","requestStartTime":1517924884528}}
{"body": {"column":43,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n       int maxA=a.Max(x=>x);\n       int minB= b.Max(x=>x);\n       int count=0;\n       int element=maxA;\n       while(element<minB){\n           if(a.Where(x=>element%x==0).Count()==a.Length){\n               if(b.Where(x=>x%element==0).==b.Length){\n                   count++;\n               }\n           }\n           element++;\n       }\n        return count;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":383,"fileType":"csharp","requestStartTime":1517924905014}}
{"body": {"column":14,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] arr, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = arr[0];\n            for(int j = 0; j < arr.Length - 1; j++)\n            {\n                arr[j] = arr[j+1];\n            }\n            arr[arr.Length - 1] = temp;\n        }\n        \n        int[] temp = new int[d];\n        Array.Copy(arr, 0, temp, d);\n        Array.\n        return arr;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        int[] arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();        \n        arr = leftRotation(arr, d);\n        Console.WriteLine(String.Join(\" \", arr));        \n    }\n}\n\n\n","offset":533,"fileType":"csharp","requestStartTime":1517924919713}}
{"body": {"column":13,"line":35,"wordToComplete":"","code":"using System;\nusing System.Linq;\n\nclass Person{\n\tprotected string firstName;\n\tprotected string lastName;\n\tprotected int id;\n\t\n\tpublic Person(){}\n\tpublic Person(string firstName, string lastName, int identification){\n\t\t\tthis.firstName = firstName;\n\t\t\tthis.lastName = lastName;\n\t\t\tthis.id = identification;\n\t}\n\tpublic void printPerson(){\n\t\tConsole.WriteLine(\"Name: \" + lastName + \", \" + firstName + \"\\nID: \" + id); \n\t}\n}\n\nclass Student : Person{\n    private int[] testScores;  \n  \n    /*\t\n    *   Class Constructor\n    *   \n    *   Parameters: \n    *   firstName - A string denoting the Person's first name.\n    *   lastName - A string denoting the Person's last name.\n    *   id - An integer denoting the Person's ID number.\n    *   scores - An array of integers denoting the Person's test scores.\n    */\n    public Student(String firstName, String lastName, int id, int[] scores){\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.id = id;\n        this.\n    }\n    \n    /*\t\n    *   Method Name: Calculate\n    *   Return: A character denoting the grade.\n    */\n    // Write your method here\n}\nclass Solution {\n\tstatic void Main() {\n\t\tstring[] inputs = Console.ReadLine().Split();\n\t\tstring firstName = inputs[0];\n\t  \tstring lastName = inputs[1];\n\t\tint id = Convert.ToInt32(inputs[2]);\n\t\tint numScores = Convert.ToInt32(Console.ReadLine());\n\t\tinputs = Console.ReadLine().Split();\n\t  \tint[] scores = new int[numScores];\n\t\tfor(int i = 0; i < numScores; i++){\n\t\t\tscores[i]= Convert.ToInt32(inputs[i]);\n\t\t} \n\t  \t\n\t\tStudent s = new Student(firstName, lastName, id, scores);\n\t\ts.printPerson();\n\t\tConsole.WriteLine(\"Grade: \" + s.Calculate() + \"\\n\");\n\t}\n}\n","offset":987,"fileType":"csharp","requestStartTime":1517925016323}}
{"body": {"column":29,"line":48,"wordToComplete":"nu","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private List[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        for(int i=0; i<numOfBuyers; i++)    {\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[numOfTransactions++]=new Tran(Convert.ToInt32(a[0]), w);\n        }\n            \n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<nu;i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n        private int FindStopIndex(){\n            int stopAt=transactions.Count-1;\n            return stopAt;\n            \n            int sum = transactions[stopAt].Weight;\n            while(stopAt > 0 && sum + transactions[stopAt-1].Weight < weightToSell){\n                sum += transactions[--stopAt].Weight;\n            }\n            return stopAt;\n        }\n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1323,"fileType":"csharp","requestStartTime":1517925030481}}
{"body": {"column":39,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] arr, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = arr[0];\n            for(int j = 0; j < arr.Length - 1; j++)\n            {\n                arr[j] = arr[j+1];\n            }\n            arr[arr.Length - 1] = temp;\n        }\n        \n        int[] temp = new int[d];\n        Array.Copy(arr, 0, temp, 0, d);\n        Array.Copy(arr, d, arr, 0, arr.)\n        return arr;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        int[] arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();        \n        arr = leftRotation(arr, d);\n        Console.WriteLine(String.Join(\" \", arr));        \n    }\n}\n\n\n","offset":561,"fileType":"csharp","requestStartTime":1517925073046}}
{"body": {"column":14,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] arr, int d) {\n        // Complete this function\n        for(int i = 1; i <= d; i++)          \n        {\n            int temp = arr[0];\n            for(int j = 0; j < arr.Length - 1; j++)\n            {\n                arr[j] = arr[j+1];\n            }\n            arr[arr.Length - 1] = temp;\n        }\n        \n        int[] temp = new int[d];\n        Array.Copy(arr, 0, temp, 0, d);\n        Array.Copy(arr, d, arr, 0, arr.Length - d);\n        Array.\n        return arr;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        int[] arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();        \n        arr = leftRotation(arr, d);\n        Console.WriteLine(String.Join(\" \", arr));        \n    }\n}\n\n\n","offset":588,"fileType":"csharp","requestStartTime":1517925092773}}
{"body": {"column":28,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private Tran[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        for(int i=0; i<numOfBuyers; i++)    {\n            var a = Console.\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[numOfTransactions++]=new Tran(Convert.ToInt32(a[0]), w);\n        }\n            \n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<numOfTransactions; i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":946,"fileType":"csharp","requestStartTime":1517925361873}}
{"body": {"column":39,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private Tran[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        for(int i=0; i<numOfBuyers; i++)    {\n            var a = Console.ReadLine().\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[numOfTransactions++]=new Tran(Convert.ToInt32(a[0]), w);\n        }\n            \n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<numOfTransactions; i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Count)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":957,"fileType":"csharp","requestStartTime":1517925372137}}
{"body": {"column":34,"line":63,"wordToComplete":"Le","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private Tran[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        for(int i=0; i<numOfBuyers; i++)    {\n            var a = Console.ReadLine().Split(' ');\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[numOfTransactions++]=new Tran(Convert.ToInt32(a[0]), w);\n        }\n            \n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<numOfTransactions; i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= transactions.Le)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1818,"fileType":"csharp","requestStartTime":1517925415896}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            for(int j=1;j<a.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517925423516}}
{"body": {"column":21,"line":63,"wordToComplete":"nu","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private Tran[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        for(int i=0; i<numOfBuyers; i++)    {\n            var a = Console.ReadLine().Split(' ');\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[numOfTransactions++]=new Tran(Convert.ToInt32(a[0]), w);\n        }\n            \n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<numOfTransactions; i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= nu)\n                return;\n            \n            while(i< transactions.Count && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=transactions.Count)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":1805,"fileType":"csharp","requestStartTime":1517925423544}}
{"body": {"column":9,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] arr, int d) {\n        // Complete this function\n        .for(int i = 1; i <= d; i++)          \n        {\n            int temp = arr[0];\n            for(int j = 0; j < arr.Length - 1; j++)\n            {\n                arr[j] = arr[j+1];\n            }\n            arr[arr.Length - 1] = temp;\n        }\n        \n        int[] temp = new int[d];\n        Array.Copy(arr, 0, temp, 0, d);\n        Array.Copy(arr, d, arr, 0, arr.Length - d);\n        Array.Copy(temp, 0, arr, arr.Length - 1 - d, d)\n        return arr;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        int[] arr = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();        \n        arr = leftRotation(arr, d);\n        Console.WriteLine(String.Join(\" \", arr));        \n    }\n}\n\n\n","offset":197,"fileType":"csharp","requestStartTime":1517925424778}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            for(int j=0;j<a.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517925433473}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            var cArray = Array.\n            for(int j=0;j<a.Length-1;j++){\n                \n            }\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1517925524053}}
{"body": {"column":49,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            var cArray = Array.Copy(a, cArray, a.\n            for(int j=0;j<a.Length-1;j++){\n                \n            }\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":265,"fileType":"csharp","requestStartTime":1517925540859}}
{"body": {"column":49,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            var cArray = Array.Copy(a, cArray, a.\n            for(int j=0;j<a.Length-1;j++){\n                \n            }\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":265,"fileType":"csharp","requestStartTime":1517925547209}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            var cArray = Array.Copy(a, cArray, a.Length)\n            for(int j=0;j<a.Length-1;j++){\n                \n            }\n            a[a.]\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":363,"fileType":"csharp","requestStartTime":1517925602335}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            var cArray = Array.Copy(a, cArray, a.Length)\n            for(int j=0;j<a.Length-1;j++){\n                a.\n            }\n            a[a.Length-1] = cArray[0];\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":334,"fileType":"csharp","requestStartTime":1517925631989}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        int[] cArray = new int[a.;\n        for(int i=0;i<d;i++){\n            Array.Copy(a, cArray, a.Length);\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = cArray[j+1];\n            }\n            a[a.Length-1] = cArray[0];\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":219,"fileType":"csharp","requestStartTime":1517925707222}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = int.\n        \n    }\n}\n\n","offset":261,"fileType":"csharp","requestStartTime":1517925828939}}
{"body": {"column":34,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = int.Parse(Console.\n        \n    }\n}\n\n","offset":275,"fileType":"csharp","requestStartTime":1517925833689}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = int.Parse(Console.ReadLine());\n        string[] str = new string[n];\n        for(int i = 1; i <= n; i++)\n        {\n            str[i] = Console.\n        }\n        \n    }\n}\n\n","offset":401,"fileType":"csharp","requestStartTime":1517925904649}}
{"body": {"column":35,"line":41,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int distinctMoves(string s, int n, int x, int y) {\n        var numbers = int[s.Length];\n        for(int i = 0; i < s.Length; i++)\n        {\n            if(s[i].Equals('r'))\n            {\n                numbers[i] = 1;\n            }\n            else\n            {\n                numbers[i] = -1;\n            }\n        }\n\n        \n        \n        var mask = BigInteger.Pow(2, s.Length).Subtract(BigInteger.One);\n        var maskArray = mask.ToByteArray();\n        for(int i = 0; i < maskArray.Length; i++)\n        {\n            for(int j=0; j<8; j++)\n            {\n                if(maskArray[i] & (1 << j) == 0)\n                {\n                    numbers[i+j] = 0;\n                }                \n            }\n        }\n        \n        var result = 0;\n        var pos = x;\n        for(int i = 0; i < numbers.Length; i++)\n        {\n            if(s[i].Equals('r'))\n            {\n                pos++;\n            }\n            else\n            {\n                pos--;\n            }\n            if(!(pos >= 0 && pos < n))\n            {\n                return 0;\n            }\n        }\n        if(pos == y)\n        {\n            return 1;\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        string s;\n        s = Console.ReadLine();\n\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        int x;\n        x = Convert.ToInt32(Console.ReadLine());\n\n        int y;\n        y = Convert.ToInt32(Console.ReadLine());\n\n        res = distinctMoves(s, n, x, y);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":984,"fileType":"csharp","requestStartTime":1517925930284}}
{"body": {"column":35,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = int.Parse(Console.ReadLine());\n        string[] str = new string[n];\n        for(int i = 1; i <= n; i++)\n        {\n            str[i] = Console.ReadLine();\n        }\n        int q = int.Parse(Console.ReadLine());\n        for(int i = 1; i <= q; i++)\n        {\n            string entry = Console.ReadLine();\n            for(int j = 0; j < str.; j++)\n        }\n    }\n}\n\n","offset":598,"fileType":"csharp","requestStartTime":1517926031121}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = int.Parse(Console.ReadLine());\n        string[] str = new string[n];\n        for(int i = 1; i <= n; i++)\n        {\n            str[i] = Console.ReadLine();\n        }\n        int q = int.Parse(Console.ReadLine());\n        for(int i = 1; i <= q; i++)\n        {\n            string entry = Console.ReadLine();\n            int count = 0;\n            for(int j = 0; j < str.Length; j++)\n            {\n                if (str[j] == entry) count++;\n            }\n            Console.\n        }\n    }\n}\n\n","offset":732,"fileType":"csharp","requestStartTime":1517926093800}}
{"body": {"column":37,"line":30,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int distinctMoves(string s, int n, int x, int y) {\n        var numbers = int[s.Length];\n        for(int i = 0; i < s.Length; i++)\n        {\n            if(s[i].Equals('r'))\n            {\n                numbers[i] = 1;\n            }\n            else\n            {\n                numbers[i] = -1;\n            }\n        }\n\n        var mask = BigInteger.Pow(2, s.Length).Subtract(BigInteger.One);\n        return countMoves(numbers, mask, n, x, y);\n    }\n\n    static int countMoves(int[] numbers, BigInteger mask, int n, int x, int y) {\n        \n        if(mask.CompareTo(BigInteger.))\n        \n        var maskArray = mask.ToByteArray();\n        for(int i = 0; i < maskArray.Length; i++)\n        {\n            for(int j=0; j<8; j++)\n            {\n                if(maskArray[i] & (1 << j) == 0)\n                {\n                    numbers[i+j] = 0;\n                }                \n            }\n        }\n        \n        if(numbers.Sum != y-x)\n        {\n            return 0;\n        }\n        \n        var result = 0;\n        var pos = x;\n        for(int i = 0; i < numbers.Length ; i++)\n        {\n            if(s[i].Equals('r'))\n            {\n                pos++;\n            }\n            else\n            {\n                pos--;\n            }\n            if(!(pos >= 0 && pos < n))\n            {\n                return 0;\n            }\n        }\n        if(pos == y)\n        {\n            return 1;\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        string s;\n        s = Console.ReadLine();\n\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        int x;\n        x = Convert.ToInt32(Console.ReadLine());\n\n        int y;\n        y = Convert.ToInt32(Console.ReadLine());\n\n        res = distinctMoves(s, n, x, y);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":746,"fileType":"csharp","requestStartTime":1517926190042}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n        var kesok = 0;\n        a.\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":222,"fileType":"csharp","requestStartTime":1517926287106}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n        var kesok = 0;\n        a.Where(x => x>0).\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1517926305278}}
{"body": {"column":34,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n        var kesok = 0;\n        a.Where(x => x>0).Count().\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":246,"fileType":"csharp","requestStartTime":1517926340152}}
{"body": {"column":34,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n        var kesok = 0;\n        a.Where(x => x>0).Count().\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":246,"fileType":"csharp","requestStartTime":1517926348965}}
{"body": {"column":46,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n        int maxkesok = 0;\n        int kesok = a.Where(x => x>0).Count().;\n           \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1517926392700}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        a.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":432,"fileType":"csharp","requestStartTime":1517926443213}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] nArray = new int[index];\n        Array.\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":512,"fileType":"csharp","requestStartTime":1517926561559}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] nArray = new int[index];\n        Array.\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":512,"fileType":"csharp","requestStartTime":1517926566357}}
{"body": {"column":15,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n\n    // Declare second integer, double, and String variables.\n    int i2;\n    double d2;\n    string s2; \n    // Read and save an integer, double, and String to your variables.\n    // Note: If you have trouble reading the entire string, please go back and review the Tutorial closely.\n    string I2 = Console.ReadLine();\n    string D2 = Console.ReadLine();\n    string S2 = Console.ReadLine();\n\n    i2 = Int32.\n \n        \n    // Print the sum of both integer variables on a new line.\n    \n    // Print the sum of the double variables on a new line.\n    \n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n    }\n}\n","offset":616,"fileType":"csharp","requestStartTime":1517926650073}}
{"body": {"column":33,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.]\n        Array.Copy(a, nArray, index);\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":531,"fileType":"csharp","requestStartTime":1517926659375}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n       int minJelenlevok = k;\n        int kesok = a.Where(x => x > 0).Count();\n           if(kesok >= a.maxkesok){\n               return \"NO\";\n           }\n        return \"YES\";\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":293,"fileType":"csharp","requestStartTime":1517926659803}}
{"body": {"column":14,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, nArray, index);\n        Array.\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":592,"fileType":"csharp","requestStartTime":1517926667542}}
{"body": {"column":42,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        Array.Copy(a, index, nArray, 0, a.\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":622,"fileType":"csharp","requestStartTime":1517926711861}}
{"body": {"column":42,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        Array.Copy(a, index, nArray, 0, a.\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":622,"fileType":"csharp","requestStartTime":1517926715158}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        Array.Copy(a, index, nArray, 0, a.Length - index);\n        Array.\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":653,"fileType":"csharp","requestStartTime":1517926731665}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n       int minJelenlevok = k;\n        int kesok = a.Where(x => x > 0).Count();\n        Console.\n           if(kesok >= a.Length-minJelenlevok){\n               return \"NO\";\n           }\n        return \"YES\";\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":284,"fileType":"csharp","requestStartTime":1517926744789}}
{"body": {"column":47,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        Array.Copy(a, index, nArray, 0, a.Length - index);\n        Array.Copy(iArray, 0, nArray, index, a.)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":686,"fileType":"csharp","requestStartTime":1517926749381}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string angryProfessor(int k, int[] a) {\n        // Complete this function\n       int minJelenlevok = k;\n        int kesok = a.Where(x => x > 0).Count();\n        Console.WriteLine(kesok.)\n           if(kesok >= a.Length-minJelenlevok){\n               return \"NO\";\n           }\n        return \"YES\";\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int k = Convert.ToInt32(tokens_n[1]);\n            string[] a_temp = Console.ReadLine().Split(' ');\n            int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n            string result = angryProfessor(k, a);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":300,"fileType":"csharp","requestStartTime":1517926749709}}
{"body": {"column":47,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        \n        var index = (a.Length%d) -1;\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        Array.Copy(a, index, nArray, 0, a.Length - index);\n        Array.Copy(iArray, 0, nArray, index, n.)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":686,"fileType":"csharp","requestStartTime":1517926753087}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        /*\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        */\n        var index = (a.Length%d);\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        console.\n        Array.Copy(a, index, nArray, 0, a.Length - index);\n        Array.Copy(iArray, 0, nArray, a.Length - index, index);\n        \n        return nArray;\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":606,"fileType":"csharp","requestStartTime":1517926961699}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        /*\n        for(int i=0;i<d;i++){\n            int firstArrayVal = a[0];\n            for(int j=0;j<a.Length-1;j++){\n                a[j] = a[j+1];\n            }\n            a[a.Length-1] = firstArrayVal;\n        }\n        return a;\n        */\n        var index = (a.Length%d);\n        int[] iArray = new int[index];\n        int[] nArray = new int[a.Length];\n        Array.Copy(a, iArray, index-1);\n        Console.\n        Array.Copy(a, index, nArray, 0, a.Length - index);\n        Array.Copy(iArray, 0, nArray, a.Length - index, index);\n        \n        return nArray;\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        //int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":606,"fileType":"csharp","requestStartTime":1517926964449}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for (int = Array.; int )\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517927050243}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for (int = Array.; int )\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517927106148}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":202,"fileType":"csharp","requestStartTime":1517927168973}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i = 0; i <= 10; i ++){\n            Console.\n        }\n    }\n}\n\n\n","offset":254,"fileType":"csharp","requestStartTime":1517927286523}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        String.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517927298185}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        Char.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":203,"fileType":"csharp","requestStartTime":1517927302674}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        String.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517927306897}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int countDuplicates(int[] numbers) {\n        \n        numbers.\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int numbers_size = 0;\n        numbers_size = Convert.ToInt32(Console.ReadLine());\n        int[] numbers = new int [numbers_size];\n        int numbers_item;\n        for(int numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n            numbers_item = Convert.ToInt32(Console.ReadLine());\n            numbers[numbers_i] = numbers_item;\n        }\n\n        res = countDuplicates(numbers);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":228,"fileType":"csharp","requestStartTime":1517927599939}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        for(var v =i; v<=j; v++){\n        char[] arr = v. .ToCharArray();\n        Array.Reverse(arr);\n        return new string(arr);           \n        }\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1517927460326}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        for(var v =i; v<=j; v++){\n        string szoveg = i.\n        Array.Reverse(arr);\n        return new string(arr);           \n        }\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517927502701}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        for(var v =i; v<=j; v++){\n        string szoveg = v.\n        Array.Reverse(arr);\n        return new string(arr);           \n        }\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517927503336}}
{"body": {"column":37,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        for(var v =i; v<=j; v++){\n        string szoveg = v.ToString().\n        Array.Reverse(arr);\n        return new string(arr);           \n        }\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1517927505946}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        for(var v =i; v<=j; v++){\n        string szoveg = v.ToString();\n        string rszoveg = szoveg.\n        Array.Reverse(arr);\n        return new string(arr);           \n        }\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":294,"fileType":"csharp","requestStartTime":1517927518320}}
{"body": {"column":31,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int countDuplicates(int[] numbers) {\n        \n        foreach(var i from numbers)\n        {\n            numbers.Distinct().\n        }\n        return 0;\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int numbers_size = 0;\n        numbers_size = Convert.ToInt32(Console.ReadLine());\n        int[] numbers = new int [numbers_size];\n        int numbers_item;\n        for(int numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n            numbers_item = Convert.ToInt32(Console.ReadLine());\n            numbers[numbers_i] = numbers_item;\n        }\n\n        res = countDuplicates(numbers);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":289,"fileType":"csharp","requestStartTime":1517927819083}}
{"body": {"column":13,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n\n    // Declare second integer, double, and String variables.\n    int i2;\n    double d2;\n    string s2; \n    // Read and save an integer, double, and String to your variables.\n    // Note: If you have trouble reading the entire string, please go back and review the Tutorial closely.\n    string I2 = Console.ReadLine();\n    string D2 = Console.ReadLine();\n    string S2 = Console.ReadLine();\n\n    I3 = int.\n        \n    // Print the sum of both integer variables on a new line.\n    \n    // Print the sum of the double variables on a new line.\n    \n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n    }\n}\n","offset":614,"fileType":"csharp","requestStartTime":1517927683461}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            int z = Convert.szoveg.Reverse();\n            if((v-z)%k == 0){\n                result++;\n            }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":317,"fileType":"csharp","requestStartTime":1517927705253}}
{"body": {"column":23,"line":15,"wordToComplete":"add","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int countDuplicates(int[] numbers) {\n        int duplicate =0;\n        int[] number1;\n        foreach(var i from numbers)\n        {\n            number1.add\n        }\n         foreach(var i from numbers)\n        {\n            numbers.Distinct().Count()>1\n                du\n        }\n        return 0;\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int numbers_size = 0;\n        numbers_size = Convert.ToInt32(Console.ReadLine());\n        int[] numbers = new int [numbers_size];\n        int numbers_item;\n        for(int numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n            numbers_item = Convert.ToInt32(Console.ReadLine());\n            numbers[numbers_i] = numbers_item;\n        }\n\n        res = countDuplicates(numbers);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":321,"fileType":"csharp","requestStartTime":1517927911778}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) \n    {\n        for(int i = 0; i < arr.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":231,"fileType":"csharp","requestStartTime":1517927748006}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            Console.\n            int z = Convert.ToInt32(szoveg.Reverse());\n            if((v-z)%k == 0){\n                result++;\n            }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":309,"fileType":"csharp","requestStartTime":1517927749151}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n\n    // Declare second integer, double, and String variables.\n    int i2;\n    double d2;\n    string s2; \n    // Read and save an integer, double, and String to your variables.\n    // Note: If you have trouble reading the entire string, please go back and review the Tutorial closely.\n    string I2 = Console.ReadLine();\n    string D2 = Console.ReadLine();\n    string S2 = Console.ReadLine();\n\n    i2= int.Parse(I2);\n    d2 = double.    \n    // Print the sum of both integer variables on a new line.\n    \n    // Print the sum of the double variables on a new line.\n    \n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n    }\n}\n","offset":640,"fileType":"csharp","requestStartTime":1517927762834}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n\n    // Declare second integer, double, and String variables.\n    int i2;\n    double d2;\n    string s2; \n    // Read and save an integer, double, and String to your variables.\n    // Note: If you have trouble reading the entire string, please go back and review the Tutorial closely.\n    string I2 = Console.ReadLine();\n    string D2 = Console.ReadLine();\n    string S2 = Console.ReadLine();\n\n    i2= int.Parse(I2);\n    d2 = double.Parse(D2);\n    s2 = S2;    \n    // Print the sum of both integer variables on a new line.\n    console.\n    // Print the sum of the double variables on a new line.\n    \n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n    }\n}\n","offset":742,"fileType":"csharp","requestStartTime":1517927814305}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            Console.WriteLine(szoveg.);\n            //int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":326,"fileType":"csharp","requestStartTime":1517927816655}}
{"body": {"column":47,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            Console.WriteLine(szoveg.Reverse().);\n            //int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":336,"fileType":"csharp","requestStartTime":1517927837275}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            char[] arr = szoveg.Reverse();\n            arr.\n            int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517927906069}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            char[] arr = szoveg.Reverse();\n            String.\n            int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":351,"fileType":"csharp","requestStartTime":1517927918095}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            char[] arr = szoveg.Reverse();\n            string rszoveg = arr.\n            int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":365,"fileType":"csharp","requestStartTime":1517927934819}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            char[] arr = szoveg.Reverse();\n            string rszoveg = arr.\n            int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":365,"fileType":"csharp","requestStartTime":1517927940212}}
{"body": {"column":36,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            char[] arr = szoveg.Reverse();\n            string rszoveg = String.\n            int z = Convert.ToInt32(szoveg.Reverse());\n          //  if((v-z)%k == 0){\n           //     result++;\n           // }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":368,"fileType":"csharp","requestStartTime":1517927946369}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n                // Complete this function\n        if(acid_name.Length>2)\n            if(acid_name.Substring(acid_name.Length-2, 2) == \"ic\")\n            {\n                if(ifacid_name.acid_name.Substring(0, 5) == \"hydro\")\n                {\n                    return \"non-metal acid\";\n                }\n                else\n                {\n                    return \"polyatomic acid\";\n                }\n            }\n         return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":338,"fileType":"csharp","requestStartTime":1517927961544}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) \n    {\n        for(int i = 1; i < arr.length; ++i)\n        {\n            if( k = arr[i]. ) \n                return \"Yes\";\n        }\n        return \"No\";\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":281,"fileType":"csharp","requestStartTime":1517927995111}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) \n    {\n        for(int i = 1; i < arr.length; ++i)\n        {\n            if( arr[i]. ) \n                return \"Yes\";\n        }\n        return \"No\";\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":277,"fileType":"csharp","requestStartTime":1517928004995}}
{"body": {"column":46,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            List<char> arr = szoveg.Reverse().;\n            string rszoveg = String.Join(\"\",arr);\n            int z = Convert.ToInt32(rszoveg);\n            if((v-z)%k == 0){\n                result++;\n            }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":335,"fileType":"csharp","requestStartTime":1517928027998}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) \n    {\n        for(int i = 1; i < arr.length; ++i)\n        {\n            if( arr[i].Equals(k) )\n                return \"Yes\";\n        }\n        return \"No\";\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":231,"fileType":"csharp","requestStartTime":1517928036189}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) \n    {\n        for(int i = 1; arr.GetLength(); ++i)\n        {\n            if( arr[i].Equals(k) )\n                return \"Yes\";\n        }\n        return \"No\";\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":227,"fileType":"csharp","requestStartTime":1517928053309}}
{"body": {"column":26,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulDays(int i, int j, int k) {\n        // Complete this function\n        int result =0;\n        for(var v =i; v<=j; v++){\n            string szoveg = v.ToString();\n            List<char> arr = szoveg.Reverse().ToList();\n            string rszoveg = String.Join(\"\",arr);\n            int z = Int32.(rszoveg);\n            if((v-z)%k == 0){\n                result++;\n            }                \n        }\n        return result;\n\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_i = Console.ReadLine().Split(' ');\n        int i = Convert.ToInt32(tokens_i[0]);\n        int j = Convert.ToInt32(tokens_i[1]);\n        int k = Convert.ToInt32(tokens_i[2]);\n        int result = beautifulDays(i, j, k);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":421,"fileType":"csharp","requestStartTime":1517928074452}}
{"body": {"column":38,"line":12,"wordToComplete":"O","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int countDuplicates(int[] numbers) {\n        int duplicate =0;\n     ObservableCollection<int> = new O\n        foreach(var i in  numbers)\n        {           \n           if(numbers.Distinct().Count()>1)\n                duplicate = duplicate+1;\n        }\n        return duplicate;\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int numbers_size = 0;\n        numbers_size = Convert.ToInt32(Console.ReadLine());\n        int[] numbers = new int [numbers_size];\n        int numbers_item;\n        for(int numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n            numbers_item = Convert.ToInt32(Console.ReadLine());\n            numbers[numbers_i] = numbers_item;\n        }\n\n        res = countDuplicates(numbers);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":267,"fileType":"csharp","requestStartTime":1517928390807}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        \n        if (position == 0) {\n            Node nodeNth = new Node();\n            nodeNth.\n        }\n      /*  Node nodeNth = new Node();\n        nodeNth.Data = data;\n        nodeNth.Next = head;\n        \n        if ( head == null || position == 0) {\n            return nodeNth;\n        } else {\n            Node currentNode = head;\n            int i = 1;\n            while (i != position && currentNode.Next != null) {\n                currentNode = currentNode.Next;\n                i++;\n            }\n            nodeNth.Next = currentNode.Next;\n            currentNode.Next = nodeNth;\n            return head;\n        }*/\n        \n    }\n\n\n","offset":503,"fileType":"csharp","requestStartTime":1517928380713}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        \n        if (position == 0) {\n            Node nodeNth = new Node();\n            nodeNth.Data = data;\n            return nodeNth;\n        } else {\n            head.Insert\n        }\n      /*  Node nodeNth = new Node();\n        nodeNth.Data = data;\n        nodeNth.Next = head;\n        \n        if ( head == null || position == 0) {\n            return nodeNth;\n        } else {\n            Node currentNode = head;\n            int i = 1;\n            while (i != position && currentNode.Next != null) {\n                currentNode = currentNode.Next;\n                i++;\n            }\n            nodeNth.Next = currentNode.Next;\n            currentNode.Next = nodeNth;\n            return head;\n        }*/\n        \n    }\n\n\n","offset":578,"fileType":"csharp","requestStartTime":1517928413576}}
{"body": {"column":39,"line":23,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        \n        if (position == 0) {\n            Node nodeNth = new Node();\n            nodeNth.Data = data;\n            return nodeNth;\n        } else {\n            head.Next = InsertNth(head.)\n        }\n      /*  Node nodeNth = new Node();\n        nodeNth.Data = data;\n        nodeNth.Next = head;\n        \n        if ( head == null || position == 0) {\n            return nodeNth;\n        } else {\n            Node currentNode = head;\n            int i = 1;\n            while (i != position && currentNode.Next != null) {\n                currentNode = currentNode.Next;\n                i++;\n            }\n            nodeNth.Next = currentNode.Next;\n            currentNode.Next = nodeNth;\n            return head;\n        }*/\n        \n    }\n\n\n","offset":600,"fileType":"csharp","requestStartTime":1517928427926}}
{"body": {"column":39,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.)\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n        }\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517928531741}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int sockMerchant(int n, int[] ar) \n    {\n        // Complete this function\n        if(ar != null)\n        {\n            Array.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = sockMerchant(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":241,"fileType":"csharp","requestStartTime":1517928603813}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        \n        if (position == 0) {\n            head.\n            Node nodeNth = new Node();\n            nodeNth.Data = data;\n            return nodeNth;\n        } else {\n            Node nodeTemp = head;\n            InsertNth(head.Next,data,position -1);\n            \n        }\n      /*  Node nodeNth = new Node();\n        nodeNth.Data = data;\n        nodeNth.Next = head;\n        \n        if ( head == null || position == 0) {\n            return nodeNth;\n        } else {\n            Node currentNode = head;\n            int i = 1;\n            while (i != position && currentNode.Next != null) {\n                currentNode = currentNode.Next;\n                i++;\n            }\n            nodeNth.Next = currentNode.Next;\n            currentNode.Next = nodeNth;\n            return head;\n        }*/\n        \n    }\n\n\n","offset":461,"fileType":"csharp","requestStartTime":1517928613869}}
{"body": {"column":26,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.)\n            \n            int count = 0;\n            int current = 2;\n            \n            while (count < n)\n            {\n                if (current)\n            }\n        }\n    }\n}\n\n\n","offset":724,"fileType":"csharp","requestStartTime":1517928649875}}
{"body": {"column":26,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.)\n            \n            int count = 0;\n            int current = 2;\n            \n            while (count < n)\n            {\n                if (current)\n            }\n        }\n    }\n}\n\n\n","offset":724,"fileType":"csharp","requestStartTime":1517928656454}}
{"body": {"column":33,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.Count > n)\n            \n            int count = 0;\n            int current = 2;\n            \n            while (count < n)\n            {\n                if (current)\n            }\n        }\n    }\n}\n\n\n","offset":731,"fileType":"csharp","requestStartTime":1517928678047}}
{"body": {"column":24,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.Count >= n)\n            {\n                Console.\n            }\n            \n            int count = 0;\n            int current = 2;\n            \n            while (count < n)\n            {\n                if (current)\n            }\n        }\n    }\n}\n\n\n","offset":774,"fileType":"csharp","requestStartTime":1517928686333}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\n    /*\n      Insert Node at a given position in a linked list\n      head can be NULL\n      First element in the linked list is at position 0\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node InsertNth(Node head, int data, int position)\n    {\n        \n        if (position == 0) {\n            Node nodeNth = new Node();\n            nodeNth.Data = data;\n            nodeNth.\n            return nodeNth;\n        } else {\n            Node nodeTemp = head;\n            InsertNth(head.Next,data,position -1);\n            \n        }\n      /*  Node nodeNth = new Node();\n        nodeNth.Data = data;\n        nodeNth.Next = head;\n        \n        if ( head == null || position == 0) {\n            return nodeNth;\n        } else {\n            Node currentNode = head;\n            int i = 1;\n            while (i != position && currentNode.Next != null) {\n                currentNode = currentNode.Next;\n                i++;\n            }\n            nodeNth.Next = currentNode.Next;\n            currentNode.Next = nodeNth;\n            return head;\n        }*/\n        \n    }\n\n\n","offset":536,"fileType":"csharp","requestStartTime":1517928716168}}
{"body": {"column":33,"line":35,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public struct Tran{\n        public Tran(int p, int w){\n            Price=p;\n            Weight =w;\n        }\n        public Tran Sell(Tran t)\n        {\n            return new Tran(Price+t.Price, Weight-t.Weight);\n        }\n        public int Price{get;}\n        public int Weight{get;}\n    }\n    \n    public class Process{\n        private int numOfBuyers;\n        private int weightToSell;\n        private Tran[] transactions;\n        private int numOfTransactions;\n        private int profit;\n        \n        public void ReadData(){\n        string[] input_temp = Console.ReadLine().Split(' ');\n        numOfBuyers = Convert.ToInt32(input_temp[0]);\n        weightToSell = Convert.ToInt32(input_temp[1]);\n        \n        transactions = new Tran[numOfBuyers];\n        for(int i=0; i<numOfBuyers; i++)    {\n            var input = Console.ReadLine();\n            var spaceInd = input.\n            var a = Console.ReadLine().Split(' ');\n            var w = Convert.ToInt32(a[1]);\n            if(w>weightToSell)\n                continue;\n            transactions[numOfTransactions++]=new Tran(Convert.ToInt32(a[0]), w);\n        }\n            \n        }\n        \n        public string Solve(){\n            if(transactions.Any()==false){\n                return \"Got caught!\";\n            }\n            \n            \n            for(int i=0; i<numOfTransactions; i++ ){\n                Solve(new Tran(transactions[i].Price, weightToSell-transactions[i].Weight), i+1);\n            }\n            \n            return profit==0 ? \"Got caught!\": profit.ToString();\n        }\n        \n        private void Solve(Tran t, int i){\n\n            if(t.Weight ==0){\n                profit = Math.Max(profit, t.Price);\n                return;\n            }\n            \n            if(i>= numOfTransactions)\n                return;\n            \n            while(i< numOfTransactions && t.Weight - transactions[i].Weight < 0)i++;\n            \n            if(i>=numOfTransactions)\n                return;\n            \n            Solve(t.Sell(transactions[i]), i+1);\n            Solve(t, i+1);\n            \n        }\n        \n    }\n    \n    static void Main(String[] args) {\n        \n        var sut = new Process();\n        \n        sut.ReadData();\n        \n        Console.WriteLine(sut.Solve());\n    }\n}\n\n","offset":995,"fileType":"csharp","requestStartTime":1517928735167}}
{"body": {"column":30,"line":44,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.Count >= n)\n            {\n                Console.WriteLine(primeList[n - 1]);\n                continue;\n            }\n            \n            int count = 0;\n            int current = 2;\n            \n            while (count < n)\n            {\n                if (IsPrime(current))\n                {\n                    primeList.\n                    count++;\n                }\n            }\n        }\n    }\n}\n\n\n","offset":1055,"fileType":"csharp","requestStartTime":1517928735399}}
{"body": {"column":34,"line":37,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.Count >= n)\n            {\n                Console.WriteLine(primeList[n - 1]);\n                continue;\n            }\n            \n            int count = primeList.;\n            int current = 2;\n            \n            while (count < n)\n            {\n                if (IsPrime(current))\n                {\n                    primeList.Add(current);\n                    count++;\n                }\n            }\n        }\n    }\n}\n\n\n","offset":890,"fileType":"csharp","requestStartTime":1517928767123}}
{"body": {"column":39,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int countDuplicates(int[] numbers) {\n        int duplicate =0;\n     List<int> numberlist = new List<int>();\n        foreach(var i in  numbers)\n        {   \n            numberlist.Add(numbers[i]);            \n           \n        }\n        foreach(var i in  numbers)\n        {   \n           if( numberlist.Select(x=>x).;     \n           \n           duplicate = duplicate+1;\n        }\n       \n                \n        return duplicate;\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int numbers_size = 0;\n        numbers_size = Convert.ToInt32(Console.ReadLine());\n        int[] numbers = new int [numbers_size];\n        int numbers_item;\n        for(int numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n            numbers_item = Convert.ToInt32(Console.ReadLine());\n            numbers[numbers_i] = numbers_item;\n        }\n\n        res = countDuplicates(numbers);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":483,"fileType":"csharp","requestStartTime":1517929007969}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = meal_cost * (tip_percent/100); \n        double tax = meal_cost * (tax_percent/100); \n        double totalCost = meal_cost + tip_percent + tax_percent;\n        int round= Math.\n    }\n}\n\n","offset":538,"fileType":"csharp","requestStartTime":1517928852776}}
{"body": {"column":54,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int countDuplicates(int[] numbers) {\n        int duplicate =0;\n     List<int> numberlist = new List<int>();\n        foreach(var i in  numbers)\n        {   \n            numberlist.Add(numbers[i]);            \n           \n        }\n        foreach(var i in  numbers)\n        {   \n           if( numberlist.Select(x=>x).Where(x=>x[i]).;     \n           \n           duplicate = duplicate+1;\n        }\n       \n                \n        return duplicate;\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int numbers_size = 0;\n        numbers_size = Convert.ToInt32(Console.ReadLine());\n        int[] numbers = new int [numbers_size];\n        int numbers_item;\n        for(int numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n            numbers_item = Convert.ToInt32(Console.ReadLine());\n            numbers[numbers_i] = numbers_item;\n        }\n\n        res = countDuplicates(numbers);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":498,"fileType":"csharp","requestStartTime":1517929026395}}
{"body": {"column":20,"line":49,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static List<int> primeList;\n    \n    static bool IsPrime(int n)\n    {   \n        if (n <= 1)\n            return false;\n        \n        if (n <= 3)\n            return true;\n        \n        for (int i = 2; i <= (int)Math.Sqrt(n); i++)\n        {\n            if (n % i == 0)\n                return false;\n        }\n        \n        return true;\n    }\n    \n    static void Main(String[] args) {\n        primeList = new List<int>{};\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            \n            if (primeList.Count >= n)\n            {\n                Console.WriteLine(primeList[n - 1]);\n                continue;\n            }\n            \n            int count = primeList.Count;\n            int current = primeList[count - 1] + 1;\n            \n            while (count < n)\n            {\n                if (IsPrime(current))\n                {\n                    primeList.Add(current);\n                    count++;\n                }\n            }\n            \n            Console.\n        }\n    }\n}\n\n\n","offset":1200,"fileType":"csharp","requestStartTime":1517928876650}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        List<int> result = new List<int>();\n        \n        result.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":268,"fileType":"csharp","requestStartTime":1517928909625}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        List<int> result = new List<int>();\n        \n        result.Add(array[0]);\n        \n        for(int i=1;i<array.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":320,"fileType":"csharp","requestStartTime":1517928936455}}
{"body": {"column":23,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        List<int> result = new List<int>();\n        \n        result.Add(array[0]);\n        \n        for(int i=1;i<array.Length;i++)\n        {\n            int value = array[i-1]-array[i];\n            if(value<-127 || value>127)\n                result.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":450,"fileType":"csharp","requestStartTime":1517929021044}}
{"body": {"column":19,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        List<int> result = new List<int>();\n        \n        result.Add(array[0]);\n        \n        for(int i=1;i<array.Length;i++)\n        {\n            int value = array[i-1]-array[i];\n            if(value<-127 || value>127)\n                result.Add(-128);\n            \n            result.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":493,"fileType":"csharp","requestStartTime":1517929029699}}
{"body": {"column":44,"line":13,"wordToComplete":"for MAM expected output is given wrong .","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int maxMoves(string s, string t) {\nreturn 0;\n    }\n/// for MAM expected output is given wrong .\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        string s;\n        s = Console.ReadLine();\n\n        string t;\n        t = Console.ReadLine();\n\n        res = maxMoves(s, t);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":261,"fileType":"csharp","requestStartTime":1517929206875}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        List<int> result = new List<int>();\n        \n        result.Add(array[0]);\n        \n        for(int i=1;i<array.Length;i++)\n        {\n            int value = array[i-1]-array[i];\n            if(value<-127 || value>127)\n                result.Add(-128);\n            \n            result.Add(value);\n        }\n        \n        return result.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":546,"fileType":"csharp","requestStartTime":1517929040467}}
{"body": {"column":34,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int sockMerchant(int n, int[] ar) \n    {\n        // Complete this function\n        int totalPairs = 0;\n        \n        if(ar != null)\n        {\n            Array.Sort(ar);\n            int number = 0;\n            int count = 0;\n            \n            for(int i=0; i <=n-1; ++i)\n            {\n                if(i == 0)\n                {\n                    number = ar[i];\n                }\n                else\n                {\n                    if(number == a[i])\n                    {\n                        count = count + 1;\n                    }\n                    else\n                    {\n                        number = ar[i];\n                        if(count >)\n                    }\n                }\n                \n            }\n        }\n        \n        return totalPairs;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = sockMerchant(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":794,"fileType":"csharp","requestStartTime":1517929052741}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = meal_cost * (tip_percent/100); \n        double tax = meal_cost * (tax_percent/100); \n        double totalCost = meal_cost + tip_percent + tax_percent;\n    Console.\n    }\n}\n\n","offset":526,"fileType":"csharp","requestStartTime":1517929121318}}
{"body": {"column":37,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            for(int i=1;i<callsTimes.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":322,"fileType":"csharp","requestStartTime":1517929448779}}
{"body": {"column":29,"line":24,"wordToComplete":"","code":"\n#region Usings\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Numerics;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Text;\nusing System.Threading;\nusing static System.Array;\nusing static System.Math;\n\n// ReSharper disable InconsistentNaming\n#pragma warning disable CS0675\n#endregion\n\npartial class Solution \n{\n\tint[] RevisedRussianRoulette(int[] doors)\n    {\n        int firstZero = Math.Array.IndexOf(doors, 0);\n        if (firstZero < 0)\n            return new int[] {(doors.Length+1)/2, Max(1, doors.Length - 1)};\n\n        var newDoors = new int[doors.Length];\n        for (int i = 0; i < doors.Length; i++)\n            newDoors[i] = doors[(i + firstZero) % doors.Length];\n\n        doors = newDoors;\n\n        int min = 0;\n        for (int i = 0; i < doors.Length; i++)\n        {\n            if (doors[i] == 0) continue;\n            if (doors[i] == 1)\n            {\n                min++;\n                if (i+1 <doors.Length && doors[i + 1] == 1)\n                    i++;\n            }\n        }\n\n        int max = 0;\n        for (int i = 0; i < doors.Length; i++)\n        {\n            if (doors[i] == 1) max++;\n        }\n\n        return new int[] {min, max};\n    }\n\t\n\tvoid Solve()\n\t{\n\t\tint n = Ni();\n\t\n\t\tint[] doors = Ni(n);\n\t\tint[] result = RevisedRussianRoulette(doors);\n\t\tWriteLine(string.Join(\" \", result));\n\t}\n\n    #region Mod Math\n    public const int MOD = 1000000007;\n    const int FactCache = 1000;\n\n    static int[] _inverse;\n    public static long Inverse(long n)\n    {\n        long result;\n\n        if (_inverse == null)\n            _inverse = new int[3000];\n\n        if (n < _inverse.Length && (result = _inverse[n]) != 0)\n            return result - 1;\n\n        result = ModPow(n, MOD - 2);\n        if (n < _inverse.Length)\n            _inverse[n] = (int)(result + 1);\n        return result;\n    }\n\n    public static long Mult(long left, long right) =>\n        (left * right) % MOD;\n\n    public static long Div(long left, long divisor) =>\n        left * Inverse(divisor) % MOD;\n\n    public static long Add(long x, long y) =>\n        (x += y) >= MOD ? x - MOD : x;\n\n    public static long Subtract(long x, long y) => (x -= y) < 0 ? x + MOD : x;\n\n    public static long Fix(long n) => (n %= MOD)>=0 ? n : n+MOD;\n\n    public static long ModPow(long n, long p, long mod = MOD)\n    {\n        long b = n;\n        long result = 1;\n        while (p != 0)\n        {\n            if ((p & 1) != 0)\n                result = (result * b) % mod;\n            p >>= 1;\n            b = (b * b) % mod;\n        }\n        return result;\n    }\n\n    static List<long> _fact, _ifact;\n\n    public static long Fact(int n)\n    {\n        if (_fact == null) _fact = new List<long>(FactCache) { 1 };\n        for (int i = _fact.Count; i <= n; i++)\n            _fact.Add(Mult(_fact[i - 1], i));\n        return _fact[n];\n    }\n\n    public static long InverseFact(int n)\n    {\n        if (_ifact == null) _ifact = new List<long>(FactCache) { 1 };\n        for (int i = _ifact.Count; i <= n; i++)\n            _ifact.Add(Div(_ifact[i - 1], i));\n        return _ifact[n];\n    }\n\n    public static long Fact(int n, int m)\n    {\n        var fact = Fact(n);\n        if (m < n) fact = fact * InverseFact(n - m) % MOD;\n        return fact;\n    }\n    \n    public static long Comb(int n, int k)\n    {\n        if (k <= 1) return k == 1 ? n : k == 0 ? 1 : 0;\n        return Mult(Mult(Fact(n), InverseFact(k)), InverseFact(n - k));\n    }\n    #endregion\n\n    #region Common\n    public static void Swap<T>(ref T a, ref T b)\n    {\n        var tmp = a;\n        a = b;\n        b = tmp;\n    }\n\n    public static void Clear<T>(T[] t, T value = default(T))\n    {\n        for (int i = 0; i < t.Length; i++)\n            t[i] = value;\n    }\n\n    public static V Get<K,V>(Dictionary<K,V> dict, K key) where V : new()\n    {\n        V result;\n        if (dict.TryGetValue(key, out result)==false)\n            result = dict[key] = new V();\n        return result;\n    }\n\n    public static int Bound<T>(T[] array, T value, bool upper = false)\n        where T : IComparable<T>\n    {\n        int left = 0;\n        int right = array.Length - 1;\n\n        while (left <= right)\n        {\n            int mid = left + (right - left) / 2;\n            int cmp = value.CompareTo(array[mid]);\n            if (cmp > 0 || cmp == 0 && upper)\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n        return left;\n    }\n\n    public static long IntPow(long n, long p)\n    {\n        long b = n;\n        long result = 1;\n        while (p != 0)\n        {\n            if ((p & 1) != 0)\n                result = (result * b);\n            p >>= 1;\n            b = (b * b);\n        }\n        return result;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int Log2(long value)\n    {\n        if (value <= 0)\n            return value == 0 ? -1 : 63;\n\n        var log = 0;\n        if (value >= 0x100000000L)\n        {\n            log += 32;\n            value >>= 32;\n        }\n        if (value >= 0x10000)\n        {\n            log += 16;\n            value >>= 16;\n        }\n        if (value >= 0x100)\n        {\n            log += 8;\n            value >>= 8;\n        }\n        if (value >= 0x10)\n        {\n            log += 4;\n            value >>= 4;\n        }\n        if (value >= 0x4)\n        {\n            log += 2;\n            value >>= 2;\n        }\n        if (value >= 0x2)\n        {\n            log += 1;\n        }\n        return log;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int BitCount(long x)\n    {\n        int count;\n        var y = unchecked((ulong)x);\n        for (count = 0; y != 0; count++)\n            y &= y - 1;\n        return count;\n    }\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static int HighestOneBit(int n) => n != 0 ? 1 << Log2(n) : 0;\n\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n    public static long HighestOneBit(long n) => n != 0 ? 1L << Log2(n) : 0;\n    #endregion\n\n    #region Fast IO\n    #region  Input\n    static System.IO.Stream inputStream;\n    static int inputIndex, bytesRead;\n    static byte[] inputBuffer;\n    static System.Text.StringBuilder builder;\n    const int MonoBufferSize = 4096;\n\n    public static void InitInput(System.IO.Stream input = null, int stringCapacity = 16)\n    {\n        builder = new System.Text.StringBuilder(stringCapacity);\n        inputStream = input ?? Console.OpenStandardInput();\n        inputIndex = bytesRead = 0;\n        inputBuffer = new byte[MonoBufferSize];\n    }\n\n    static void ReadMore()\n    {\n        if (bytesRead < 0) throw new FormatException();\n        inputIndex = 0;\n        bytesRead = inputStream.Read(inputBuffer, 0, inputBuffer.Length);\n        if (bytesRead > 0) return;\n        bytesRead = -1;\n        inputBuffer[0] = (byte)'\\n';\n    }\n\n    public static int Read()\n    {\n        if (inputIndex >= bytesRead) ReadMore();\n        return inputBuffer[inputIndex++];\n    }\n\n    public static T[] N<T>(int n, Func<T> func)\n    {\n        var list = new T[n];\n        for (int i = 0; i < n; i++) list[i] = func();\n        return list;\n    }\n\n    public static int[] Ni(int n) => N(n, Ni);\n\n    public static long[] Nl(int n) => N(n, Nl);\n\n    public static string[] Ns(int n) => N(n, Ns);\n\n    public static int Ni() => checked((int) Nl());\n\n    public static long Nl()\n    {\n        var c = SkipSpaces();\n        bool neg = c == '-';\n        if (neg) { c = Read(); }\n\n        long number = c - '0';\n        while (true)\n        {\n            var d = Read() - '0';\n            if (unchecked((uint)d > 9)) break;\n            number = number * 10 + d;\n            if (number < 0) throw new FormatException();\n        }\n        return neg ? -number : number;\n    }\n\n    public static char[] Nc(int n)\n    {\n        var list = new char[n];\n        for (int i = 0, c = SkipSpaces(); i < n; i++, c = Read()) list[i] = (char)c;\n        return list;\n    }\n\n    public static string Ns()\n    {\n        var c = SkipSpaces();\n        builder.Clear();\n        while (true)\n        {\n            if (unchecked((uint)c - 33 >= (127 - 33))) break;\n            builder.Append((char)c);\n            c = Read();\n        }\n        return builder.ToString();\n    }\n\n    public static int SkipSpaces()\n    {\n        int c;\n        do c = Read(); while (unchecked((uint)c - 33 >= (127 - 33)));\n        return c;\n    }\n\n    public static string ReadLine()\n    {\n        builder.Clear();\n        while (true)\n        {\n            int c = Read();\n            if (c < 32) { if (c == 10 || c <= 0) break; continue; }\n            builder.Append((char)c);\n        }\n        return builder.ToString();\n    }\n    #endregion\n\n    #region Output\n    static System.IO.Stream outputStream;\n    static byte[] outputBuffer;\n    static int outputIndex;\n\n    public static void InitOutput(System.IO.Stream output = null)\n    {\n        outputStream = output ?? Console.OpenStandardOutput();\n        outputIndex = 0;\n        outputBuffer = new byte[65535];\n    }\n\n    public static void WriteLine(object obj = null)\n    {\n        Write(obj);\n        Write('\\n');\n    }\n\n    public static void WriteLine(long number)\n    {\n        Write(number);\n        Write('\\n');\n    }\n\n    public static void Write(long signedNumber)\n    {\n        ulong number = unchecked((ulong)signedNumber);\n        if (signedNumber < 0)\n        {\n            Write('-');\n            number = unchecked((ulong)(-signedNumber));\n        }\n\n        Reserve(20 + 1); // 20 digits + 1 extra for sign\n        int left = outputIndex;\n        do\n        {\n            outputBuffer[outputIndex++] = (byte)('0' + number % 10);\n            number /= 10;\n        }\n        while (number > 0);\n\n        int right = outputIndex - 1;\n        while (left < right)\n        {\n            byte tmp = outputBuffer[left];\n            outputBuffer[left++] = outputBuffer[right];\n            outputBuffer[right--] = tmp;\n        }\n    }\n\n    public static void Write(object obj)\n    {\n        if (obj == null) return;\n\n        var s = obj.ToString();\n        Reserve(s.Length);\n        for (int i = 0; i < s.Length; i++)\n            outputBuffer[outputIndex++] = (byte)s[i];\n    }\n\n    public static void Write(char c)\n    {\n        Reserve(1);\n        outputBuffer[outputIndex++] = (byte)c;\n    }\n\n    public static void Write(byte[] array, int count)\n    {\n        Reserve(count);\n        Array.Copy(array, 0, outputBuffer, outputIndex, count);\n        outputIndex += count;\n    }\n\n    static void Reserve(int n)\n    {\n        if (outputIndex + n <= outputBuffer.Length)\n            return;\n\n        Dump();\n        if (n > outputBuffer.Length)\n            Array.Resize(ref outputBuffer, Math.Max(outputBuffer.Length * 2, n));\n    }\n\n    static void Dump()\n    {\n        outputStream.Write(outputBuffer, 0, outputIndex);\n        outputIndex = 0;\n    }\n\n    public static void Flush()\n    {\n        Dump();\n        outputStream.Flush();\n    }\n\n    #endregion\n    #endregion\n\n    #region Main\n\n    public static int TestCase()\n    {\n        return Directory.EnumerateFiles(\".\", \"input*.in\").\n            Max(f => int.Parse(f.Substring(f.Length - 8, 5)));\n    }\n\n    public static void Main()\n    {\n        AppDomain.CurrentDomain.UnhandledException += (sender, arg) => {\n            Flush();\n            var e = (Exception)arg.ExceptionObject;\n            Console.Error.WriteLine(e);\n            var line = new StackTrace(e, true).GetFrames()\n                .Select(x => x.GetFileLineNumber()).FirstOrDefault(x => x != 0);\n            var wait = line % 300 * 10 + 5;\n            var process = Process.GetCurrentProcess();\n            while (process.TotalProcessorTime.TotalMilliseconds > wait && wait < 3000) wait += 1000;\n            while (process.TotalProcessorTime.TotalMilliseconds < Math.Min(wait, 3000)) ;\n            Environment.Exit(1);\n        };\n\n        InitInput(Console.OpenStandardInput());\n        InitOutput(Console.OpenStandardOutput());\n#if __MonoCS__\n        var thread = new Thread(()=>new Solution().Solve());\n        var f = BindingFlags.NonPublic | BindingFlags.Instance;\n        var t = typeof(Thread).GetField(\"internal_thread\", f).GetValue(thread);\n        t.GetType().GetField(\"stack_size\", f).SetValue(t, 32 * 1024 * 1024);\n        thread.Start();\n        thread.Join();\n#else\n\t\tnew Solution().Solve();\n#endif\n        Flush();\n        Console.Error.WriteLine(Process.GetCurrentProcess().TotalProcessorTime);\n    }\n    #endregion\n}\n\n\n","offset":524,"fileType":"csharp","requestStartTime":1517929682727}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":235,"fileType":"csharp","requestStartTime":1517929787484}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long min = long.;\n        long max = 0;\n        long sum = 0;\n        \n        for (int i = 0;i < arr.Length;i++) {\n            var item = (long) arr[i];\n            \n            if (i == 0) {\n                min = item;\n                max = item;\n                continue;\n            }\n                        \n            if (min > item) {\n                min = item;\n            } \n            \n            if (max < item) {\n                max = item;\n            } \n            \n            sum += item;\n        }\n        \n        Console.WriteLine(String.Concat(sum - max, \" \", sum - min));\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":168,"fileType":"csharp","requestStartTime":1517929794932}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long min = long.MaxValue;\n        long max = lon.;\n        long sum = 0;\n        \n        for (int i = 0;i < arr.Length;i++) {\n            var item = (long) arr[i];\n            \n            if (i == 0) {\n                min = item;\n                max = item;\n                continue;\n            }\n                        \n            if (min > item) {\n                min = item;\n            } \n            \n            if (max < item) {\n                max = item;\n            } \n            \n            sum += item;\n        }\n        \n        Console.WriteLine(String.Concat(sum - max, \" \", sum - min));\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":201,"fileType":"csharp","requestStartTime":1517929800827}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long min = long.MaxValue;\n        long max = long.;\n        long sum = 0;\n        \n        for (int i = 0;i < arr.Length;i++) {\n            var item = (long) arr[i];\n            \n            if (i == 0) {\n                min = item;\n                max = item;\n                continue;\n            }\n                        \n            if (min > item) {\n                min = item;\n            } \n            \n            if (max < item) {\n                max = item;\n            } \n            \n            sum += item;\n        }\n        \n        Console.WriteLine(String.Concat(sum - max, \" \", sum - min));\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":202,"fileType":"csharp","requestStartTime":1517929802603}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i = n;i >= 0;i--){\n            Console.\n        }\n    }\n}\n\n\n","offset":378,"fileType":"csharp","requestStartTime":1517929820842}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        foreach(string str in a) {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":274,"fileType":"csharp","requestStartTime":1517929839269}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.)\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":220,"fileType":"csharp","requestStartTime":1517930001846}}
{"body": {"column":14,"line":13,"wordToComplete":"le","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.le)\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":222,"fileType":"csharp","requestStartTime":1517930005316}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.]\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":257,"fileType":"csharp","requestStartTime":1517930010523}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr) {\n        // Complete this function\n        int count=0;\n        for(int i=0;i<arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1517930032579}}
{"body": {"column":33,"line":14,"wordToComplete":"find","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.Length > width){\n        var lastSpace = text.find\n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":270,"fileType":"csharp","requestStartTime":1517930060259}}
{"body": {"column":29,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.Length > width){\n        var lastSpace = text.\n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":266,"fileType":"csharp","requestStartTime":1517930061859}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":304,"fileType":"csharp","requestStartTime":1517930066791}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":304,"fileType":"csharp","requestStartTime":1517930076378}}
{"body": {"column":34,"line":14,"wordToComplete":"Las","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.Length > width){\n        var lastSpace = String.Las\n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":271,"fileType":"csharp","requestStartTime":1517930082899}}
{"body": {"column":30,"line":14,"wordToComplete":"L","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.Length > width){\n        var lastSpace = text.L\n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":267,"fileType":"csharp","requestStartTime":1517930087931}}
{"body": {"column":46,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    if(text.Length > width){\n        var lastSpace = text.LastIndexOf(' ');\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":283,"fileType":"csharp","requestStartTime":1517930102335}}
{"body": {"column":16,"line":13,"wordToComplete":"Erro","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Erro\n    if(text.Length > width){\n        var lastSpace = text.LastIndexOf(' ');\n        \n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":224,"fileType":"csharp","requestStartTime":1517930114715}}
{"body": {"column":20,"line":13,"wordToComplete":"Wr","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.Wr\n    if(text.Length > width){\n        var lastSpace = text.LastIndexOf(' ');\n        \n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":228,"fileType":"csharp","requestStartTime":1517930116524}}
{"body": {"column":34,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    if(text.Length > width){\n        var lastSpace = text.LastIndexOf(' ');\n        \n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":242,"fileType":"csharp","requestStartTime":1517930123774}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":339,"fileType":"csharp","requestStartTime":1517930131821}}
{"body": {"column":35,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":354,"fileType":"csharp","requestStartTime":1517930141130}}
{"body": {"column":20,"line":59,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n        static List<int> FindPrimeList(int num){\n            List<int> result = new List<int>();\n            var sqr = Math.Sqrt(num);\n            while(num%2==0) {\n                result.Add(2);\n                num /=2;\n            }\n            for(int i=3; i<sqr; i+=2){\n                while(num%i==0) {\n                    result.Insert(0,i);\n                    num /=i;\n                }\n            }\n            if(num > 1) result.Insert(0,num);\n            \n            //Console.WriteLine(string.Join(\" \", result));\n            \n            return result;\n        }\n        \n        static bool IsValid(int num){\n            var primeList = FindPrimeList(num);\n            int num1=1;\n            int num2=1;\n            \n            foreach(var n in primeList){\n                if(num1<num2) num1*=n;\n                else num2*=n;\n            }\n            \n            //Console.WriteLine(num1 + \" <> \" + num2);\n            \n            return num1 > 99 && num2 > 99 && num1 < 1000 && num2 < 1000;\n        }\n        \n        static int Solve(int n){\n            for(int a = 9; a>=1; a-- )\n                for(int b = 9; b>=0; b--)\n                for(int c= 9; c>=1; c--){\n                int num = a * 100001 + b * 10010 + c * 1100;\n                //Console.WriteLine(\"Num => \" + num);\n                if(num<n && IsValid(num) ){\n                    return num;\n                }\n            }\n            \n            return 0;\n        }\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            Console.\n        }\n    }\n}\n\n\n","offset":1765,"fileType":"csharp","requestStartTime":1517930162322}}
{"body": {"column":14,"line":16,"wordToComplete":"S","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        text.S\n        var lastSpace = text.LastIndexOf(' ');\n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":322,"fileType":"csharp","requestStartTime":1517930180357}}
{"body": {"column":32,"line":17,"wordToComplete":"SubLastIndexOf","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        text.S\n        var lastSpace = text.SubLastIndexOf(' ');\n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":355,"fileType":"csharp","requestStartTime":1517930209502}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(int i = 0 ;)\n        var lastSpace = text.Substring(0, width).LastIndexOf(' ');\n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":331,"fileType":"csharp","requestStartTime":1517930347544}}
{"body": {"column":23,"line":16,"wordToComplete":"wid","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = wid)\n        var lastSpace = text.Substring(0, width).LastIndexOf(' ');\n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":331,"fileType":"csharp","requestStartTime":1517930383869}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = width;)\n        var lastSpace = text.Substring(0, width).LastIndexOf(' ');\n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":334,"fileType":"csharp","requestStartTime":1517930385687}}
{"body": {"column":43,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = width; i < text.Length;)\n        var lastSpace = text.Substring(0, width).LastIndexOf(' ');\n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":351,"fileType":"csharp","requestStartTime":1517930393567}}
{"body": {"column":35,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":399,"fileType":"csharp","requestStartTime":1517930413758}}
{"body": {"column":45,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":409,"fileType":"csharp","requestStartTime":1517930420116}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = width; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(0, width).LastIndexOf(' ');    \n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":352,"fileType":"csharp","requestStartTime":1517930423695}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.\n            \n            \n            \n        }\n    }\n}\n\n\n","offset":317,"fileType":"csharp","requestStartTime":1517930432384}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":459,"fileType":"csharp","requestStartTime":1517930434796}}
{"body": {"column":45,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].ToLower().\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":469,"fileType":"csharp","requestStartTime":1517930439012}}
{"body": {"column":39,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c =>)\n            \n            \n            \n        }\n    }\n}\n\n\n","offset":329,"fileType":"csharp","requestStartTime":1517930442720}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr) {\n        // Complete this function\n        int count=0;\n        for(int i=0;i<arr.Length-3;i++){\n            if(arr.){\n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1517930466240}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.\n            foreach(var group in groups)\n            {\n                if()\n            }\n        }\n    }\n}\n\n\n","offset":375,"fileType":"csharp","requestStartTime":1517930507528}}
{"body": {"column":41,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g =>)\n            foreach(var group in groups)\n            {\n                if()\n            }\n        }\n    }\n}\n\n\n","offset":388,"fileType":"csharp","requestStartTime":1517930514600}}
{"body": {"column":44,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.)\n            foreach(var group in groups)\n            {\n                if()\n            }\n        }\n    }\n}\n\n\n","offset":391,"fileType":"csharp","requestStartTime":1517930515465}}
{"body": {"column":44,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.)\n            foreach(var group in groups)\n            {\n                if()\n            }\n        }\n    }\n}\n\n\n","offset":391,"fileType":"csharp","requestStartTime":1517930518856}}
{"body": {"column":25,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                if(group.)\n            }\n        }\n    }\n}\n\n\n","offset":484,"fileType":"csharp","requestStartTime":1517930538582}}
{"body": {"column":45,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.)\n            }\n        }\n    }\n}\n\n\n","offset":504,"fileType":"csharp","requestStartTime":1517930550180}}
{"body": {"column":21,"line":19,"wordToComplete":"Repl","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            text.Repl\n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":501,"fileType":"csharp","requestStartTime":1517930590103}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.\n        }\n    }\n}\n\n\n","offset":624,"fileType":"csharp","requestStartTime":1517930596869}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.Writeline(\"Yes\");\n            else\n                Console.\n        }\n    }\n}\n\n\n","offset":683,"fileType":"csharp","requestStartTime":1517930606517}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups.Contains(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.Writeline(\"Yes\");\n            else\n                Console.\n        }\n    }\n}\n\n\n","offset":683,"fileType":"csharp","requestStartTime":1517930622947}}
{"body": {"column":46,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            char[] chars = text.toCharArray();\n                \n            text.\n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":526,"fileType":"csharp","requestStartTime":1517930649631}}
{"body": {"column":36,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            char[] chars = text.toCharArray();\n            chars[lastSpace] = '\\n';\n            text.\n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":563,"fileType":"csharp","requestStartTime":1517930661048}}
{"body": {"column":27,"line":21,"wordToComplete":"To","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            char[] chars = text.toCharArray();\n            chars[lastSpace] = '\\n';\n            text = chars.To\n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":591,"fileType":"csharp","requestStartTime":1517930674943}}
{"body": {"column":36,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            char[] chars = text.toCharArray();\n            chars[lastSpace] = '\\n';\n            text = chars.ToString();\n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":600,"fileType":"csharp","requestStartTime":1517930679631}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].ToLower().ToCharArray();\n                \n                Array.\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":523,"fileType":"csharp","requestStartTime":1517930686736}}
{"body": {"column":37,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i =+ width){\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            char[] chars = text.toCharArray();\n            chars[lastSpace] = '\\n';\n            text = new String(chars);\n        }\n        \n        \n        Console.Error.WriteLine(lastSpace);\n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":601,"fileType":"csharp","requestStartTime":1517930692079}}
{"body": {"column":22,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].ToLower().ToCharArray();\n                \n                Array.Sort(wOne);\n                Array.\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":557,"fileType":"csharp","requestStartTime":1517930692928}}
{"body": {"column":47,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i =+ width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            Console.Error.WriteLine(lastSpace);\n            char[] chars = text.toCharArray();\n            chars[lastSpace] = '\\n';\n            text = new String(chars);\n        }\n        \n        \n        \n            \n    }\n     return \"##To Implement##\";\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":448,"fileType":"csharp","requestStartTime":1517930731215}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = text.Substring(i, i+width).LastIndexOf(' '); \n            Console.Error.WriteLine(lastSpace);\n            char[] chars = text.toCharArray();\n            chars[lastSpace] = '\\n';\n            text = new String(chars);\n        }\n        \n        \n        \n            \n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":765,"fileType":"csharp","requestStartTime":1517930748848}}
{"body": {"column":40,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int endPosition = unsortedArray.\n    }\n}\n\n\n","offset":413,"fileType":"csharp","requestStartTime":1517930758922}}
{"body": {"column":33,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c);\n            \n            var ok = groups['_'].;\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.Writeline(\"Yes\");\n            else\n                Console.Writeline(\"No\");\n        }\n    }\n}\n\n\n","offset":380,"fileType":"csharp","requestStartTime":1517930766879}}
{"body": {"column":43,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).;\n            \n            var ok = groups['_'].Count;\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.Writeline(\"Yes\");\n            else\n                Console.Writeline(\"No\");\n        }\n    }\n}\n\n\n","offset":333,"fileType":"csharp","requestStartTime":1517930788670}}
{"body": {"column":46,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.)\n        }\n    }\n}\n\n\n","offset":591,"fileType":"csharp","requestStartTime":1517930791391}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.)\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":380,"fileType":"csharp","requestStartTime":1517930806423}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                calls.\n            }\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":428,"fileType":"csharp","requestStartTime":1517930834193}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.\n            }\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":461,"fileType":"csharp","requestStartTime":1517930850899}}
{"body": {"column":40,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int rtrnVal[] = new rtrnVal[a.Length];\n        \n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].ToLower().ToCharArray();\n                \n                Array.Sort(wOne);\n                Array.Sort(wTwo);\n                \n                for(int v = 0; v < wOne.)\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":626,"fileType":"csharp","requestStartTime":1517930854450}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.\n            }\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":505,"fileType":"csharp","requestStartTime":1517930866799}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.\n            }\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":568,"fileType":"csharp","requestStartTime":1517930883104}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).ToList();\n\n            \n            var ok = groups.['_'].Count() > 0;\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.WriteLine(\"Yes\");\n            else\n                Console.WriteLine(\"No\");\n        }\n    }\n}\n\n\n","offset":385,"fileType":"csharp","requestStartTime":1517930888076}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).ToList();\n\n            \n            var ok = groups.['_'].Count() > 0;\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.WriteLine(\"Yes\");\n            else\n                Console.WriteLine(\"No\");\n        }\n    }\n}\n\n\n","offset":385,"fileType":"csharp","requestStartTime":1517930903163}}
{"body": {"column":41,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).ToList();\n\n            \n            var ok = groups.Exist(g => g.)['_'].Count() > 0;\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.WriteLine(\"Yes\");\n            else\n                Console.WriteLine(\"No\");\n        }\n    }\n}\n\n\n","offset":398,"fileType":"csharp","requestStartTime":1517930907850}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            calls.\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":617,"fileType":"csharp","requestStartTime":1517930918654}}
{"body": {"column":33,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            calls.FindAll(x => x.\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":632,"fileType":"csharp","requestStartTime":1517930934282}}
{"body": {"column":28,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution\n{\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).ToList();\n\n            \n            var ok = groups..Exist(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                if(group.Key != '_' && group.Count() % 2 != 0)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.WriteLine(\"Yes\");\n            else\n                Console.WriteLine(\"No\");\n        }\n    }\n}\n\n\n","offset":385,"fileType":"csharp","requestStartTime":1517930946932}}
{"body": {"column":40,"line":24,"wordToComplete":"Sub","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            if(i+width < text.Length){\n                var lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                var lastSpace = text.Sub\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n        }\n        \n        \n            \n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":684,"fileType":"csharp","requestStartTime":1517930949160}}
{"body": {"column":47,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            calls.FindAll(x => x.Start >= call.\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":646,"fileType":"csharp","requestStartTime":1517930954122}}
{"body": {"column":55,"line":24,"wordToComplete":"LastI","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            if(i+width < text.Length){\n                var lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                var lastSpace = text.Substring(i).LastI\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n        }\n        \n        \n            \n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":699,"fileType":"csharp","requestStartTime":1517930957072}}
{"body": {"column":67,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            if(i+width < text.Length){\n                var lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                var lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n        }\n        \n        \n            \n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":711,"fileType":"csharp","requestStartTime":1517930961560}}
{"body": {"column":55,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            calls.FindAll(x => x.Start >= c.Start || x.\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":654,"fileType":"csharp","requestStartTime":1517930965212}}
{"body": {"column":64,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            calls.FindAll(x => x.Start >= c.Start || x.End <= c.\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":663,"fileType":"csharp","requestStartTime":1517930969624}}
{"body": {"column":30,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                var lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                var lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n        }\n        \n        \n            \n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":520,"fileType":"csharp","requestStartTime":1517930977376}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int swapCount = 0;\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.Length - 1; i++)\n            {\n                if (unsortedArray[i] > unsortedArray[i + 1])\n                {\n                    int temp = unsortedArray[i];\n                    unsortedArray[i] = unsortedArray[i + 1];\n                    unsortedArray[i + 1] = temp;\n                    \n                    swapPosition = i;\n                    swapCount++;\n                }\n            }\n            \n            endPosition = swapPosition;\n        }\n        \n        Console.\n    }\n}\n\n\n","offset":1099,"fileType":"csharp","requestStartTime":1517931009643}}
{"body": {"column":31,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            var concurrentCalls = calls.FindAll(x => x.Start >= c.Start || x.End <= c.End);\n            if(concurrentCalls.)\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":722,"fileType":"csharp","requestStartTime":1517931013496}}
{"body": {"column":33,"line":39,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int swapCount = 0;\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.Length - 1; i++)\n            {\n                if (unsortedArray[i] > unsortedArray[i + 1])\n                {\n                    int temp = unsortedArray[i];\n                    unsortedArray[i] = unsortedArray[i + 1];\n                    unsortedArray[i + 1] = temp;\n                    \n                    swapPosition = i;\n                    swapCount++;\n                }\n            }\n            \n            endPosition = swapPosition;\n        }\n        \n        Console.WriteLine(string.)\n    }\n}\n\n\n","offset":1116,"fileType":"csharp","requestStartTime":1517931015605}}
{"body": {"column":70,"line":39,"wordToComplete":"Array is sorted in {0} swaps.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int swapCount = 0;\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.Length - 1; i++)\n            {\n                if (unsortedArray[i] > unsortedArray[i + 1])\n                {\n                    int temp = unsortedArray[i];\n                    unsortedArray[i] = unsortedArray[i + 1];\n                    unsortedArray[i + 1] = temp;\n                    \n                    swapPosition = i;\n                    swapCount++;\n                }\n            }\n            \n            endPosition = swapPosition;\n        }\n        \n        Console.WriteLine(string.Format(\"Array is sorted in {0} swaps.\"))\n    }\n}\n\n\n","offset":1153,"fileType":"csharp","requestStartTime":1517931023736}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int lngth = a.\n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].ToLower().ToCharArray();\n                \n                Array.Sort(wOne);\n                Array.Sort(wTwo);\n                \n                int Count = 0;\n                for(int v = 0; v < wOne.Length; v++) {\n                    if(wOne[v] != wTwo[v]) {\n                        Count++;\n                    }\n                }\n                returnVal[i] = Count;\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":241,"fileType":"csharp","requestStartTime":1517931024064}}
{"body": {"column":50,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            var concurrentCalls = calls.FindAll(x => x.Start >= c.Start || x.End <= c.End);\n            if(concurrentCalls.Count > expected_agents)\n                expected_agents = concurrentCalls.\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":797,"fileType":"csharp","requestStartTime":1517931032743}}
{"body": {"column":16,"line":40,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int swapCount = 0;\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.Length - 1; i++)\n            {\n                if (unsortedArray[i] > unsortedArray[i + 1])\n                {\n                    int temp = unsortedArray[i];\n                    unsortedArray[i] = unsortedArray[i + 1];\n                    unsortedArray[i + 1] = temp;\n                    \n                    swapPosition = i;\n                    swapCount++;\n                }\n            }\n            \n            endPosition = swapPosition;\n        }\n        \n        Console.WriteLine(string.Format(\"Array is sorted in {0} swaps.\", swapCount));\n        Console.\n    }\n}\n\n\n","offset":1185,"fileType":"csharp","requestStartTime":1517931044091}}
{"body": {"column":36,"line":29,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int howManyAgentsToAdd(int noOfCurrentAgents, int[][] callsTimes) {\n\n            int expected_agents = 0;\n            \n            List<Call> calls = new List<Call>();\n        \n            for(int i=0;i<callsTimes.Length;i++)\n            {\n                Call c = new Call();\n                c.Start = callsTimes[i][0];\n                c.End = callsTimes[i][1];\n                \n                calls.Add(c);\n            }\n        \n            var concurrentCalls = calls.FindAll(x => x.Start >= c.Start || x.End <= c.End);\n            if(concurrentCalls.Count > expected_agents)\n                expected_agents = concurrentCalls.Count;\n        \n            return expected_agents .\n    }\n\n    class Call\n    {\n        int Start { get; set; }\n        int End { get; set; }\n    }\n    \n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int noOfCurrentAgents;\n        noOfCurrentAgents = Convert.ToInt32(Console.ReadLine());\n\n        int callsTimes_rows = 0;\n        int callsTimes_cols = 0;\n        callsTimes_rows = Convert.ToInt32(Console.ReadLine());\n        callsTimes_cols = Convert.ToInt32(Console.ReadLine());\n\n        int[][] callsTimes = new int[callsTimes_rows][];\n        for(int callsTimes_i = 0; callsTimes_i < callsTimes_rows; callsTimes_i++) {\n            string[] callsTimes_temp = Console.ReadLine().Split(' ');\n            callsTimes[callsTimes_i] = Array.ConvertAll(callsTimes_temp,Int32.Parse);\n\n        }\n\n        res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":849,"fileType":"csharp","requestStartTime":1517931048196}}
{"body": {"column":33,"line":40,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int swapCount = 0;\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.Length - 1; i++)\n            {\n                if (unsortedArray[i] > unsortedArray[i + 1])\n                {\n                    int temp = unsortedArray[i];\n                    unsortedArray[i] = unsortedArray[i + 1];\n                    unsortedArray[i + 1] = temp;\n                    \n                    swapPosition = i;\n                    swapCount++;\n                }\n            }\n            \n            endPosition = swapPosition;\n        }\n        \n        Console.WriteLine(string.Format(\"Array is sorted in {0} swaps.\", swapCount));\n        Console.WriteLine(string.)\n    }\n}\n\n\n","offset":1202,"fileType":"csharp","requestStartTime":1517931053361}}
{"body": {"column":35,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = new string(sb):;\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":935,"fileType":"csharp","requestStartTime":1517931062864}}
{"body": {"column":34,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = new string(sb);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":934,"fileType":"csharp","requestStartTime":1517931064249}}
{"body": {"column":34,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int lngth = a.Length;\n        int rtrnVal[] = new int[a.]\n        for(int i = 0; i < a.Length; i++) {\n            if(a[i].Length == b[i].Length) {\n                char[] wOne = a[i].ToLower().ToCharArray();\n                char[] wTwo = b[i].ToLower().ToCharArray();\n                \n                Array.Sort(wOne);\n                Array.Sort(wTwo);\n                \n                int Count = 0;\n                for(int v = 0; v < wOne.Length; v++) {\n                    if(wOne[v] != wTwo[v]) {\n                        Count++;\n                    }\n                }\n                returnVal[i] = Count;\n            }\n            else {\n                //Error Case for not correct string lengths\n                rtrnVal[i] = -1;\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":283,"fileType":"csharp","requestStartTime":1517931068365}}
{"body": {"column":23,"line":31,"wordToComplete":"T","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.T\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":923,"fileType":"csharp","requestStartTime":1517931079968}}
{"body": {"column":33,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":933,"fileType":"csharp","requestStartTime":1517931081912}}
{"body": {"column":89,"line":41,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n    }\n    \n    static void BubbleSort(int[] unsortedArray)\n    {\n        int swapCount = 0;\n        int endPosition = unsortedArray.Length - 1;\n        int swapPosition;\n        \n        while (endPosition > 0)\n        {\n            swapPosition = 0;\n            \n            for (int i = 0; i < unsortedArray.Length - 1; i++)\n            {\n                if (unsortedArray[i] > unsortedArray[i + 1])\n                {\n                    int temp = unsortedArray[i];\n                    unsortedArray[i] = unsortedArray[i + 1];\n                    unsortedArray[i + 1] = temp;\n                    \n                    swapPosition = i;\n                    swapCount++;\n                }\n            }\n            \n            endPosition = swapPosition;\n        }\n        \n        Console.WriteLine(string.Format(\"Array is sorted in {0} swaps.\", swapCount));\n        Console.WriteLine(string.Format(\"First Element: {0}\", unsortedArray[0]));\n        Console.WriteLine(string.Format(\"Last Element: {0}\", unsortedArray[unsortedArray.]));\n    }\n}\n\n\n","offset":1340,"fileType":"csharp","requestStartTime":1517931085092}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        int buff;\n        int index;\n        for(var i = 0; i < a.)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517931105058}}
{"body": {"column":44,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n            Console.Error.WriteLine(text);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":394,"fileType":"csharp","requestStartTime":1517931159352}}
{"body": {"column":53,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            if(i+width < text.Length){\n                var txt = text.Substring(i, i+width);\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            \n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n            Console.Error.WriteLine(text);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":658,"fileType":"csharp","requestStartTime":1517931190272}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        return getHeight(1+(Math.))\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":295,"fileType":"csharp","requestStartTime":1517931204729}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution\n{\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).ToList();\n\n            \n            var ok = groups.Exists(g => g.Key == '_');\n            foreach(var group in groups)\n            {\n                Console.\n                if(group.Key != '_' && group.Count() == 1)\n                    ok = false;\n            }\n            \n            if(ok)\n                Console.WriteLine(\"YES\");\n            else\n                Console.WriteLine(\"NO\");\n        }\n    }\n}\n\n\n","offset":491,"fileType":"csharp","requestStartTime":1517931206099}}
{"body": {"column":42,"line":13,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        return getHeight(1+(Math.Max(root.))\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":304,"fileType":"csharp","requestStartTime":1517931210258}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                var txt = text.Substring(i, i+width);\n                lastSpace = text.Substring(i, i+width).LastIndexOf(' ');     \n            }\n            else {\n                var txt = text.Substring(i);\n                lastSpace = text.Substring(i).LastIndexOf(' ');\n            }\n            lastSpace\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(text);\n            sb[lastSpace] = '\\n';\n            text = sb.ToString();\n            Console.Error.WriteLine(text);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":586,"fileType":"csharp","requestStartTime":1517931211768}}
{"body": {"column":29,"line":13,"wordToComplete":"geroot","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        return 1+(Math.Max(geroot.left))\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":291,"fileType":"csharp","requestStartTime":1517931227475}}
{"body": {"column":30,"line":13,"wordToComplete":"get","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        return 1+(Math.Max(get root.left))\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":292,"fileType":"csharp","requestStartTime":1517931229574}}
{"body": {"column":26,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        int buff;\n        int index;\n        for(var i = 0; i < a.Length; i++) {\n            buf = a[i];\n            index = i;\n            var ni = Math.\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":340,"fileType":"csharp","requestStartTime":1517931233738}}
{"body": {"column":15,"line":33,"wordToComplete":"Psb","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Psb.ToString();\n            Console.Error.WriteLine(text);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":962,"fileType":"csharp","requestStartTime":1517931248017}}
{"body": {"column":58,"line":13,"wordToComplete":"getHeight","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        return 1+(Math.Max(getHeight(root.left), getHeight)\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":320,"fileType":"csharp","requestStartTime":1517931248796}}
{"body": {"column":16,"line":33,"wordToComplete":"Pu","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Pu\n            Console.Error.WriteLine(text);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":963,"fileType":"csharp","requestStartTime":1517931250072}}
{"body": {"column":14,"line":33,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.\n            Console.Error.WriteLine(text);\n        }\n    }\n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":961,"fileType":"csharp","requestStartTime":1517931251672}}
{"body": {"column":64,"line":13,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        return 1+(Math.Max(getHeight(root.left), getHeight(root.)\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":326,"fileType":"csharp","requestStartTime":1517931253667}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        int buff;\n        int index;\n        var len = a.\n        for(var i = 0; i < a.Length; i++) {\n            buf = a[i];\n            index = i;\n            var ni = Math.Abs((i + d) % )\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":243,"fileType":"csharp","requestStartTime":1517931257153}}
{"body": {"column":15,"line":40,"wordToComplete":"J","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt)\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n\n    }\n    \n     return l.J;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":1091,"fileType":"csharp","requestStartTime":1517931280264}}
{"body": {"column":15,"line":40,"wordToComplete":"J","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt)\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n\n    }\n    \n     return l.J;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":1091,"fileType":"csharp","requestStartTime":1517931281112}}
{"body": {"column":14,"line":40,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt)\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n\n    }\n    \n     return l.;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":1090,"fileType":"csharp","requestStartTime":1517931281529}}
{"body": {"column":13,"line":37,"wordToComplete":"Joi","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt)\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n        l.Joi\n    }\n    \n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":1077,"fileType":"csharp","requestStartTime":1517931293745}}
{"body": {"column":17,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt)\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n        l.Join();\n    }\n    \n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":1081,"fileType":"csharp","requestStartTime":1517931301001}}
{"body": {"column":23,"line":33,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt;\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt);\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n        return l.Join();\n    }\n    \n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":970,"fileType":"csharp","requestStartTime":1517931310753}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        int buff;\n        int index;\n        var na = new int[a.];\n        var len = a.Length;\n        for(var i = 0; i < len; i++) {\n            buf = a[i];\n            index = i;\n            var ni = Math.Abs((i + d) % len);\n            buf\n        }\n        return na;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517931345697}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Math.\n        return 1+(Math.Max(getHeight(root.left), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":275,"fileType":"csharp","requestStartTime":1517931376870}}
{"body": {"column":35,"line":37,"wordToComplete":"To","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt = \"\";\n            if(i+width < text.Length){\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt);\n            Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n        return String.Join(\"\", l.To);\n    }\n    \n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":1105,"fileType":"csharp","requestStartTime":1517931427434}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":191,"fileType":"csharp","requestStartTime":1517931439467}}
{"body": {"column":37,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution\n{\n    static void Main(String[] args)\n    {\n        int Q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < Q; a0++)\n        {\n            Console.ReadLine();\n            string b = Console.ReadLine();\n            var groups = b.GroupBy(c => c).ToList();\n\n            \n            var ok = groups.Exists(g => g.Key == '_');\n            if(ok)\n            {\n                foreach(var group in groups)\n                {\n                    if(group.Key != '_' && group.Count() == 1)\n                        ok = false;\n                }\n            }\n            else\n            {\n                var count = 0;\n                for(int i = 0; i < b.)\n            }\n            \n            if(ok)\n                Console.WriteLine(\"YES\");\n            else\n                Console.WriteLine(\"NO\");\n        }\n    }\n}\n\n\n","offset":770,"fileType":"csharp","requestStartTime":1517931455073}}
{"body": {"column":34,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":215,"fileType":"csharp","requestStartTime":1517931471282}}
{"body": {"column":47,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":228,"fileType":"csharp","requestStartTime":1517931489938}}
{"body": {"column":50,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":231,"fileType":"csharp","requestStartTime":1517931499674}}
{"body": {"column":61,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":242,"fileType":"csharp","requestStartTime":1517931533513}}
{"body": {"column":58,"line":24,"wordToComplete":"wi","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i+width < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt = \"\";\n            if(i+width < text.Length){\n                Console.Error.WriteLine(\"i+width : \"+(i+wi));\n\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt);\n            //Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n        return String.Join(\"\", l.ToArray());\n    }\n    \n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":695,"fileType":"csharp","requestStartTime":1517931553682}}
{"body": {"column":51,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nclass Solution \n{\n/*\n * Complete the function below.\n */\nstatic string Wrap(string text, int width) \n{\n    Console.Error.WriteLine(text);\n    Console.Error.WriteLine(text.Length);\n    Console.Error.WriteLine(width);\n    if(text.Length > width){\n        List<String> l = new List<String>();\n        for(var i = 0; i+width < text.Length; i +=width){\n            Console.Error.WriteLine(i);\n            Console.Error.WriteLine(i + width);\n            var lastSpace = 0;\n            var txt = \"\";\n            if(i+width < text.Length){\n                Console.Error.WriteLine(\"i+width : \"+(i+width));\n                Console.Error.WriteLine(\"Len\"+text.);\n\n                txt = text.Substring(i, i+width);\n            }\n            else {\n                txt = text.Substring(i);\n            }\n            lastSpace = txt.LastIndexOf(' ');\n            Console.Error.WriteLine(lastSpace);\n            StringBuilder sb = new StringBuilder(txt);\n            sb[lastSpace] = '\\n';\n            l.Add(txt);\n            //Console.Error.WriteLine(txt);\n        }\n        Console.Error.WriteLine(l.Count);\n        return String.Join(\"\", l.ToArray());\n    }\n    \n     return text;\n}\n\n\nstatic void Main(String[] args) \n{\n    Console.InputEncoding = Encoding.UTF8;\n    Console.OutputEncoding = Encoding.UTF8;\n\n    string res;\n\n    int _width;\n    _width = Convert.ToInt32(Console.ReadLine());\n\n    string _text = String.Empty;\n    string consoleLine;\n    do\n    {\n        consoleLine = Console.ReadLine();\n        _text+=consoleLine + \"\\n\";\n    }\n    while(consoleLine != null);\n    _text = _text.TrimEnd('\\n');\n\n    res = Wrap(_text,_width);\n    Console.Write(res); \n\n}\n}\n","offset":753,"fileType":"csharp","requestStartTime":1517931570738}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.\n        return 1+(Math.Max(getHeight(root.left), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":278,"fileType":"csharp","requestStartTime":1517931580175}}
{"body": {"column":47,"line":14,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.WriteLine(\n        return 1+(Math.Max(getHeight(root.left.), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":336,"fileType":"csharp","requestStartTime":1517931596228}}
{"body": {"column":42,"line":14,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.WriteLine(\n        return 1+(Math.Max(getHeight(root.), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":331,"fileType":"csharp","requestStartTime":1517931599494}}
{"body": {"column":44,"line":14,"wordToComplete":"da","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.WriteLine(\n        return 1+(Math.Max(getHeight(root.da), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":333,"fileType":"csharp","requestStartTime":1517931601201}}
{"body": {"column":44,"line":14,"wordToComplete":"da","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.WriteLine(\n        return 1+(Math.Max(getHeight(root.da ), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":333,"fileType":"csharp","requestStartTime":1517931603277}}
{"body": {"column":42,"line":14,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.WriteLine(\n        return 1+(Math.Max(getHeight(root. ), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":331,"fileType":"csharp","requestStartTime":1517931604954}}
{"body": {"column":72,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":253,"fileType":"csharp","requestStartTime":1517931616623}}
{"body": {"column":40,"line":13,"wordToComplete":"","code":"using System;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic int getHeight(Node root){\n      //Write your code here\n        int count = 0;\n        Console.WriteLine(\"Here\" + root.\n        return 1+(Math.Max(getHeight(root.left), getHeight(root.right)));\n    }\n  \n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        int height=getHeight(root);\n        Console.WriteLine(height);\n        \n    }\n}\n","offset":302,"fileType":"csharp","requestStartTime":1517931618867}}
{"body": {"column":84,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1).Min(x=>Math.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":265,"fileType":"csharp","requestStartTime":1517931648279}}
{"body": {"column":93,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1).Min(x=>Math.Abs(x[1].))\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":274,"fileType":"csharp","requestStartTime":1517931666111}}
{"body": {"column":100,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1).Min(x=>Math.Abs(x[1].i-x[0].))\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":281,"fileType":"csharp","requestStartTime":1517931679367}}
{"body": {"column":36,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int gemstones(string[] arr){\n        var elements = new int[255];\n        \n        for(var i = 0; i < elements.)\n        \n        foreach(var str in arr)\n        {\n            foreach(var c in str)\n            {\n                elements[(int)c] += 1\n            }\n        }\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        int result = gemstones(arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":226,"fileType":"csharp","requestStartTime":1517931678379}}
{"body": {"column":97,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        return a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1).Min(x=>Math.Abs(x..i-x[0].i));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":278,"fileType":"csharp","requestStartTime":1517931737774}}
{"body": {"column":109,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        return a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1).Min(x=>Math.Abs(x.First().i-x..i));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":290,"fileType":"csharp","requestStartTime":1517931746310}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        // Complete this function\n        var temp =a.Select((x,i)=>new{x,i}).GroupBy(x=>x.x).Where(x=>x.Count()>1);\n        \n        if(temp.)\n        return temp.Min(x=>Math.Abs(x.First().i-x.Last().i));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":289,"fileType":"csharp","requestStartTime":1517931829479}}
{"body": {"column":40,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int gemstones(string[] arr){\n        var elements = new int[255];\n               \n        foreach(var str in arr)\n        {\n            foreach(var c in str)\n            {\n                elements[(int)c] += 1\n            }\n        }\n        // Complete this function\n        \n        var result = 0;\n        foreach(var i = 0; i < elements.)\n        {\n            if \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        int result = gemstones(arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":456,"fileType":"csharp","requestStartTime":1517931849635}}
{"body": {"column":35,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int gemstones(string[] arr){\n        var elements = new int[255];\n               \n        foreach(var str in arr)\n        {\n            foreach(var c in str)\n            {\n                elements[(int)c] += 1\n            }\n        }\n        // Complete this function\n        \n        var result = 0;\n        foreach(var i = 0; i < elements.Length; i++)\n        {\n            if (elements[i] >= arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        int result = gemstones(arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":514,"fileType":"csharp","requestStartTime":1517931867026}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function \n        Console.\n        if(acid_name.Substring((acid_name.Length)-2,2) == \"ic\")\n        {\n            if(acid_name.Substring(0,5) == \"hydro\")\n            {\n                return \"non-metal acid\";\n            }\n            else\n            {\n                return \"polyatomic acid\";\n            }\n        }\n        return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517931885508}}
{"body": {"column":34,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function \n        Console.WriteLine(acid_name.Substring((acid_name.Length)-2,2));\n        if(acid_name.Substring((acid_name.Length)-2,2) == \"ic\")\n        {\n            if(acid_name.Length  .acid_name.Substring(0,5) == \"hydro\")\n            {\n                return \"non-metal acid\";\n            }\n            else\n            {\n                return \"polyatomic acid\";\n            }\n        }\n        return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":368,"fileType":"csharp","requestStartTime":1517931964405}}
{"body": {"column":42,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n\n    }\n\nstatic void quicksort_select(int[] arr, int lo, int hi){\n    int i = lo + 1;\n    int j = hi;\n    \n    int pivot = lo;\n    \n    while(arr[i++] < arr[pivot]) if(i>arr.;\n    while(arr[j--] > arr[pivot]);\n    \n    \n}\n\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":377,"fileType":"csharp","requestStartTime":1517931972538}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function \n        Console.WriteLine(acid_name.Substring((acid_name.Length)-2,2));\n        if(acid_name.Substring((acid_name.Length)-2,2) == \"ic\")\n        {\n            if(acid_name.Length . acid_name.Substring(0,5) == \"hydro\")\n            {\n                return \"non-metal acid\";\n            }\n            else\n            {\n                return \"polyatomic acid\";\n            }\n        }\n        return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":367,"fileType":"csharp","requestStartTime":1517931971670}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function \n        Console.WriteLine(acid_name.Substring((acid_name.Length)-2,2));\n        if(acid_name.Substring((acid_name.Length)-2,2) == \"ic\")\n        {\n            if(acid_name.Length > acid_name.Substring(0,5) == \"hydro\")\n            {\n                return \"non-metal acid\";\n            }\n            else\n            {\n                return \"polyatomic acid\";\n            }\n        }\n        return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":367,"fileType":"csharp","requestStartTime":1517931975667}}
{"body": {"column":32,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        \n        for(int i=0;i<hotel_ids.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":347,"fileType":"csharp","requestStartTime":1517931999385}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            if(map.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":388,"fileType":"csharp","requestStartTime":1517932025237}}
{"body": {"column":52,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.map[id] + \"\"\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":456,"fileType":"csharp","requestStartTime":1517932094417}}
{"body": {"column":21,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":517,"fileType":"csharp","requestStartTime":1517932134541}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int gemstones(string[] arr){\n        var elements = new int[255];\n               \n        for(var i = 0; i < arr. str in arr)\n        {\n            foreach(var c in str)\n            {\n                \n                elements[(int)c] += 1;\n            }\n        }\n        // Complete this function\n        \n        var result = 0;\n        for(var i = 0; i < elements.Length; i++)\n        {\n            if (elements[i] >= arr.Length)\n            {\n                result++;\n            }\n        }\n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        int result = gemstones(arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":228,"fileType":"csharp","requestStartTime":1517932158747}}
{"body": {"column":37,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        quicksort_select(arr, 0, arr.)\n    }\n\n//return mid index\nstatic int quicksort_select(int[] arr, int lo, int hi){\n    int i = lo + 1;\n    int j = hi;\n    \n    int pivot = lo;\n    \n    while(i<j)\n    {\n    while(arr[i++] < arr[pivot]) if(i>=arr.Length) break;\n    while(arr[j--] > arr[pivot]);\n    swap(arr, i, j)\n        \n    }\n    \n    swap(arr, pivot, j);\n    \n    return j;\n    \n}\n\nstatic void swap(int[] arr, int i , int j){\n    int swap = arr[i];\n    arr[i] = arr[j];\n    arr[j] = swap;\n}\n\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":232,"fileType":"csharp","requestStartTime":1517932212322}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int tallestOnes = 0;\n        int tallestValue = 0;\n        \n        for (int i = 0;i < ar.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":256,"fileType":"csharp","requestStartTime":1517932276380}}
{"body": {"column":31,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int tallestOnes = 0;\n        int tallestValue = int.;\n                \n        for (int i = 0;i < ar.Length;i++) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":218,"fileType":"csharp","requestStartTime":1517932301956}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int tallestOnes = 0;\n        int tallestValue = int.MinValue;\n                \n        for (int i = 0;i < ar.Length;i++) {\n            if (ar[i] > )\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":313,"fileType":"csharp","requestStartTime":1517932331599}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, int> map = new Dictionary<int,string>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(!map.ContainsKey(id)) map.Add(id,0);\n        }\n               \n        for(int i=0;i<reviews.Length;i++)      \n        {\n            if(reviews[i].)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":563,"fileType":"csharp","requestStartTime":1517932345502}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, int> map = new Dictionary<int,string>();\n        string[] keys = keywords.\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(!map.ContainsKey(id)) map.Add(id,0);\n        }\n               \n        for(int i=0;i<reviews.Length;i++)      \n        {\n            \n            if(reviews[i].Contains)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":336,"fileType":"csharp","requestStartTime":1517932423110}}
{"body": {"column":32,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, int> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(!map.ContainsKey(id)) map.Add(id,0);\n        }\n               \n        for(int i=0;i<reviews.Length;i++)      \n        {\n            for(int j=0; j<keys.)\n            if(reviews[i].Contains)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":614,"fileType":"csharp","requestStartTime":1517932442948}}
{"body": {"column":30,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, int> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(!map.ContainsKey(id)) map.Add(id,0);\n        }\n               \n        for(int i=0;i<reviews.Length;i++)      \n        {\n            for(int j=0; j<keys.Length;j++)\n            {\n                if(reviews[i].)\n            }\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":670,"fileType":"csharp","requestStartTime":1517932462147}}
{"body": {"column":30,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, int> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(!map.ContainsKey(id)) map.Add(id,0);\n        }\n               \n        for(int i=0;i<reviews.Length;i++)      \n        {\n            for(int j=0; j<keys.Length;j++)\n            {\n                if(reviews[i]..Contains(())\n            }\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":670,"fileType":"csharp","requestStartTime":1517932468435}}
{"body": {"column":57,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, int> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(!map.ContainsKey(id)) map.Add(id,0);\n        }\n               \n        for(int i=0;i<reviews.Length;i++)      \n        {\n            for(int j=0; j<keys.Length;j++)\n            {\n                if(reviews[i].ToLower().Contains(keys[j].\n            }\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":697,"fileType":"csharp","requestStartTime":1517932488771}}
{"body": {"column":28,"line":8,"wordToComplete":"Rege","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Rege\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":177,"fileType":"csharp","requestStartTime":1517932583311}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        \n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":339,"fileType":"csharp","requestStartTime":1517932597979}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        int mid = quicksort_select(arr, 0, arr.Length);\n        \n        while(mid > 0 && mid < arr.)\n        if(arr[mid] < k)\n        {\n            mid = quicksort_select(arr, mid + 1, arr.Length);\n        }\n        else if(arr[mid] < k)\n        {\n            mid = quicksort_select(arr, 0, mid - 1);\n        }\n        else\n            return \"YES\";\n    }\n\nstatic int quicksort_select(int[] arr){\n\n}\n\n\n//return mid index\nstatic int quicksort_select(int[] arr, int lo, int hi){\n    int i = lo + 1;\n    int j = hi;\n    \n    int pivot = lo;\n    \n    while(i<j)\n    {\n    while(arr[i++] < arr[pivot]) if(i>=arr.Length) break;\n    while(arr[j--] > arr[pivot]);\n    swap(arr, i, j);\n        \n    }\n    \n    swap(arr, pivot, j);\n    \n    return j;\n    \n}\n\nstatic void swap(int[] arr, int i , int j){\n    int swap = arr[i];\n    arr[i] = arr[j];\n    arr[j] = swap;\n}\n\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":304,"fileType":"csharp","requestStartTime":1517932620052}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        for(int id in map.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":634,"fileType":"csharp","requestStartTime":1517932689991}}
{"body": {"column":81,"line":14,"wordToComplete":"a-z]{1,6}[_]{0,1}[0-9]{0,4}@hackerrank.c\"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nclass Solution\n{\n    static string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n    static TextWriter fileOut = new StreamWriter(@fileName, true);\n    \n    /*\n     * Write the regular expression in the blank space below\n     */\n    static string regularExpression = @\"[a-z]{1,6}[_]{0,1}[0-9]{0,4}@hackerrank.c\";\n    \n    static void Main(String[] args)\n    {\n        int query = Convert.ToInt32(Console.ReadLine());\n        var result = Enumerable.Repeat(\"False\", query).ToArray();\n        \n        for (int i = 0; i < query; i++)\n        {\n            string someString = Console.ReadLine();\n            \n            if (Regex.IsMatch(someString, regularExpression))\n            {\n                result[i] = \"True\";\n            }\n        }\n        \n        foreach (var res in result)\n        {\n            fileOut.WriteLine(res);\n        }\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":457,"fileType":"csharp","requestStartTime":1517932720172}}
{"body": {"column":22,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        foreach(int id in map.Keys)\n        {\n            if(map[i].)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":676,"fileType":"csharp","requestStartTime":1517932721062}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        foreach(int id in map.Keys)\n        {\n            if(map[i].ToLower().)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":686,"fileType":"csharp","requestStartTime":1517932727174}}
{"body": {"column":47,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        List<int> result = new List<int>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        foreach(int id in map.Keys)\n        {\n            for(string s in keys)\n                if(map[i].ToLower().Contains(s.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":779,"fileType":"csharp","requestStartTime":1517932779730}}
{"body": {"column":37,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        int mid = quicksort_select(arr, 0, arr.Length -1);\n        \n        while(mid > 0 && mid < arr.Length)\n        {\n        if(arr[mid] < k && mid < arr.)\n        {\n            mid = quicksort_select(arr, mid + 1, arr.Length - 1);\n        }\n        else if(arr[mid] < k)\n        {\n            mid = quicksort_select(arr, 0, mid - 1);\n        }\n        else\n            return \"YES\";\n        }\n        \n        return \"NO\";\n    }\n\n\n//return mid index\nstatic int quicksort_select(int[] arr, int lo, int hi){\n    int i = lo + 1;\n    int j = hi;\n    \n    int pivot = lo;\n    \n    while(i<=j)\n    {\n    while(arr[i++] < arr[pivot]) if(i>=arr.Length) break;\n    while(arr[j--] > arr[pivot]);\n        \n    swap(arr, i, j);\n        \n    }\n    \n    swap(arr, pivot, j);\n    \n    return j;\n    \n}\n\nstatic void swap(int[] arr, int i , int j){\n    int swap = arr[i];\n    arr[i] = arr[j];\n    arr[j] = swap;\n}\n\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":362,"fileType":"csharp","requestStartTime":1517932846380}}
{"body": {"column":19,"line":28,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        Dictionary<int,int> result = new Dictionary<int,int>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        foreach(int id in map.Keys)\n        {\n            int count = 0;\n            for(string s in keys)\n                if(map[i].ToLower().Contains(s.ToLower())) count++;\n            \n            result.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":879,"fileType":"csharp","requestStartTime":1517932855262}}
{"body": {"column":36,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        int mid = quicksort_select(arr, 0, arr.Length -1);\n        \n        while(mid > 0 && mid < arr.Length)\n        {\n        if(arr[mid] < k && mid < arr.Length)\n        {\n            mid = quicksort_select(arr, mid + 1, arr.Length - 1);\n        }\n        else if(arr[mid] < k && arr.)\n        {\n            mid = quicksort_select(arr, 0, mid - 1);\n        }\n        else\n            return \"YES\";\n        }\n        \n        return \"NO\";\n    }\n\n\n//return mid index\nstatic int quicksort_select(int[] arr, int lo, int hi){\n    int i = lo + 1;\n    int j = hi;\n    \n    int pivot = lo;\n    \n    while(i<=j)\n    {\n    while(arr[i++] < arr[pivot]) if(i>=arr.Length) break;\n    while(arr[j--] > arr[pivot]);\n        \n    swap(arr, i, j);\n        \n    }\n    \n    swap(arr, pivot, j);\n    \n    return j;\n    \n}\n\nstatic void swap(int[] arr, int i , int j){\n    int swap = arr[i];\n    arr[i] = arr[j];\n    arr[j] = swap;\n}\n\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":492,"fileType":"csharp","requestStartTime":1517932858998}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        int mid = quicksort_select(arr, 0, arr.Length -1);\n        \n        while(mid > 0 && mid < arr.Length)\n        {\n        if(arr[mid] < k && mid < arr.Length)\n        {\n            mid = quicksort_select(arr, mid + 1, arr.Length - 1);\n        }\n        else if(arr[mid] < k && mid >)\n        {\n            mid = quicksort_select(arr, 0, mid - 1);\n        }\n        else\n            return \"YES\";\n        }\n        \n        return \"NO\";\n    }\n\n\n//return mid index\nstatic int quicksort_select(int[] arr, int lo, int hi){\n    int i = lo + 1;\n    int j = hi;\n    \n    int pivot = lo;\n    \n    while(i<=j)\n    {\n    while(arr[i++] < arr[pivot]) if(i>=arr.Length) break;\n    while(arr[j--] > arr[pivot]);\n        \n    swap(arr, i, j);\n        \n    }\n    \n    swap(arr, pivot, j);\n    \n    return j;\n    \n}\n\nstatic void swap(int[] arr, int i , int j){\n    int swap = arr[i];\n    arr[i] = arr[j];\n    arr[j] = swap;\n}\n\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":493,"fileType":"csharp","requestStartTime":1517932870883}}
{"body": {"column":22,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] sort_hotels(string keywords, int[] hotel_ids, string[] reviews) {\n        Dictionary<int, string> map = new Dictionary<int,string>();\n        string[] keys = keywords.Split(' ');\n        Dictionary<int,int> result = new Dictionary<int,int>();\n        \n        for(int i=0;i<hotel_ids.Length;i++)\n        {\n            int id = hotel_ids[i];\n            if(map.ContainsKey(id) map[id] = string.Format(\"{0} {1}\", map[id], reviews[i]);\n            else map.Add(id,reviews[i]);\n        }\n               \n        foreach(int id in map.Keys)\n        {\n            int count = 0;\n            for(string s in keys)\n                if(map[i].ToLower().Contains(s.ToLower())) count++;\n            \n            result.Add(id,count);\n        }\n               \n        return result.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        string keywords;\n        keywords = Console.ReadLine();\n\n        int hotel_ids_size = 0;\n        hotel_ids_size = Convert.ToInt32(Console.ReadLine());\n        int[] hotel_ids = new int [hotel_ids_size];\n        int hotel_ids_item;\n        for(int hotel_ids_i = 0; hotel_ids_i < hotel_ids_size; hotel_ids_i++) {\n            hotel_ids_item = Convert.ToInt32(Console.ReadLine());\n            hotel_ids[hotel_ids_i] = hotel_ids_item;\n        }\n\n        int reviews_size = 0;\n        reviews_size = Convert.ToInt32(Console.ReadLine());\n        string[] reviews = new string [reviews_size];\n        string reviews_item;\n        for(int reviews_i = 0; reviews_i < reviews_size; reviews_i++) {\n            reviews_item = Console.ReadLine();\n            reviews[reviews_i] = reviews_item;\n        }\n\n        res = sort_hotels(keywords, hotel_ids, reviews);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":942,"fileType":"csharp","requestStartTime":1517932872440}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":304,"fileType":"csharp","requestStartTime":1517932955842}}
{"body": {"column":15,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    List<int> primes = new List();\n    \n    static void FindPrimes(){\n        for(int i = 1; i<40; i++){\n            if(IsPrime(i)) primes.Add(i);\n        }\n    }\n    public static bool IsPrime(int number)\n    {\n        if (number == 1) return false;\n        if (number == 2) return true;\n        if (number % 2 == 0)  return false;\n\n        var boundary = (int)Math.Floor(Math.Sqrt(number));\n\n        for (int i = 3; i <= boundary; i+=2)\n        {\n            if (number % i == 0)  return false;\n        }\n\n        return true;        \n    }\n    \n    static long Solve(int n){\n        primes.\n    }\n    \n    static void Main(String[] args) {\n        FindPrimes();\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n        }\n    }\n}\n\n\n","offset":701,"fileType":"csharp","requestStartTime":1517932973762}}
{"body": {"column":23,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517933030733}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":362,"fileType":"csharp","requestStartTime":1517933045644}}
{"body": {"column":40,"line":12,"wordToComplete":"get","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches.get)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":365,"fileType":"csharp","requestStartTime":1517933046538}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":362,"fileType":"csharp","requestStartTime":1517933047946}}
{"body": {"column":40,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches[0].)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":365,"fileType":"csharp","requestStartTime":1517933066540}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.) { return true; }\n      var bracketStack = new Stack<char>();\n    }\n}\n\n\n","offset":522,"fileType":"csharp","requestStartTime":1517933269461}}
{"body": {"column":28,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      var nextChar = string.\n    }\n}\n\n\n","offset":642,"fileType":"csharp","requestStartTime":1517933302635}}
{"body": {"column":32,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      var nextChar = expression.\n    }\n}\n\n\n","offset":646,"fileType":"csharp","requestStartTime":1517933315414}}
{"body": {"column":37,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.)\n    }\n}\n\n\n","offset":651,"fileType":"csharp","requestStartTime":1517933363516}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.)\n         }\n    }\n}\n\n\n","offset":696,"fileType":"csharp","requestStartTime":1517933391329}}
{"body": {"column":28,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStak.\n              }\n         }\n    }\n}\n\n\n","offset":795,"fileType":"csharp","requestStartTime":1517933471038}}
{"body": {"column":29,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStack.\n              }\n         }\n    }\n}\n\n\n","offset":796,"fileType":"csharp","requestStartTime":1517933472766}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n          string xx;\n        if (\"12:00:00AM\"==s)\n        {\n          xx=\"00:00:00\";\n        }\n        if (\"12:00:00PM\"==s)\n        {\n            xx=\"12:00:00\";\n        }\n        if ('A'==s[s.Length-2])\n        {\n            if (s.)\n           xx= s.Substring(0,s.IndexOf(\"M\")-1);\n            \n        }\n        else \n        {\n           int x= Convert.ToInt32(s.Substring(0,2))+12;\n          xx= x.ToString()+s.Substring(2,s.Length-4);\n        }\n         return xx; \n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":414,"fileType":"csharp","requestStartTime":1517933532465}}
{"body": {"column":29,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStack.push(next);\n              }\n              else\n              {\n                bracketStack.\n              }\n         }\n    }\n}\n\n\n","offset":888,"fileType":"csharp","requestStartTime":1517933545795}}
{"body": {"column":26,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n          string xx;\n        if (\"12:00:00AM\"==s)\n        {\n          xx=\"00:00:00\";\n        }\n        if (\"12:00:00PM\"==s)\n        {\n            xx=\"12:00:00\";\n        }\n        if ('A'==s[s.Length-2])\n        {\n            if (s.Substring(0,2)==\"12\")\n            {\n                xx=\"00\"+s.\n            }\n           xx= s.Substring(0,s.IndexOf(\"M\")-1);\n            \n        }\n        else \n        {\n           int x= Convert.ToInt32(s.Substring(0,2))+12;\n          xx= x.ToString()+s.Substring(2,s.Length-4);\n        }\n         return xx; \n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":476,"fileType":"csharp","requestStartTime":1517933589427}}
{"body": {"column":29,"line":37,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStack.push(next);\n              }\n              else\n              {\n                if(bracketStack.pop()) \n              }\n         }\n    }\n              \n              static bool isOpenChar(char value)\n              {\n                return value.\n              }\n}\n\n\n","offset":1041,"fileType":"csharp","requestStartTime":1517933605143}}
{"body": {"column":40,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n          string xx;\n        if (\"12:00:00AM\"==s)\n        {\n          xx=\"00:00:00\";\n        }\n        if (\"12:00:00PM\"==s)\n        {\n            xx=\"12:00:00\";\n        }\n        if ('A'==s[s.Length-2])\n        {\n            if (s.Substring(0,2)==\"12\")\n            {\n                xx=\"00\"+s.Substring(2,s.)\n            }\n           xx= s.Substring(0,s.IndexOf(\"M\")-1);\n            \n        }\n        else \n        {\n           int x= Convert.ToInt32(s.Substring(0,2))+12;\n          xx= x.ToString()+s.Substring(2,s.Length-4);\n        }\n         return xx; \n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":490,"fileType":"csharp","requestStartTime":1517933605937}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] serviceLane(int[] width, int[][] cases) {\n        // Complete this function\n        List<int> result= new List<int>();\n        foreach(var c in cases){\n            result.\n        }\n        \n        return new[]{-1};\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int t = Convert.ToInt32(tokens_n[1]);\n        string[] width_temp = Console.ReadLine().Split(' ');\n        int[] width = Array.ConvertAll(width_temp,Int32.Parse);\n        int[][] cases = new int[t][];\n        for(int cases_i = 0; cases_i < t; cases_i++){\n           string[] cases_temp = Console.ReadLine().Split(' ');\n           cases[cases_i] = Array.ConvertAll(cases_temp,Int32.Parse);\n        }\n        int[] result = serviceLane(width, cases);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":292,"fileType":"csharp","requestStartTime":1517933665576}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] serviceLane(int[] width, int[][] cases) {\n        // Complete this function\n        List<int> result= new List<int>();\n        foreach(var c in cases){\n            result.Add(width.\n        }\n        \n        return new[]{-1};\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int t = Convert.ToInt32(tokens_n[1]);\n        string[] width_temp = Console.ReadLine().Split(' ');\n        int[] width = Array.ConvertAll(width_temp,Int32.Parse);\n        int[][] cases = new int[t][];\n        for(int cases_i = 0; cases_i < t; cases_i++){\n           string[] cases_temp = Console.ReadLine().Split(' ');\n           cases[cases_i] = Array.ConvertAll(cases_temp,Int32.Parse);\n        }\n        int[] result = serviceLane(width, cases);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":302,"fileType":"csharp","requestStartTime":1517933688439}}
{"body": {"column":34,"line":45,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStack.push(next);\n              }\n              else\n              {\n                if(bracketStack.pop()) \n              }\n         }\n    }\n              \n              static bool isOpenChar(char value)\n              {\n                return value.Equals('\\{') || value.Equals('\\(') || value.Equals('\\[')\n              }\n              \n              static bool bracketsMatch(char open, char closed)\n              {\n                switch(open)\n                {\n                  case '\\{':\n                    return closed.\n                }\n              }\n}\n\n\n","offset":1319,"fileType":"csharp","requestStartTime":1517933714463}}
{"body": {"column":34,"line":47,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStack.push(next);\n              }\n              else\n              {\n                if(bracketStack.pop()) \n              }\n         }\n    }\n              \n              static bool isOpenChar(char value)\n              {\n                return value.Equals('\\{') || value.Equals('\\(') || value.Equals('\\[')\n              }\n              \n              static bool bracketsMatch(char open, char closed)\n              {\n                switch(open)\n                {\n                  case '\\{':\n                    return closed.Equals('\\}');\n                  case '\\[':\n                    return closed.\n                }\n              }\n}\n\n\n","offset":1396,"fileType":"csharp","requestStartTime":1517933741987}}
{"body": {"column":22,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches[0].Value);\n        var ampm = matches[3];\n                \n        if (ampm == \"PM\") {\n            if (hour < 12)\n                hour += 12;\n        }\n        \n        if (ampm == \"AM\" && hour == 12)\n            hour = 0;\n        \n        return String.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":616,"fileType":"csharp","requestStartTime":1517933757090}}
{"body": {"column":62,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] serviceLane(int[] width, int[][] cases) {\n        // Complete this function\n        List<int> result= new List<int>();\n        foreach(var c in cases){\n            result.Add(width.Where((x,i)=>i>=c[0] && i<=c[1]).\n        }\n        \n        return new[]{-1};\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int t = Convert.ToInt32(tokens_n[1]);\n        string[] width_temp = Console.ReadLine().Split(' ');\n        int[] width = Array.ConvertAll(width_temp,Int32.Parse);\n        int[][] cases = new int[t][];\n        for(int cases_i = 0; cases_i < t; cases_i++){\n           string[] cases_temp = Console.ReadLine().Split(' ');\n           cases[cases_i] = Array.ConvertAll(cases_temp,Int32.Parse);\n        }\n        int[] result = serviceLane(width, cases);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":335,"fileType":"csharp","requestStartTime":1517933764120}}
{"body": {"column":34,"line":49,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        string expression = string.Empty;\n        for(int a0 = 0; a0 < t; a0++){\n            expression = Console.ReadLine();\n        }\n      \n        if(isBalanced(expression)) { Console.WriteLine(\"YES\"); }\n        else { Console.WriteLine(\"NO\"); }\n    }\n  \n    static bool isBalanced(string expression)\n    {\n      if(string.IsNullOrWhiteSpace(expression) { return true; }\n      var bracketStack = new Stack<char>();\n      foreach(var next in expression.ToCharArray())\n         {\n           if(next.Equals('\\{') || next.Equals('\\(') || next.Equals('\\[')\n              {\n                bracketStack.push(next);\n              }\n              else\n              {\n                if(bracketStack.pop()) \n              }\n         }\n    }\n              \n              static bool isOpenChar(char value)\n              {\n                return value.Equals('\\{') || value.Equals('\\(') || value.Equals('\\[')\n              }\n              \n              static bool bracketsMatch(char open, char closed)\n              {\n                switch(open)\n                {\n                  case '\\{':\n                    return closed.Equals('\\}');\n                  case '\\[':\n                    return closed.Equals('\\]');\n                  case '\\(':\n                    return closed.\n                }\n              }\n}\n\n\n","offset":1473,"fileType":"csharp","requestStartTime":1517933764408}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] serviceLane(int[] width, int[][] cases) {\n        // Complete this function\n        List<int> result= new List<int>();\n        foreach(var c in cases){\n            result.Add(width.Where((x,i)=>i>=c[0] && i<=c[1]).Min());\n        }\n        \n        return result.;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int t = Convert.ToInt32(tokens_n[1]);\n        string[] width_temp = Console.ReadLine().Split(' ');\n        int[] width = Array.ConvertAll(width_temp,Int32.Parse);\n        int[][] cases = new int[t][];\n        for(int cases_i = 0; cases_i < t; cases_i++){\n           string[] cases_temp = Console.ReadLine().Split(' ');\n           cases[cases_i] = Array.ConvertAll(cases_temp,Int32.Parse);\n        }\n        int[] result = serviceLane(width, cases);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":384,"fileType":"csharp","requestStartTime":1517933800215}}
{"body": {"column":30,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches[0].Value);\n        var ampm = matches[3].;\n                \n        if (ampm == \"PM\") {\n            if (hour < 12)\n                hour += 12;\n        }\n        \n        if (ampm == \"AM\" && hour == 12)\n            hour = 0;\n        \n        return String.Format(\"{0:D2}:{0:D2}:{0:D2}\", hour, matches[1], matches[2]);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":441,"fileType":"csharp","requestStartTime":1517933977389}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        switch(N)\n        {\n            case N%2==0:\n                Console.\n        }\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1517934017162}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        switch(N)\n        {\n            case N%2!=0:\n                Console.WriteLine(\"Weird\");\n                break;\n            case N%2==0 && N >= 2 && N <= 5:\n                Console.\n        }\n    }\n}\n\n\n","offset":384,"fileType":"csharp","requestStartTime":1517934049422}}
{"body": {"column":30,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n   static int ConvertToInt(string s)\n{\n      int  y = 0;\n        for (int i = 0; i < s.Length; i++)\n               y = y * 10 + (s[i] - '0');\n     return y;\n}\n    \n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n=Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        \n        Int64 maxVal=0;\n        \n        Int64 [] listWithZeros=new Int64 [n];\n   \n         maxVal=listWithZeros[0];\n        for(int j = 0; j < m; j++){\n            string[] tokens_a = Console.ReadLine().Split(' ');\n            int a =ConvertToInt(tokens_a[0]);//Convert.ToInt32(tokens_a[0]);\n            int b = ConvertToInt(tokens_a[1]);//Convert.ToInt32(tokens_a[1]);\n            int k = ConvertToInt(tokens_a[2]);//Convert.ToInt32(tokens_a[2]);\n           \n            for(int h=a-1;h<b;h++)\n            {\n                listWithZeros.\n                //listWithZeros[h]=listWithZeros[h]+k; \n            if(maxVal<listWithZeros[h])\n                maxVal=listWithZeros[h];\n            }\n             \n        }\n        \n    \n        \n        Console.Write(maxVal);\n        \n       \n        \n    }\n}\n\n\n","offset":1004,"fileType":"csharp","requestStartTime":1517934070815}}
{"body": {"column":64,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(\"[0-9]{2}:[0-9]{2}:[0-9]{2}[A-Z]{2}\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Matches(s);\n        \n        var hour = int.Parse(matches[0].Value);\n        var ampm = matches[3].Value;\n                \n        if (ampm == \"PM\") {\n            if (hour < 12)\n                hour += 12;\n        }\n        \n        if (ampm == \"AM\" && hour == 12)\n            hour = 0;\n        \n        return String.Format(\"{0:D2}:{1}:{2}\", hour, matches[1]., matches[2]);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":702,"fileType":"csharp","requestStartTime":1517934086225}}
{"body": {"column":38,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int t = int.Parse(Console.ReadLine());\n        \n        for (int i = 0; i < t; i++)\n        {\n           string words = Console.ReadLine();\n            for (int j = 0; j < words. )\n        }\n    }\n}\n\n","offset":427,"fileType":"csharp","requestStartTime":1517934095092}}
{"body": {"column":24,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        switch(N)\n        {\n            case N%2!=0:\n                Console.WriteLine(\"Weird\");\n                break;\n            case N%2==0 && N >= 2 && N <= 5:\n                Console.WriteLine(\"Not Weird\");\n                break;\n            case N%2==0 && N >= 6 %% N <= 20:\n                Console.WriteLine(\"Weird\");\n                break;\n            case N%2==0 && N > 20:\n                Console.\n        }\n    }\n}\n\n\n","offset":603,"fileType":"csharp","requestStartTime":1517934102385}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int t = int.Parse(Console.ReadLine());\n        \n        for (int i = 0; i < t; i++)\n        {\n           string words = Console.ReadLine();\n            \n            for (int j = 0; j < words.Length; j++ )\n            {\n                if (j % 2 == 0)\n                    Console.\n            }\n        }\n    }\n}\n\n","offset":528,"fileType":"csharp","requestStartTime":1517934128901}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int t = int.Parse(Console.ReadLine());\n        \n        for (int i = 0; i < t; i++)\n        {\n           string words = Console.ReadLine();\n            \n            for (int j = 0; j < words.Length; j++ )\n            {\n                if (j % 2 == 0)\n                    Console.WriteLine(words[j]);\n            }\n            Console.\n        }\n    }\n}\n\n","offset":583,"fileType":"csharp","requestStartTime":1517934160994}}
{"body": {"column":34,"line":32,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n    }\n\n    if(isBalanced(expression)) \n    { \n      Console.WriteLine(\"YES\"); \n    }\n    else \n    { \n      Console.WriteLine(\"NO\"); \n    }\n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    var bracketStack = new System.\n    foreach(var next in expression.ToCharArray())\n    {\n      if(next.Equals('{') || next.Equals('(') || next.Equals('['))\n      {\n        bracketStack.push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.pop(), next)) \n        { \n          return false; \n        } \n      }\n    }\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":615,"fileType":"csharp","requestStartTime":1517934176767}}
{"body": {"column":38,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int t = int.Parse(Console.ReadLine());\n        \n        for (int i = 0; i < t; i++)\n        {\n           string words = Console.ReadLine();\n            \n            for (int j = 0; j < words.Length; j++ )\n            {\n                if (j % 2 == 0)\n                    Console.WriteLine(words[j]);\n            }\n            Console.Write(\" \");\n            \n            for (int j = 0; j < words.)\n        }\n    }\n}\n\n","offset":646,"fileType":"csharp","requestStartTime":1517934177222}}
{"body": {"column":42,"line":32,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n    }\n\n    if(isBalanced(expression)) \n    { \n      Console.WriteLine(\"YES\"); \n    }\n    else \n    { \n      Console.WriteLine(\"NO\"); \n    }\n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    var bracketStack = new System.Generic.\n    foreach(var next in expression.ToCharArray())\n    {\n      if(next.Equals('{') || next.Equals('(') || next.Equals('['))\n      {\n        bracketStack.push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.pop(), next)) \n        { \n          return false; \n        } \n      }\n    }\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":623,"fileType":"csharp","requestStartTime":1517934178756}}
{"body": {"column":54,"line":32,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n    }\n\n    if(isBalanced(expression)) \n    { \n      Console.WriteLine(\"YES\"); \n    }\n    else \n    { \n      Console.WriteLine(\"NO\"); \n    }\n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    var bracketStack = new System.Generic.Collections.\n    foreach(var next in expression.ToCharArray())\n    {\n      if(next.Equals('{') || next.Equals('(') || next.Equals('['))\n      {\n        bracketStack.push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.pop(), next)) \n        { \n          return false; \n        } \n      }\n    }\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":635,"fileType":"csharp","requestStartTime":1517934181737}}
{"body": {"column":52,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        \n         Console.WriteLine(string.Format(\"{0}\", arr.));\n        \n        int count = arr.Length;\n        int positive = 0;\n        int zero = 0;\n        int negative = 0;\n        \n        decimal positiveDecimal = 0;\n        decimal zeroDecimal = 0;\n        decimal negativeDecimal = 0;\n\n        if (count > 0)\n        {\n            for (int i = 0; i < arr.Length; i++)\n            {\n                if (arr[i] == 0)\n                    zero = zero + 1;\n                else if (arr[i] > 0)\n                    positive = positive + 1;\n                else if (arr[i] < 0)\n                    negative = negative + 1;\n            }\n\n            positiveDecimal = Decimal.Divide(positive, count);\n            zeroDecimal =  (decimal)zero /  (decimal)count;\n            negativeDecimal =  (decimal)negative /  (decimal)count;\n        }\n        \n        Console.WriteLine(string.Format(\"{0}\", positiveDecimal));\n        Console.WriteLine(string.Format(\"{0}\", negativeDecimal));\n        Console.WriteLine(string.Format(\"{0}\", zeroDecimal));\n              \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n    \n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517934238220}}
{"body": {"column":20,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int t = int.Parse(Console.ReadLine());\n        \n        for (int i = 0; i < t; i++)\n        {\n           string words = Console.ReadLine();\n            \n            for (int j = 0; j < words.Length; j++ )\n            {\n                if (j % 2 == 0)\n                {\n                    Console.WriteLine(words[j]);\n                }\n            }\n            Console.Write(\" \");\n            \n            for (int j = 0; j < words.Length; j++)\n            {\n                if (j % 2 != 0)\n                {\n                    Console.WriteLine(words[j]);\n                }\n            }\n            Console.\n        }\n    }\n}\n\n","offset":860,"fileType":"csharp","requestStartTime":1517934255007}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        \n        for(var i =0;i<doors.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":197,"fileType":"csharp","requestStartTime":1517934331070}}
{"body": {"column":37,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nclass Solution {\n\n    static string timeConversion(string s) {\n        var regex = new Regex(@\"([0-9]{2}):([0-9]{2}):([0-9]{2})([A-Z]{2})\", RegexOptions.IgnoreCase | RegexOptions.Compiled);\n        \n        var matches = regex.Match(s);\n        \n        var hour = int.Parse(matches.[0].Value);\n        var ampm = matches[3].Value;\n                \n        if (ampm == \"PM\") {\n            if (hour < 12)\n                hour += 12;\n        }\n        \n        if (ampm == \"AM\" && hour == 12)\n            hour = 0;\n        \n        return String.Format(\"{0:D2}:{1}:{2}\", hour, matches[1].Value, matches[2].Value);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":407,"fileType":"csharp","requestStartTime":1517934352925}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        for(int i=0;)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":224,"fileType":"csharp","requestStartTime":1517934437789}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        for(int i=0; i< arr.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":232,"fileType":"csharp","requestStartTime":1517934450044}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        for(int i=0; i<arr.Length; i++)\n        {\n            if (arr[i] == k)\n            {\n                return \"YES\";\n            }            \n        }\n        return \"NO\";\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":383,"fileType":"csharp","requestStartTime":1517934548670}}
{"body": {"column":23,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    Stack<char> bracketStack = new Stack<char>();\n    while(bracketStack.)\n    foreach(var next in expression.ToCharArray())\n    {\n      if(next.Equals('{') || next.Equals('(') || next.Equals('['))\n      {\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n    }\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":680,"fileType":"csharp","requestStartTime":1517934597695}}
{"body": {"column":28,"line":32,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    var characters = string.\n    var bracketStack = new Stack<char>();\n    \n    while(bracketStack.Count > 0)\n    {\n      \n    }\n    foreach(var next in expression.ToCharArray())\n    {\n      if(next.Equals('{') || next.Equals('(') || next.Equals('['))\n      {\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n    }\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":635,"fileType":"csharp","requestStartTime":1517934673897}}
{"body": {"column":32,"line":32,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    var characters = expression.\n    var bracketStack = new Stack<char>();\n    \n    while(bracketStack.Count > 0)\n    {\n      \n    }\n    foreach(var next in expression.ToCharArray())\n    {\n      if(next.Equals('{') || next.Equals('(') || next.Equals('['))\n      {\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n    }\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":639,"fileType":"csharp","requestStartTime":1517934677904}}
{"body": {"column":22,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        if (acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":175,"fileType":"csharp","requestStartTime":1517934741936}}
{"body": {"column":34,"line":40,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    \n    var characters = expression.ToCharArray();\n    var bracketStack = new Stack<char>();\n    var index = 0;\n    \n    do\n    {\n      var next = characters[index];\n      if(isOpenChar(next) && next.)\n      {\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n      \n      index++;\n    } \n    while (bracketStack.Count > 0);\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":808,"fileType":"csharp","requestStartTime":1517934996180}}
{"body": {"column":56,"line":54,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    \n    var characters = expression.ToCharArray();\n    var bracketStack = new Stack<char>();\n    var index = 0;\n    \n    do\n    {\n      var next = characters[index];\n      if(isOpenChar(next) && next.Equals(null))\n      {\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n      \n      index++;\n    } \n    while (bracketStack.Count > 0 && index < characters.);\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":1084,"fileType":"csharp","requestStartTime":1517935026892}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    \n    var characters = expression.ToCharArray();\n    var bracketStack = new Stack<char>();\n    var index = 0;\n    \n    do\n    {\n      var next = characters[index];\n      if(isOpenChar(next))\n      {\n        Console.\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n      \n      index++;\n    } \n    while (bracketStack.Count > 0 && index < characters.Count());\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":825,"fileType":"csharp","requestStartTime":1517935146625}}
{"body": {"column":115,"line":62,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public class Cloud\n    {\n        public long radius;\n        public long position;\n        public List<Town> Shading = new List<Town>();\n        \n        public bool Covers(Town t)\n        {\n            return Math.Abs(this.position-t.position) <= this.radius;\n        }\n    }\n    \n    public class Town\n    {\n        public long population;\n        public long position;\n        public Cloud ShadedBy;\n        \n        public bool CoveredBy(IEnumerable<Cloud> clouds)\n        {\n            return clouds.Any( c => c.Covers(this));\n        }\n    }\n    \n    static long maximumPeople(long[] p, long[] x, long[] y, long[] r) {\n        // Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n        var towns = p.Zip(x, (a,b)=> new Town(){ population=a, position=b}).ToList();\n        var clouds = y.Zip(r, (a,b)=>new Cloud(){position=a, radius=b}).ToList();\n    \n        // Build caches of cloud coverage\n        for(int i = towns.Count-1; i >= 0; --i)\n        {\n            Town t = towns[i];\n            foreach(Cloud cloud in clouds)\n            {\n                if (cloud.Covers(t))\n                {\n                    if (t.ShadedBy != null)\n                    {\n                        // town already covered by a cloud, so this is second cloud\n                        //  therefore it will always be shaded even if we remove a single cloud\n                        towns.RemoveAt(i);\n                        break;\n                    }\n                    else\n                    {\n                        t.ShadedBy = cloud;\n                    }\n                }\n            }\n        }\n        \n        long always_sunny = towns.Where(t => t.ShadedBy == null).Sum(t => t.population);\n        var shaded_towns = towns.Where(t => t.ShadedBy != null ).ToList();\n        \n        return always_sunny + clouds.Select( c => shaded_towns.Where(t => t.ShadedBy == c).Sum(t => t.population)).;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] p_temp = Console.ReadLine().Split(' ');\n        long[] p = Array.ConvertAll(p_temp,Int64.Parse);\n        string[] x_temp = Console.ReadLine().Split(' ');\n        long[] x = Array.ConvertAll(x_temp,Int64.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] y_temp = Console.ReadLine().Split(' ');\n        long[] y = Array.ConvertAll(y_temp,Int64.Parse);\n        string[] r_temp = Console.ReadLine().Split(' ');\n        long[] r = Array.ConvertAll(r_temp,Int64.Parse);\n        long result = maximumPeople(p, x, y, r);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2053,"fileType":"csharp","requestStartTime":1517935152480}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution \n{\n\n    static int divisibleSumPairs(int n, int k, int[] ar) \n    {\n        for(int i = 0; i < ar.)\n    }\n\n    static void Main(String[] args) \n    {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = divisibleSumPairs(n, k, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":199,"fileType":"csharp","requestStartTime":1517935177039}}
{"body": {"column":42,"line":37,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    \n    var characters = expression.ToCharArray();\n    var bracketStack = new Stack<char>();\n    var index = 0;\n    \n    for(var index = 0; index < characters.)\n    do\n    {\n      var next = characters[index];\n      if(isOpenChar(next))\n      {\n        Console.WriteLine($\"Pushing {next}\");\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n      \n      index++;\n    } \n    while (bracketStack.Count >= 0 && index < characters.Count());\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    Console.WriteLine($\"Popped {open} comparing to {closed}\");\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":767,"fileType":"csharp","requestStartTime":1517935356268}}
{"body": {"column":25,"line":47,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) \n  {\n    int t = Convert.ToInt32(Console.ReadLine());\n    string expression = string.Empty;\n    for(int a0 = 0; a0 < t; a0++)\n    {\n      expression = Console.ReadLine();\n      \n      if(isBalanced(expression)) \n      { \n        Console.WriteLine(\"YES\"); \n      }\n      else \n      { \n        Console.WriteLine(\"NO\"); \n      }\n    }    \n  }\n\n  static bool isBalanced(string expression)\n  {\n    if(string.IsNullOrWhiteSpace(expression))\n    { \n      return true; \n    }\n    \n    var characters = expression.ToCharArray();\n    var bracketStack = new Stack<char>();\n    var index = 0;\n    \n    for(var index = 0; index < characters.Count(); i++)\n    {\n      var next = characters[index];\n      if(isOpenChar(next))\n      {\n        Console.WriteLine($\"Pushing {next}\");\n        bracketStack.Push(next);\n      }\n      else\n      {\n        if(bracketsMatch.)\n        if(!bracketsMatch(bracketStack.Pop(), next)) \n        { \n          return false; \n        } \n      }\n      \n      index++;\n    }\n    \n    return true;\n  }\n            \n            \n\n  static bool isOpenChar(char value)\n  {\n    return value.Equals('{') || value.Equals('(') || value.Equals('[');\n  }\n\n  static bool bracketsMatch(char open, char closed)\n  {\n    Console.WriteLine($\"Popped {open} comparing to {closed}\");\n    switch(open)\n    {\n      case '{':\n        return closed.Equals('}');\n      case '[':\n        return closed.Equals(']');\n      case '(':\n        return closed.Equals(')');\n      default:\n        return false;\n    }\n  }\n}\n\n\n","offset":989,"fileType":"csharp","requestStartTime":1517935421326}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long andProduct(long a, long b) {\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string[] tokens_a = Console.ReadLine().Split(' ');\n            long a = Convert.ToInt64(tokens_a[0]);\n            long b = Convert.ToInt64(tokens_a[1]);\n            long result = andProduct(a, b);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":165,"fileType":"csharp","requestStartTime":1517935429751}}
{"body": {"column":11,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nstatic void nextMove(int n,int r, int c, String [] grid)\n{\n   console.\n          \n    \n    \n}\nstatic void Main(String[] args) {\n        int n;\n\n        n = int.Parse(Console.ReadLine());\n        String pos;\n        pos = Console.ReadLine();\n        String[] position = pos.Split(' ');\n        int [] int_pos = new int[2];\n        int_pos[0] = Convert.ToInt32(position[0]);\n        int_pos[1] = Convert.ToInt32(position[1]);\n        String[] grid  = new String[n];\n        for(int i=0; i < n; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        nextMove(n, int_pos[0], int_pos[1], grid);\n\n     }\n}\n\nstatic void Main(String[] args) {\n        int n;\n\n        n = int.Parse(Console.ReadLine());\n        String pos;\n        pos = Console.ReadLine();\n        String[] position = pos.Split(' ');\n        int [] int_pos = new int[2];\n        int_pos[0] = Convert.ToInt32(position[0]);\n        int_pos[1] = Convert.ToInt32(position[1]);\n        String[] grid  = new String[n];\n        for(int i=0; i < n; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        nextMove(n, int_pos[0], int_pos[1], grid);\n\n     }\n}\n","offset":235,"fileType":"csharp","requestStartTime":1517935687762}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long andProduct(long a, long b) {\n        int dif = b-a;\n        if (dif >= 2){\n            dif.\n        }\n        \n        return a;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string[] tokens_a = Console.ReadLine().Split(' ');\n            long a = Convert.ToInt64(tokens_a[0]);\n            long b = Convert.ToInt64(tokens_a[1]);\n            long result = andProduct(a, b);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517935852119}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long andProduct(long a, long b) {\n        int dif = b-a;\n        if (dif >= 2){\n            dif.\n        }\n        \n        return a;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string[] tokens_a = Console.ReadLine().Split(' ');\n            long a = Convert.ToInt64(tokens_a[0]);\n            long b = Convert.ToInt64(tokens_a[1]);\n            long result = andProduct(a, b);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517935876230}}
{"body": {"column":25,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] acmTeam(string[] topic) {\n        // Complete this function\n        \n        var temp = topic.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] topic = new string[n];\n        for(int topic_i = 0; topic_i < n; topic_i++){\n           topic[topic_i] = Console.ReadLine();   \n        }\n        int[] result = acmTeam(topic);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":215,"fileType":"csharp","requestStartTime":1517935932542}}
{"body": {"column":31,"line":36,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int g = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < g; a0++){\n            Console.ReadLine();\n            var arr = Console.ReadLine().Split().Select(x=>int.Parse(x));\n            PrintWinner(arr);\n        }\n    }\n    \n            static void PrintWinner(List<int> arr)\n        {\n            int maxIndex = arr.Count() - 1;\n\n            var count = 0;\n\n            while (maxIndex >= 0)\n            {\n                maxIndex = GetMaxIndex(arr, maxIndex);\n                count++;\n            }\n\n            if (count > 1)\n            {\n                count--;\n            }\n            Console.WriteLine(count % 2 == 0 ? \"ANDY\" : \"BOB\");\n        }\n    \n    static int GetMaxIndex(List<int> arr, int maxIndex){\n        arr=arr.Take(maxIndex).;\n        if (!t.Any()){\n            return -1;\n        }\n        var list =new List<int>(t);\n        var max=list.Max();\n        return list.IndexOf(max);\n    }\n}\n\n\n","offset":915,"fileType":"csharp","requestStartTime":1517935977041}}
{"body": {"column":73,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int g = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < g; a0++){\n            Console.ReadLine();\n            var arr = Console.ReadLine().Split().Select(x=>int.Parse(x)).;\n            PrintWinner(arr);\n        }\n    }\n    \n            static void PrintWinner(List<int> arr)\n        {\n            int maxIndex = arr.Count - 1;\n\n            var count = 0;\n\n            while (maxIndex >= 0)\n            {\n                maxIndex = GetMaxIndex(arr, maxIndex);\n                count++;\n            }\n\n            if (count > 1)\n            {\n                count--;\n            }\n            Console.WriteLine(count % 2 == 0 ? \"ANDY\" : \"BOB\");\n        }\n    \n    static int GetMaxIndex(List<int> arr, int maxIndex){\n        arr=arr.Take(maxIndex).ToList();\n        if (!arr.Any()){\n            return -1;\n        }\n        var max=arr.Max();\n        return arr.IndexOf(max);\n    }\n}\n\n\n","offset":339,"fileType":"csharp","requestStartTime":1517936005585}}
{"body": {"column":21,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] acmTeam(string[] topic) {\n        // Complete this function\n        \n        var temp = topic.Select(x=>Convert.ToInt32(x, 2));\n        \n        var res = new List<int>();\n        for (int i = 0 ; i != topic.Count ; i++) {\n            for (int j = i+1 ; j != topic.Count ; j++) {\n                res.Add(list[i]&list[j]);\n            }\n        }\n        \n        var max= res.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] topic = new string[n];\n        for(int topic_i = 0; topic_i < n; topic_i++){\n           topic[topic_i] = Console.ReadLine();   \n        }\n        int[] result = acmTeam(topic);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":497,"fileType":"csharp","requestStartTime":1517936142897}}
{"body": {"column":34,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int[] grades){\n        // Complete this function\n        for(int i = 0; i < grades.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":210,"fileType":"csharp","requestStartTime":1517936252422}}
{"body": {"column":46,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] acmTeam(string[] topic) {\n        // Complete this function\n        \n        var temp = topic.Select(x=>Convert.ToInt32(x, 2));\n        \n        var res = new List<int>();\n        for (int i = 0 ; i != topic.Count ; i++) {\n            for (int j = i+1 ; j != topic.Count ; j++) {\n                res.Add(list[i]&list[j]);\n            }\n        }\n        \n        var max= res.Max();\n        \n        return new[]{Convert.ToString(max, 2).}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] topic = new string[n];\n        for(int topic_i = 0; topic_i < n; topic_i++){\n           topic[topic_i] = Console.ReadLine();   \n        }\n        int[] result = acmTeam(topic);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":559,"fileType":"csharp","requestStartTime":1517936249954}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i=0; i<=arr.)\n        \n        \n    }\n}\n\n\n","offset":351,"fileType":"csharp","requestStartTime":1517936775058}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i=0; i<=arr.Length; i++)\n        {\n            arr[i]=n;\n            Console.\n        }\n        \n        \n    }\n}\n\n\n","offset":416,"fileType":"csharp","requestStartTime":1517936850180}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i=0; i<=arr.Length; i++)\n        {\n            Console.\n            arr[i]=n;\n            Console.WriteLine(\"Array:\" +arr[i]);\n        }\n        \n        \n    }\n}\n\n\n","offset":394,"fileType":"csharp","requestStartTime":1517936926412}}
{"body": {"column":40,"line":70,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public class Cloud\n    {\n        public long radius;\n        public long position;\n        public List<Town> Shading = new List<Town>();\n        \n        public bool Covers(Town t)\n        {\n            return Math.Abs(this.position-t.position) <= this.radius;\n        }\n    }\n    \n    public class Town\n    {\n        public long population;\n        public long position;\n        public Cloud ShadedBy;\n        \n        public bool CoveredBy(IEnumerable<Cloud> clouds)\n        {\n            return clouds.Any( c => c.Covers(this));\n        }\n    }\n    \n    static long maximumPeople(long[] p, long[] x, long[] y, long[] r) {\n        // Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n        var towns = p.Zip(x, (a,b)=> new Town(){ population=a, position=b}).ToList();\n        var clouds = y.Zip(r, (a,b)=>new Cloud(){position=a, radius=b}).ToList();\n\n        var all_pop =towns.Sum(t =>t.population);\n        \n        // Build caches of cloud coverage\n        for(int i = towns.Count-1; i >= 0; --i)\n        {\n            Town t = towns[i];\n            foreach(Cloud cloud in clouds)\n            {\n                if (cloud.Covers(t))\n                {\n                    if (t.ShadedBy != null)\n                    {\n                        // town already covered by a cloud, so this is second cloud\n                        //  therefore it will always be shaded even if we remove a single cloud\n                        towns.RemoveAt(i);\n                        break;\n                    }\n                    else\n                    {\n                        t.ShadedBy = cloud;\n                    }\n                }\n            }\n        }\n        \n        Dictionary<Cloud, long> d_cloud_to_shaded = new Dictionary<Cloud, long>();\n        \n        foreach(Town t in towns)\n        {\n            if (t.ShadedBy != null)\n            {\n                long shaded;\n                if (d_cloud_to_shaded.TryGetValue(t.ShadedBy, out shaded))\n                {\n                    d_cloud_to_shaded[t.]\n                }\n            }\n        }\n        \n        \n        long always_sunny = towns.Where(t => t.ShadedBy == null).Sum(t => t.population);\n        var shaded_towns = towns.Where(t => t.ShadedBy != null ).ToList();\n        \n        return always_sunny + clouds.Select( c => shaded_towns.Where(t => t.ShadedBy == c).Sum(t => t.population)).Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] p_temp = Console.ReadLine().Split(' ');\n        long[] p = Array.ConvertAll(p_temp,Int64.Parse);\n        string[] x_temp = Console.ReadLine().Split(' ');\n        long[] x = Array.ConvertAll(x_temp,Int64.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] y_temp = Console.ReadLine().Split(' ');\n        long[] y = Array.ConvertAll(y_temp,Int64.Parse);\n        string[] r_temp = Console.ReadLine().Split(' ');\n        long[] r = Array.ConvertAll(r_temp,Int64.Parse);\n        long result = maximumPeople(p, x, y, r);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2167,"fileType":"csharp","requestStartTime":1517936958591}}
{"body": {"column":54,"line":74,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public class Cloud\n    {\n        public long radius;\n        public long position;\n        public List<Town> Shading = new List<Town>();\n        \n        public bool Covers(Town t)\n        {\n            return Math.Abs(this.position-t.position) <= this.radius;\n        }\n    }\n    \n    public class Town\n    {\n        public long population;\n        public long position;\n        public Cloud ShadedBy;\n        \n        public bool CoveredBy(IEnumerable<Cloud> clouds)\n        {\n            return clouds.Any( c => c.Covers(this));\n        }\n    }\n    \n    static long maximumPeople(long[] p, long[] x, long[] y, long[] r) {\n        // Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n        var towns = p.Zip(x, (a,b)=> new Town(){ population=a, position=b}).ToList();\n        var clouds = y.Zip(r, (a,b)=>new Cloud(){position=a, radius=b}).ToList();\n\n        var all_pop =towns.Sum(t =>t.population);\n        \n        // Build caches of cloud coverage\n        for(int i = towns.Count-1; i >= 0; --i)\n        {\n            Town t = towns[i];\n            foreach(Cloud cloud in clouds)\n            {\n                if (cloud.Covers(t))\n                {\n                    if (t.ShadedBy != null)\n                    {\n                        // town already covered by a cloud, so this is second cloud\n                        //  therefore it will always be shaded even if we remove a single cloud\n                        towns.RemoveAt(i);\n                        break;\n                    }\n                    else\n                    {\n                        t.ShadedBy = cloud;\n                    }\n                }\n            }\n        }\n        \n        Dictionary<Cloud, long> d_cloud_to_shaded = new Dictionary<Cloud, long>();\n        \n        foreach(Town t in towns)\n        {\n            if (t.ShadedBy != null)\n            {\n                long shaded;\n                if (d_cloud_to_shaded.TryGetValue(t.ShadedBy, out shaded))\n                {\n                    d_cloud_to_shaded[t.ShadedBy] = shaded + t.population;\n                }\n                else\n                {\n                    d_cloud_to_shaded[t.ShadedBy] = t.\n                }\n            }\n        }\n        \n        \n        long always_sunny = towns.Where(t => t.ShadedBy == null).Sum(t => t.population);\n        var shaded_towns = towns.Where(t => t.ShadedBy != null ).ToList();\n        \n        return always_sunny + clouds.Select( c => shaded_towns.Where(t => t.ShadedBy == c).Sum(t => t.population)).Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] p_temp = Console.ReadLine().Split(' ');\n        long[] p = Array.ConvertAll(p_temp,Int64.Parse);\n        string[] x_temp = Console.ReadLine().Split(' ');\n        long[] x = Array.ConvertAll(x_temp,Int64.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] y_temp = Console.ReadLine().Split(' ');\n        long[] y = Array.ConvertAll(y_temp,Int64.Parse);\n        string[] r_temp = Console.ReadLine().Split(' ');\n        long[] r = Array.ConvertAll(r_temp,Int64.Parse);\n        long result = maximumPeople(p, x, y, r);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2313,"fileType":"csharp","requestStartTime":1517936985927}}
{"body": {"column":25,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        float size = arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":168,"fileType":"csharp","requestStartTime":1517936997911}}
{"body": {"column":50,"line":79,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public class Cloud\n    {\n        public long radius;\n        public long position;\n        public List<Town> Shading = new List<Town>();\n        \n        public bool Covers(Town t)\n        {\n            return Math.Abs(this.position-t.position) <= this.radius;\n        }\n    }\n    \n    public class Town\n    {\n        public long population;\n        public long position;\n        public Cloud ShadedBy;\n        \n        public bool CoveredBy(IEnumerable<Cloud> clouds)\n        {\n            return clouds.Any( c => c.Covers(this));\n        }\n    }\n    \n    static long maximumPeople(long[] p, long[] x, long[] y, long[] r) {\n        // Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n        var towns = p.Zip(x, (a,b)=> new Town(){ population=a, position=b}).ToList();\n        var clouds = y.Zip(r, (a,b)=>new Cloud(){position=a, radius=b}).ToList();\n\n        var all_pop =towns.Sum(t =>t.population);\n        \n        // Build caches of cloud coverage\n        for(int i = towns.Count-1; i >= 0; --i)\n        {\n            Town t = towns[i];\n            foreach(Cloud cloud in clouds)\n            {\n                if (cloud.Covers(t))\n                {\n                    if (t.ShadedBy != null)\n                    {\n                        // town already covered by a cloud, so this is second cloud\n                        //  therefore it will always be shaded even if we remove a single cloud\n                        towns.RemoveAt(i);\n                        break;\n                    }\n                    else\n                    {\n                        t.ShadedBy = cloud;\n                    }\n                }\n            }\n        }\n        \n        Dictionary<Cloud, long> d_cloud_to_shaded = new Dictionary<Cloud, long>();\n        \n        foreach(Town t in towns)\n        {\n            if (t.ShadedBy != null)\n            {\n                long shaded;\n                if (d_cloud_to_shaded.TryGetValue(t.ShadedBy, out shaded))\n                {\n                    d_cloud_to_shaded[t.ShadedBy] = shaded + t.population;\n                }\n                else\n                {\n                    d_cloud_to_shaded[t.ShadedBy] = t.population;\n                }\n            }\n        }\n        \n        return all_pop - d_cloud_to_shaded.Values.\n        \n        \n        long always_sunny = towns.Where(t => t.ShadedBy == null).Sum(t => t.population);\n        var shaded_towns = towns.Where(t => t.ShadedBy != null ).ToList();\n        \n        return always_sunny + clouds.Select( c => shaded_towns.Where(t => t.ShadedBy == c).Sum(t => t.population)).Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] p_temp = Console.ReadLine().Split(' ');\n        long[] p = Array.ConvertAll(p_temp,Int64.Parse);\n        string[] x_temp = Console.ReadLine().Split(' ');\n        long[] x = Array.ConvertAll(x_temp,Int64.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] y_temp = Console.ReadLine().Split(' ');\n        long[] y = Array.ConvertAll(y_temp,Int64.Parse);\n        string[] r_temp = Console.ReadLine().Split(' ');\n        long[] r = Array.ConvertAll(r_temp,Int64.Parse);\n        long result = maximumPeople(p, x, y, r);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2426,"fileType":"csharp","requestStartTime":1517937014442}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        float size = arr.Length;\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":192,"fileType":"csharp","requestStartTime":1517937030222}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        float size = arr.Length;\n        Console.WriteLine(arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":206,"fileType":"csharp","requestStartTime":1517937042413}}
{"body": {"column":48,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        float size = arr.Length;\n        Console.WriteLine(arr.Where(x => x > 0).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":224,"fileType":"csharp","requestStartTime":1517937062613}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i=array.; i<=0; i--)\n        {\n          \n            arr[i]=n;\n            Console.Write(arr[i]);\n        }\n        \n        \n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517937109358}}
{"body": {"column":30,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i=0; i<=array.; i--)\n        {\n          \n            arr[i]=n;\n            Console.Write(arr[i]);\n        }\n        \n        \n    }\n}\n\n\n","offset":353,"fileType":"csharp","requestStartTime":1517937123339}}
{"body": {"column":28,"line":49,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        var rtn = new List<int>();\n        for(int i = 0; i < a.Length; i++)\n        {            \n            if(a[i].Length != b[i].Length)\n            {\n                rtn.Add(-1);\n                continue;\n            }\n            if(a[i] == b[i])\n            {\n                rtn.Add(0);\n                continue;\n            }\n            var arrA = a[i].ToCharArray();\n            var arrB = b[i].ToCharArray();\n            var track = new Dictionary<char, int>();\n            for(int j = 0; j < arrA.Length; j++)\n            {\n                if(!track.ContainsKey(arrA[j]))\n                {\n                    track.Add(arrA[j],1);\n                }\n                else\n                {\n                    track[arrA[j]] = track[arrA[j]] + 1;\n                }\n                if(!track.ContainsKey(arrB[j]))\n                {\n                    track.Add(arrB[j], -1);\n                }\n                else\n                {\n                    track[arrB[j]] = track[arrB[j]] - 1;\n                }\n            }\n            var sum = 0;\n            foreach(var val in track1)\n            {\n                sum += Math.\n            }\n            rtn.Add(sum);\n        }\n        return rtn.ToArray();\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1359,"fileType":"csharp","requestStartTime":1517937134780}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n        Console.\n    }\n}\n\n\n","offset":620,"fileType":"csharp","requestStartTime":1517937140326}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        \n        for(int i=arr.; i<=arr.Length; i++)\n        {\n          \n            arr[i]=n;\n            n--;\n            Console.Write(arr[i]);\n        }\n        \n        \n    }\n}\n\n\n","offset":345,"fileType":"csharp","requestStartTime":1517937199331}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.\n        \n        \n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1517937288629}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        double size = arr.Length;\n        Console.WriteLine(\"%.\",(double)arr.Where(x => x > 0).Count() / size);\n        Console.WriteLine((double)arr.Where(x => x == 0).Count() / size);\n        Console.WriteLine((double)arr.Where(x => x < 0).Count() / size);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":206,"fileType":"csharp","requestStartTime":1517937359364}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i=0; i<=arr.)\n        Console.Write(arr[n]);\n        \n        \n    }\n}\n\n\n","offset":342,"fileType":"csharp","requestStartTime":1517937362881}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        double size = arr.Length;\n        Console.WriteLine(string.\"%.6f\", (double)arr.Where(x => x > 0).Count() / size);\n        Console.WriteLine(\"%.6f\", (double)arr.Where(x => x == 0).Count() / size);\n        Console.WriteLine(\"%.6f\", (double)arr.Where(x => x < 0).Count() / size);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":210,"fileType":"csharp","requestStartTime":1517937412010}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        double size = arr.Length;\n        string.\n        Console.WriteLine(string.format(\"%.6f\", (double)arr.Where(x => x > 0).Count() / size));\n        Console.WriteLine(string.format(\"%.6f\", (double)arr.Where(x => x == 0).Count() / size));\n        Console.WriteLine(string.format(\"%.6f\", (double)arr.Where(x => x < 0).Count() / size));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":192,"fileType":"csharp","requestStartTime":1517937463409}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public static void printArrayReverse(object[] arr) {\n        arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n    }\n}\n\n\n","offset":177,"fileType":"csharp","requestStartTime":1517937497742}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public static void printArrayReverse(int n, object[] arr) {\n        for (int i = n - 1; i >= 0; i--) {\n            Consol.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n    }\n}\n\n\n","offset":234,"fileType":"csharp","requestStartTime":1517937525258}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public static void printArrayReverse(int n, object[] arr) {\n        for (int i = n - 1; i >= 0; i--) {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1517937526164}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public static void printArrayReverse(int n, object[] arr) {\n        for (int i = n - 1; i >= 0; i--) {\n            Console.Write(arr[i].\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517937548439}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public static void printArrayReverse(int n, object[] arr) {\n        for (int i = n - 1; i >= 0; i--) {\n            Console.Write(arr[i].ToString());\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Solution.\n    }\n}\n\n\n","offset":505,"fileType":"csharp","requestStartTime":1517937578546}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    public static void printArrayReverse(int n, object[] arr) {\n        for (int i = n - 1; i >= 0; i--) {\n            Console.Write(arr[i].ToString());\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Solution.\n    }\n}\n\n\n","offset":505,"fileType":"csharp","requestStartTime":1517937579154}}
{"body": {"column":46,"line":9,"wordToComplete":"0:0.######}\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        double size = arr.Length;\n        Console.WriteLine(string.Format(\"{0:0.######}\", (double)arr.Where(x => x > 0).Count() / size));\n        Console.WriteLine(string.Format(\"{0:######}\", (double)arr.Where(x => x == 0).Count() / size));\n        Console.WriteLine(string.Format(\"{0:######}\", (double)arr.Where(x => x < 0).Count() / size));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":223,"fileType":"csharp","requestStartTime":1517937686946}}
{"body": {"column":46,"line":10,"wordToComplete":"0:0.######}\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        double size = arr.Length;\n        Console.WriteLine(string.Format(\"{0:0.######}\", (double)arr.Where(x => x > 0).Count() / size));\n        Console.WriteLine(string.Format(\"{0:0.######}\", (double)arr.Where(x => x == 0).Count() / size));\n        Console.WriteLine(string.Format(\"{0:######}\", (double)arr.Where(x => x < 0).Count() / size));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":327,"fileType":"csharp","requestStartTime":1517937690866}}
{"body": {"column":46,"line":11,"wordToComplete":"0:0.######}\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        double size = arr.Length;\n        Console.WriteLine(string.Format(\"{0:0.######}\", (double)arr.Where(x => x > 0).Count() / size));\n        Console.WriteLine(string.Format(\"{0:0.######}\", (double)arr.Where(x => x == 0).Count() / size));\n        Console.WriteLine(string.Format(\"{0:0.######}\", (double)arr.Where(x => x < 0).Count() / size));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":432,"fileType":"csharp","requestStartTime":1517937692986}}
{"body": {"column":42,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public class Cloud\n    {\n        public long radius;\n        public long position;\n        public List<Town> Shading = new List<Town>();\n        \n        public bool Covers(Town t)\n        {\n            return Math.Abs(this.position-t.position) <= this.radius;\n        }\n    }\n    \n    public class Town\n    {\n        public long population;\n        public long position;\n        public Cloud ShadedBy;\n        \n        public bool CoveredBy(IEnumerable<Cloud> clouds)\n        {\n            return clouds.Any( c => c.Covers(this));\n        }\n    }\n    \n    static long maximumPeople(long[] p, long[] x, long[] y, long[] r) {\n        // Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n        List<Town> towns = new List<Town>(p.Length)\n        \n        var towns = p.Zip(x, (a,b)=> new Town(){ population=a, position=b}).ToList();\n        var clouds = y.Zip(r, (a,b)=>new Cloud(){position=a, radius=b}).ToList();\n\n        var all_pop =towns.Sum(t =>t.population);\n        long always_shaded = 0;\n        \n        // Build caches of cloud coverage\n        for(int i = towns.Count-1; i >= 0; --i)\n        {\n            Town t = towns[i];\n            foreach(Cloud cloud in clouds)\n            {\n                if (cloud.Covers(t))\n                {\n                    if (t.ShadedBy != null)\n                    {\n                        // town already covered by a cloud, so this is second cloud\n                        //  therefore it will always be shaded even if we remove a single cloud\n                        towns.RemoveAt(i);\n                        always_shaded += t.population;\n                        break;\n                    }\n                    else\n                    {\n                        t.ShadedBy = cloud;\n                    }\n                }\n            }\n        }\n        \n        Dictionary<Cloud, long> d_cloud_to_shaded = new Dictionary<Cloud, long>();\n        \n        \n        foreach(Town t in towns)\n        {\n            if (t.ShadedBy != null)\n            {\n                long shaded;\n                if (d_cloud_to_shaded.TryGetValue(t.ShadedBy, out shaded))\n                {\n                    d_cloud_to_shaded[t.ShadedBy] = shaded + t.population;\n                }\n                else\n                {\n                    d_cloud_to_shaded[t.ShadedBy] = t.population;\n                }\n            }\n        }\n        \n        if (d_cloud_to_shaded.Count < 1) return all_pop;\n        \n        var sometimes_shaded = d_cloud_to_shaded.Values.Sum();\n        return all_pop - always_shaded - sometimes_shaded + d_cloud_to_shaded.Values.Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] p_temp = Console.ReadLine().Split(' ');\n        long[] p = Array.ConvertAll(p_temp,Int64.Parse);\n        string[] x_temp = Console.ReadLine().Split(' ');\n        long[] x = Array.ConvertAll(x_temp,Int64.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] y_temp = Console.ReadLine().Split(' ');\n        long[] y = Array.ConvertAll(y_temp,Int64.Parse);\n        string[] r_temp = Console.ReadLine().Split(' ');\n        long[] r = Array.ConvertAll(r_temp,Int64.Parse);\n        long result = maximumPeople(p, x, y, r);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":885,"fileType":"csharp","requestStartTime":1517937716499}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 0; i < n; i++)\n            Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":194,"fileType":"csharp","requestStartTime":1517937867997}}
{"body": {"column":37,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 0; i < n; i++)\n            Console.WriteLine(string.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517937881773}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i=arr.; i<=arr.Length; i++)\n        {\n            \n        }\n        \n    }\n}\n\n\n","offset":336,"fileType":"csharp","requestStartTime":1517938062741}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i=arr.Length-1; i<=0; i--)\n        {\n            Console.\n        }\n        \n    }\n}\n\n\n","offset":387,"fileType":"csharp","requestStartTime":1517938078672}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i=0; i<=arr.; i--)\n        {\n            Console.Write(arr[i]);\n        }\n        for(int i=(arr.Length)-1; i<=0; i--)\n        {\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":342,"fileType":"csharp","requestStartTime":1517938143024}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 1; i < n; i++)\n        {\n            Console.\n            for(int j = n - 1; j < n; j++)\n                \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517938173491}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i=0; i<=arr.Length; i++)\n        {\n            Console.Write(arr[i]+\" \");\n            Conole.\n        }\n        for(int i=(arr.Length)-1; i<=0; i--)\n        {\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":423,"fileType":"csharp","requestStartTime":1517938220292}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i=0; i<=arr.Length; i++)\n        {\n            Console.Write(arr[i]+\" \");\n            Console.\n        }\n        for(int i=(arr.Length)-1; i<=0; i--)\n        {\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":424,"fileType":"csharp","requestStartTime":1517938222916}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        string temp = \"#\";\n        for(int i = 1; i < n; i++)\n        {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":231,"fileType":"csharp","requestStartTime":1517938345111}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        int test;\n        test = arr(a => a.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":239,"fileType":"csharp","requestStartTime":1517938484357}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(n=arr.; n<=0; n--)\n        {\n       \n            Console.Write(arr[n]);\n            \n        }\n        for(int i=(arr.Length)-1; i<=0; i--)\n        {\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":332,"fileType":"csharp","requestStartTime":1517938498926}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.\n        for(; n<=0; n--)\n        {\n       \n            Console.Write(arr[n]);\n            \n        }\n        for(int i=(arr.Length)-1; i<=0; i--)\n        {\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1517938536877}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] counts(int[] nums, int[] maxes) {\n        maxes.Select(x => )\n        \n        var results = new List<int>();\n        \n        \n        foreach(var i in maxes)\n        {\n            var count = nums.Count(x => x <= i);\n            results.Add(count);\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int nums_size = 0;\n        nums_size = Convert.ToInt32(Console.ReadLine());\n        int[] nums = new int [nums_size];\n        int nums_item;\n        for(int nums_i = 0; nums_i < nums_size; nums_i++) {\n            nums_item = Convert.ToInt32(Console.ReadLine());\n            nums[nums_i] = nums_item;\n        }\n\n        int maxes_size = 0;\n        maxes_size = Convert.ToInt32(Console.ReadLine());\n        int[] maxes = new int [maxes_size];\n        int maxes_item;\n        for(int maxes_i = 0; maxes_i < maxes_size; maxes_i++) {\n            maxes_item = Convert.ToInt32(Console.ReadLine());\n            maxes[maxes_i] = maxes_item;\n        }\n\n        res = counts(nums, maxes);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":232,"fileType":"csharp","requestStartTime":1517938548126}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] counts(int[] nums, int[] maxes) {\n        maxes.Select(x => nums.)\n        \n        var results = new List<int>();\n        \n        \n        foreach(var i in maxes)\n        {\n            var count = nums.Count(x => x <= i);\n            results.Add(count);\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int nums_size = 0;\n        nums_size = Convert.ToInt32(Console.ReadLine());\n        int[] nums = new int [nums_size];\n        int nums_item;\n        for(int nums_i = 0; nums_i < nums_size; nums_i++) {\n            nums_item = Convert.ToInt32(Console.ReadLine());\n            nums[nums_i] = nums_item;\n        }\n\n        int maxes_size = 0;\n        maxes_size = Convert.ToInt32(Console.ReadLine());\n        int[] maxes = new int [maxes_size];\n        int maxes_item;\n        for(int maxes_i = 0; maxes_i < maxes_size; maxes_i++) {\n            maxes_item = Convert.ToInt32(Console.ReadLine());\n            maxes[maxes_i] = maxes_item;\n        }\n\n        res = counts(nums, maxes);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":237,"fileType":"csharp","requestStartTime":1517938550213}}
{"body": {"column":51,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] counts(int[] nums, int[] maxes) {\n        maxes.Select(x => nums.Count(y => y <= x)).;\n        \n        var results = new List<int>();\n        \n        \n        foreach(var i in maxes)\n        {\n            var count = nums.Count(x => x <= i);\n            results.Add(count);\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int nums_size = 0;\n        nums_size = Convert.ToInt32(Console.ReadLine());\n        int[] nums = new int [nums_size];\n        int nums_item;\n        for(int nums_i = 0; nums_i < nums_size; nums_i++) {\n            nums_item = Convert.ToInt32(Console.ReadLine());\n            nums[nums_i] = nums_item;\n        }\n\n        int maxes_size = 0;\n        maxes_size = Convert.ToInt32(Console.ReadLine());\n        int[] maxes = new int [maxes_size];\n        int maxes_item;\n        for(int maxes_i = 0; maxes_i < maxes_size; maxes_i++) {\n            maxes_item = Convert.ToInt32(Console.ReadLine());\n            maxes[maxes_i] = maxes_item;\n        }\n\n        res = counts(nums, maxes);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":257,"fileType":"csharp","requestStartTime":1517938563612}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static int getValue(int[] arr)\n    {\n        return arr.\n    }\n}\n\n\n","offset":413,"fileType":"csharp","requestStartTime":1517938587472}}
{"body": {"column":29,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static int getValue(int[] arr, int i)\n    {\n        return arr.Where(x =>)\n    }\n}\n\n\n","offset":430,"fileType":"csharp","requestStartTime":1517938600903}}
{"body": {"column":38,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static int getValue(int[] arr, int i)\n    {\n        return arr.Where(x => x != i).\n    }\n}\n\n\n","offset":439,"fileType":"csharp","requestStartTime":1517938607127}}
{"body": {"column":33,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int[] temp = new int[arr.];\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static int getValue(int[] arr, int i)\n    {\n        return arr.Where(x => x != i).Sum();\n    }\n}\n\n\n","offset":177,"fileType":"csharp","requestStartTime":1517938642061}}
{"body": {"column":38,"line":40,"wordToComplete":"0.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\npublic interface Coffee\n{\n    double GetCost();\n    List<string> GetIngredients();\n}\n\npublic sealed class SimpleCoffee : Coffee\n{\n    public double GetCost()\n    {\n        return 0.6;\n    }\n\n    public List<string> GetIngredients()\n    {\n        return new List<string> { \"coffee\" };\n    }\n}\n\nclass Cappuccino : SimpleCoffee {\n    Cappuccino(Coffee coffee) {\n        \n    }\n    \n    override public double GetCost() {\n        return base.GetCost()*2;\n    }\n}\n\nclass Macchiato : SimpleCoffee {\n    Macchiato(Coffee coffee) {\n        \n    }\n    \n    override public double GetCost() {\n        return base.GetCost() * 2 + 0.;\n    }\n}\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        \n        var coffee = new SimpleCoffee();\n        \n        var cappuccino = new Cappuccino(coffee);\n        Console.WriteLine($\"I'm a {cappuccino.GetType().Name} and cost {cappuccino.GetCost()}€.\");\n        Console.WriteLine($\"I have {String.Join(\" and \", cappuccino.GetIngredients())}.\");\n        \n        var macchiato = new Macchiato(coffee);\n        Console.WriteLine($\"I'm a {macchiato.GetType().Name} and cost {macchiato.GetCost()}€.\");\n        Console.WriteLine($\"I have {String.Join(\" and \", macchiato.GetIngredients())}.\");\n    }\n}\n}\n","offset":707,"fileType":"csharp","requestStartTime":1517938646427}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n         Console.Write(n);\n      \nn--;\n        Console.\n        \n    }\n}\n\n\n","offset":369,"fileType":"csharp","requestStartTime":1517938652906}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n      for(int i=0; i<=n; i++)\n      {\n          Console.\n      }\n        \n    }\n}\n\n\n","offset":370,"fileType":"csharp","requestStartTime":1517938690468}}
{"body": {"column":31,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long[] temp = new long[arr.Length];\n        for(int i = 0; i < arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static long getValue(int[] arr, int i)\n    {\n        return arr.Where(x => x != i).Sum();\n    }\n}\n\n\n","offset":219,"fileType":"csharp","requestStartTime":1517938720275}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long[] temp = new long[arr.Length];\n        for(int i = 0; i < arr.Length; i++)\n        {\n            temp[i] = getValue(arr, arr[i]);\n        }\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static long getValue(int[] arr, int i)\n    {\n        return arr.Where(x => x != i).Sum();\n    }\n}\n\n\n","offset":313,"fileType":"csharp","requestStartTime":1517938751330}}
{"body": {"column":38,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long[] temp = new long[arr.Length];\n        for(int i = 0; i < arr.Length; i++)\n        {\n            temp[i] = getValue(arr, arr[i]);\n        }\n        Console.Write(\"{0} {1}\", temp.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static long getValue(int[] arr, int i)\n    {\n        return arr.Where(x => x != i).Sum();\n    }\n}\n\n\n","offset":335,"fileType":"csharp","requestStartTime":1517938777625}}
{"body": {"column":50,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long[] temp = new long[arr.Length];\n        for(int i = 0; i < arr.Length; i++)\n        {\n            temp[i] = getValue(arr, arr[i]);\n        }\n        Console.Write(\"{0} {1}\", temp.Min(), temp.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static long getValue(int[] arr, int i)\n    {\n        return arr.Where(x => x != i).Sum();\n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517938786489}}
{"body": {"column":8,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \nconsole.\n\n    }\n}\n","offset":658,"fileType":"csharp","requestStartTime":1517938852028}}
{"body": {"column":21,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int i1 = console.\n    \n\n    }\n}\n","offset":671,"fileType":"csharp","requestStartTime":1517938897511}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) {\n    int n = Convert.ToInt32(Console.ReadLine());\n    string[] a_temp = Console.ReadLine().Split(' ');\n    int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n\n    int totalSwaps = 0;\n    int numSwaps = 1;\n    while (numSwaps != 0)\n    {\n      numSwaps = 0;\n      for(int i = 0; i<n; i++)\n      {\n        if(a[i] > a[i+1])\n        {\n          var big = a[i];\n          a[i] = a[i+1];\n          a[i+1] = big;\n          numSwaps = numSwaps + 1;\n        }\n      }\n      totalSwaps = totalSwaps + numSwaps;\n    }\n    \n    Console.\n  }\n}\n\n\n","offset":661,"fileType":"csharp","requestStartTime":1517938907142}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int i1 = console.ReadLine();\n    double d1 = console.\n    \n\n    }\n}\n","offset":707,"fileType":"csharp","requestStartTime":1517938912639}}
{"body": {"column":61,"line":30,"wordToComplete":"Array is sorted in {totalSwaps} swaps.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) {\n    int n = Convert.ToInt32(Console.ReadLine());\n    string[] a_temp = Console.ReadLine().Split(' ');\n    int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n\n    int totalSwaps = 0;\n    int numSwaps = 1;\n    while (numSwaps != 0)\n    {\n      numSwaps = 0;\n      for(int i = 0; i<n; i++)\n      {\n        if(a[i] > a[i+1])\n        {\n          var big = a[i];\n          a[i] = a[i+1];\n          a[i+1] = big;\n          numSwaps = numSwaps + 1;\n        }\n      }\n      totalSwaps = totalSwaps + numSwaps;\n    }\n    \n    Console.WriteLine(\"Array is sorted in {totalSwaps} swaps.\")\n  }\n}\n\n\n","offset":710,"fileType":"csharp","requestStartTime":1517938921031}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) {\n    int n = Convert.ToInt32(Console.ReadLine());\n    string[] a_temp = Console.ReadLine().Split(' ');\n    int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n\n    int totalSwaps = 0;\n    int numSwaps = 1;\n    while (numSwaps != 0)\n    {\n      numSwaps = 0;\n      for(int i = 0; i<n; i++)\n      {\n        if(a[i] > a[i+1])\n        {\n          var big = a[i];\n          a[i] = a[i+1];\n          a[i+1] = big;\n          numSwaps = numSwaps + 1;\n        }\n      }\n      totalSwaps = totalSwaps + numSwaps;\n    }\n    \n    Console.WriteLine(\"Array is sorted in {totalSwaps} swaps.\");\n    Console.\n  }\n}\n\n\n","offset":726,"fileType":"csharp","requestStartTime":1517938924919}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int i1 = console.ReadLine();\n    double d1 = console.ReadLine();\n    string s1 = console.\n    \n\n    }\n}\n","offset":743,"fileType":"csharp","requestStartTime":1517938927907}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n  static void Main(String[] args) {\n    int n = Convert.ToInt32(Console.ReadLine());\n    string[] a_temp = Console.ReadLine().Split(' ');\n    int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n\n    int totalSwaps = 0;\n    int numSwaps = 1;\n    while (numSwaps != 0)\n    {\n      numSwaps = 0;\n      for(int i = 0; i<n; i++)\n      {\n        if(a[i] > a[i+1])\n        {\n          var big = a[i];\n          a[i] = a[i+1];\n          a[i+1] = big;\n          numSwaps = numSwaps + 1;\n        }\n      }\n      totalSwaps = totalSwaps + numSwaps;\n    }\n    \n    Console.WriteLine(\"Array is sorted in {totalSwaps} swaps.\");\n    Console.WriteLine(\"First Element: {a[0]}\");\n    Console.\n  }\n}\n\n\n","offset":774,"fileType":"csharp","requestStartTime":1517938946829}}
{"body": {"column":31,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long[] temp = new long[arr.Length];\n        for(int i = 0; i < arr.Length; i++)\n        {\n            temp[i] = getValue(arr, arr[i]);\n        }\n        Console.Write(\"{0} {1}\", temp.Min(), temp.Max());\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n    \n    static long getValue(int[] arr, long n)\n    {\n        long temp = 0;\n        for(int i = 0; i < arr.)\n    }\n}\n\n\n","offset":659,"fileType":"csharp","requestStartTime":1517938977716}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        for(i=0;i<ar.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":208,"fileType":"csharp","requestStartTime":1517939163960}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        return ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517939543627}}
{"body": {"column":37,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        return ar.Where(x => x == ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":195,"fileType":"csharp","requestStartTime":1517939558282}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.\n\n    \n\n    }\n}\n","offset":666,"fileType":"csharp","requestStartTime":1517939567195}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = ar.\n        return ar.Where(x => x == ar.Ma\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":179,"fileType":"csharp","requestStartTime":1517939567186}}
{"body": {"column":30,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(console.\n\n    \n\n    }\n}\n","offset":680,"fileType":"csharp","requestStartTime":1517939572670}}
{"body": {"column":39,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = ar.Max();\n        return ar.Where(x => x == max).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":225,"fileType":"csharp","requestStartTime":1517939578273}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(console.ReadLine());\n    double b = double.\n\n    \n\n    }\n}\n","offset":715,"fileType":"csharp","requestStartTime":1517939592422}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = ar.Max();\n        return ar.Count();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517939591697}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = ar.Max();\n        return ar.Count(x => );\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":215,"fileType":"csharp","requestStartTime":1517939594646}}
{"body": {"column":36,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(console.ReadLine());\n    double b = double.Parse(console.\n\n    \n\n    }\n}\n","offset":729,"fileType":"csharp","requestStartTime":1517939601584}}
{"body": {"column":23,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(console.ReadLine());\n    double b = double.Parse(console.ReadLine());\n    string c = Console.\n\n    \n\n    }\n}\n","offset":765,"fileType":"csharp","requestStartTime":1517939623403}}
{"body": {"column":27,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517939670959}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(times.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517939702558}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(times.Last().\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":212,"fileType":"csharp","requestStartTime":1517939708430}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(times.Last()..EndsWith(\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":212,"fileType":"csharp","requestStartTime":1517939715813}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":264,"fileType":"csharp","requestStartTime":1517939761636}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(s.)\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":201,"fileType":"csharp","requestStartTime":1517939830402}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(s.ToLower().)\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517939835514}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(Console.ReadLine());\n    double b = double.Parse(Console.ReadLine());\n    string c = Console.ReadLine();\n    \n    Console.\n\n    \n\n    }\n}\n","offset":794,"fileType":"csharp","requestStartTime":1517939848836}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        string[] times = s.Split(':');\n        if(s.ToLower().EndsWith(\"pm\"))\n        {\n            if(s.)\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":254,"fileType":"csharp","requestStartTime":1517939855713}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        \n        Array.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":181,"fileType":"csharp","requestStartTime":1517939868284}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.\n        string[] times = s.Split(':');\n        if(s.ToLower().EndsWith(\"pm\"))\n        {\n            if(s.toL)\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":163,"fileType":"csharp","requestStartTime":1517939865921}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.EndsWith(\"pm\"))\n        {\n            if(s.)\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":269,"fileType":"csharp","requestStartTime":1517939885449}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(Console.ReadLine());\n    double b = double.Parse(Console.ReadLine());\n    string c = Console.ReadLine();\n    \n    Console.WriteLine(a);\n    Console.\n\n    \n\n    }\n}\n","offset":820,"fileType":"csharp","requestStartTime":1517939916657}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n    int a = int.Parse(Console.ReadLine());\n    double b = double.Parse(Console.ReadLine());\n    string c = Console.ReadLine();\n    \n    Console.WriteLine(a);\n    Console.WriteLine(b);\n    Console.\n\n    \n\n    }\n}\n","offset":846,"fileType":"csharp","requestStartTime":1517939925869}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.EndsWith(\"pm\"))\n        {\n            int hours = Integer.\n            if(s.Equals(\"12:00:00\")\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":284,"fileType":"csharp","requestStartTime":1517939947727}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.EndsWith(\"pm\"))\n        {\n            int hours = int.\n            if(s.Equals(\"12:00:00\")\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":280,"fileType":"csharp","requestStartTime":1517939952367}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.EndsWith(\"pm\"))\n        {\n            int hours = (int.Parse(times[0]) + 12) % 24\n            return string.\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":334,"fileType":"csharp","requestStartTime":1517939992631}}
{"body": {"column":33,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        \n        Array.Sort(ar);\n        int tallest = arr[n-1];\n        int tallestCount = 0;\n        \n        for(int i = 0; i< n; i++)\n        {\n            if (arr[i] == tallest)\n                ++tallestCount;\n       }\n        Console.WriteLine(string.tallestCount);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517940009498}}
{"body": {"column":74,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.EndsWith(\"pm\"))\n        {\n            int hours = (int.Parse(times[0]) + 12) % 24\n            return string.Format(\"{0}:{1}:{2}\", hours, times[1], times[2].)\n        }\n        if(times.Last().ToLower().EndsWith(\"pm\"))\n            return string.Format(\"{0}:{1}:{2}\",\n                                )\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":382,"fileType":"csharp","requestStartTime":1517940029165}}
{"body": {"column":21,"line":100,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        Dictionary<string, int> wordList = new Dictionary<string. int>();\n        int value; int sum;        \n        for (int i = 0; i < words.Length; i++){\n            value = 0; sum = 0;\n            char[] word = words[i].ToUpper();\n            for (int j = 0; j < word.Length; j++){\n                char c = word[j];\n                switch (c) {\n                    case 'A':\n                        value = 2;\n                        break;\n                    case 'B':\n                        value = 2;\n                        break;\n                    case 'C':\n                        value = 3;\n                        break;\n                    case 'D':\n                        value = 4;\n                        break;\n                    case 'E':\n                        value = 10;\n                        break;\n                    case 'F';:\n                        value = 6;\n                        break;\n                    case 'G':\n                        value = 7;\n                        break;\n                    case 'H':\n                        value = 8;\n                        break;\n                    case 'I':\n                        value = 18;\n                        break;\n                    case 'J':\n                        value = 10;\n                        break;\n                    case 'K':\n                        value = 11;\n                        break;\n                    case 'L':\n                        value = 12;\n                        break;\n                    case 'M':\n                        value = 13;\n                        break;\n                    case 'N':\n                        value = 14;\n                        break;\n                    case 'O':\n                        value = 30;\n                        break;\n                    case 'P':\n                        value = 16;\n                        break;\n                    case 'Q':\n                        value = 17;\n                        break;\n                    case 'R':\n                        value = 18;\n                        break;\n                    case 'S':\n                        value = 19;\n                        break;\n                    case 'T':\n                        value = 20;\n                        break;\n                    case 'U':\n                        value = 2*21;\n                        break;\n                    case 'V':\n                        value = 22;\n                        break;\n                    case 'W':\n                        value = 23;\n                        break;\n                    case 'X':\n                        value = 24;\n                        break;\n                    case 'Y':\n                        value = 25;\n                        break;\n                    case 'Z':\n                        value = 26;\n                        break;\n                }\n                sum += value;\n            }\n            wordList.\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":3161,"fileType":"csharp","requestStartTime":1517940053648}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        \n        Array.Sort(ar);\n        int tallest = ar[n-1];\n        int tallestCount = 0;\n        \n        for(int i = 0; i< n; i++)\n        {\n            if (ar[i] == tallest)\n                ++tallestCount;\n       }\n        \n        tallestCount = ar.\n        return tallestCount;\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517940105154}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        \n        Array.Sort(ar);\n        int tallest = ar[n-1];\n        int tallestCount = 0;\n        \n        for(int i = 0; i< n; i++)\n        {\n            if (ar[i] == tallest)\n                ++tallestCount;\n       }\n        \n        tallestCount = ar.\n        return tallestCount;\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517940114513}}
{"body": {"column":38,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        \n        Array.Sort(ar);\n        int tallest = ar[n-1];\n        int tallestCount = 0;\n        \n        for(int i = 0; i< n; i++)\n        {\n            if (ar[i] == tallest)\n                ++tallestCount;\n       }\n        \n        tallestCount = ar.Count(x =>x.\n        return tallestCount;\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":427,"fileType":"csharp","requestStartTime":1517940123545}}
{"body": {"column":44,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        \n        Array.Sort(ar);\n        int tallest = ar[n-1];\n        int tallestCount = 0;\n        \n        for(int i = 0; i< n; i++)\n        {\n            if (ar[i] == tallest)\n                ++tallestCount;\n       }\n        \n        tallestCount = ar.Count(x =>x == ar.\n        return tallestCount;\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":433,"fileType":"csharp","requestStartTime":1517940139065}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        string hydro = \"hydro\", ic = \"ic\";\n        if(acid_name.)\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1517940292054}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.)\n        if(s.EndsWith(\"pm\"))\n        {\n            int hours = (int.Parse(times[0]) + 12) % 24;\n            return string.Format(\"{0}:{1}:{2}\", hours, times[1], times[2].Substring(0, 2));\n        }\n        else\n        {\n            return string.Format(\"{0}:{1}:{2}\", times[0], times[1], times[2].Substring(0, 2));\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":226,"fileType":"csharp","requestStartTime":1517940296293}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToLower();\n        string[] times = s.Split(':');\n        if(s.Equals(\"12:00:00AM\")\n           return \"00:00:00\";\n           if(s.)\n        if(s.EndsWith(\"pm\"))\n        {\n            int hours = (int.Parse(times[0]) + 12) % 24;\n            return string.Format(\"{0}:{1}:{2}\", hours, times[1], times[2].Substring(0, 2));\n        }\n        else\n        {\n            return string.Format(\"{0}:{1}:{2}\", times[0], times[1], times[2].Substring(0, 2));\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":293,"fileType":"csharp","requestStartTime":1517940330932}}
{"body": {"column":29,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = int64.\n            string c = Console.ReadLine();\n        \n    \n\n    }\n}\n","offset":730,"fileType":"csharp","requestStartTime":1517940344252}}
{"body": {"column":29,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = int32.\n            string c = Console.ReadLine();\n        \n    \n\n    }\n}\n","offset":730,"fileType":"csharp","requestStartTime":1517940349685}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = double.\n            string c = Console.ReadLine();\n        \n    \n\n    }\n}\n","offset":731,"fileType":"csharp","requestStartTime":1517940352888}}
{"body": {"column":44,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = double.Parse(Console.\n            string c = Console.ReadLine();\n        \n    \n\n    }\n}\n","offset":745,"fileType":"csharp","requestStartTime":1517940359004}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = double.Parse(Console.ReadLine());\n            string c = Console.ReadLine();\n            Console.\n    \n\n    }\n}\n","offset":821,"fileType":"csharp","requestStartTime":1517940391733}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = double.Parse(Console.ReadLine());\n            string c = Console.ReadLine();\n            Console.WriteLine(i+a);\n            Console.\n    \n\n    }\n}\n","offset":857,"fileType":"csharp","requestStartTime":1517940419073}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n            int a = int.Parse(Console.ReadLine());\n            double b = double.Parse(Console.ReadLine());\n            string c = Console.ReadLine();\n            Console.WriteLine(i+a);\n            Console.WriteLine(d+b);\n            Console.\n    \n\n    }\n}\n","offset":893,"fileType":"csharp","requestStartTime":1517940438676}}
{"body": {"column":52,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        string hydro = \"hydro\", ic = \"ic\";\n        if(acid_name.StartsWith(hydro) && acid_name.With(hydro))\n            return \"non-metal acid\";\n        else if(acid_name.)\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517940480890}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]a={b0,b1,b2};\n        for(int i=0;i<a.)\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":287,"fileType":"csharp","requestStartTime":1517940484212}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        string hydro = \"hydro\", ic = \"ic\";\n        if(acid_name.StartsWith(hydro) && acid_nameEndsWith(ic))\n            return \"non-metal acid\";\n        else if(acid_name.)\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":324,"fileType":"csharp","requestStartTime":1517940497873}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]b={b0,b1,b2};\n        for(int i=0;i<a.Length;i++){\n            if(a[i]>)\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":320,"fileType":"csharp","requestStartTime":1517940533476}}
{"body": {"column":52,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        string hydro = \"hydro\", ic = \"ic\";\n        if(acid_name.StartsWith(hydro) && acid_name.EndsWith(ic))\n            return \"non-metal acid\";\n        else if(acid_name.EndsWith(ic))\n            return \"ployatomic acid\";\n        return \"not an acid\";\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517940542622}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToUpper();\n        string[] times = s.Split(':');\n        if(s.)\n           return \"00:00:00\";\n        if(s.Equals(\"12:00:00AM\"))\n           return \"12:00:00\";\n        if(s.EndsWith(\"PM\"))\n        {\n            int hours = (int.Parse(times[0]) + 12) % 24;\n            return string.Format(\"{0}:{1}:{2}\", hours, times[1], times[2].Substring(0, 2));\n        }\n        else\n        {\n            return string.Format(\"{0}:{1}:{2}\", times[0], times[1], times[2].Substring(0, 2));\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":226,"fileType":"csharp","requestStartTime":1517940589276}}
{"body": {"column":35,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        s = s.ToUpper();\n        string[] times = s.Split(':');\n        if(s.StartsWith(\"12\") && s.\n           return \"00:00:00\";\n        if(s.Equals(\"12:00:00AM\"))\n           return \"12:00:00\";\n        if(s.EndsWith(\"PM\"))\n        {\n            int hours = (int.Parse(times[0]) + 12) % 24;\n            return string.Format(\"{0}:{1}:{2}\", hours, times[1], times[2].Substring(0, 2));\n        }\n        else\n        {\n            return string.Format(\"{0}:{1}:{2}\", times[0], times[1], times[2].Substring(0, 2));\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517940601083}}
{"body": {"column":19,"line":12,"wordToComplete":"0.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":309,"fileType":"csharp","requestStartTime":1517940660219}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=strim.\n\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":335,"fileType":"csharp","requestStartTime":1517940679594}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.\n\n        \n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":336,"fileType":"csharp","requestStartTime":1517940681194}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Console.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940697818}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.Console.ReadLine()\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940711003}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.Console.ReadLine()\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940713178}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.Console.ReadLine()\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940740475}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.Console.ReadLine()\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940742954}}
{"body": {"column":24,"line":47,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    const char Blocked = 'X';\n    const char PortKey = '*';\n    static int count = 0;\n    static bool found = false;\n    \n    static int CountLuck(char[][] matrix) {\n        int x = 0;\n        int y = 0;\n        count = 0;\n        found = false;\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                if (matrix[i][j] == 'M') {\n                    x = j;\n                    y = i;\n                }\n            }         \n        }\n        FindPortKey(matrix, new Vector(0,0), x, y);\n        return count;\n    }\n    \n    static void FindPortKey(char[][] matrix, Vector heading, int posX, int posY) {\n        if (matrix[posY][posX] == PortKey) return;\n        var moves = GetMoves(matrix, heading, posX, posY).ToList();\n        if (moves.Count() == 0) {\n            matrix[posY][posX] = Blocked;\n            return;\n        }\n        if (moves.Count() > 1) count++;\n        foreach (var move in moves) {\n            FindPortKey(matrix, move, posX + move.x, posY + move.y);\n        }\n        if (!found) count--;       \n        matrix[posY][posX] = Blocked;\n    }\n    \n    static void PrintMatrix(char[][] matrix) {\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                Console.\n            }         \n        }\n    }\n    \n    static IEnumerable<Vector> GetMoves(char[][] matrix, Vector heading, int x, int y) {\n        if (y + 1 < matrix.Length && matrix[y+1][x] != Blocked && heading.y >= 0)\n            yield return new Vector(0, 1);\n        if (y - 1 >= 0 && matrix[y-1][x] != Blocked && heading.y <= 0)\n            yield return new Vector(0, -1);\n        if (x + 1 < matrix[y].Length && matrix[y][x+1] != Blocked && heading.x >= 0)\n            yield return new Vector(1, 0);\n        if (x - 1 >= 0 && matrix[y][x-1] != Blocked && heading.x <= 0)\n            yield return new Vector(-1, 0);\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int m = Convert.ToInt32(tokens_n[1]);\n            var matrix = new char[n][];\n            for(int i = 0; i < n; i++){\n                matrix[i] = Console.ReadLine().ToCharArray(); \n            }\n            int k = Int32.Parse(Console.ReadLine());\n            int count = CountLuck(matrix);\n            string result = count <= k ? \"Impressed\" : \"Oops!\";\n            Console.WriteLine(result);\n        }\n    }\n    \n    struct Vector {\n        public int x { get; }\n        public int y { get; }\n        public Vector(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n\n\n","offset":1418,"fileType":"csharp","requestStartTime":1517940743906}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.Console.ReadLine()\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940748875}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.Console.ReadLine()\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":447,"fileType":"csharp","requestStartTime":1517940753306}}
{"body": {"column":20,"line":49,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    const char Blocked = 'X';\n    const char PortKey = '*';\n    static int count = 0;\n    static bool found = false;\n    \n    static int CountLuck(char[][] matrix) {\n        int x = 0;\n        int y = 0;\n        count = 0;\n        found = false;\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                if (matrix[i][j] == 'M') {\n                    x = j;\n                    y = i;\n                }\n            }         \n        }\n        FindPortKey(matrix, new Vector(0,0), x, y);\n        return count;\n    }\n    \n    static void FindPortKey(char[][] matrix, Vector heading, int posX, int posY) {\n        if (matrix[posY][posX] == PortKey) return;\n        var moves = GetMoves(matrix, heading, posX, posY).ToList();\n        if (moves.Count() == 0) {\n            matrix[posY][posX] = Blocked;\n            return;\n        }\n        if (moves.Count() > 1) count++;\n        foreach (var move in moves) {\n            FindPortKey(matrix, move, posX + move.x, posY + move.y);\n        }\n        if (!found) count--;       \n        matrix[posY][posX] = Blocked;\n    }\n    \n    static void PrintMatrix(char[][] matrix) {\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                Console.Write(matrix[i][j]);\n            }  \n            Console.\n        }\n    }\n    \n    static IEnumerable<Vector> GetMoves(char[][] matrix, Vector heading, int x, int y) {\n        if (y + 1 < matrix.Length && matrix[y+1][x] != Blocked && heading.y >= 0)\n            yield return new Vector(0, 1);\n        if (y - 1 >= 0 && matrix[y-1][x] != Blocked && heading.y <= 0)\n            yield return new Vector(0, -1);\n        if (x + 1 < matrix[y].Length && matrix[y][x+1] != Blocked && heading.x >= 0)\n            yield return new Vector(1, 0);\n        if (x - 1 >= 0 && matrix[y][x-1] != Blocked && heading.x <= 0)\n            yield return new Vector(-1, 0);\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int m = Convert.ToInt32(tokens_n[1]);\n            var matrix = new char[n][];\n            for(int i = 0; i < n; i++){\n                matrix[i] = Console.ReadLine().ToCharArray(); \n            }\n            int k = Int32.Parse(Console.ReadLine());\n            int count = CountLuck(matrix);\n            string result = count <= k ? \"Impressed\" : \"Oops!\";\n            Console.WriteLine(result);\n        }\n    }\n    \n    struct Vector {\n        public int x { get; }\n        public int y { get; }\n        public Vector(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n\n\n","offset":1475,"fileType":"csharp","requestStartTime":1517940760805}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":494,"fileType":"csharp","requestStartTime":1517940785850}}
{"body": {"column":35,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":511,"fileType":"csharp","requestStartTime":1517940796410}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n\n\n        \n        // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.Read());\n        s=Console.\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":538,"fileType":"csharp","requestStartTime":1517940812954}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.Read());\n        s=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.\n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":618,"fileType":"csharp","requestStartTime":1517940835003}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.Read());\n        s=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.\n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":618,"fileType":"csharp","requestStartTime":1517940839389}}
{"body": {"column":8,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.Read());\n        s=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.WriteLine(i+j);\n        // Print the sum of the double variables on a new line.\n         Console.WriteLine(d+e);\n        // Concatenate and print the String variables on a new line    \n        // The 's' variable above should be printed first.\nConsole.\n        \n\n    }\n}\n","offset":870,"fileType":"csharp","requestStartTime":1517940900794}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]b={b0,b1,b2};\n        int []result=new int[a.];\n        for(int i=0;i<a.Length;i++){\n            if(a[i]>b[i]){\n              result[i]=1;  \n            }\n            if(a[i]<b[i]){\n                result[i]=1;\n            }\n        }\n        return result;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":294,"fileType":"csharp","requestStartTime":1517940935625}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\nfor (int i =1, i<arr.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":216,"fileType":"csharp","requestStartTime":1517941076151}}
{"body": {"column":32,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.ReadLine());\n        t=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.WriteLine(i+j);\n        // Print the sum of the double variables on a new line.\n         Console.WriteLine(cast.(d+e));\n        // Concatenate and print the String variables on a new line    \n        // The 's' variable above should be printed first.\n        Console.WriteLine(s+t);\n        \n\n    }\n}\n","offset":734,"fileType":"csharp","requestStartTime":1517941114954}}
{"body": {"column":32,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.ReadLine());\n        t=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.WriteLine(i+j);\n        // Print the sum of the double variables on a new line.\n         Console.WriteLine(Cast.(d+e));\n        // Concatenate and print the String variables on a new line    \n        // The 's' variable above should be printed first.\n        Console.WriteLine(s+t);\n        \n\n    }\n}\n","offset":734,"fileType":"csharp","requestStartTime":1517941118555}}
{"body": {"column":32,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.ReadLine());\n        t=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.WriteLine(i+j);\n        // Print the sum of the double variables on a new line.\n         Console.WriteLine(Math.(d+e));\n        // Concatenate and print the String variables on a new line    \n        // The 's' variable above should be printed first.\n        Console.WriteLine(s+t);\n        \n\n    }\n}\n","offset":734,"fileType":"csharp","requestStartTime":1517941178458}}
{"body": {"column":34,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.ReadLine());\n        t=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.WriteLine(i+j);\n        // Print the sum of the double variables on a new line.\n         Console.WriteLine(string.);\n        // Concatenate and print the String variables on a new line    \n        // The 's' variable above should be printed first.\n        Console.WriteLine(s+t);\n        \n\n    }\n}\n","offset":736,"fileType":"csharp","requestStartTime":1517941305754}}
{"body": {"column":17,"line":61,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.)\n        \n\n    }\n\n\n}\n","offset":1511,"fileType":"csharp","requestStartTime":1517941317372}}
{"body": {"column":47,"line":21,"wordToComplete":"0:0.}\"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j=0;\n        double e=0.0;\n        string t=string.Empty;\n     // Read and save an integer, double, and String to your variables.\n        j=Convert.ToInt32(Console.ReadLine());\n        e=Convert.ToDouble(Console.ReadLine());\n        t=Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        Console.WriteLine(i+j);\n        // Print the sum of the double variables on a new line.\n         Console.WriteLine(string.Format(\"{0:0.}\");\n        // Concatenate and print the String variables on a new line    \n        // The 's' variable above should be printed first.\n        Console.WriteLine(s+t);\n        \n\n    }\n}\n","offset":749,"fileType":"csharp","requestStartTime":1517941332586}}
{"body": {"column":17,"line":63,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        if (root.)\n            \n        \n\n    }\n\n\n}\n","offset":1563,"fileType":"csharp","requestStartTime":1517941377041}}
{"body": {"column":38,"line":63,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        if (root.left != null && root.)\n            \n        \n\n    }\n\n\n}\n","offset":1584,"fileType":"csharp","requestStartTime":1517941384619}}
{"body": {"column":27,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        if (root.left != null && root.data <= val)\n            isPresent(root.)\n            \n        \n\n    }\n\n\n}\n","offset":1624,"fileType":"csharp","requestStartTime":1517941411025}}
{"body": {"column":22,"line":65,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.data <= val)\n            return isPresent(root.left, val);\n        else if (root.)\n        \n\n    }\n\n\n}\n","offset":1670,"fileType":"csharp","requestStartTime":1517941454281}}
{"body": {"column":22,"line":65,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.data <= val)\n            return isPresent(root.left, val);\n        else if (root.)\n        \n\n    }\n\n\n}\n","offset":1670,"fileType":"csharp","requestStartTime":1517941457850}}
{"body": {"column":17,"line":65,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        \n        if (root.)\n        else if (root.left != null && root.data <= val)\n            return isPresent(root.left, val);\n        else if (root.right != null && )\n        \n\n    }\n\n\n}\n","offset":1581,"fileType":"csharp","requestStartTime":1517941472538}}
{"body": {"column":22,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.)\n    }\n\n\n}\n","offset":1577,"fileType":"csharp","requestStartTime":1517941523266}}
{"body": {"column":43,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.)\n    }\n\n\n}\n","offset":1598,"fileType":"csharp","requestStartTime":1517941536838}}
{"body": {"column":22,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.data <= val)\n            return isPresent(root, val);\n        else if (root.)\n    }\n\n\n}\n","offset":1674,"fileType":"csharp","requestStartTime":1517941575036}}
{"body": {"column":34,"line":65,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.data <= val)\n            return isPresent(root., val);\n        else if (root.right != null)\n            return is Present(ro)\n    }\n\n\n}\n","offset":1645,"fileType":"csharp","requestStartTime":1517941592116}}
{"body": {"column":35,"line":67,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.data <= val)\n            return isPresent(root.left, val);\n        else if (root.right != null)\n            return is Present(root.)\n    }\n\n\n}\n","offset":1729,"fileType":"csharp","requestStartTime":1517941595070}}
{"body": {"column":38,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    const char Blocked = 'X';\n    const char PortKey = '*';\n    static int count = 0;\n    static bool found = false;\n    \n    static int CountLuck(char[][] matrix) {\n        int x = 0;\n        int y = 0;\n        count = 0;\n        found = false;\n        var visited = new bool[matrix.]\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                if (matrix[i][j] == 'M') {\n                    x = j;\n                    y = i;\n                }\n            }         \n        }\n        FindPortKey(matrix, new Vector(0,0), x, y);\n        return count;\n    }\n    \n    static void FindPortKey(char[][] matrix, int posX, int posY) {\n        if (matrix[posY][posX] == PortKey) {\n            found = true;\n            return;\n        }\n        var moves = GetMoves(matrix, heading, posX, posY).ToList();\n        if (moves.Count() == 0) {\n            matrix[posY][posX] = Blocked;\n            return;\n        }\n        if (moves.Count() > 1) count++;\n        foreach (var move in moves) {           \n            FindPortKey(matrix, move, posX + move.x, posY + move.y);\n        }\n        if (moves.Count() > 1 && !found) count--;\n    }\n    \n    static void PrintMatrix(char[][] matrix) {\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                Console.Write(matrix[i][j]);\n            }  \n            Console.WriteLine();\n        }\n    }\n    \n    static IEnumerable<Vector> GetMoves(char[][] matrix, int x, int y) {\n        if (y + 1 < matrix.Length && matrix[y+1][x] != Blocked && heading.y >= 0)\n            yield return new Vector(0, 1);\n        if (y - 1 >= 0 && matrix[y-1][x] != Blocked && heading.y <= 0)\n            yield return new Vector(0, -1);\n        if (x + 1 < matrix[y].Length && matrix[y][x+1] != Blocked && heading.x >= 0)\n            yield return new Vector(1, 0);\n        if (x - 1 >= 0 && matrix[y][x-1] != Blocked && heading.x <= 0)\n            yield return new Vector(-1, 0);\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int m = Convert.ToInt32(tokens_n[1]);\n            var matrix = new char[n][];\n            for(int i = 0; i < n; i++){\n                matrix[i] = Console.ReadLine().ToCharArray(); \n            }\n            int k = Int32.Parse(Console.ReadLine());\n            int count = CountLuck(matrix);            \n            string result = k == count ? \"Impressed\" : \"Oops!\";\n            Console.WriteLine(result + \" \" + count);\n        }\n    }\n    \n    struct Vector {\n        public int x { get; }\n        public int y { get; }\n        public Vector(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n\n\n","offset":388,"fileType":"csharp","requestStartTime":1517941818655}}
{"body": {"column":38,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    const char Blocked = 'X';\n    const char PortKey = '*';\n    static int count = 0;\n    static bool found = false;\n    \n    static int CountLuck(char[][] matrix) {\n        int x = 0;\n        int y = 0;\n        count = 0;\n        found = false;\n        var visited = new bool[matrix.]\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                if (matrix[i][j] == 'M') {\n                    x = j;\n                    y = i;\n                }\n            }         \n        }\n        FindPortKey(matrix, new Vector(0,0), x, y);\n        return count;\n    }\n    \n    static void FindPortKey(char[][] matrix, int posX, int posY) {\n        if (matrix[posY][posX] == PortKey) {\n            found = true;\n            return;\n        }\n        var moves = GetMoves(matrix, heading, posX, posY).ToList();\n        if (moves.Count() == 0) {\n            matrix[posY][posX] = Blocked;\n            return;\n        }\n        if (moves.Count() > 1) count++;\n        foreach (var move in moves) {           \n            FindPortKey(matrix, move, posX + move.x, posY + move.y);\n        }\n        if (moves.Count() > 1 && !found) count--;\n    }\n    \n    static void PrintMatrix(char[][] matrix) {\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                Console.Write(matrix[i][j]);\n            }  \n            Console.WriteLine();\n        }\n    }\n    \n    static IEnumerable<Vector> GetMoves(char[][] matrix, int x, int y) {\n        if (y + 1 < matrix.Length && matrix[y+1][x] != Blocked && heading.y >= 0)\n            yield return new Vector(0, 1);\n        if (y - 1 >= 0 && matrix[y-1][x] != Blocked && heading.y <= 0)\n            yield return new Vector(0, -1);\n        if (x + 1 < matrix[y].Length && matrix[y][x+1] != Blocked && heading.x >= 0)\n            yield return new Vector(1, 0);\n        if (x - 1 >= 0 && matrix[y][x-1] != Blocked && heading.x <= 0)\n            yield return new Vector(-1, 0);\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int m = Convert.ToInt32(tokens_n[1]);\n            var matrix = new char[n][];\n            for(int i = 0; i < n; i++){\n                matrix[i] = Console.ReadLine().ToCharArray(); \n            }\n            int k = Int32.Parse(Console.ReadLine());\n            int count = CountLuck(matrix);            \n            string result = k == count ? \"Impressed\" : \"Oops!\";\n            Console.WriteLine(result + \" \" + count);\n        }\n    }\n    \n    struct Vector {\n        public int x { get; }\n        public int y { get; }\n        public Vector(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n\n\n","offset":388,"fileType":"csharp","requestStartTime":1517941822827}}
{"body": {"column":56,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    const char Blocked = 'X';\n    const char PortKey = '*';\n    static int count = 0;\n    static bool found = false;\n    \n    static int CountLuck(char[][] matrix) {\n        int x = 0;\n        int y = 0;\n        count = 0;\n        found = false;\n        var visited = new bool[matrix.Length][matrix[0].]\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                if (matrix[i][j] == 'M') {\n                    x = j;\n                    y = i;\n                }\n            }         \n        }\n        FindPortKey(matrix, new Vector(0,0), x, y);\n        return count;\n    }\n    \n    static void FindPortKey(char[][] matrix, int posX, int posY) {\n        if (matrix[posY][posX] == PortKey) {\n            found = true;\n            return;\n        }\n        var moves = GetMoves(matrix, heading, posX, posY).ToList();\n        if (moves.Count() == 0) {\n            matrix[posY][posX] = Blocked;\n            return;\n        }\n        if (moves.Count() > 1) count++;\n        foreach (var move in moves) {           \n            FindPortKey(matrix, move, posX + move.x, posY + move.y);\n        }\n        if (moves.Count() > 1 && !found) count--;\n    }\n    \n    static void PrintMatrix(char[][] matrix) {\n        for (int i = 0; i < matrix.Length; i++) {\n            for (int j = 0; j < matrix[i].Length; j++) {\n                Console.Write(matrix[i][j]);\n            }  \n            Console.WriteLine();\n        }\n    }\n    \n    static IEnumerable<Vector> GetMoves(char[][] matrix, int x, int y) {\n        if (y + 1 < matrix.Length && matrix[y+1][x] != Blocked && heading.y >= 0)\n            yield return new Vector(0, 1);\n        if (y - 1 >= 0 && matrix[y-1][x] != Blocked && heading.y <= 0)\n            yield return new Vector(0, -1);\n        if (x + 1 < matrix[y].Length && matrix[y][x+1] != Blocked && heading.x >= 0)\n            yield return new Vector(1, 0);\n        if (x - 1 >= 0 && matrix[y][x-1] != Blocked && heading.x <= 0)\n            yield return new Vector(-1, 0);\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int n = Convert.ToInt32(tokens_n[0]);\n            int m = Convert.ToInt32(tokens_n[1]);\n            var matrix = new char[n][];\n            for(int i = 0; i < n; i++){\n                matrix[i] = Console.ReadLine().ToCharArray(); \n            }\n            int k = Int32.Parse(Console.ReadLine());\n            int count = CountLuck(matrix);            \n            string result = k == count ? \"Impressed\" : \"Oops!\";\n            Console.WriteLine(result + \" \" + count);\n        }\n    }\n    \n    struct Vector {\n        public int x { get; }\n        public int y { get; }\n        public Vector(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n\n\n","offset":406,"fileType":"csharp","requestStartTime":1517941839706}}
{"body": {"column":32,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.)\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":300,"fileType":"csharp","requestStartTime":1517941848136}}
{"body": {"column":22,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            string str = arr[j];\n            str = str.\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":378,"fileType":"csharp","requestStartTime":1517941876918}}
{"body": {"column":35,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]b={b0,b1,b2};\n        int []result=new int[a.Length];\n        for(int i=0;i<a.Length;i++){\n            if(a[i]>b[i]){\n              result[i]=1;  \n            }\n            if(a[i]<b[i]){\n                result[i]=1;\n            }\n            else{\n              result[i]= result[i].<int?>().ToArray();\n            }\n        }\n        return result;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":533,"fileType":"csharp","requestStartTime":1517941880113}}
{"body": {"column":37,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]b={b0,b1,b2};\n        int []result=new int[a.Length];\n        for(int i=0;i<a.Length;i++){\n            if(a[i]>b[i]){\n              result[i]=1;  \n            }\n            if(a[i]<b[i]){\n                result[i]=1;\n            }\n            else{\n              result[i]= result[i].Cast<int?>().ToArray();\n                result[i]= result[i].\n            }\n        }\n        return result;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":594,"fileType":"csharp","requestStartTime":1517941912080}}
{"body": {"column":27,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = arr[j].\n            \n            string str = arr[j];\n            str = str.Split(' ');\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":350,"fileType":"csharp","requestStartTime":1517941914014}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = arr[j].Split(' ')[0];\n            int b = arr[j].\n            \n            string str = arr[j];\n            str = str.Split(' ');\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":392,"fileType":"csharp","requestStartTime":1517941929380}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Linq.;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]b={b0,b1,b2};\n        int []result=new int[a.Length];\n        for(int i=0;i<a.Length;i++){\n            if(a[i]>b[i]){\n              result[i]=1;  \n            }\n            if(a[i]<b[i]){\n                result[i]=1;\n            }\n            else{\n              result[i]= result[i].Cast<int?>().ToArray();\n                \n            }\n        }\n        return result;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":104,"fileType":"csharp","requestStartTime":1517941975456}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Linq.;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n       int[]a={a0,a1,a2};\n        int[]b={b0,b1,b2};\n        int []result=new int[a.Length];\n        for(int i=0;i<a.Length;i++){\n            if(a[i]>b[i]){\n              result[i]=1;  \n            }\n            if(a[i]<b[i]){\n                result[i]=1;\n            }\n            else{\n              result[i]= result[i].Cast<int?>().ToArray();\n                \n            }\n        }\n        return result;\n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":104,"fileType":"csharp","requestStartTime":1517942011119}}
{"body": {"column":21,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = arr[j].Split(' ')[0];\n            int b = arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                Math.\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":523,"fileType":"csharp","requestStartTime":1517942031902}}
{"body": {"column":34,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr,int n) {\n        // Complete this function\n        float pos=0,neg=0,zero=0;\n        for(int i=0; i<n;i++)\n        {\n            if(arr[i]<0)\n                neg+=1;\n            else if(arr[i]>0)\n                pos+=1;\n            else\n                zero+=1;\n        }\n        Console.WriteLine((pos/n).;\n        Console.WriteLine(neg/n);\n        Console.WriteLine(zero/n);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr,n);\n    }\n}\n\n\n","offset":446,"fileType":"csharp","requestStartTime":1517942043603}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = arr[j].Split(' ')[0];\n            int b = arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                Integer. Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":526,"fileType":"csharp","requestStartTime":1517942047278}}
{"body": {"column":46,"line":19,"wordToComplete":"0.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr,int n) {\n        // Complete this function\n        float pos=0,neg=0,zero=0;\n        for(int i=0; i<n;i++)\n        {\n            if(arr[i]<0)\n                neg+=1;\n            else if(arr[i]>0)\n                pos+=1;\n            else\n                zero+=1;\n        }\n        Console.WriteLine((pos/n).ToString(\"0.\");\n        Console.WriteLine(neg/n);\n        Console.WriteLine(zero/n);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr,n);\n    }\n}\n\n\n","offset":458,"fileType":"csharp","requestStartTime":1517942057976}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = arr[j].Split(' ')[0];\n            int b = arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                Integer.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":526,"fileType":"csharp","requestStartTime":1517942055728}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = arr[j].Split(' ')[0];\n            int b = arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":522,"fileType":"csharp","requestStartTime":1517942059151}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.arr[j].Split(' ')[0];\n            int b = arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":347,"fileType":"csharp","requestStartTime":1517942071871}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":347,"fileType":"csharp","requestStartTime":1517942080270}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":400,"fileType":"csharp","requestStartTime":1517942084455}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":400,"fileType":"csharp","requestStartTime":1517942089783}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1];\n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":400,"fileType":"csharp","requestStartTime":1517942094840}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                Math.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":558,"fileType":"csharp","requestStartTime":1517942117722}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                Math.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":558,"fileType":"csharp","requestStartTime":1517942121451}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                Math.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":558,"fileType":"csharp","requestStartTime":1517942123335}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":557,"fileType":"csharp","requestStartTime":1517942158958}}
{"body": {"column":36,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.TryParse(string.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":573,"fileType":"csharp","requestStartTime":1517942175252}}
{"body": {"column":34,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.TryParse(Math.\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":571,"fileType":"csharp","requestStartTime":1517942179616}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.\n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1517942181821}}
{"body": {"column":42,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.TryParse(Math.Sqrt(i).\n                Math.Sqrt(i)\n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":579,"fileType":"csharp","requestStartTime":1517942184242}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.)\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517942189696}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                int.\n                int.TryParse(Math.Sqrt(i).ToString(), );\n                \n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":557,"fileType":"csharp","requestStartTime":1517942206113}}
{"body": {"column":40,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.Reverse().);\n    }\n}\n\n\n","offset":354,"fileType":"csharp","requestStartTime":1517942208453}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        from arr.\n    }\n}\n\n\n","offset":331,"fileType":"csharp","requestStartTime":1517942248828}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Select.\n    }\n}\n\n\n","offset":329,"fileType":"csharp","requestStartTime":1517942253087}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Select(e.)\n    }\n}\n\n\n","offset":331,"fileType":"csharp","requestStartTime":1517942265201}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.Select(e.)\n    }\n}\n\n\n","offset":326,"fileType":"csharp","requestStartTime":1517942272145}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.Select(e=>e.)\n    }\n}\n\n\n","offset":338,"fileType":"csharp","requestStartTime":1517942277001}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.\n    }\n}\n\n\n","offset":326,"fileType":"csharp","requestStartTime":1517942297030}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.Reverse().\n    }\n}\n\n\n","offset":336,"fileType":"csharp","requestStartTime":1517942303004}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.Reverse().\n    }\n}\n\n\n","offset":336,"fileType":"csharp","requestStartTime":1517942303603}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            string[] nums = arr[j].\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count = 0;\n            int result;\n            \n            for (int i = a; i <= b; i++)\n            {\n                \n                int.TryParse(Math.Sqrt(i).ToString(), );\n                \n            }\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":358,"fileType":"csharp","requestStartTime":1517942358898}}
{"body": {"column":16,"line":11,"wordToComplete":"AsEn","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.AsEn\n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1517942366349}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        arr.AsEnumerable().\n    }\n}\n\n\n","offset":341,"fileType":"csharp","requestStartTime":1517942368783}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreact(var i in arr.AsEnumerable().Reverse()){\n          Console.\n        }\n    }\n}\n\n\n","offset":388,"fileType":"csharp","requestStartTime":1517942395684}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            string[] nums = arr[j].Split('');\n            \n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.TryParse(Math.Sqrt(i).ToString(), result))\n                    count++;   \n            }\n            \n            list.\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":749,"fileType":"csharp","requestStartTime":1517942449389}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            string[] nums = arr[j].Split('');\n            \n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.TryParse(Math.Sqrt(i).ToString(), result))\n                    count++;   \n            }\n            \n            list.add(count);\n        }\n\n        return list.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":792,"fileType":"csharp","requestStartTime":1517942461757}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        for(int i = 0; i < arr.)\n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":226,"fileType":"csharp","requestStartTime":1517942489839}}
{"body": {"column":37,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            string[] nums = arr[j].Split(' ');\n            \n            int a = int.Parse(arr[j].);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;   \n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":420,"fileType":"csharp","requestStartTime":1517942634418}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {\n            string[] nums = arr[j].Split(' ');\n            \n            int a = int.Parse(arr[j].Split(' '));\n            int b = int.Parse(arr[j].);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;   \n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":470,"fileType":"csharp","requestStartTime":1517942655332}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var arr = new List<int>();\n        while( r <= l){\n            if (r%2 == 0)\n                arr.\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":295,"fileType":"csharp","requestStartTime":1517942661851}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var arr = new List<int>();\n        while( r <= l){\n            if (r%2 == 0)\n                arr.Add(r);\n            r++;\n        }\n        \n        return arr.;\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":358,"fileType":"csharp","requestStartTime":1517942701359}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        return results.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":295,"fileType":"csharp","requestStartTime":1517943073965}}
{"body": {"column":37,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.)\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":309,"fileType":"csharp","requestStartTime":1517943128476}}
{"body": {"column":71,"line":21,"wordToComplete":"If the next door is locked, \"unlock\" it and skip it.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var result = new int[2];\n        result[1] = doors.Where(d => d == 1).Count();\n        \n        int totalDoors = doors.Length;\n        int lastDoorIndex = doors.Length - 1;\n        int minimumUnlocks = 0;\n        for(int i = 0; i < totalDoors; i++)\n        {\n            // If the door is locked, \"unlock\" it and charge to minimum unlocks\n            if(doors[i] == 1)\n            {\n                minimumUnlocks++;\n                // If the next door is locked, \"unlock\" it and skip it.\n                if(doors[i+1] == 1)\n                {\n                    i++;\n                }\n            }\n        }\n        result[0] = minimumUnlocks;\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":689,"fileType":"csharp","requestStartTime":1517943161610}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":433,"fileType":"csharp","requestStartTime":1517943193881}}
{"body": {"column":27,"line":16,"wordToComplete":"Diag","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diag\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":437,"fileType":"csharp","requestStartTime":1517943216203}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":445,"fileType":"csharp","requestStartTime":1517943218201}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":454,"fileType":"csharp","requestStartTime":1517943237328}}
{"body": {"column":41,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debug.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":451,"fileType":"csharp","requestStartTime":1517943249680}}
{"body": {"column":44,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            char[] commandArr = commands[i].\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":376,"fileType":"csharp","requestStartTime":1517943255916}}
{"body": {"column":36,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics..\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":446,"fileType":"csharp","requestStartTime":1517943279632}}
{"body": {"column":38,"line":16,"wordToComplete":"Deb","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Deb\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":448,"fileType":"csharp","requestStartTime":1517943283451}}
{"body": {"column":60,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.DebuggerDisplayAttribute.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":470,"fileType":"csharp","requestStartTime":1517943295520}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":445,"fileType":"csharp","requestStartTime":1517943302401}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            string.\n            char[] commandArr;\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":351,"fileType":"csharp","requestStartTime":1517943298365}}
{"body": {"column":59,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.DebuggerHiddenAttribute.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":469,"fileType":"csharp","requestStartTime":1517943319832}}
{"body": {"column":39,"line":16,"wordToComplete":"Debu","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debu\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":449,"fileType":"csharp","requestStartTime":1517943325723}}
{"body": {"column":55,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.DebuggableAttribute.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":465,"fileType":"csharp","requestStartTime":1517943329465}}
{"body": {"column":40,"line":16,"wordToComplete":"Debug","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debug\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":450,"fileType":"csharp","requestStartTime":1517943337185}}
{"body": {"column":59,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.DebuggerHiddenAttribute.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":469,"fileType":"csharp","requestStartTime":1517943345928}}
{"body": {"column":39,"line":16,"wordToComplete":"Debu","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debu\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":449,"fileType":"csharp","requestStartTime":1517943350600}}
{"body": {"column":63,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.DebuggerVisualizerAttribute.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":473,"fileType":"csharp","requestStartTime":1517943359192}}
{"body": {"column":27,"line":16,"wordToComplete":"Diag","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diag\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":437,"fileType":"csharp","requestStartTime":1517943377248}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":445,"fileType":"csharp","requestStartTime":1517943379432}}
{"body": {"column":23,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        var binary = Convert.ToString(number, 2);\n        int acc = 0;\n        int max = 0;\n        foreach(char c in binary){\n            if(c=='0'){\n                if(acc>)\n                acc=0;\n            }\n        }\n    }\n}\n\n\n","offset":369,"fileType":"csharp","requestStartTime":1517943398851}}
{"body": {"column":48,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.CodeAnalysis.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":458,"fileType":"csharp","requestStartTime":1517943405416}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":445,"fileType":"csharp","requestStartTime":1517943409859}}
{"body": {"column":56,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.ConditionalAttribute.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":466,"fileType":"csharp","requestStartTime":1517943415354}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        var binary = Convert.ToString(number, 2);\n        int acc = 0;\n        int max = 0;\n        foreach(char c in binary){\n            if(c=='0'){\n                if(acc>max){\n                    max = acc;\n                }\n                acc=0;\n            }else{\n                acc++;\n            }\n        }\n        Console.\n    }\n}\n\n\n","offset":529,"fileType":"csharp","requestStartTime":1517943415762}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":445,"fileType":"csharp","requestStartTime":1517943419993}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":454,"fileType":"csharp","requestStartTime":1517943425817}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":454,"fileType":"csharp","requestStartTime":1517943426169}}
{"body": {"column":48,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.Log(\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":458,"fileType":"csharp","requestStartTime":1517943438569}}
{"body": {"column":47,"line":16,"wordToComplete":"Log","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.Log\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":457,"fileType":"csharp","requestStartTime":1517943442505}}
{"body": {"column":28,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            if (commandList.)\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":439,"fileType":"csharp","requestStartTime":1517943456283}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.;\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":454,"fileType":"csharp","requestStartTime":1517943464521}}
{"body": {"column":48,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.Log(;\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":458,"fileType":"csharp","requestStartTime":1517943480097}}
{"body": {"column":48,"line":16,"wordToComplete":"","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.Log(;\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":458,"fileType":"csharp","requestStartTime":1517943494401}}
{"body": {"column":46,"line":16,"wordToComplete":"Lo","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.Lo;\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":456,"fileType":"csharp","requestStartTime":1517943496396}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            if (commandList.Count() == 1)\n            {\n                if (commandList[0] == 'G')\n                    results.\n            }\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":538,"fileType":"csharp","requestStartTime":1517943512298}}
{"body": {"column":18,"line":17,"wordToComplete":"va","code":"using System;\n\nnamespace Solution {\nclass Solution {\n//Make GetSingleValue() thread safe. Retain the creation of val in the method. Make the critical section as short as possible.\n\n    static object val = null;\n    public static object GetSingleValue()\n    {\n        if (val == null)\n            try\n            {\n                val = new object();\n            }\n            catch(Exception e)\n            {\n                System.Diagnostics.Debugger.Log(message = e);\n                va\n            }\n        return val;\n    }\n\n   \n    static void Main(string[] args) {\n        //Input arguments are ignored.\n        object obj = GetSingleValue();\n    }\n}\n}\n","offset":490,"fileType":"csharp","requestStartTime":1517943526457}}
{"body": {"column":28,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            if (commandList.Count() == 1)\n            {\n                if (commandList[0] == 'G')\n                    results.Add(\"NO\");\n                else\n                    results.\n            }\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":598,"fileType":"csharp","requestStartTime":1517943531673}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int[] allNumbers = Enumerable.Range(l, r).ToArray();\n        int[] oddNumbers;\n        \n        foreach(int number in allNumbers){\n            if (number % 2 == 0){\n                oddNumbers.\n            }\n        }\n        \n        return allNumbers;\n\n        \n                           \n        \n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":390,"fileType":"csharp","requestStartTime":1517943596845}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            string.\n            \n            if (commandList.Count() == 1)\n            {\n                if (commandList[0] == 'G')\n                    results.Add(\"NO\");\n                else\n                    results.Add(\"YES\");\n            }\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":430,"fileType":"csharp","requestStartTime":1517943776698}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            string.\n            string.Compare(commands[i], \"G\", C\n            \n            if (commandList.Count() == 1)\n            {\n                if (commandList[0] == 'G')\n                    results.Add(\"NO\");\n                else\n                    results.Add(\"YES\");\n            }\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":430,"fileType":"csharp","requestStartTime":1517943843126}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            string.\n            string.Compare(commands[i], \"G\", C\n            \n            if (commandList.Count() == 1)\n            {\n                if (commandList[0] == 'G')\n                    results.Add(\"NO\");\n                else\n                    results.Add(\"YES\");\n            }\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":430,"fileType":"csharp","requestStartTime":1517943844830}}
{"body": {"column":62,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] doesCircleExist(string[] commands) {\n        List<string> results = new List<string>();\n        \n        for (int i = 0; i < commands.Length; i++)\n        {\n            List<char> commandList = new List<char>(commands[i]);\n            \n            \n            string.Compare(commands[i], \"G\", StringComparison.\n            \n            if (commandList.Count() == 1)\n            {\n                if (commandList[0] == 'G')\n                    results.Add(\"NO\");\n                else\n                    results.Add(\"YES\");\n            }\n        }\n        \n        return results.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int commands_size = 0;\n        commands_size = Convert.ToInt32(Console.ReadLine());\n        string[] commands = new string [commands_size];\n        string commands_item;\n        for(int commands_i = 0; commands_i < commands_size; commands_i++) {\n            commands_item = Console.ReadLine();\n            commands[commands_i] = commands_item;\n        }\n\n        res = doesCircleExist(commands);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":486,"fileType":"csharp","requestStartTime":1517943857299}}
{"body": {"column":18,"line":93,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Cloud\n{\n    public List<City> locations;\n\n    public Cloud()\n    {\n        locations = new List<City>();\n    }\n}\n\nclass City\n{\n    public List<Cloud> clouds;\n    public long Population { get { return this.population; } }\n    private long population;\n\n    public City(long population)\n    {\n        clouds = new List<Cloud>();\n        this.population = population;\n    }\n\n    public void Add(long population)\n    {\n        this.population += population;\n    }\n}\n\nclass Solution\n{\n\n    static long maximumPeople(long[] p, long[] x, long[] y, long[] r)\n    {\n        if (y.Length == 1)\n        {\n            return p.Sum(pop => pop);\n        }\n\n        Dictionary<long, City> cities = new Dictionary<long, City>();\n\n        for (int i = 0; i < x.Length; i++)\n        {\n            if (!cities.ContainsKey(x[i]))\n            {\n                cities[x[i]] = new City(p[i]);\n            }\n            else\n            {\n                cities[x[i]].Add(p[i]);\n            }\n        }\n\n        for (int i = 0; i < y.Length; i++)\n        {\n            long min = y[i] - r[i];\n            long max = y[i] + r[i];\n\n            Cloud cloud = new Cloud();\n            long index = y[i];\n\n            City city;\n\n            if (cities.ContainsKey(index))\n            {\n                city = cities[index];\n                city.clouds.Add(cloud);\n                cloud.locations.Add(city);\n            }\n            for (long j = y[i] - 1; j >= min && j >= 0; j--)\n            {\n                if (cities.ContainsKey(j))\n                {\n                    city = cities[j];\n                    city.clouds.Add(cloud);\n                    cloud.locations.Add(city);\n                }\n            }\n\n            for (long j = y[i] + 1; j <= max && j <= 1000000000; j++)\n            {\n                if (cities.ContainsKey(j))\n                {\n                    city = cities[j];\n                    city.clouds.Add(cloud);\n                    cloud.locations.Add(city);\n                }\n            }\n            \n            cloud.\n        }\n\n        IEnumerable<KeyValuePair<long, City>> oneCloudCities = cities.Where(c => c.Value.clouds.Count == 1);\n        long freedPopulation = 0;\n        if (oneCloudCities.Count() > 0) {\n            freedPopulation = oneCloudCities.Max(c => c.Value.clouds[0].locations.Where(ci => ci.clouds.Count == 1).Sum(ci => ci.Population));\n        }\n\n        IEnumerable<KeyValuePair<long, City>> noCloudCities = cities.Where(c => c.Value.clouds.Count == 0);\n        long clearSkyPopulation = 0;\n        if(noCloudCities.Count() > 0)\n        {\n            clearSkyPopulation = noCloudCities.Sum(c => c.Value.Population);\n        }\n        return clearSkyPopulation + freedPopulation;\n        // Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    }\n\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] p_temp = Console.ReadLine().Split(' ');\n        long[] p = Array.ConvertAll(p_temp, Int64.Parse);\n        string[] x_temp = Console.ReadLine().Split(' ');\n        long[] x = Array.ConvertAll(x_temp, Int64.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] y_temp = Console.ReadLine().Split(' ');\n        long[] y = Array.ConvertAll(y_temp, Int64.Parse);\n        string[] r_temp = Console.ReadLine().Split(' ');\n        long[] r = Array.ConvertAll(r_temp, Int64.Parse);\n        long result = maximumPeople(p, x, y, r);\n        Console.WriteLine(result);\n        Console.ReadKey();\n\n    }\n}\n\n\n","offset":2120,"fileType":"csharp","requestStartTime":1517943896744}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        int [] arr=new int arr[2];\n        for(int i=0;i<arr.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":254,"fileType":"csharp","requestStartTime":1517944020861}}
{"body": {"column":43,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.left != null && root.)\n            return isPresent(root.left, val);\n        else if (root.right != null)\n            return isPresent(root.right, val);\n        else\n            return 0;\n    }\n\n\n}\n","offset":1598,"fileType":"csharp","requestStartTime":1517944183738}}
{"body": {"column":50,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n        if (root.data == val)\n            return 1;\n        else if (root.left != null && val <= root.)\n            return isPresent(root.left, val);\n        else if (root.right != null)\n            return isPresent(root.right, val);\n        else\n            return 0;\n    }\n\n\n}\n","offset":1605,"fileType":"csharp","requestStartTime":1517944190885}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        int res;\n        for(int i = 0; i < ar.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":234,"fileType":"csharp","requestStartTime":1517944272737}}
{"body": {"column":24,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.)\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count += 1;   \n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":609,"fileType":"csharp","requestStartTime":1517944357802}}
{"body": {"column":35,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.Parse(Math.)\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count += 1;   \n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":620,"fileType":"csharp","requestStartTime":1517944376129}}
{"body": {"column":43,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.Parse(Math.Sqrt(i).\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count += 1;   \n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":628,"fileType":"csharp","requestStartTime":1517944383056}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.Parse(Math.Sqrt(i).ToString()) != null)\n                    count++;\n                \n                if (int.)\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":719,"fileType":"csharp","requestStartTime":1517944472158}}
{"body": {"column":38,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.Parse(Math.Sqrt(i).ToString()) != null)\n                    count++;\n                \n                if (int.TryParse(Math.)\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":733,"fileType":"csharp","requestStartTime":1517944484957}}
{"body": {"column":46,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {\n                if (int.Parse(Math.Sqrt(i).ToString()) != null)\n                    count++;\n                \n                if (int.TryParse(Math.Sqrt(i).)\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":741,"fileType":"csharp","requestStartTime":1517944489678}}
{"body": {"column":32,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = int.\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":367,"fileType":"csharp","requestStartTime":1517944584013}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":370,"fileType":"csharp","requestStartTime":1517944601825}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(\" \");\n            arr[j].\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":401,"fileType":"csharp","requestStartTime":1517944630431}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(\" \");\n            arr[j].\n            int a = int.Parse(arr[j].Split(' ')[0]);\n            int b = int.Parse(arr[j].Split(' ')[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":401,"fileType":"csharp","requestStartTime":1517944635433}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(' ');\n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":646,"fileType":"csharp","requestStartTime":1517944734914}}
{"body": {"column":35,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(' ');\n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.Parse(Math.\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":657,"fileType":"csharp","requestStartTime":1517944738372}}
{"body": {"column":43,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(' ');\n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.Parse(Math.Sqrt(i).\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":665,"fileType":"csharp","requestStartTime":1517944748145}}
{"body": {"column":61,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(' ');\n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.Parse(Math.Sqrt(i).ToString() != int.\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":683,"fileType":"csharp","requestStartTime":1517944757341}}
{"body": {"column":62,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(' ');\n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.Parse(Math.Sqrt(i).ToString() != Math.\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":684,"fileType":"csharp","requestStartTime":1517944763586}}
{"body": {"column":61,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumUniqueSum(string[] arr) {\n        \n        List<int> list = new List<int>();\n        \n        for (int j = 0; j < arr.Length; j++)\n        {            \n            string[] nums = arr[j].Split(' ');\n            int a = int.Parse(nums[0]);\n            int b = int.Parse(nums[1]);\n            \n            int count, result;\n            count = result = 0;\n            \n            for (int i = a; i <= b; i++)\n            {                \n                if (int.Parse(Math.Sqrt(i).ToString() != int.\n                \n                if (int.TryParse(Math.Sqrt(i).ToString(), out result))\n                    count++;\n            }\n            \n            list.Add(count);\n        }\n\n        return list.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = getMinimumUniqueSum(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":683,"fileType":"csharp","requestStartTime":1517944771379}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        // Complete this function\n        for (int i = arr.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":214,"fileType":"csharp","requestStartTime":1517944936222}}
{"body": {"column":40,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        // Complete this function\n        for (int i = arr.Length - 1; i> )\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517944946854}}
{"body": {"column":41,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        // Complete this function\n        for (int i = arr.Length - 1; i > )\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":230,"fileType":"csharp","requestStartTime":1517944949524}}
{"body": {"column":25,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        // Complete this function\n        for (int i = arr.Length - 1; i >=0; i--){\n            if (arr[i] > )\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":264,"fileType":"csharp","requestStartTime":1517944972284}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        // Complete this function\n        for (int i = arr.Length - 2; i >=0; i--){\n            if (arr[i] > n){\n                arr[i+1] = arr[i];\n            }\n            else{\n                arr[i+1] = n;\n            }\n            Console.WriteLine(string.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":416,"fileType":"csharp","requestStartTime":1517945127110}}
{"body": {"column":30,"line":12,"wordToComplete":"isPre","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n       string isPresent = 'NO';\n       foreach (int inc in arr)\n           if (inc == k) isPre\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":289,"fileType":"csharp","requestStartTime":1517945180973}}
{"body": {"column":17,"line":15,"wordToComplete":"is","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n       string isPresent = 'NO';\n       foreach (int inc in arr)\n       {\n           if (inc == k) isPresent = 'YES';\n       }\n        return is\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":338,"fileType":"csharp","requestStartTime":1517945228863}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        // Complete this function\n        int toInsert = arr[n-1];\n        if (arr[n-1] > )\n        for (int i = n - 2; i >=0; i--){\n            if (arr[i] > toInsert){\n                arr[i+1] = arr[i];\n            }\n            else{\n                arr[i+1] = toInsert;\n            }\n            Console.WriteLine(string.Join(\" \", arr));\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1517945303429}}
{"body": {"column":96,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n       if(acid_name.Substring(0,4)==\"hydro\" && acid_name.Substring(acid_name.Length-2,acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":249,"fileType":"csharp","requestStartTime":1517945476378}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr) \n    {\n        // Complete this function\n        for(int a = 0; a < arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":227,"fileType":"csharp","requestStartTime":1517945464858}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i = (n-1); i>=0); i--){\n            Console.\n        }\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1517945526243}}
{"body": {"column":35,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr) \n    {\n        // Complete this function\n        for(int a = 0; a < arr.Length; a++)\n        {\n            for(int b = a; b < arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":285,"fileType":"csharp","requestStartTime":1517945514508}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        // Complete this function\n        int[] scores = new int[2];\n        scores[0] = scores[1] = 0;\n        \n        if (a0 > b0)\n            scores[0]++; // Alice + 1\n        else if (a0 < b0)\n            scores[1]++; // Bob + 1\n        \n        if (a1 >)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":435,"fileType":"csharp","requestStartTime":1517945540477}}
{"body": {"column":17,"line":61,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.)\n\n    }\n\n\n\n}\n","offset":1511,"fileType":"csharp","requestStartTime":1517945627695}}
{"body": {"column":17,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        \n        if (root.)\n\n    }\n\n\n\n}\n","offset":1572,"fileType":"csharp","requestStartTime":1517945655491}}
{"body": {"column":21,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        \n        if (root.lef.)\n\n    }\n\n\n\n}\n","offset":1576,"fileType":"csharp","requestStartTime":1517945658403}}
{"body": {"column":22,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        if (root.data == val)\n            return 1;\n        \n        if (root.left.)\n\n    }\n\n\n\n}\n","offset":1577,"fileType":"csharp","requestStartTime":1517945661147}}
{"body": {"column":20,"line":61,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.)\n\n    }\n\n\n\n}\n","offset":1514,"fileType":"csharp","requestStartTime":1517945678946}}
{"body": {"column":41,"line":61,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.)\n\n    }\n\n\n\n}\n","offset":1535,"fileType":"csharp","requestStartTime":1517945690786}}
{"body": {"column":21,"line":63,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.)\n        }\n\n    }\n\n\n\n}\n","offset":1581,"fileType":"csharp","requestStartTime":1517945704089}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        \n        \n        for(int i = 1; i < s.Length; i++) {\n            \n            if(s[i] == s[i-1]) {\n                s = s.substring(0, i-1) + s.substring(i+1);\n                i = 0;\n            }\n        }\n        \n        if(s.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":425,"fileType":"csharp","requestStartTime":1517945710885}}
{"body": {"column":21,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.)\n        }\n\n    }\n\n\n\n}\n","offset":1653,"fileType":"csharp","requestStartTime":1517945722047}}
{"body": {"column":26,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left.)\n        }\n\n    }\n\n\n\n}\n","offset":1658,"fileType":"csharp","requestStartTime":1517945724128}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        \n        \n        for(int i = 1; i < s.Length; i++) {\n            \n            if(s[i] == s[i-1]) {\n                s = s.substring(0, i-1) + s.substring(i+1);\n                i = 0;\n            }\n        }\n        \n        if(s.Equals(\"\") {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":458,"fileType":"csharp","requestStartTime":1517945727280}}
{"body": {"column":21,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.)\n        }\n\n    }\n\n\n\n}\n","offset":1653,"fileType":"csharp","requestStartTime":1517945733103}}
{"body": {"column":34,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left <= root.)\n        }\n\n    }\n\n\n\n}\n","offset":1666,"fileType":"csharp","requestStartTime":1517945736359}}
{"body": {"column":26,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left.)\n        }\n\n    }\n\n\n\n}\n","offset":1658,"fileType":"csharp","requestStartTime":1517945740423}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        \n        \n        for(int i = 1; i < s.Length; i++) {\n            \n            if(s[i] == s[i-1]) {\n                s = s.substring(0, i-1) + s.substring(i+1);\n                i = 0;\n            }\n        }\n        \n        if(s.Equals(\"\") {\n            Console.WriteLine(\"Empty String\");\n        } else {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":522,"fileType":"csharp","requestStartTime":1517945742025}}
{"body": {"column":31,"line":67,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left.data <= val)\n                isPresent(root.)\n        }\n\n    }\n\n\n\n}\n","offset":1702,"fileType":"csharp","requestStartTime":1517945752031}}
{"body": {"column":39,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr) \n    {\n        // Complete this function\n        for(int a = 0; a < arr.Length; a++)\n        {\n            for(int b = a + 1; b < arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":289,"fileType":"csharp","requestStartTime":1517945730873}}
{"body": {"column":21,"line":68,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left.data <= val)\n                isPresent(root.left);\n            if (root.)\n        }\n\n    }\n\n\n\n}\n","offset":1730,"fileType":"csharp","requestStartTime":1517945758422}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List(int> output = new list<int>();\n        if (l%2 == 0) \n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":207,"fileType":"csharp","requestStartTime":1517945778757}}
{"body": {"column":25,"line":11,"wordToComplete":"out","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new list<int>();\n        if (l%2 == 0) out\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":259,"fileType":"csharp","requestStartTime":1517945786668}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new list<int>();\n        if (l%2 == 0) output.\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":263,"fileType":"csharp","requestStartTime":1517945790488}}
{"body": {"column":21,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.)\n            if (root.left.data <= val)\n                isPresent(root.left);\n            \n        }\n\n    }\n\n\n\n}\n","offset":1653,"fileType":"csharp","requestStartTime":1517945802716}}
{"body": {"column":26,"line":66,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left.)\n            if (root.left.data <= val)\n                isPresent(root.left);\n            \n        }\n\n    }\n\n\n\n}\n","offset":1658,"fileType":"csharp","requestStartTime":1517945805155}}
{"body": {"column":49,"line":23,"wordToComplete":"Paint the x's into the map and return.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] cavityMap(string[] arr) {\n        int length = arr.Length;\n        for (int x = 1; x < length - 1; x++) {\n            for (int y = 1; y < length - 1; y++) {\n                if (arr[x][y] > arr[x - 1][y] &&\n                    arr[x][y] > arr[x][y - 1] &&\n                    arr[x][y] > arr[x + 1][y] &&\n                    arr[x][y] > arr[x][y + 1]) {\n                    // Mark this as an X.\n                }                \n            }\n        }\n        \n        // Paint the x's into the map and return.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = cavityMap(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":686,"fileType":"csharp","requestStartTime":1517945815049}}
{"body": {"column":21,"line":72,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left != null)\n            {\n                if (root.left.data <= val)\n                    isPresent(root.left);\n            }\n            \n            if (root.)\n        }\n\n    }\n\n\n\n}\n","offset":1814,"fileType":"csharp","requestStartTime":1517945819747}}
{"body": {"column":25,"line":74,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left != null)\n            {\n                if (root.left.data <= val)\n                    return isPresent(root.left);\n            }\n            \n            if (root.right != null)\n            {\n                if (root.)\n            }\n        }\n\n    }\n\n\n\n}\n","offset":1875,"fileType":"csharp","requestStartTime":1517945835186}}
{"body": {"column":31,"line":74,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left != null)\n            {\n                if (root.left.data <= val)\n                    return isPresent(root.left);\n            }\n            \n            if (root.right != null)\n            {\n                if (root.right.)\n            }\n        }\n\n    }\n\n\n\n}\n","offset":1881,"fileType":"csharp","requestStartTime":1517945837377}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        \n        \n        for(int i = 1; i < s.Length; i++) {\n            \n            if(s[i] == s[i-1]) {\n                s = s.Substring(0, i-1) + s.Substring(i+1);\n                i = 0;\n                Console.\n            }\n        }\n        \n        if(s.Equals(\"\")) {\n            return \"Empty String\";\n        } else {\n            return s;\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":403,"fileType":"csharp","requestStartTime":1517945838331}}
{"body": {"column":37,"line":74,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left != null)\n            {\n                if (root.left.data <= val)\n                    return isPresent(root.left);\n            }\n            \n            if (root.right != null)\n            {\n                if (root.right.data >)\n            }\n        }\n\n    }\n\n\n\n}\n","offset":1887,"fileType":"csharp","requestStartTime":1517945838546}}
{"body": {"column":42,"line":75,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        while (root.left != null || root.right != null)\n        {\n            if (root.data = val)\n                return 1;\n            \n            if (root.left != null)\n            {\n                if (root.left.data <= val)\n                    return isPresent(root.left);\n            }\n            \n            if (root.right != null)\n            {\n                if (root.right.data >= val)\n                    return isPresent(root.)\n            }\n        }\n\n    }\n\n\n\n}\n","offset":1936,"fileType":"csharp","requestStartTime":1517945845937}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution \n{\n\n    static void Main(String[] args) \n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for(int i = (n-1); i>=0; i--)\n            Console.Write(arr[i]);\n            if(i>0)\n                Console.\n        \n    }\n}\n\n\n","offset":437,"fileType":"csharp","requestStartTime":1517945869139}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        \n        var totalCount = arr.Count();\n        \n        decimal positive = arr.ToList().Count(x => x > 0) * 1.00000m / totalCount;\n        decimal negative = arr.ToList().Count(x => x < 0) * 1.00000m / totalCount;\n        decimal zero = arr.ToList().Count(x => x == 0) * 1.00000m / totalCount;\n        \n        Console.WriteLine(positive);\n        Console.WriteLine(negative);\n        Console.WriteLine(zero);\n    }\n\n    static void Main(String[] args) {\n        var n = Console.\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n               \n        var totalCount = arr.Count();\n\n        decimal positive = arr.ToList().Count(x => x > 0) * 1.00000m / totalCount;\n        decimal negative = arr.ToList().Count(x => x < 0) * 1.00000m / totalCount;\n        decimal zero = arr.ToList().Count(x => x == 0) * 1.00000m / totalCount;\n        \n        Console.WriteLine(positive);\n        Console.WriteLine(negative);\n        Console.WriteLine(zero);\n    }\n}\n\n\n","offset":631,"fileType":"csharp","requestStartTime":1517945991828}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n = a.\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":203,"fileType":"csharp","requestStartTime":1517946038082}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 0; i < n; i++){\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":195,"fileType":"csharp","requestStartTime":1517946068769}}
{"body": {"column":34,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 0; i < n; i++){\n            Console.WriteLine(\"#\".\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":209,"fileType":"csharp","requestStartTime":1517946077157}}
{"body": {"column":37,"line":9,"wordToComplete":"Pad","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 0; i < n; i++){\n            Console.WriteLine(\"#\".Pad\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":212,"fileType":"csharp","requestStartTime":1517946078228}}
{"body": {"column":31,"line":16,"wordToComplete":"output","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new List<int>();\n        for(int inc = l; inc <= r; inc++)\n        {\n            if (l%2 == 0) output.Add( l+1);\n            //output.Add( l);\n        }\n        int[] intArray = output\n        return output;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":401,"fileType":"csharp","requestStartTime":1517946132761}}
{"body": {"column":32,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new List<int>();\n        for(int inc = l; inc <= r; inc++)\n        {\n            if (l%2 == 0) output.Add( l+1);\n            //output.Add( l);\n        }\n        int[] intArray = output.\n        return output;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":402,"fileType":"csharp","requestStartTime":1517946134690}}
{"body": {"column":21,"line":27,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        while (headA.)\n        \n        \n    }\n\n\n","offset":623,"fileType":"csharp","requestStartTime":1517946155491}}
{"body": {"column":43,"line":27,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        while (headA.Next != null && headB.)\n        \n        \n    }\n\n\n","offset":645,"fileType":"csharp","requestStartTime":1517946171017}}
{"body": {"column":21,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n            if (root.data == val)\n                return 1;            \n            if (root.)\n                if (root.data < val)\n                    return isPresent(root.left, val);\n            \n                if (root.data > val)\n                    return isPresent(root.right, val);\n            \n        \n        \n        return 0;\n\n    }\n\n\n\n}\n","offset":1596,"fileType":"csharp","requestStartTime":1517946172951}}
{"body": {"column":42,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n            if (root.data == val)\n                return 1;            \n            if (root.left != null && root.)\n                if (root.data < val)\n                    return isPresent(root.left, val);\n            \n                if (root.data > val)\n                    return isPresent(root.right, val);\n            \n        \n        \n        return 0;\n\n    }\n\n\n\n}\n","offset":1617,"fileType":"csharp","requestStartTime":1517946184806}}
{"body": {"column":22,"line":29,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            if (headA.)\n        }\n        \n        \n    }\n\n\n","offset":691,"fileType":"csharp","requestStartTime":1517946190616}}
{"body": {"column":35,"line":29,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            if (headA.Data < headB.)\n        }\n        \n        \n    }\n\n\n","offset":704,"fileType":"csharp","requestStartTime":1517946204904}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n = a[0].Length;\n        \n        int sum1, sum2;\n        sum1 = sum2 = 0;\n        \n        for (int i = 0; i < n; i++)\n        {\n            sum1 += a[i][i];\n            sum2 += a[]\n        }\n        \n        return Math.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":419,"fileType":"csharp","requestStartTime":1517946213419}}
{"body": {"column":42,"line":64,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n            if (root.data == val)\n                return 1;            \n            if (root.left != null && root.)\n            {\n                if (root.data < val)\n                    return isPresent(root.left, val);\n            }\n            \n                if (root.data > val)\n                    return isPresent(root.right, val);\n            }\n        \n        \n        return 0;\n\n    }\n\n\n\n}\n","offset":1617,"fileType":"csharp","requestStartTime":1517946226363}}
{"body": {"column":26,"line":68,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int _x = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(isPresent(_root,_x));\n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        \n            if (root.data == val)\n                return 1;            \n            if (root.left != null && root.data < val)\n            {                \n                return isPresent(root.left, val);\n            }\n            else if (root.)\n                if (root.data > val)\n                    return isPresent(root.right, val);\n            }\n        \n        \n        return 0;\n\n    }\n\n\n\n}\n","offset":1749,"fileType":"csharp","requestStartTime":1517946242307}}
{"body": {"column":40,"line":10,"wordToComplete":"PadRight","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        for(int i = 1; i <= n; i++){\n            var s = new String('#', i);\n            Console.WriteLine(s.PadRight(n - i, ' '));\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":256,"fileType":"csharp","requestStartTime":1517946253338}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           for(int i = 0; i < (arr.)) {\n               \n           }\n        }\n    }\n}\n\n\n","offset":411,"fileType":"csharp","requestStartTime":1517946292127}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":197,"fileType":"csharp","requestStartTime":1517946314068}}
{"body": {"column":44,"line":33,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            if (headA.Data < headB.Data){\n                Node headC = new Node(NodeA.);\n            }\n        }\n        \n        \n    }\n\n\n","offset":817,"fileType":"csharp","requestStartTime":1517946324148}}
{"body": {"column":39,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           for(int i = 0; i <= (arr.GetLength(0) - 2); i++ {\n               for(int j = 0; j <=(arr.))\n           }\n        }\n    }\n}\n\n\n","offset":476,"fileType":"csharp","requestStartTime":1517946336246}}
{"body": {"column":37,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<int>(Arra.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":222,"fileType":"csharp","requestStartTime":1517946350685}}
{"body": {"column":38,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<int>(Array.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":223,"fileType":"csharp","requestStartTime":1517946352394}}
{"body": {"column":30,"line":34,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            if (headA.Data < headB.Data){\n                Node headC = new Node(NodeA.Data, null);\n                headA = headA.\n            }\n        }\n        \n        \n    }\n\n\n","offset":860,"fileType":"csharp","requestStartTime":1517946404018}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<long>(Array.ConvertAll(arr, long));\n        list.\n              \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1517946405992}}
{"body": {"column":12,"line":12,"wordToComplete":"0.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\nint i2;\ndouble d2=0.;\nstring s2;\n        \n        // Read and save an integer, double, and String to your variables.\ni2=Convert.ToInt32(Console.ReadLine());        \n                   d2=Convert.ToDouble(Console.ReadLine());\n                   s2=Convert.ToString(Console.ReadLine());\n\n        // Print the sum of both integer variables on a new line.\n                   int c=i2+i;\n        Console.WriteLine(c);\n        // Print the sum of the double variables on a new line.\n        double c2=d+d2;\nConsole.WriteLine(c2);\n        // Concatenate and print the String variables on a new line\n                   string c3=s+\"\"+s2;\n                   \n        // The 's' variable above should be printed first.\n        Console.WriteLine(c3);\n\n    }\n}\n","offset":293,"fileType":"csharp","requestStartTime":1517946420804}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<long>(Array.ConvertAll(arr, long));\n        list.Sort();\n        \n        foreach (long i in list) {\n            Console.\n        }\n              \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":333,"fileType":"csharp","requestStartTime":1517946424068}}
{"body": {"column":29,"line":35,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            if (headA.Data < headB.Data){\n                Node headC = new Node(NodeA.Data, null);\n                headA = headA.Next;\n            } else if (headB.)\n        }\n        \n        \n    }\n\n\n","offset":895,"fileType":"csharp","requestStartTime":1517946429929}}
{"body": {"column":46,"line":14,"wordToComplete":"outpu","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new List<int>();\n        for(int inc = l; inc <= r; inc++)\n        {\n            if (inc%2 == 0) output.Add( inc+1);\n            if (inc == l && inc % 2 = 1) outpu\n          \n        }\n        int[] intArray = output.ToArray();\n        return intArray;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":380,"fileType":"csharp","requestStartTime":1517946433793}}
{"body": {"column":42,"line":35,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            if (headA.Data < headB.Data){\n                Node headC = new Node(NodeA.Data, null);\n                headA = headA.Next;\n            } else if (headB.Data < headA.)\n        }\n        \n        \n    }\n\n\n","offset":908,"fileType":"csharp","requestStartTime":1517946433865}}
{"body": {"column":48,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new List<int>();\n        for(int inc = l; inc <= r; inc++)\n        {\n            if (inc%2 == 0) output.Add( inc+1);\n            if (inc == l && inc % 2 = 1) output.\n          \n        }\n        int[] intArray = output.ToArray();\n        return intArray;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":382,"fileType":"csharp","requestStartTime":1517946435408}}
{"body": {"column":50,"line":14,"wordToComplete":"ad","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> output = new List<int>();\n        for(int inc = l; inc <= r; inc++)\n        {\n            if (inc%2 == 0) output.Add( inc+1);\n            if (inc == l && inc % 2 = 1) output.ad\n          \n        }\n        int[] intArray = output.ToArray();\n        return intArray;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":384,"fileType":"csharp","requestStartTime":1517946436506}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<long>(Array.ConvertAll(arr, long));\n        list.Sort();\n        \n        return list.\n              \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":298,"fileType":"csharp","requestStartTime":1517946449855}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":197,"fileType":"csharp","requestStartTime":1517946467981}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.\n            if (headA.Data < headB.Data){\n                Node headC = new Node(NodeA.Data, null);\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                Node headC\n            }\n        }\n        \n        \n    }\n\n\n","offset":790,"fileType":"csharp","requestStartTime":1517946478336}}
{"body": {"column":56,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] cavityMap(string[] arr) {\n        List<Tuple<int, int>> cavities = new List<Tuple<int, int>>();\n        int length = arr.Length;\n        for (int x = 1; x < length - 1; x++) {\n            for (int y = 1; y < length - 1; y++) {\n                int myDepth = Int32.Parse(arr[x][y]);\n                if (myDepth > Int32.Parse(arr[x - 1][y].) &&\n                    myDepth > Int32.Parse(arr[x][y - 1]) &&\n                    myDepth > Int32.Parse(arr[x + 1][y]) &&\n                    myDepth > Int32.Parse(arr[x][y + 1])) {\n                    // Mark this as an X.\n                    cavities.Add(new Tuple<int, int>(x, y));\n                }                \n            }\n        }\n        \n        // Paint the x's into the map and return.\n        foreach (Tuple<int, int> cavity in cavities) {\n            arr[cavity.Item1][cavity.Item2] = 'X';\n        }\n        \n        return arr;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = cavityMap(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":512,"fileType":"csharp","requestStartTime":1517946492139}}
{"body": {"column":24,"line":35,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                Node headC\n            }\n        }\n        \n        \n    }\n\n\n","offset":869,"fileType":"csharp","requestStartTime":1517946494239}}
{"body": {"column":37,"line":35,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                Node headC\n            }\n        }\n        \n        \n    }\n\n\n","offset":882,"fileType":"csharp","requestStartTime":1517946499751}}
{"body": {"column":65,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<long>(Array.ConvertAll(arr, s => long.));\n        list.Sort();\n        \n        return list.ConvertAll(arr, string\n              \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517946511793}}
{"body": {"column":24,"line":38,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.\n            }\n        }\n        \n        \n    }\n\n\n","offset":997,"fileType":"csharp","requestStartTime":1517946513271}}
{"body": {"column":37,"line":38,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.\n            }\n        }\n        \n        \n    }\n\n\n","offset":1010,"fileType":"csharp","requestStartTime":1517946526814}}
{"body": {"column":65,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n       var list = new List<long>(Array.ConvertAll(arr, s => long.Parse(s));\n        list.Sort();\n        \n        return list.ConvertAll(Array.ConvertAll(arr, s => string.\n              \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":356,"fileType":"csharp","requestStartTime":1517946547855}}
{"body": {"column":24,"line":40,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n            }else {\n                newNode.\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1060,"fileType":"csharp","requestStartTime":1517946550414}}
{"body": {"column":37,"line":40,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n            }else {\n                newNode.Data = headA.\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1073,"fileType":"csharp","requestStartTime":1517946554653}}
{"body": {"column":22,"line":39,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB.\n            }else {\n                newNode.Data = headA.Data;\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1038,"fileType":"csharp","requestStartTime":1517946562557}}
{"body": {"column":30,"line":39,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB = headB.\n            }else {\n                newNode.Data = headA.Data;\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1046,"fileType":"csharp","requestStartTime":1517946570493}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.Length;\n        int numPos, numNeg, numZer;\n        \n        numPos = numNeg = numZer = 0;\n        \n        for (int i = 0; i < n; i++)\n        {\n            if (i > 0)\n                numPos++;\n            else if (i < 0)\n                numNeg++;\n            else\n                numZer++;\n        }\n        \n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":524,"fileType":"csharp","requestStartTime":1517946576924}}
{"body": {"column":40,"line":42,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB = headB.Next;\n            }else {\n                newNode.Data = headA.Data;\n                Node n = new Node(headB.)\n                \n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1155,"fileType":"csharp","requestStartTime":1517946615700}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.Length;\n        int numPos, numNeg, numZer;\n        \n        numPos = numNeg = numZer = 0;\n        \n        for (int i = 0; i < n; i++)\n        {\n            if (i > 0)\n                numPos++;\n            else if (i < 0)\n                numNeg++;\n            else\n                numZer++;\n        }\n        \n        Console.WriteLine((float)numPos / (float)n);\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":577,"fileType":"csharp","requestStartTime":1517946617378}}
{"body": {"column":24,"line":43,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB = headB.Next;\n            }else {\n                newNode.Data = headA.Data;\n                Node n = new Node(headB.Data, null);\n                newNode.\n                \n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1192,"fileType":"csharp","requestStartTime":1517946625475}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.Length;\n        int numPos, numNeg, numZer;\n        \n        numPos = numNeg = numZer = 0;\n        \n        for (int i = 0; i < n; i++)\n        {\n            if (i > 0)\n                numPos++;\n            else if (i < 0)\n                numNeg++;\n            else\n                numZer++;\n        }\n        \n        Console.WriteLine((float)numPos / (float)n);\n        Console.WriteLine((float)numNeg / (float)n);\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":630,"fileType":"csharp","requestStartTime":1517946630063}}
{"body": {"column":22,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.Length;\n        int numPos, numNeg, numZer;\n        \n        numPos = numNeg = numZer = 0;\n        \n        for (int i = 0; i < n; i++)\n        {\n            if (i > 0)\n                numPos++;\n            else if (i < 0)\n                numNeg++;\n            else\n                numZer++;\n        }\n        \n        Console.WriteLine((float)numPos / (float)n);\n        Console.WriteLine((float)numNeg / (float)n);\n        Console.Write.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":636,"fileType":"csharp","requestStartTime":1517946631020}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Console.WriteLine(arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":174,"fileType":"csharp","requestStartTime":1517946668149}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] cavityMap(string[] arr) {\n        List<Tuple<int, int>> cavities = new List<Tuple<int, int>>();\n        int length = arr.Length;\n        for (int x = 1; x < length - 1; x++) {\n            for (int y = 1; y < length - 1; y++) {\n                int myDepth = Int32.Parse(arr[x][y].ToString());\n                if (myDepth > Int32.Parse(arr[x - 1][y].ToString()) &&\n                    myDepth > Int32.Parse(arr[x][y - 1].ToString()) &&\n                    myDepth > Int32.Parse(arr[x + 1][y].ToString()) &&\n                    myDepth > Int32.Parse(arr[x][y + 1].ToString())) {\n                    // Mark this as an X.\n                    cavities.Add(new Tuple<int, int>(x, y));\n                }                \n            }\n        }\n        \n        // Paint the x's into the map and return.\n        foreach (Tuple<int, int> cavity in cavities) {\n            var row = arr[cavity.Item1];\n            row.\n            row.cavity.Item2] = 'X';\n            arr[cavity.Item1] = row;\n        }\n        \n        return arr;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int arr_size = 0;\n        arr_size = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string [arr_size];\n        string arr_item;\n        for(int arr_i = 0; arr_i < arr_size; arr_i++) {\n            arr_item = Console.ReadLine();\n            arr[arr_i] = arr_item;\n        }\n\n        res = cavityMap(arr);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1083,"fileType":"csharp","requestStartTime":1517946672866}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var list = new List<long>(Array.ConvertAll(arr, s => long.Parse(s)));\n        list.Sort();\n        var stringList = new List<string>();\n        \n         foreach(long i in list) {\n             stringList.\n         }     \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":397,"fileType":"csharp","requestStartTime":1517946680386}}
{"body": {"column":30,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var list = new List<long>(Array.ConvertAll(arr, s => long.Parse(s)));\n        list.Sort();\n        var stringList = new List<string>();\n        \n         foreach(long i in list) {\n             stringList.Add(i.\n         }     \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":403,"fileType":"csharp","requestStartTime":1517946683941}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var list = new List<long>(Array.ConvertAll(arr, s => long.Parse(s)));\n        list.Sort();\n        var stringList = new List<string>();\n        \n         foreach(long i in list) {\n             stringList.Add(i.ToString());\n         }   \n        \n        return stringList.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":465,"fileType":"csharp","requestStartTime":1517946706368}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":156,"fileType":"csharp","requestStartTime":1517946772571}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        var sums = arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":167,"fileType":"csharp","requestStartTime":1517946780575}}
{"body": {"column":25,"line":8,"wordToComplete":"Ea","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        var sums = arr.Ea\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":169,"fileType":"csharp","requestStartTime":1517946783541}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        var sums = arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":167,"fileType":"csharp","requestStartTime":1517946785264}}
{"body": {"column":41,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        var sums = arr.SelectMany(x => x.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1517946794981}}
{"body": {"column":34,"line":55,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC = new Node();\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            bool dup = false;\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB = headB.Next;\n            }else {\n                newNode.Data = headA.Data;\n                Node n = new Node(headB.Data, null);\n                newNode.Next = n;\n                headA = headA.Next;\n                headB = headB.Next;\n                dup = true;\n            }\n            \n            if (start == null){\n                start = newNode;\n            }\n            \n            if (dup){\n                newNode = newNode.\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1507,"fileType":"csharp","requestStartTime":1517946801941}}
{"body": {"column":56,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        var sums = arr.SelectMany(x => x.Sum(y => y != .))\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":200,"fileType":"csharp","requestStartTime":1517946802454}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"\nusing System;\nnamespace Solution {\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();\n            Console.WriteLine(line);\n            args = string.\n        }\n    }\n}\n\n","offset":292,"fileType":"csharp","requestStartTime":1517946809003}}
{"body": {"column":16,"line":63,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Animal\n{\n    abstract class Animal\n    {\n        protected bool isMammal;\n        protected bool isCarnivorous;\n\n        public Animal(bool isMammal, bool isCarnivorous)\n        {\n            this.isMammal = isMammal;\n            this.isCarnivorous = isCarnivorous;\n        }\n\n        public bool getIsMammal()\n        {\n            return this.isMammal;\n        }\n\n        public bool getIsCarnivorous()\n        {\n            return this.isCarnivorous;\n        }\n\n        abstract public string getGreeting();\n\n        public void printAnimal(string name)\n        {\n            Console.WriteLine(\"A {0} says '{1}', is{2} carnivorous, and is{3} a mammal.\",\n            name,\n            this.getGreeting(),\n            this.getIsCarnivorous() ? \"\" : \" not\",\n            this.getIsMammal() ? \"\" : \" not\");\n        }\n    }\nclass Dog : Animal\n    {\n         bool isCarnivorous = true;\n         bool isMammal = true;\n         string Greeting = \"ruff\";\n    }\n\nclass Cow : Animal\n    {\n         bool isCarnivorous = false;\n         bool isMammal = true;\n         string Greeting = \"Moo\";\n    }\n\nclass Duck : Animal\n    {\n         bool isCarnivorous = false;\n         bool isMammal = false;\n         string Greeting = \"quack\";\n    }\n\n\nstring getGreeting() {\n    \n    return this.Greeting;\n}\n class Solution\n    {\n        static void Main(string[] args)\n        {\n            Animal dog = new Dog();\n            dog.printAnimal(\"dog\");\n\n            Animal cow = new Cow();\n            cow.printAnimal(\"cow\");\n\n            Animal duck = new Duck();\n            duck.printAnimal(\"duck\");\n        }\n    }\n}\n","offset":1368,"fileType":"csharp","requestStartTime":1517946840438}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.Length;\n        int[] nums = new int[3]{ 0, 0, 0};\n        \n        for (int i = 0; i < arr.; i++)\n        {\n            if (arr[i] > 0)\n                nums[0]++;\n            else if (arr[i] < 0)\n                nums[1]++;\n            else\n                nums[2]++;\n        }\n        \n        Console.WriteLine((float)nums[0] / (float)n);\n        Console.WriteLine((float)nums[1] / (float)n);\n        Console.WriteLine((float)nums[2] / (float)n);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":289,"fileType":"csharp","requestStartTime":1517946875434}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int n = arr.Length;\n        int[] nums = new int[3]{ 0, 0, 0};\n        \n        for (int i = 0; i < arr.; i++)\n        {\n            if (arr[i] > 0)\n                nums[0]++;\n            else if (arr[i] < 0)\n                nums[1]++;\n            else\n                nums[2]++;\n        }\n        \n        Console.WriteLine((float)nums[0] / (float)n);\n        Console.WriteLine((float)nums[1] / (float)n);\n        Console.WriteLine((float)nums[2] / (float)n);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":289,"fileType":"csharp","requestStartTime":1517946876786}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           for(int i = 0; i <= (arr.GetLength(0) - 2); i++) {\n               for(int j = 0; j <= (arr.GetLength(1) - 2); j++) {\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass+= arr[i][j+k] + arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }\n           Console.\n        }\n    }\n}\n\n\n","offset":915,"fileType":"csharp","requestStartTime":1517946935485}}
{"body": {"column":62,"line":8,"wordToComplete":"","code":"\nusing System;\nnamespace Solution {\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();\n            Console.WriteLine(line);\n            args = line.Split(new []{\" \"}, StringSplitOptions.);\n            var n = args[0];\n            var m = args[1];\n            Console.WriteLine($\"n: {n} m: {m}\");\n        }\n    }\n}\n\n","offset":328,"fileType":"csharp","requestStartTime":1517947008179}}
{"body": {"column":13,"line":8,"wordToComplete":"int64","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int64\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":157,"fileType":"csharp","requestStartTime":1517947040617}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Int64 sum = arr.Sum();\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":191,"fileType":"csharp","requestStartTime":1517947056347}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Int64 sum = arr.Sum();\n        Int64 maxSum = sum - arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":208,"fileType":"csharp","requestStartTime":1517947068464}}
{"body": {"column":22,"line":54,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC;\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            bool dup = false;\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB = headB.Next;\n            }else {\n                newNode.Data = headA.Data;\n                Node n = new Node(headB.Data, null);\n                newNode.Next = n;\n                headA = headA.Next;\n                headB = headB.Next;\n                dup = true;\n            }\n            \n            if (start == null){\n                start = newNode;\n                headC = newNode;\n            }else {\n                headC.\n            }\n            \n            if (dup){\n                newNode = newNode.Next;\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1486,"fileType":"csharp","requestStartTime":1517947074398}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Int64 sum = arr.Sum();\n        Int64 maxSum = sum - arr.Min();\n        Int64 minSum = sum - arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517947076028}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Int64 sum = arr.Sum();\n        Int64 maxSum = sum - arr.Min();\n        Int64 minSum = sum - arr.Max();\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":271,"fileType":"csharp","requestStartTime":1517947081327}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        char[] stairs = new char[n]{' '};\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":324,"fileType":"csharp","requestStartTime":1517947078796}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        char[] stairs = new char[n]{' '};\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":324,"fileType":"csharp","requestStartTime":1517947086197}}
{"body": {"column":31,"line":11,"wordToComplete":"ma}\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Int64 sum = arr.Sum();\n        Int64 maxSum = sum - arr.Min();\n        Int64 minSum = sum - arr.Max();\n        Console.WriteLine($\"{ma}\")\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":286,"fileType":"csharp","requestStartTime":1517947096768}}
{"body": {"column":44,"line":11,"wordToComplete":"max","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        Int64 sum = arr.Sum();\n        Int64 maxSum = sum - arr.Min();\n        Int64 minSum = sum - arr.Max();\n        Console.WriteLine(minSum + \" \" + max)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":299,"fileType":"csharp","requestStartTime":1517947110875}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\nusing System;\nusing System..Linq;\n\nnamespace Solution {\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();            \n            args = line.Split(new []{\" \"}, StringSplitOptions.None);\n            var n = int.Parse(args[0]);\n            var m = int.Parse(args[1]);\n            \n            Console.WriteLine($\"n: {n} m: {m}\");\n            for(int i = 0; i < m; i++)\n            {\n                line = Console.ReadLine();\n                Console.WriteLine(line);\n            }\n        }\n    }\n}\n\n","offset":29,"fileType":"csharp","requestStartTime":1517947226076}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           int lasti = arr.\n           for(int i = 0; i <= ( (arr.GetLength(0)) - 2); i++) {\n               for(int j = 0; j <= ( (arr.GetLength(1)) - 2); j++) {\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass+= arr[i][j+k] + arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }\n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":403,"fileType":"csharp","requestStartTime":1517947259834}}
{"body": {"column":27,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           int lasti = arr.GetLength(0);\n           int lastj = arr.\n           for(int i = 0; i <= ( (arr.GetLength(0)) - 2); i++) {\n               for(int j = 0; j <= ( (arr.GetLength(1)) - 2); j++) {\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass+= arr[i][j+k] + arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }\n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":444,"fileType":"csharp","requestStartTime":1517947271444}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long sum = arr.Sum();\n        long maxSum = sum - arr.Min();\n        long minSum = sum - arr.Max();\n        Console.WriteLine(minSum);\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":303,"fileType":"csharp","requestStartTime":1517947287268}}
{"body": {"column":34,"line":11,"wordToComplete":"max","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long sum = arr.Sum();\n        long maxSum = sum - arr.Min();\n        long minSum = sum - arr.Max();\n        var s = minSum + \" \" + max\n        Console.WriteLine(minSum);\n        Console.WriteLine(maxSum);\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":286,"fileType":"csharp","requestStartTime":1517947323643}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int solveMeFirst(int a, int b) { \n      // Hint: Type return a+b; below  \n        \n        Console.\n      \n    }\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }\n}      \n\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }\n}      \n","offset":275,"fileType":"csharp","requestStartTime":1517947358879}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           int lasti = arr.GetLength(0);\n           Console.\n           int lastj = arr.GetLength(1);\n           if(lasti > 0 && lastj >0) {\n               for(int i = 0; i <= ( (arr.GetLength(0)) - 2); i++) {\n                   for(int j = 0; j <= ( (arr.GetLength(1)) - 2); j++) {\n                       int hourglass = 0;\n                       for(int k = 0; k <=2; k++) {\n                           hourglass+= arr[i][j+k] + arr[i+2][j+k];\n                           if(k==1)\n                               hourglass+= arr[i+1][j+k];                         \n                       }\n                       if(hourglass > max) \n                           max = hourglass;\n                   }\n               } \n           }\n           \n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":436,"fileType":"csharp","requestStartTime":1517947367365}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        long sum = arr.Sum();\n        long maxSum = sum - arr.Min();\n        long minSum = sum - arr.Max();\n        var s = minSum..Trim() + \" \" + maxSum.Trim();\n        Console.WriteLine(s);\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":275,"fileType":"csharp","requestStartTime":1517947402014}}
{"body": {"column":52,"line":15,"wordToComplete":"Skip customers who don't need tickets.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static long waitingTime(int[] tickets, int p) {\n        int count = tickets.Length;\n        int time = 0;\n        int index = 0;\n        while (tickets[p] > 0) {\n            //Skip customers who don't need tickets.\n            while (tickets[index] == 0) {\n                index = (index++) % count;\n            }\n            \n            tickets[index]--;\n            time++;\n            index = (index++) % count;            \n        }\n        \n        return time;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        long res;\n        int tickets_size = 0;\n        tickets_size = Convert.ToInt32(Console.ReadLine());\n        int[] tickets = new int [tickets_size];\n        int tickets_item;\n        for(int tickets_i = 0; tickets_i < tickets_size; tickets_i++) {\n            tickets_item = Convert.ToInt32(Console.ReadLine());\n            tickets[tickets_i] = tickets_item;\n        }\n\n        int p;\n        p = Convert.ToInt32(Console.ReadLine());\n\n        res = waitingTime(tickets, p);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":373,"fileType":"csharp","requestStartTime":1517947456715}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        \n        List<>\n        \n        for(int i=l, i<=r, i++)\n        {\n            if(i%2!=0)\n            {\n                \n           \n            }\n        }\n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":213,"fileType":"csharp","requestStartTime":1517947512548}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           Console.\n           for(int i = 0; i <= (arr.GetLength(0) - 3); i++) {\n               for(int j = 0; j <= (arr.GetLength(1) - 3); j++) {\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass+= arr[i][j+k] + arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }            \n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":395,"fileType":"csharp","requestStartTime":1517947519273}}
{"body": {"column":29,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           Console.Write(arr.)\n           for(int i = 0; i <= (arr.GetLength(0) - 3); i++) {\n               for(int j = 0; j <= (arr.GetLength(1) - 3); j++) {\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass+= arr[i][j+k] + arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }            \n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":405,"fileType":"csharp","requestStartTime":1517947523483}}
{"body": {"column":17,"line":17,"wordToComplete":"o","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        \n        List<int> oddNumber = new List<int>();\n        \n        for(int i=l, i<=r, i++)\n        {\n            if(i%2!=0)\n            {\n                o\n           \n            }\n        }\n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":351,"fileType":"csharp","requestStartTime":1517947591756}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        \n        List<int> oddNumber = new List<int>();\n        \n        for(int i=l, i<=r, i++)\n        {\n            if(i%2!=0)\n            {\n                oddNumber.\n           \n            }\n        }\n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":360,"fileType":"csharp","requestStartTime":1517947597577}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.\n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1517947650201}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517947655382}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr..ToString());\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517947693600}}
{"body": {"column":47,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.All(item => item..ToString());\n    }\n}\n\n\n","offset":361,"fileType":"csharp","requestStartTime":1517947715255}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        if(array?.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":218,"fileType":"csharp","requestStartTime":1517947730894}}
{"body": {"column":26,"line":29,"wordToComplete":"WriteL","code":"\nusing System;\nusing System.Linq;\n\nnamespace Solution {\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();            \n            args = line.Split(new []{\" \"}, StringSplitOptions.None);\n            var n = int.Parse(args[0]);\n            var m = int.Parse(args[1]);\n            \n            var max = -1;\n            var t = new int[n];\n            for(int i = 0; i < m; i++)\n            {\n                line = Console.ReadLine();                \n                args = line.Split(new []{\" \"}, StringSplitOptions.None);\n                var a = int.Parse(args[0]);\n                var b = int.Parse(args[1]);\n                var k = int.Parse(args[2]);\n                \n                for(int j = a - 1; j < b; j++)\n                {\n                    t[j] += k;\n                    if(t[j] > max) max = t[j];\n                }\n            }\n            Console.WriteL(\n        }\n    }\n}\n\n","offset":1016,"fileType":"csharp","requestStartTime":1517947768357}}
{"body": {"column":33,"line":11,"wordToComplete":"All","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517947778187}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517947781453}}
{"body": {"column":34,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Linq;\n\nnamespace Solution {\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();            \n            args = line.Split(new []{\" \"}, StringSplitOptions.None);\n            var n = int.Parse(args[0]);\n            var m = int.Parse(args[1]);\n            \n            var max = -1;\n            var t = new int[n];\n            for(int i = 0; i < m; i++)\n            {\n                line = Console.ReadLine();                \n                args = line.Split(new []{\" \"}, StringSplitOptions.None);\n                var a = int.Parse(args[0]);\n                var b = int.Parse(args[1]);\n                var k = int.Parse(args[2]);\n                \n                for(int j = a - 1; j < b; j++)\n                {\n                    t[j] += k;\n                    if(t[j] > max) max = t[j];\n                }\n            }\n            Console.WriteLine(max.);\n        }\n    }\n}\n\n","offset":1024,"fileType":"csharp","requestStartTime":1517947775628}}
{"body": {"column":46,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>(n).;\n        \n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":219,"fileType":"csharp","requestStartTime":1517947781363}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517947818236}}
{"body": {"column":32,"line":11,"wordToComplete":"jo","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr.jo All(item => item.ToString()));\n    }\n}\n\n\n","offset":346,"fileType":"csharp","requestStartTime":1517947821357}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array.]\n        if((array!=null) &&(array.Lenght>0))\n            \n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":235,"fileType":"csharp","requestStartTime":1517947812440}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs;\n        stairs.\n        \n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":215,"fileType":"csharp","requestStartTime":1517947812921}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array.]\n        if((array!=null) &&(array.Lenght>0))\n            \n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":235,"fileType":"csharp","requestStartTime":1517947821496}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.WriteLine(arr. All(item => item.ToString()));\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517947834437}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517947861988}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs;\n        stairs.DefaultIfEmpty(' ');\n        stairs.\n        \n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":251,"fileType":"csharp","requestStartTime":1517947849616}}
{"body": {"column":37,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array.Length];\n        if((array!=null) &&(array.Lenght>0))\n            for(int inx=0; inx<array.)\n        {}\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":326,"fileType":"csharp","requestStartTime":1517947857117}}
{"body": {"column":22,"line":13,"wordToComplete":"Wr","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        forech (item in arr_temp)\n        {\n            Console.Wr\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":350,"fileType":"csharp","requestStartTime":1517947903477}}
{"body": {"column":21,"line":13,"wordToComplete":"W","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        forech (item in arr_temp)\n        {\n            Console.W\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":349,"fileType":"csharp","requestStartTime":1517947904702}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        forech (item in arr_temp)\n        {\n            Console.\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517947905460}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        forech (item in arr_temp)\n        {\n            Console.\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517947912317}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":270,"fileType":"csharp","requestStartTime":1517947904118}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           for(int i = 0; i <= (arr.GetLength(0) - 3); i++) {\n               for(int j = 0; j <= (arr.GetLength(0) - 3); j++) {\n                   Console.\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass += arr[i][j+k];\n                       hourglass += arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }            \n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":531,"fileType":"csharp","requestStartTime":1517947947213}}
{"body": {"column":34,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        foreach (item in arr_temp.)\n        {\n            Console.WriteLine(item);\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":318,"fileType":"csharp","requestStartTime":1517947962937}}
{"body": {"column":36,"line":11,"wordToComplete":"to","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        foreach (item in arr_temp.to)\n        {\n            Console.WriteLine(item);\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":320,"fileType":"csharp","requestStartTime":1517947964843}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":410,"fileType":"csharp","requestStartTime":1517947955492}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        Console.WriteLine(arr_temp.);\n        foreach (item in arr_temp.ToList())\n        {\n            Console.WriteLine(item);\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":319,"fileType":"csharp","requestStartTime":1517948005285}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        Console.WriteLine(arr_temp.);\n        foreach (item in arr_temp.ToList())\n        {\n            Console.WriteLine(item);\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":319,"fileType":"csharp","requestStartTime":1517948006060}}
{"body": {"column":27,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           for(int i = 0; i <= (arr.GetLength(0) - 3); i++) {\n               for(int j = 0; j <= (arr.GetLength(0) - 3); j++) {\n                   Console.WriteLine(i);\n                   Console.\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass += arr[i][j+k];\n                       hourglass += arr[i+2][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }            \n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":572,"fileType":"csharp","requestStartTime":1517947997802}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        Console.WriteLine(arr_temp.);\n        foreach (item in arr_temp.ToList())\n        {\n            Console.WriteLine(item);\n        }\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":319,"fileType":"csharp","requestStartTime":1517948007797}}
{"body": {"column":28,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = stairs.)\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":321,"fileType":"csharp","requestStartTime":1517948011076}}
{"body": {"column":28,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = stairs.)\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":321,"fileType":"csharp","requestStartTime":1517948014138}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":198,"fileType":"csharp","requestStartTime":1517948019912}}
{"body": {"column":30,"line":55,"wordToComplete":"","code":"\n    /*\n      Merge two sorted lists A and B as one linked list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node MergeLists(Node headA, Node headB)\n    {\n        // This is a \"method-only\" submission.\n        // You only need to complete this method\n        \n        if (headA == null && headB == null){\n            return null;\n        }\n        \n        if (headA == null && headB != null){\n            return headB;\n        }\n        \n        if (headB == null && headA != null){\n            return headA;\n        }\n        \n        Node headC;\n        Node start;\n        \n        while (headA.Next != null && headB.Next != null)\n        {\n            bool dup = false;\n            Node newNode = new Node();\n            newNode.Next = null;\n            if (headA.Data < headB.Data){\n                newNode.Data = headA.Data;\n                headA = headA.Next;\n            } else if (headB.Data < headA.Data){\n                newNode.Data = headB.Data;\n                headB = headB.Next;\n            }else {\n                newNode.Data = headA.Data;\n                Node n = new Node(headB.Data, null);\n                newNode.Next = n;\n                headA = headA.Next;\n                headB = headB.Next;\n                dup = true;\n            }\n            \n            if (start == null){\n                start = newNode;\n                headC = newNode;\n            }else {\n                headC.Next = newNode;\n                headC = headC.\n            }\n            \n            if (dup){\n                newNode = newNode.Next;\n            }\n            \n        }\n        \n        \n    }\n\n\n","offset":1532,"fileType":"csharp","requestStartTime":1517948052952}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.\n        }\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":407,"fileType":"csharp","requestStartTime":1517948061178}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        for (int i = 0; i<arr_temp.)\n        Console.WriteLine(arr_temp.Length);\n        \n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":319,"fileType":"csharp","requestStartTime":1517948075736}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.\n        }\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":407,"fileType":"csharp","requestStartTime":1517948071056}}
{"body": {"column":11,"line":9,"wordToComplete":"r","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        a'r\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":198,"fileType":"csharp","requestStartTime":1517948078467}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(n);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        for (int i = 0; i<arr_temp.Length)\n        {\n            Console.\n        }\n        Console.WriteLine(arr_temp.Length);\n        \n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        //Console.WriteLine(arr.All(item => item.ToString()));\n    }\n}\n\n\n","offset":357,"fileType":"csharp","requestStartTime":1517948089395}}
{"body": {"column":36,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stair.)\n        }\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":423,"fileType":"csharp","requestStartTime":1517948075351}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":198,"fileType":"csharp","requestStartTime":1517948079701}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.Capacity = n;\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.)\n        }\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":424,"fileType":"csharp","requestStartTime":1517948076453}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        ar.ToList().\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517948085385}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        ar.ToList().\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517948103157}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        ar.ToList().;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517948121257}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.\n        stairs.Capacity = n;\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n        /*\n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        */\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":270,"fileType":"csharp","requestStartTime":1517948120715}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        ar.ToList().;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517948131900}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        stairs.DefaultIfEmpty(' ');\n        stairs.\n        stairs.Capacity = n;\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n        /*\n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        */\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":270,"fileType":"csharp","requestStartTime":1517948131204}}
{"body": {"column":35,"line":28,"wordToComplete":"Perm","code":"\nusing System;\nusing System.Linq;\n\nnamespace Solution {\n    class Perm\n    {\n        public int a { get; set; }\n        public int b { get; set; }\n        public int k { get; set; }\n    }\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();            \n            args = line.Split(new []{\" \"}, StringSplitOptions.None);\n            var n = int.Parse(args[0]);\n            var m = int.Parse(args[1]);\n            \n            var max = -1;\n            var t = new int[n];\n            for(int i = 0; i < m; i++)\n            {\n                line = Console.ReadLine();                \n                args = line.Split(new []{\" \"}, StringSplitOptions.None);\n                var a = int.Parse(args[0]);\n                var b = int.Parse(args[1]);\n                var k = int.Parse(args[2]);\n                var perm = new Perm\n                for(int j = a - 1; j < b; j++)\n                {\n                    t[j] += k;\n                    if(t[j] > max) max = t[j];\n                }\n            }\n            Console.WriteLine(max.ToString());\n        }\n    }\n}\n\n","offset":965,"fileType":"csharp","requestStartTime":1517948183918}}
{"body": {"column":31,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int[][] arr = new int[6][];\n        for(int arr_i = 0; arr_i < 6; arr_i++){\n           string[] arr_temp = Console.ReadLine().Split(' ');\n           arr[arr_i] = Array.ConvertAll(arr_temp,Int32.Parse);\n           int max = 0;\n           for(int i = 0; i <= (arr.GetLength(0) - 3); i++) {\n               for(int j = 0; j <= (arr.GetLength(0) - 3); j++) {\n                   Console.Write(i);\n                   Console.WriteLine(j);\n                   int hourglass = 0;\n                   for(int k = 0; k <=2; k++) {\n                       hourglass += arr[i][j+k];\n                       Console.\n                       int next = i+2;\n                       hourglass += arr[next][j+k];\n                       if(k==1)\n                           hourglass+= arr[i+1][j+k];                         \n                   }\n                   if(hourglass > max) \n                       max = hourglass;\n               }\n           }            \n           Console.Write(max);\n        }\n    }\n}\n\n\n","offset":748,"fileType":"csharp","requestStartTime":1517948258132}}
{"body": {"column":35,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>(n);\n        \n        for (int i = 0; i < stairs.)\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n        /*\n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        */\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":264,"fileType":"csharp","requestStartTime":1517948267206}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>(n);\n        \n        for (int i = 0; i < stairs.Count; i++)\n        {\n            stairs.\n        }\n        \n        for (int i = stairs.Capacity - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        \n        /*\n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.ToString());\n        }\n        */\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517948279600}}
{"body": {"column":43,"line":13,"wordToComplete":"Length","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array.Length];\n        if((array!=null) &&(array.Lenght>0))\n            for(int inx=0; inx<array.Length; inx+= 1)\n            {\n                if(inx==0)\n                    result[inx]=array[inx];\n                else\n                {\n                    var diff=result[inx]-result[inx-1];\n                    if((diff>128)||(diff<-127))\n                        array[inx]=-128;\n                    else\n                        array[inx]=diff;\n                }\n                    \n            }\n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":332,"fileType":"csharp","requestStartTime":1517948319832}}
{"body": {"column":15,"line":3,"wordToComplete":"Co","code":"\nusing System;\nusing System.Linq;\nusing System.Co\n\nnamespace Solution {\n    class Perm\n    {\n        public int a { get; set; }\n        public int b { get; set; }\n        public int k { get; set; }\n    }\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();            \n            args = line.Split(new []{\" \"}, StringSplitOptions.None);\n            var n = int.Parse(args[0]);\n            var m = int.Parse(args[1]);\n            \n            var max = -1;\n            var t = new int[n];\n            var perms = new List<Perm>{};\n            for(int i = 0; i < m; i++)\n            {\n                line = Console.ReadLine();                \n                args = line.Split(new []{\" \"}, StringSplitOptions.None);\n                var a = int.Parse(args[0]);\n                var b = int.Parse(args[1]);\n                var k = int.Parse(args[2]);\n                var perm = new Perm {a = a, b = b, k = k};\n                perms.Add(perm);\n            }\n            \n            Console.WriteLine(max.ToString());\n        }\n    }\n}\n\n","offset":50,"fileType":"csharp","requestStartTime":1517948322914}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void displayPathtoPrincess(int n, String [] grid)\n    {\n        \n        for(var i = 0; i < n; i++)\n        {\n            for(var x = 0; x < n; x++)\n            {\n                if(grid[i].)\n            }\n        }\n        \n    }\n    \n    static void Main(String[] args) \n    {\n        int m;\n\n        m = int.Parse(Console.ReadLine());\n\n        String[] grid  = new String[m];\n        for(int i=0; i < m; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        displayPathtoPrincess(m,grid);\n     }\n}\n\nstatic void Main(String[] args) {\n        int m;\n\n        m = int.Parse(Console.ReadLine());\n\n        String[] grid  = new String[m];\n        for(int i=0; i < m; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        displayPathtoPrincess(m,grid);\n     }\n}\n","offset":366,"fileType":"csharp","requestStartTime":1517948323985}}
{"body": {"column":37,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array.Length];\n        if((array!=null) &&(array.Lenght>0))\n            for(int inx=0; inx<array.; inx+= 1)\n            {\n                if(inx==0)\n                    result[inx]=array[inx];\n                else\n                {\n                    var diff=result[inx]-result[inx-1];\n                    if((diff>128)||(diff<-127))\n                        array[inx]=-128;\n                    else\n                        array[inx]=diff;\n                }\n                    \n            }\n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":326,"fileType":"csharp","requestStartTime":1517948325017}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>(n);\n        \n        for (int i = 0; i < stairs.Count; i++)\n        {\n            stairs[i] = ' ';\n        }\n        \n        for (int i = stairs.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":362,"fileType":"csharp","requestStartTime":1517948342050}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>(n);\n        \n        for (int i = 0; i < stairs.Count; i++)\n        {\n            stairs[i] = ' ';\n        }\n        \n        for (int i = stairs.Count; i >= 0; --i)\n        {\n            stairs[i] = '#';\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":441,"fileType":"csharp","requestStartTime":1517948373284}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>(n);\n        \n        for (int i = 0; i < stairs.Count; i++)\n        {\n            stairs[i] = ' ';\n        }\n        \n        for (int i = stairs.Count; i >= 0; --i)\n        {\n            stairs[i] = '#';\n            Console.WriteLine(stairs.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":458,"fileType":"csharp","requestStartTime":1517948379001}}
{"body": {"column":29,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array.Length];\n        List<int> list=array.\n      //   if((array!=null) &&(array.Lenght>0))\n            for(int inx=0; inx<array.Length; inx+= 1)\n            {\n                if(inx==0)\n                    result[inx]=array[inx];\n                else\n                {\n                    var diff=result[inx]-result[inx-1];\n                    if((diff>128)||(diff<-127))\n                        array[inx]=-128;\n                    else\n                        array[inx]=diff;\n                }\n                    \n            }\n        \n       \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":273,"fileType":"csharp","requestStartTime":1517948527756}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        string stairs = new string(' ', n);\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stair.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":295,"fileType":"csharp","requestStartTime":1517948644433}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        string stairs = new string(' ', n);\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":296,"fileType":"csharp","requestStartTime":1517948647416}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        string stairs = new string(' ', n);\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs[i] = '#';\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":326,"fileType":"csharp","requestStartTime":1517948761229}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        string stairs = new string(' ', n);\n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            stairs.\n            stairs[i] = '#';\n            Console.WriteLine(stairs);\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":296,"fileType":"csharp","requestStartTime":1517948925159}}
{"body": {"column":25,"line":80,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int evenTree(int n, int m, int[][] tree) {        \n        var traverseArr = new int[tree.GetLength(0) + 2];\n        var sumArr = new int[tree.GetLength(0) + 2];\n        \n        for(int i = 0; i<tree.GetLength(0); i++) {\n            var val = tree[i][1];\n            traverseArr[i+2] = tree[i][1];\n            //Console.WriteLine(\"{0}:{1}\", tree[i][0], tree[i][1]);\n        }\n        \n        for(int i = 0; i<traverseArr.Length; i++) {\n            Console.WriteLine(\"TRAVERSE {0}:{1}\", i, traverseArr[i]);\n        }\n        \n        var occArr = GetNumberOfOccurrences(tree.GetLength(0), tree);\n        var leaves = GetLeaves(occArr);\n                \n        TraverseTree(leaves, traverseArr, sumArr);\n        TraverseAndSnap(leaves, traverseArr, sumArr);\n        //var total = TraverseTreeAndCount(leaves, traverseArr, occArr);\n        //TraverseFromLeafToRoot(traverseArr, 10);\n        \n        for(int i = 0; i<sumArr.Length; i++) {\n            Console.WriteLine(\"SUM {0}:{1}\", i, sumArr[i]);\n        }\n        \n        return 0;\n    }\n\n    static void TraverseTree(List<int> leaves, int[] traverseArr, int[] sumArr) {\n        foreach(var leaf in leaves) {\n            TraverseFromLeafToRoot(traverseArr, sumArr, leaf);\n        }        \n    }\n    \n    static void TraverseFromLeafToRoot(int[] traverseArr, int[] sumArr, int leaf) {\n        // leaf == index\n        int vertex = leaf;\n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            Console.WriteLine(\"Vertex: \" + vertex);\n            sumArr[vertex]++;\n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");\n    }\n    \n    static void TraverseAndSnap(List<int> leaves, int[] traverseArr, int[] sumArr) {\n        List<int> snaps = new List<int>();\n        foreach(var leaf in leaves) {\n            TraverseFromLeafToRoot(traverseArr, sumArr, snaps, leaf);\n        }        \n    }\n    \n    static void TraverseAndCount(int[] traverseArr, int[] sumArr, List<int> snaps, int leaf) \n    {\n        // traverse from leaf to root node\n        // add cumulative sum while traversing\n        // if sum % 2 == 0, can cut the edge\n        // leaf == index\n        int vertex = leaf;\n        int sum = 1;\n        \n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            var vertexSum = sumArr[vertex];\n            sum += vertexSum;            \n            Console.WriteLine(\"Vertex: \" + vertex);\n            if(sum % 2 == 0) {\n                Console.WriteLine(\"Snap\");\n                if(snaps.)\n            }\n            \n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");        \n    }\n    \n    /*\n    static int TraverseTreeAndCount(List<int> leaves, int[] traverseArr, int[] occArr) {        \n        var lista = new List<int>();\n        foreach(var leaf in leaves) {\n            var foo = TraverseFromLeafToRootAndCount(traverseArr, occArr, leaf);\n            foreach(var fuu in foo) {\n                if(!lista.Contains(fuu)) {\n                    lista.Add(fuu);\n                }\n            }\n        }\n        return lista.Count;\n    }\n    */\n    /*\n    static List<int> TraverseFromLeafToRootAndCount(int[] traverseArr, int[] occArr, int leaf) {\n        List<int> total = new List<int>();\n        \n        // leaf on eka node\n        int count = 1;\n        \n        // leaf == index\n        int vertex = leaf;\n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            //Console.WriteLine(\"Vertex: \" + vertex);\n            \n            // if count % 2 == 0 -> snip noden edge ylöspäin\n            // jos nodella ei ole muita lapsinodeja tai\n            // noden yhteyscount + count on parillinen\n            count += occArr[vertex];\n            if(count % 2 == 0 && vertex != 1) {\n                Console.WriteLine(\"***SNAP*** \" + vertex);\n                if(!total.Contains(vertex)) {\n                    total.Add(vertex);\n                }\n            }\n            \n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");\n        \n        return total;\n    } */           \n    \n    static int[] GetNumberOfOccurrences(int length, int[][] tree) {\n        // tee array jonka koko on tree+2, niin nodenumerot osuu yksiin\n        var arr = new int[length+2];\n        for(int i = 0; i<tree.GetLength(0); i++) {\n            var val = tree[i][1];\n            arr[val]++;\n        }\n        \n        for(int i = 0; i<arr.Length; i++) {\n            Console.WriteLine(\"{0}:{1}\", i, arr[i]);\n        }\n        \n        return arr;\n    }\n    \n    static List<int> GetLeaves(int[] arr) {\n        var leaves = new List<int>();\n        for(int i = 1; i<arr.Length; i++) {\n            if(arr[i] == 0) {\n                leaves.Add(i);\n            }\n        }\n        \n        foreach(var leaf in leaves) {\n            Console.WriteLine(\"L: \" + leaf);\n        }\n        \n        return leaves;\n    }\n    \n    /*\n2:1\n3:1\n4:3\n5:2\n6:1\n7:2\n8:6\n9:8\n10:8    \n    */\n    \n/* Occurrences:\n0:0\n1:3\n2:2\n3:1\n4:0\n5:0\n6:1\n7:0\n8:2\n9:0\n10:0\n\nLeaves:\nL: 4\nL: 5\nL: 7\nL: 9\nL: 10\n*/\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        int[][] tree = new int[m][];\n        for(int tree_i = 0; tree_i < m; tree_i++){\n           string[] tree_temp = Console.ReadLine().Split(' ');\n           tree[tree_i] = Array.ConvertAll(tree_temp,Int32.Parse);\n        }\n        int result = evenTree(n, m, tree);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2800,"fileType":"csharp","requestStartTime":1517948987547}}
{"body": {"column":36,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n        int[] result=new int[array[0]];\n        List<int> list=array.ToList();\n      //   if((array!=null) &&(array.Lenght>0))\n            for(int inx=0; inx<list.; inx+= 1)\n            {\n                if(inx==1)\n                    result[inx]=array[inx];\n                else\n                {\n                    var diff=list[inx]-list[inx-1];\n                    if((diff>128)||(diff<-127))\n                        result[inx]=-128;\n                    else\n                        result[inx]=diff;\n                }\n                    \n            }\n        \n       \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":363,"fileType":"csharp","requestStartTime":1517949000525}}
{"body": {"column":26,"line":81,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int evenTree(int n, int m, int[][] tree) {        \n        var traverseArr = new int[tree.GetLength(0) + 2];\n        var sumArr = new int[tree.GetLength(0) + 2];\n        \n        for(int i = 0; i<tree.GetLength(0); i++) {\n            var val = tree[i][1];\n            traverseArr[i+2] = tree[i][1];\n            //Console.WriteLine(\"{0}:{1}\", tree[i][0], tree[i][1]);\n        }\n        \n        for(int i = 0; i<traverseArr.Length; i++) {\n            Console.WriteLine(\"TRAVERSE {0}:{1}\", i, traverseArr[i]);\n        }\n        \n        var occArr = GetNumberOfOccurrences(tree.GetLength(0), tree);\n        var leaves = GetLeaves(occArr);\n                \n        TraverseTree(leaves, traverseArr, sumArr);\n        TraverseAndSnap(leaves, traverseArr, sumArr);\n        //var total = TraverseTreeAndCount(leaves, traverseArr, occArr);\n        //TraverseFromLeafToRoot(traverseArr, 10);\n        \n        for(int i = 0; i<sumArr.Length; i++) {\n            Console.WriteLine(\"SUM {0}:{1}\", i, sumArr[i]);\n        }\n        \n        return 0;\n    }\n\n    static void TraverseTree(List<int> leaves, int[] traverseArr, int[] sumArr) {\n        foreach(var leaf in leaves) {\n            TraverseFromLeafToRoot(traverseArr, sumArr, leaf);\n        }        \n    }\n    \n    static void TraverseFromLeafToRoot(int[] traverseArr, int[] sumArr, int leaf) {\n        // leaf == index\n        int vertex = leaf;\n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            Console.WriteLine(\"Vertex: \" + vertex);\n            sumArr[vertex]++;\n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");\n    }\n    \n    static void TraverseAndSnap(List<int> leaves, int[] traverseArr, int[] sumArr) {\n        List<int> snaps = new List<int>();\n        foreach(var leaf in leaves) {\n            TraverseFromLeafToRoot(traverseArr, sumArr, snaps, leaf);\n        }        \n    }\n    \n    static void TraverseAndCount(int[] traverseArr, int[] sumArr, List<int> snaps, int leaf) \n    {\n        // traverse from leaf to root node\n        // add cumulative sum while traversing\n        // if sum % 2 == 0, can cut the edge\n        // leaf == index\n        int vertex = leaf;\n        int sum = 1;\n        \n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            var vertexSum = sumArr[vertex];\n            sum += vertexSum;            \n            Console.WriteLine(\"Vertex: \" + vertex);\n            if(sum % 2 == 0) {\n                Console.WriteLine(\"Snap\");\n                if(!snaps.Contains(vertex)) {\n                    snaps.\n                }\n            }\n            \n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");        \n    }\n    \n    /*\n    static int TraverseTreeAndCount(List<int> leaves, int[] traverseArr, int[] occArr) {        \n        var lista = new List<int>();\n        foreach(var leaf in leaves) {\n            var foo = TraverseFromLeafToRootAndCount(traverseArr, occArr, leaf);\n            foreach(var fuu in foo) {\n                if(!lista.Contains(fuu)) {\n                    lista.Add(fuu);\n                }\n            }\n        }\n        return lista.Count;\n    }\n    */\n    /*\n    static List<int> TraverseFromLeafToRootAndCount(int[] traverseArr, int[] occArr, int leaf) {\n        List<int> total = new List<int>();\n        \n        // leaf on eka node\n        int count = 1;\n        \n        // leaf == index\n        int vertex = leaf;\n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            //Console.WriteLine(\"Vertex: \" + vertex);\n            \n            // if count % 2 == 0 -> snip noden edge ylöspäin\n            // jos nodella ei ole muita lapsinodeja tai\n            // noden yhteyscount + count on parillinen\n            count += occArr[vertex];\n            if(count % 2 == 0 && vertex != 1) {\n                Console.WriteLine(\"***SNAP*** \" + vertex);\n                if(!total.Contains(vertex)) {\n                    total.Add(vertex);\n                }\n            }\n            \n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");\n        \n        return total;\n    } */           \n    \n    static int[] GetNumberOfOccurrences(int length, int[][] tree) {\n        // tee array jonka koko on tree+2, niin nodenumerot osuu yksiin\n        var arr = new int[length+2];\n        for(int i = 0; i<tree.GetLength(0); i++) {\n            var val = tree[i][1];\n            arr[val]++;\n        }\n        \n        for(int i = 0; i<arr.Length; i++) {\n            Console.WriteLine(\"{0}:{1}\", i, arr[i]);\n        }\n        \n        return arr;\n    }\n    \n    static List<int> GetLeaves(int[] arr) {\n        var leaves = new List<int>();\n        for(int i = 1; i<arr.Length; i++) {\n            if(arr[i] == 0) {\n                leaves.Add(i);\n            }\n        }\n        \n        foreach(var leaf in leaves) {\n            Console.WriteLine(\"L: \" + leaf);\n        }\n        \n        return leaves;\n    }\n    \n    /*\n2:1\n3:1\n4:3\n5:2\n6:1\n7:2\n8:6\n9:8\n10:8    \n    */\n    \n/* Occurrences:\n0:0\n1:3\n2:2\n3:1\n4:0\n5:0\n6:1\n7:0\n8:2\n9:0\n10:0\n\nLeaves:\nL: 4\nL: 5\nL: 7\nL: 9\nL: 10\n*/\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        int[][] tree = new int[m][];\n        for(int tree_i = 0; tree_i < m; tree_i++){\n           string[] tree_temp = Console.ReadLine().Split(' ');\n           tree[tree_i] = Array.ConvertAll(tree_temp,Int32.Parse);\n        }\n        int result = evenTree(n, m, tree);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2847,"fileType":"csharp","requestStartTime":1517949010645}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.\n        }\n        \n        \n        for (int i = n - 1; i >= 0; i--)\n        {\n            \n            Console.WriteLine(stairs);\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":293,"fileType":"csharp","requestStartTime":1517949043730}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int size = a.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":206,"fileType":"csharp","requestStartTime":1517949076886}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int size = a[0].\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":209,"fileType":"csharp","requestStartTime":1517949087148}}
{"body": {"column":21,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.Add(' ');\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = '#';\n            Concolse.\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":423,"fileType":"csharp","requestStartTime":1517949143497}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.Add(' ');\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = '#';\n            Console.\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":422,"fileType":"csharp","requestStartTime":1517949145632}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.Add(' ');\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = '#';\n            Console.WriteLine(stairs.)\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":439,"fileType":"csharp","requestStartTime":1517949152674}}
{"body": {"column":35,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.Add(' ');\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = '#';\n            string output = stairs.\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":437,"fileType":"csharp","requestStartTime":1517949249945}}
{"body": {"column":45,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<char> stairs = new List<char>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.Add(' ');\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = '#';\n            string output = stairs.ToArray().\n            Console.WriteLine(stairs.ToString());\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":447,"fileType":"csharp","requestStartTime":1517949257051}}
{"body": {"column":30,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int size = a[0].Length;\n        int primaryDiagnal = 0;\n        for(int i=0; i<size; i++){\n            primaryDiagnal += a[i][i];\n        }\n        \n        int secondaryDiagnal = 0;\n        for(int i=0; i<size; i++){\n            secondaryDiagnal += a[i][size-1-i];\n        }\n        \n        int difference = Math.primaryDiagnal - secondaryDiagnal\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":508,"fileType":"csharp","requestStartTime":1517949270394}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result. (arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517949386943}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result. (arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517949394615}}
{"body": {"column":35,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<string> stairs = new List<string>();\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.Add(\" \");\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = \"#\";\n            string output = stairs.ToString();\n            Console.WriteLine(output);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":441,"fileType":"csharp","requestStartTime":1517949400495}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result.ContainsKey(arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n        \n        return result.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":488,"fileType":"csharp","requestStartTime":1517949428402}}
{"body": {"column":21,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result.ContainsKey(arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n        \n        return Array. result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":487,"fileType":"csharp","requestStartTime":1517949446421}}
{"body": {"column":32,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result.ContainsKey(arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n        \n        return result.ToArray().;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":498,"fileType":"csharp","requestStartTime":1517949465895}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<string> stairs = new List<string>(n);\n        \n        for (int i = 0; i < n; i++)\n        {\n            stairs.\n        }\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = \"#\";\n            string output = stairs.ToString();\n            Console.WriteLine(output);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":298,"fileType":"csharp","requestStartTime":1517949463020}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result.ContainsKey(arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n        \n        return result.;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":488,"fileType":"csharp","requestStartTime":1517949478816}}
{"body": {"column":37,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result.ContainsKey(arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n        \n        return result.Select( x => x.;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":503,"fileType":"csharp","requestStartTime":1517949488805}}
{"body": {"column":44,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new Dictionary<int, int>();\n        \n        for(int i =0; i < arr.Length; i++){\n            if(result.ContainsKey(arr[i])){\n                result[arr[i]]++;\n            } else\n            {\n                result.Add(arr[i], 1);\n            }\n        }\n        \n        return result.Select( x => x.Value).;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":510,"fileType":"csharp","requestStartTime":1517949495186}}
{"body": {"column":19,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        List<string> stairs = new List<string>();\n        \n        for (int i = 0; i < n; i++)\n            stairs.\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = \"#\";\n            string output = stairs.ToString();\n            Console.WriteLine(output);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":287,"fileType":"csharp","requestStartTime":1517949525089}}
{"body": {"column":43,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n       int[] result = new int[array[0]];\n            List<int> list = array.ToList();\n          \n            for (int inx = 0; inx < result.; inx += 1)\n            {\n                if(inx!=0)\n                if (inx == 1)\n                    result[inx-1] = array[inx];\n                else\n                {\n                    var diff = array[inx] - array[inx - 1];\n                    if ((diff > 65535) || (diff < -65536))\n                        result[inx-1] = -128;\n                    else\n                        result[inx-1] = diff;\n                }\n\n            }\n\n\n            return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":340,"fileType":"csharp","requestStartTime":1517949541333}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        \n        for (int i = 1; i <= n; i++)\n        {\n            //.\n            // num spaces = n - i\n            // num #s = i\n            string spaces = new string(' ', n - i);\n            string hashes = new string('#',i);\n        }\n        \n        \n        \n        \n        List<string> stairs = new List<string>();\n        \n        for (int i = 0; i < n; i++)\n            stairs.Add(\" \");\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = \"#\";\n            string output = stairs.ToString();\n            Console.WriteLine(output);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517949658689}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        \n        for (int i = 1; i <= n; i++)\n        {\n            string spaces = new string(' ', n - i);\n            string hashes = new string('#',i);\n            Console.\n        }\n        \n        \n        \n        \n        List<string> stairs = new List<string>();\n        \n        for (int i = 0; i < n; i++)\n            stairs.Add(\" \");\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = \"#\";\n            string output = stairs.ToString();\n            Console.WriteLine(output);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517949690433}}
{"body": {"column":37,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        \n        for (int i = 1; i <= n; i++)\n        {\n            string spaces = new string(' ', n - i);\n            string hashes = new string('#',i);\n            Console.WriteLine(string.)\n        }\n        \n        \n        \n        \n        List<string> stairs = new List<string>();\n        \n        for (int i = 0; i < n; i++)\n            stairs.Add(\" \");\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            stairs[j] = \"#\";\n            string output = stairs.ToString();\n            Console.WriteLine(output);\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":365,"fileType":"csharp","requestStartTime":1517949705420}}
{"body": {"column":35,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        \n        for (int i = 1; i <= n; i++)\n        {\n            string output = string. new string(' ', n - i)\n            string spaces = new string(' ', n - i);\n            string hashes = new string('#',i);\n            Console.WriteLine(string.Concat(spaces, hashes));\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":264,"fileType":"csharp","requestStartTime":1517949787769}}
{"body": {"column":8,"line":28,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] delta_encode(int[] array) {\n       int[] result = new int[array[0]];\n          int all=array[0];\n            for (int inx = 0; inx < all+1; inx += 1)\n            {\n                if(inx!=0)\n                if (inx == 1)\n                    result[inx-1] = array[inx];\n                else\n                {\n                    var diff = array[inx] - array[inx - 1];\n                    if ((diff > 65535) || (diff < -65536))\n                        result[inx-1] = -128;\n                    else\n                        result[inx-1] = diff;\n                }\n\n            }\nConsole.\n\n            return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int array_size = 0;\n        array_size = Convert.ToInt32(Console.ReadLine());\n        int[] array = new int [array_size];\n        int array_item;\n        for(int array_i = 0; array_i < array_size; array_i++) {\n            array_item = Convert.ToInt32(Console.ReadLine());\n            array[array_i] = array_item;\n        }\n\n        res = delta_encode(array);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":757,"fileType":"csharp","requestStartTime":1517949842765}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] countingSort(int[] arr) {\n        // Complete this function\n        var result = new int[100];\n        \n        for(int i = 0; i <= arr.; i++){\n            result[]\n        }\n        \n        return result.Select(x => x.Value).ToArray<int>();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] result = countingSort(arr);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":257,"fileType":"csharp","requestStartTime":1517949861035}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n        \n        arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":257,"fileType":"csharp","requestStartTime":1517949972323}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n        \n        List<int> list = new List<int>(arr);\n        list.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":303,"fileType":"csharp","requestStartTime":1517949996083}}
{"body": {"column":26,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n                \n        List<int> list = new List<int>(arr);\n        list.Sort();\n        \n        for (int i = 0; i < 4; i++)\n        {\n            sumMin += list[i];\n        }\n        \n        for (int j = list.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":450,"fileType":"csharp","requestStartTime":1517950168308}}
{"body": {"column":46,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n                \n        List<int> list = new List<int>(arr);\n        list.Sort();\n        \n        for (int i = 0; i < 4; i++)\n        {\n            sumMin += list[i];\n        }\n        \n        for (int j = list.Count - 1; j < list.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":470,"fileType":"csharp","requestStartTime":1517950177434}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n                \n        List<int> list = new List<int>(arr);\n        list.Sort();\n        \n        for (int i = 0; i < 4; i++)\n        {\n            sumMin += list[i];\n        }\n        \n        for (int j = list.Count - 1; j > list.Count - 5; j--)\n        {\n            sumMax += list[j];\n        }\n        \n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":562,"fileType":"csharp","requestStartTime":1517950233174}}
{"body": {"column":33,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n                \n        List<int> list = new List<int>(arr);\n        list.Sort();\n        \n        for (int i = 0; i < 4; i++)\n        {\n            sumMin += list[i];\n        }\n        \n        for (int j = list.Count - 1; j > list.Count - 5; j--)\n        {\n            sumMax += list[j];\n        }\n        \n        Console.WriteLine(sumMin.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":579,"fileType":"csharp","requestStartTime":1517950242019}}
{"body": {"column":59,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        long sumMin, sumMax;\n        sumMin = sumMax = 0;\n                \n        List<int> list = new List<int>(arr);\n        list.Sort();\n        \n        for (int i = 0; i < 4; i++)\n        {\n            sumMin += list[i];\n        }\n        \n        for (int j = list.Count - 1; j > list.Count - 5; j--)\n        {\n            sumMax += list[j];\n        }\n        \n        Console.WriteLine(sumMin.ToString() + \" \" + sumMax.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":605,"fileType":"csharp","requestStartTime":1517950250444}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        \n        int maxHeight = heights.\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":280,"fileType":"csharp","requestStartTime":1517950397441}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        int numCandles = heights.\n        \n        int maxHeight = heights.Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1517950467518}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        int numCandles = heights.\n        \n        int maxHeight = heights.Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1517950471087}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        int numCandles = heights.\n        \n        int maxHeight = heights.Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1517950476639}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] leftRotation(int[] a, int d) {\n        // Complete this function\n        Array.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int[] result = leftRotation(a, d);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":200,"fileType":"csharp","requestStartTime":1517950501587}}
{"body": {"column":34,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        \n        foreach (int height in heights)\n        {\n            if (height == heights.)\n        }\n        \n        int maxHeight = heights.Max();\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":332,"fileType":"csharp","requestStartTime":1517950515960}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":163,"fileType":"csharp","requestStartTime":1517950533774}}
{"body": {"column":41,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.OrderBy(x => x).;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":192,"fileType":"csharp","requestStartTime":1517950553511}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        int maxHeight = heights.Max();\n        int count = 0;\n        \n        foreach (int height in heights)\n        {\n            if (height == maxHeight)\n                count++;\n        }\n        \n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":457,"fileType":"csharp","requestStartTime":1517950562433}}
{"body": {"column":32,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        int maxHeight = heights.Max();\n        int count = 0;\n        \n        foreach (int height in heights)\n        {\n            if (height == maxHeight)\n                count++;\n        }\n        \n        Console.WriteLine(count.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":473,"fileType":"csharp","requestStartTime":1517950566768}}
{"body": {"column":25,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr..OrderBy(x => x).ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517950581810}}
{"body": {"column":43,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.Select(x => int64..OrderBy(x => x).ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":194,"fileType":"csharp","requestStartTime":1517950589616}}
{"body": {"column":11,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        ar.\n        int maxHeight = heights.Max();\n        int count = 0;\n        \n        foreach(int height in ar)\n        {\n            \n        }\n        \n        foreach (int height in heights)\n        {\n            if (height == maxHeight)\n                count++;\n        }\n        \n        Console.WriteLine(count.ToString());\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517950630322}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        List<int> heights = new List<int>(ar);\n        \n        int maxHeight = ar.\n        int count = 0;\n        \n        foreach(int height in ar)\n        {\n            \n        }\n        \n        foreach (int height in heights)\n        {\n            if (height == maxHeight)\n                count++;\n        }\n        \n        Console.WriteLine(count.ToString());\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":275,"fileType":"csharp","requestStartTime":1517950640300}}
{"body": {"column":53,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.Select(x => int64.Parse(x))..OrderBy(x => x).ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517950665302}}
{"body": {"column":69,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.Select(x => int64.Parse(x)).OrderBy(x => x)..ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":220,"fileType":"csharp","requestStartTime":1517950671963}}
{"body": {"column":29,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function        \n        int maxHeight = ar.Max();\n        int count = 0;\n        \n        foreach(int height in ar)\n        {\n            if (height == ar.)\n                count++;\n        }\n        \n        Console.WriteLine(count.ToString());\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":339,"fileType":"csharp","requestStartTime":1517950669097}}
{"body": {"column":83,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.Select(x => int64.Parse(x)).OrderBy(x => x).Select(x => x..ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":234,"fileType":"csharp","requestStartTime":1517950677375}}
{"body": {"column":86,"line":8,"wordToComplete":"Tos","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.Select(x => int64.Parse(x)).OrderBy(x => x).Select(x => x.Tos.ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":237,"fileType":"csharp","requestStartTime":1517950679058}}
{"body": {"column":42,"line":8,"wordToComplete":"Int64","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.Select(x => Int64.Parse(x)).OrderBy(x => x).Select(x => x.ToString()).ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":193,"fileType":"csharp","requestStartTime":1517950695047}}
{"body": {"column":21,"line":60,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int evenTree(int n, int m, int[][] tree) {        \n        var traverseArr = new int[tree.GetLength(0) + 2];\n        var sumArr = new int[tree.GetLength(0) + 2];\n        \n        for(int i = 0; i<tree.GetLength(0); i++) {\n            var val = tree[i][1];\n            traverseArr[i+2] = tree[i][1];\n            //Console.WriteLine(\"{0}:{1}\", tree[i][0], tree[i][1]);\n        }\n        \n        for(int i = 0; i<traverseArr.Length; i++) {\n            Console.WriteLine(\"TRAVERSE {0}:{1}\", i, traverseArr[i]);\n        }\n        \n        var occArr = GetNumberOfOccurrences(tree.GetLength(0), tree);\n        var leaves = GetLeaves(occArr);\n                \n        TraverseTree(leaves, traverseArr, sumArr);\n        TraverseAndSnap(leaves, traverseArr, sumArr);\n        //var total = TraverseTreeAndCount(leaves, traverseArr, occArr);\n        //TraverseFromLeafToRoot(traverseArr, 10);\n        \n        for(int i = 0; i<sumArr.Length; i++) {\n            Console.WriteLine(\"SUM {0}:{1}\", i, sumArr[i]);\n        }\n        \n        return 0;\n    }\n\n    static void TraverseTree(List<int> leaves, int[] traverseArr, int[] sumArr) {\n        foreach(var leaf in leaves) {\n            TraverseFromLeafToRoot(traverseArr, sumArr, leaf);\n        }        \n    }\n    \n    static void TraverseFromLeafToRoot(int[] traverseArr, int[] sumArr, int leaf) {\n        // leaf == index\n        int vertex = leaf;\n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            Console.WriteLine(\"Vertex: \" + vertex);\n            sumArr[vertex]++;\n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");\n    }\n    \n    static int TraverseAndSnap(List<int> leaves, int[] traverseArr, int[] sumArr) {\n        List<int> snaps = new List<int>();\n        foreach(var leaf in leaves) {\n            TraverseAndCount(traverseArr, sumArr, snaps, leaf);\n        }\n        return snaps.;\n    }\n    \n    static void TraverseAndCount(int[] traverseArr, int[] sumArr, List<int> snaps, int leaf) \n    {\n        // traverse from leaf to root node\n        // add cumulative sum while traversing\n        // if sum % 2 == 0, can cut the edge\n        // leaf == index\n        int vertex = leaf;\n        int sum = 1;\n        \n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            var vertexSum = sumArr[vertex];\n            sum += vertexSum;            \n            Console.WriteLine(\"Vertex: \" + vertex);\n            if(sum % 2 == 0) {\n                Console.WriteLine(\"Snap\");\n                if(!snaps.Contains(vertex)) {\n                    snaps.Add(vertex);\n                }\n            }\n            \n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");        \n    }\n    \n    /*\n    static int TraverseTreeAndCount(List<int> leaves, int[] traverseArr, int[] occArr) {        \n        var lista = new List<int>();\n        foreach(var leaf in leaves) {\n            var foo = TraverseFromLeafToRootAndCount(traverseArr, occArr, leaf);\n            foreach(var fuu in foo) {\n                if(!lista.Contains(fuu)) {\n                    lista.Add(fuu);\n                }\n            }\n        }\n        return lista.Count;\n    }\n    */\n    /*\n    static List<int> TraverseFromLeafToRootAndCount(int[] traverseArr, int[] occArr, int leaf) {\n        List<int> total = new List<int>();\n        \n        // leaf on eka node\n        int count = 1;\n        \n        // leaf == index\n        int vertex = leaf;\n        Console.WriteLine(\"Aloitetaan traverse\");\n        Console.WriteLine(\"Leaf: \" + leaf);\n        do {\n            vertex = traverseArr[vertex];\n            //Console.WriteLine(\"Vertex: \" + vertex);\n            \n            // if count % 2 == 0 -> snip noden edge ylöspäin\n            // jos nodella ei ole muita lapsinodeja tai\n            // noden yhteyscount + count on parillinen\n            count += occArr[vertex];\n            if(count % 2 == 0 && vertex != 1) {\n                Console.WriteLine(\"***SNAP*** \" + vertex);\n                if(!total.Contains(vertex)) {\n                    total.Add(vertex);\n                }\n            }\n            \n        } while(vertex != 1);\n        Console.WriteLine(\"Saavuttiin roottinodeen\");\n        \n        return total;\n    } */           \n    \n    static int[] GetNumberOfOccurrences(int length, int[][] tree) {\n        // tee array jonka koko on tree+2, niin nodenumerot osuu yksiin\n        var arr = new int[length+2];\n        for(int i = 0; i<tree.GetLength(0); i++) {\n            var val = tree[i][1];\n            arr[val]++;\n        }\n        \n        for(int i = 0; i<arr.Length; i++) {\n            Console.WriteLine(\"{0}:{1}\", i, arr[i]);\n        }\n        \n        return arr;\n    }\n    \n    static List<int> GetLeaves(int[] arr) {\n        var leaves = new List<int>();\n        for(int i = 1; i<arr.Length; i++) {\n            if(arr[i] == 0) {\n                leaves.Add(i);\n            }\n        }\n        \n        foreach(var leaf in leaves) {\n            Console.WriteLine(\"L: \" + leaf);\n        }\n        \n        return leaves;\n    }\n    \n    /*\n2:1\n3:1\n4:3\n5:2\n6:1\n7:2\n8:6\n9:8\n10:8    \n    */\n    \n/* Occurrences:\n0:0\n1:3\n2:2\n3:1\n4:0\n5:0\n6:1\n7:0\n8:2\n9:0\n10:0\n\nLeaves:\nL: 4\nL: 5\nL: 7\nL: 9\nL: 10\n*/\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        int[][] tree = new int[m][];\n        for(int tree_i = 0; tree_i < m; tree_i++){\n           string[] tree_temp = Console.ReadLine().Split(' ');\n           tree[tree_i] = Array.ConvertAll(tree_temp,Int32.Parse);\n        }\n        int result = evenTree(n, m, tree);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":2092,"fileType":"csharp","requestStartTime":1517950866004}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function        \n        int count = 0;\n        int max = ar.\n        \n        foreach(int height in ar)\n        {\n            if (height == ar.Max())\n                count++;\n        }\n        \n        return count;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517950882352}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\nfor(int i=0;a.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":233,"fileType":"csharp","requestStartTime":1517951034368}}
{"body": {"column":25,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517951044626}}
{"body": {"column":40,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.OrderBy(x => x.\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":191,"fileType":"csharp","requestStartTime":1517951049146}}
{"body": {"column":43,"line":8,"wordToComplete":"Len","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.OrderBy(x => x.Len\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":194,"fileType":"csharp","requestStartTime":1517951050058}}
{"body": {"column":48,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.OrderBy(x => x.Length).\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":199,"fileType":"csharp","requestStartTime":1517951052005}}
{"body": {"column":52,"line":8,"wordToComplete":"Then","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.OrderBy(x => x.Length).Then\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":203,"fileType":"csharp","requestStartTime":1517951052988}}
{"body": {"column":63,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.OrderBy(x => x.Length).ThenBy(x => x).;\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":214,"fileType":"csharp","requestStartTime":1517951063773}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        if(a.)\nfor(int i=0;a.Length;i++)\n    \n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":232,"fileType":"csharp","requestStartTime":1517951077294}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        if(a.Length!=b.)\nfor(int i=0;a.Length;i++)\n    \n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":242,"fileType":"csharp","requestStartTime":1517951086033}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        if(a.Length!=b.Length)\n            return -1;\n        int diff=0;\nfor(int i=0;a.Length;i++)\n    if(a[i].)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":331,"fileType":"csharp","requestStartTime":1517951117817}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        if(a.Length!=b.Length)\n            return -1;\n        int diff=0;\nfor(int i=0;a.Length;i++)\n    foreach(char c in a[i])\n    {\n        if(b[i].)\n    }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":369,"fileType":"csharp","requestStartTime":1517951180118}}
{"body": {"column":26,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.\n        \n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":209,"fileType":"csharp","requestStartTime":1517951181387}}
{"body": {"column":61,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        var result = arr.AsParallel().OrderBy(x => x.Length)..ThenBy(x => x).ToArray();\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":212,"fileType":"csharp","requestStartTime":1517951199250}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        \n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1517951236607}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.]\n        int diff=0;\nfor(int i=0;a.Length;i++)\n    foreach(char c in a[i])\n    {\n        if(!b[i].Contains(c))\n            diff++;\n    }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":251,"fileType":"csharp","requestStartTime":1517951245940}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        \n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1517951244338}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        \n        string.\n        \n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1517951368583}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;a.;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n        break;\n    }\n            \n\n    foreach(char c in a[i])\n    {\n        \n        if(!b[i].Contains(c))\n            diff++;\n    }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":283,"fileType":"csharp","requestStartTime":1517951416584}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;a.;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n        break;\n    }\n            \n\n    foreach(char c in a[i])\n    {\n        \n        if(!b[i].Contains(c))\n            diff++;\n    }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":283,"fileType":"csharp","requestStartTime":1517951420999}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        \n        string.\n        string.Compare(time[2], 2, \"AM\", 0, 2);\n        \n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1517951496058}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        \n        string.\n        string.Compare(time[2], 2, \"AM\", 0, 2);\n        \n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1517951500749}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517951575347}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        string am_pm = time[2].\n        \n        string result = \"\";\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517951635412}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string[] time = s.Split(':');\n        \n        if (time[2].\n        \n        string result = \"\";\n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517951713333}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        \n        if (time[2].Contains(\"AM\"))\n            result = time[0];\n        else\n            result = int.\n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":363,"fileType":"csharp","requestStartTime":1517951779050}}
{"body": {"column":14,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\npublic class CustomStringComparer : IComparer<string>\n{\n    public int Compare(string x, string y)\n    {\n        if (x.Length != y.Length)\n        {\n            return x.Length - y.Length;\n        }\n\n        for (int i = 0; i < x.Length; i++)\n        {\n            if (x[i] != y[i])\n            {\n                return x[i] - y[i];\n            }\n        }\n\n        return 0;\n    }\n}\n    \nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        Array.\n        return result;\n    }\n    \n\n    public class CustomStringComparer : IComparer<string>\n    {\n        public int Compare(string x, string y)\n        {\n            if (x.Length != y.Length)\n            {\n                return x.Length - y.Length;\n            }\n\n            for (int i = 0; i < x.Length; i++)\n            {\n                if (x[i] != y[i])\n                {\n                    return x[i] - y[i];\n                }\n            }\n\n            return 0;\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":555,"fileType":"csharp","requestStartTime":1517951803840}}
{"body": {"column":34,"line":30,"wordToComplete":"Custom","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\npublic class CustomStringComparer : IComparer<string>\n{\n    public int Compare(string x, string y)\n    {\n        if (x.Length != y.Length)\n        {\n            return x.Length - y.Length;\n        }\n\n        for (int i = 0; i < x.Length; i++)\n        {\n            if (x[i] != y[i])\n            {\n                return x[i] - y[i];\n            }\n        }\n\n        return 0;\n    }\n}\n    \nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        Array.Sort(arr, new Custom)\n        return result;\n    }\n    \n\n    public class CustomStringComparer : IComparer<string>\n    {\n        public int Compare(string x, string y)\n        {\n            if (x.Length != y.Length)\n            {\n                return x.Length - y.Length;\n            }\n\n            for (int i = 0; i < x.Length; i++)\n            {\n                if (x[i] != y[i])\n                {\n                    return x[i] - y[i];\n                }\n            }\n\n            return 0;\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":575,"fileType":"csharp","requestStartTime":1517951809540}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        time[2].\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":266,"fileType":"csharp","requestStartTime":1517951877184}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        time[2].\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":266,"fileType":"csharp","requestStartTime":1517951899981}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].\n        \n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":281,"fileType":"csharp","requestStartTime":1517951917692}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int introTutorial(int V, int[] arr) {\n        return arr.\n    }\n\n    static void Main(String[] args) {\n        int V = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = introTutorial(V, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":172,"fileType":"csharp","requestStartTime":1517951930340}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        if (am_pm.)\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":322,"fileType":"csharp","requestStartTime":1517951936927}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.\n        \n        if (am_pm.Equals(\"AM\"))\n        {\n            \n        }\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517951991083}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        int mins = int.\n        \n        if (am_pm.Equals(\"AM\"))\n        {\n            \n        }\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":367,"fileType":"csharp","requestStartTime":1517952001176}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        int mins = int.Parse(time[1]);\n        int secs = int.\n        \n        if (am_pm.Equals(\"AM\"))\n        {\n            \n        }\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":406,"fileType":"csharp","requestStartTime":1517952010002}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2]);\n                \n        if (am_pm.)\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":457,"fileType":"csharp","requestStartTime":1517952041280}}
{"body": {"column":21,"line":8,"wordToComplete":"arrayLeng","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        var arrayLeng\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517952247439}}
{"body": {"column":31,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = 0; i < arr.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":186,"fileType":"csharp","requestStartTime":1517952267147}}
{"body": {"column":26,"line":117,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    class Node{\n        public Node Parent {get; private set;}\n        public int Size {get; private set;}\n        public int Group {get; private set;}\n        public readonly List<Node> Neighbors;\n        public Node(){\n            Size = 1;\n            Parent = this;\n            Group = 0;\n            Neighbors = new List<Node>();\n        }\n        \n        public void AddChild(Node node){\n            node.Parent = this;\n            Size += node.Size;\n        }\n        public bool IsRoot(){\n            return Parent == this;\n        }\n        \n        public Node GetRoot(){\n            var root = Parent;\n            while(!root.IsRoot()){\n                root = root.Parent;\n            }\n            var p = this;\n            while(p != root) {\n              var next = p.Parent;\n              p.Parent = root;\n              p = next;\n            }\n            return root;\n        }\n        \n        \n        \n        public void AddNeighbor(Node node){\n            Neighbors.Add(node);\n            node.Neighbors.Add(this);\n        }\n        \n        public int Travese(int group){\n            if(Group != 0)\n                return 0;\n            Group = group;\n            int count = 1;\n            foreach(var n in Neighbors){\n                if(n.Group == 0)\n                    count += n.Travese(group);\n            }\n            return count;\n        }\n    }\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32( Console.ReadLine());\n        var nodes = new Node[n];\n        var QuickFind = false;\n        for(int i=0;i<n;i++)\n            nodes[i] = new Node();\n        for(int i=0;i<n-1;i++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int x = Convert.ToInt32(tokens_n[0]) -1;\n            int y = Convert.ToInt32(tokens_n[1]) -1;\n            if(tokens_n[2] == \"r\")\n                continue;\n            \n            if(QuickFind){\n                if(nodes[x].GetRoot() != nodes[y].GetRoot() ){\n                    if(nodes[x].GetRoot().Size >= nodes[y].GetRoot().Size) {\n                        nodes[x].GetRoot().AddChild(nodes[y].GetRoot());\n                    }else{\n                        nodes[y].GetRoot().AddChild(nodes[x].GetRoot());\n                    }\n                }    \n            }else{\n                nodes[x].AddNeighbor(nodes[y]);\n            }\n            \n        }\n        \n        var counts = new List<int>();\n        if(QuickFind){\n            counts = (from node in nodes where node.IsRoot() select node.Size).ToList();\n        }else{\n            int group = 1;\n            foreach(var node in nodes){\n                if(node.Group == 0){\n                    counts.Add(node.Travese(group++));\n                }\n            }\n        }\n        long triplets = n * (n-1) *(n-2);\n       /* var products = new long[counts.Count];\n        int sum = counts.Sum();\n        \n        for(int i=0;i<counts.Count;i++){\n            sum -= counts[i];\n            products[i] = sum * counts[i];\n        }\n        for(int i=0;i<counts.Count;i++){\n            for(int j=i+1;j<counts.Count;j++){\n                products[i] -= counts[i] * counts[j];\n                if(products[i] == 0)\n                    break;\n                triplets += products[i] * counts[j];\n            }\n            \n        }*/\n        for(int i=0;i<counts.Count;i++){\n            if(counts[i] >)\n            var x = counts[i] * (counts[i] - 1);\n            triplets -= (x * (counts[i] -2) + x * (n-count[i]))/6;\n        }\n        Console.WriteLine(triplets % (1000000007));\n    }\n}\n\n","offset":3581,"fileType":"csharp","requestStartTime":1517952279534}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2]);\n                \n        hours ? am_pm.\n        \n        if (am_pm.Equals(\"AM\"))\n        {\n            if (hours < 12)\n            {\n                if (hours < 10)\n                    result += \"0\";\n                \n                result += hours + \":\";\n            }\n            else\n            {\n                result += \"00:\";\n            }\n        }\n        else\n        {\n            \n        }\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":461,"fileType":"csharp","requestStartTime":1517952283002}}
{"body": {"column":35,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = 0; i < arr.Length - 1; i++){\n            for(j = i + 1; j < arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":239,"fileType":"csharp","requestStartTime":1517952317240}}
{"body": {"column":36,"line":9,"wordToComplete":"L","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = 0; i < arr.Length - 1; i++){\n            for(j = i + 1; j < arr.L)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":240,"fileType":"csharp","requestStartTime":1517952318035}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = arr.; i < arr.Length - 1; i++)\n        {\n            for(j = i + 1; j < arr.Length; j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":179,"fileType":"csharp","requestStartTime":1517952412145}}
{"body": {"column":39,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = arr.Length - 1; i >; i++)\n        {\n            for(j = i + 1; j < arr.Length; j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":194,"fileType":"csharp","requestStartTime":1517952422217}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int makingAnagrams(string s1, string s2)\n    {\n        Dictionary<>\n    }\n\n    static void Main(String[] args) {\n        string s1 = Console.ReadLine();\n        string s2 = Console.ReadLine();\n        int result = makingAnagrams(s1, s2);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":182,"fileType":"csharp","requestStartTime":1517952428712}}
{"body": {"column":55,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int makingAnagrams(string s1, string s2)\n    {\n        Dictionary<char, int> occur1 = new Dictionary<>\n    }\n\n    static void Main(String[] args) {\n        string s1 = Console.ReadLine();\n        string s2 = Console.ReadLine();\n        int result = makingAnagrams(s1, s2);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1517952445919}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int makingAnagrams(string s1, string s2)\n    {\n        Dictionary<char, int> occur1 = new Dictionary<char, int>();\n        Dictionary<char, int> occur2 = new Dictionary<char, int>();\n        \n        foreach(char c in s1)\n        {\n            if(occur1.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string s1 = Console.ReadLine();\n        string s2 = Console.ReadLine();\n        int result = makingAnagrams(s1, s2);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":369,"fileType":"csharp","requestStartTime":1517952467343}}
{"body": {"column":23,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int makingAnagrams(string s1, string s2)\n    {\n        Dictionary<char, int> occur1 = new Dictionary<char, int>();\n        Dictionary<char, int> occur2 = new Dictionary<char, int>();\n        \n        foreach(char c in s1)\n        {\n            if(occur1.Contains(c))\n            {\n                occur1[c]++;\n            }\n            else\n            {\n                occur1.    \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string s1 = Console.ReadLine();\n        string s2 = Console.ReadLine();\n        int result = makingAnagrams(s1, s2);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":493,"fileType":"csharp","requestStartTime":1517952501695}}
{"body": {"column":30,"line":8,"wordToComplete":"len","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = 0; i < len; i--)\n        {\n            var x = arr[i];\n            \n            for(j = 0; j < arr.Length; j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1517952561092}}
{"body": {"column":31,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = 0; i < arr.; i--)\n        {\n            var x = arr[i];\n            \n            for(j = 0; j < arr.Length; j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":186,"fileType":"csharp","requestStartTime":1517952563593}}
{"body": {"column":34,"line":8,"wordToComplete":"Len","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = 0; i < arr.Len; i--)\n        {\n            var x = arr[i];\n            \n            for(j = 0; j < arr.Length; j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1517952564611}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        string result = \"\";\n\n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        hours = (am_pm.Equals(\"AM\") && hours < 12) ? hours : 0;\n        hours = (am_pm.)\n        \n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2]);\n                \n        \n        \n        \n        if (am_pm.Equals(\"AM\"))\n        {\n            if (hours < 12)\n            {\n                if (hours < 10)\n                    result += \"0\";\n                \n                result += hours + \":\";\n            }\n            else\n            {\n                result += \"00:\";\n            }\n        }\n        else\n        {\n            \n        }\n        \n        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":431,"fileType":"csharp","requestStartTime":1517952577059}}
{"body": {"column":35,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n         int[] indexed = new int[a.]\n        foreach(char c in a[i])\n        {        \n            if(!b[i].Contains(c))\n                diffs[i]=diffs[i]+1;\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":414,"fileType":"csharp","requestStartTime":1517952602711}}
{"body": {"column":36,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n         int[] indexed = new int[a.Length];\n        foreach(for int j=0; j<a[i].char c in a[i])\n        {        \n            if(!b[i].Contains(c))\n                diffs[i]=diffs[i]+1;\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":459,"fileType":"csharp","requestStartTime":1517952650797}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = n - 1; i > 0; i--)\n        {\n            var x = arr[i];\n            \n            for(j = i - 1; j >= 0; j--)\n            {\n                var y = arr[j];\n                \n                if(y > x)\n                {\n                    var temp = y;\n                    arr[j] = x;\n                    arr[i] = j;\n                }\n            }\n            \n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":555,"fileType":"csharp","requestStartTime":1517952751884}}
{"body": {"column":32,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = n - 1; i > 0; i--)\n        {\n            var x = arr[i];\n            \n            for(j = i - 1; j >= 0; j--)\n            {\n                var y = arr[j];\n                \n                if(y > x)\n                {\n                    var temp = y;\n                    arr[j] = x;\n                    arr[i] = j;\n                }\n            }\n            \n            Console.WriteLine(x.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":567,"fileType":"csharp","requestStartTime":1517952757492}}
{"body": {"column":34,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void insertionSort1(int n, int[] arr) {\n        for(var i = n - 1; i > 0; i--)\n        {\n            var x = arr[i];\n            \n            for(j = i - 1; j >= 0; j--)\n            {\n                var y = arr[j];\n                \n                if(y > x)\n                {\n                    var temp = y;\n                    arr[j] = x;\n                    arr[i] = j;\n                }\n            }\n            \n            Console.WriteLine(arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        insertionSort1(n, arr);\n    }\n}\n\n\n","offset":569,"fileType":"csharp","requestStartTime":1517952760021}}
{"body": {"column":35,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n         int[] indexed = new int[a.Length];\n        for(int j=0; j<a[i].Length; j++)\n        {        \n            if(!b[i].Contains(a[i][j]))\n                diffs[i]=diffs[i]+1;\n            else\n            {\n                int indexOf = b[i].\n            }\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":625,"fileType":"csharp","requestStartTime":1517952796163}}
{"body": {"column":35,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n         int[] indexed = new int[a.Length];\n        for(int j=0; j<a[i].Length; j++)\n        {        \n            if(!b[i].Contains(a[i][j]))\n                diffs[i]=diffs[i]+1;\n            else\n            {\n                int indexOf = b[i].IndexOf(a[i][j]);\n                if(indexed[indexOf] == 0)\n                    indexed[indexOf] == 1\n                else\n                {\n                    indexOf = b[i].\n                }\n            }\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":801,"fileType":"csharp","requestStartTime":1517952921005}}
{"body": {"column":35,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n         int[] indexed = new int[a.Length];\n        for(int j=0; j<a[i].Length; j++)\n        {        \n            if(!b[i].Contains(a[i][j]))\n                diffs[i]=diffs[i]+1;\n            else\n            {\n                int indexOf = b[i].IndexOf(a[i][j]);\n                if(indexed[indexOf] == 0)\n                    indexed[indexOf] == 1\n                else\n                {\n                    indexOf = b[i].\n                }\n            }\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":801,"fileType":"csharp","requestStartTime":1517952932544}}
{"body": {"column":35,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n         int[] indexed = new int[a.Length];\n        for(int j=0; j<a[i].Length; j++)\n        {        \n            if(!b[i].Contains(a[i][j]))\n                diffs[i]=diffs[i]+1;\n            else\n            {\n                int indexOf = b[i].IndexOf(a[i][j]);\n                if(indexed[indexOf] == 0)\n                    indexed[indexOf] == 1;\n                else\n                {\n                    indexOf = b[i].\n                }\n            }\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":802,"fileType":"csharp","requestStartTime":1517952946760}}
{"body": {"column":15,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        \n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        hours = (am_pm.Equals(\"AM\") && hours == 12) ? 0 : hours;\n        hours = (am_pm.Equals(\"PM\") && hours == 12) ? 12 : (hours + 12) % 24 : hours;\n        \n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2]);\n\n        string result = \"\";\n        result.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":606,"fileType":"csharp","requestStartTime":1517953016285}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        \n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        hours = (am_pm.Equals(\"AM\") && hours == 12) ? 0 : hours;\n        hours = (am_pm.Equals(\"PM\") && hours == 12) ? 12 : (hours + 12) % 24 : hours;\n        \n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2]);\n\n        return string.\n        \n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":585,"fileType":"csharp","requestStartTime":1517953044039}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n       var ar_temp = Console.\n    }\n}\n\n\n","offset":225,"fileType":"csharp","requestStartTime":1517953073613}}
{"body": {"column":40,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n       var ar_temp = Console.ReadLine().\n    }\n}\n\n\n","offset":236,"fileType":"csharp","requestStartTime":1517953077396}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n       var ar_temp = Console.ReadLine().Split(' ');\n        var ar = Array.\n    }\n}\n\n\n","offset":271,"fileType":"csharp","requestStartTime":1517953091197}}
{"body": {"column":49,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n       var ar_temp = Console.ReadLine().Split(' ');\n        var ar = Array.ConvertAll(ar_temp, Int32.)\n    }\n}\n\n\n","offset":297,"fileType":"csharp","requestStartTime":1517953100908}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n       var ar_temp = Console.ReadLine().Split(' ');\n        var ar = Array.ConvertAll(ar_temp, Int32.Parse);\n        Console.\n    }\n}\n\n\n","offset":321,"fileType":"csharp","requestStartTime":1517953107166}}
{"body": {"column":29,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n       var ar_temp = Console.ReadLine().Split(' ');\n        var ar = Array.ConvertAll(ar_temp, Int32.Parse);\n        Console.WriteLine(ar.)\n    }\n}\n\n\n","offset":334,"fileType":"csharp","requestStartTime":1517953110964}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    static void Main(String[] args) {\n        //int n = Convert.ToInt32(Console.ReadLine());\n       Console.\n        var ar_temp = Console.ReadLine().Split(' ');\n        var ar = Array.ConvertAll(ar_temp, Int32.Parse);\n        Console.WriteLine(ar.Sum());\n    }\n}\n\n\n","offset":213,"fileType":"csharp","requestStartTime":1517953129320}}
{"body": {"column":40,"line":29,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getMinimumDifference(string[] a, string[] b) {\n        int[] diffs = new int[a.Length];\n        \nfor(int i=0;i<a.Length;i++)\n{    \n    if(a[i].Length!=b[i].Length) {\n        diffs[i] = -1;\n    }\n     else {\n        int[] indexed = new int[a.Length];\n        for(int j=0; j<a[i].Length; j++)\n        {        \n            if(!b[i].Contains(a[i][j]))\n                diffs[i]=diffs[i]+1;\n            else\n            {\n                int indexOf = b[i].IndexOf(a[i][j]);\n                if(indexed[indexOf] == 0)\n                    indexed[indexOf] = 1;\n                else if(indexOf != b[i].)\n                {\n                    indexOf = b[i].IndexOf(a[i][j],indexOf+1);\n                    indexed[indexOf] = indexOf;\n                }\n            }\n        }\n     }\n}\n        return diffs;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        string[] a = new string [a_size];\n        string a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Console.ReadLine();\n            a[a_i] = a_item;\n        }\n\n        int b_size = 0;\n        b_size = Convert.ToInt32(Console.ReadLine());\n        string[] b = new string [b_size];\n        string b_item;\n        for(int b_i = 0; b_i < b_size; b_i++) {\n            b_item = Console.ReadLine();\n            b[b_i] = b_item;\n        }\n\n        res = getMinimumDifference(a, b);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":766,"fileType":"csharp","requestStartTime":1517953216614}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        \n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        hours = (am_pm.Equals(\"AM\") && hours == 12) ? 0 : hours;\n        hours = (am_pm.Equals(\"PM\") && hours == 12) ? 12 : (hours + 12) % 24;\n        \n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2]);\n\n        string result = string.Format(\"{0}:{1}:{2}\", time[0], time[1], time[2]);\n        Console.\n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":652,"fileType":"csharp","requestStartTime":1517953233594}}
{"body": {"column":44,"line":121,"wordToComplete":"tripl","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    class Node{\n        public Node Parent {get; private set;}\n        public int Size {get; private set;}\n        public int Group {get; private set;}\n        public readonly List<Node> Neighbors;\n        public Node(){\n            Size = 1;\n            Parent = this;\n            Group = 0;\n            Neighbors = new List<Node>();\n        }\n        \n        public void AddChild(Node node){\n            node.Parent = this;\n            Size += node.Size;\n        }\n        public bool IsRoot(){\n            return Parent == this;\n        }\n        \n        public Node GetRoot(){\n            var root = Parent;\n            while(!root.IsRoot()){\n                root = root.Parent;\n            }\n            var p = this;\n            while(p != root) {\n              var next = p.Parent;\n              p.Parent = root;\n              p = next;\n            }\n            return root;\n        }\n        \n        \n        \n        public void AddNeighbor(Node node){\n            Neighbors.Add(node);\n            node.Neighbors.Add(this);\n        }\n        \n        public int Travese(int group){\n            if(Group != 0)\n                return 0;\n            Group = group;\n            int count = 1;\n            foreach(var n in Neighbors){\n                if(n.Group == 0)\n                    count += n.Travese(group);\n            }\n            return count;\n        }\n    }\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32( Console.ReadLine());\n        var nodes = new Node[n];\n        var QuickFind = false;\n        for(int i=0;i<n;i++)\n            nodes[i] = new Node();\n        for(int i=0;i<n-1;i++){\n            string[] tokens_n = Console.ReadLine().Split(' ');\n            int x = Convert.ToInt32(tokens_n[0]) -1;\n            int y = Convert.ToInt32(tokens_n[1]) -1;\n            if(tokens_n[2] == \"r\")\n                continue;\n            \n            if(QuickFind){\n                if(nodes[x].GetRoot() != nodes[y].GetRoot() ){\n                    if(nodes[x].GetRoot().Size >= nodes[y].GetRoot().Size) {\n                        nodes[x].GetRoot().AddChild(nodes[y].GetRoot());\n                    }else{\n                        nodes[y].GetRoot().AddChild(nodes[x].GetRoot());\n                    }\n                }    \n            }else{\n                nodes[x].AddNeighbor(nodes[y]);\n            }\n            \n        }\n        \n        var counts = new List<int>();\n        if(QuickFind){\n            counts = (from node in nodes where node.IsRoot() select node.Size).ToList();\n        }else{\n            int group = 1;\n            foreach(var node in nodes){\n                if(node.Group == 0){\n                    counts.Add(node.Travese(group++));\n                }\n            }\n        }\n        long triplets = 0;\n       /* var products = new long[counts.Count];\n        int sum = counts.Sum();\n        \n        for(int i=0;i<counts.Count;i++){\n            sum -= counts[i];\n            products[i] = sum * counts[i];\n        }\n        for(int i=0;i<counts.Count;i++){\n            for(int j=i+1;j<counts.Count;j++){\n                products[i] -= counts[i] * counts[j];\n                if(products[i] == 0)\n                    break;\n                triplets += products[i] * counts[j];\n            }\n            \n        }*/\n        for(int i=0;i<counts.Count;i++){\n            if(counts[i] < 2)\n                continue;\n            triplets += counts[i] * (counts[i] - 1) * (3 * n - 2 * counts[i] - 2);\n        }\n        triplets =  n * (n-1) *(n-2) - tripl\n        triplets /=6;\n        Console.WriteLine(triplets % (1000000007));\n    }\n}\n\n","offset":3733,"fileType":"csharp","requestStartTime":1517953421330}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        for(int i=a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517953453560}}
{"body": {"column":37,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        \n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        \n        int hours = int.Parse(time[0]);\n        hours = (am_pm.Equals(\"AM\") && hours == 12) ? 0 : hours;\n        hours = (am_pm.Equals(\"PM\") && hours == 12) ? 12 : (hours + 12) % 24;\n        \n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2].);\n\n        string result = string.Format(\"{0:00}:{1:00}:{2:00}\", hours, mins, secs);        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":552,"fileType":"csharp","requestStartTime":1517953492636}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        \n        string[] time = s.Split(':');\n        string am_pm = time[2].Remove(2, 2);\n        string sec_str = time[2].\n        \n        int hours = int.Parse(time[0]);\n        hours = (am_pm.Equals(\"AM\") && hours == 12) ? 0 : hours;\n        hours = (am_pm.Equals(\"PM\") && hours == 12) ? 12 : (hours + 12) % 24;\n        \n        int mins = int.Parse(time[1]);\n        int secs = int.Parse(time[2].Remove(0,2));\n\n        string result = string.Format(\"{0:00}:{1:00}:{2:00}\", hours, mins, secs);        \n        return result;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":308,"fileType":"csharp","requestStartTime":1517953609563}}
{"body": {"column":38,"line":40,"wordToComplete":"","code":"\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Solution {\n    class Perm\n    {\n        public int a { get; set; }\n        public int b { get; set; }\n        public int k { get; set; }\n    }\n    class Solution {\n        static void Main(string[] args) {\n            /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n            var line = Console.ReadLine();            \n            args = line.Split(new []{\" \"}, StringSplitOptions.None);\n            var n = int.Parse(args[0]);\n            var m = int.Parse(args[1]);\n            \n            var max = -1L;\n            var t = new long[n];\n            var perms = new List<Perm>{};\n            for(int i = 0; i < m; i++)\n            {\n                line = Console.ReadLine();                \n                args = line.Split(new []{\" \"}, StringSplitOptions.None);\n                var a = int.Parse(args[0]);\n                var b = int.Parse(args[1]);\n                var k = int.Parse(args[2]);\n                var perm = new Perm {a = a - 1, b = b - 1, k = k};\n                perms.Add(perm);\n            }\n            \n            for(int i = 0; i < n; i++)\n            {\n                var p = 0L;\n                for(int j = 0; j < m; j++)\n                {\n                    if(perms[j].a <= i && i <= perms[j].b)\n                        p += perms[j].\n                }\n            }\n            Console.WriteLine(max);\n        }\n    }\n}\n\n","offset":1374,"fileType":"csharp","requestStartTime":1517953627126}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(i=1;i<=10;i++)\n        {\n            Console.\n        }\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517953669266}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int d1=0;\n        int d2=0;\n        int aux=0;\n        for(int i=a.GetLength(0)-1;i>=0;i--){\n            d1+=a[i][i];\n            d2+=a[i][aux++];\n        }\n        return Math.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":370,"fileType":"csharp","requestStartTime":1517953686351}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int d1=0;\n        int d2=0;\n        int aux=0;\n        for(int i=a.GetLength(0)-1;i>=0;i--){\n            d1+=a[i][i];\n            d2+=a[i][aux++];\n        }\n        return Math.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":370,"fileType":"csharp","requestStartTime":1517953691687}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int slotGame(string[] spins) {\nreturn spins.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int spins_size = 0;\n        spins_size = Convert.ToInt32(Console.ReadLine());\n        string[] spins = new string [spins_size];\n        string spins_item;\n        for(int spins_i = 0; spins_i < spins_size; spins_i++) {\n            spins_item = Console.ReadLine();\n            spins[spins_i] = spins_item;\n        }\n\n        res = slotGame(spins);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":210,"fileType":"csharp","requestStartTime":1517953814498}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":199,"fileType":"csharp","requestStartTime":1517953857780}}
{"body": {"column":34,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        int ainstr = (from c in s.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1517953908005}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.Length;\n        int pos=0;\n        int neg=0;\n        int z=0;\n        for(int i=0;i<arr;i++){\n            if(arr[i]<0)\n                neg++;\n            else if(arr[i]>0)\n                pos++;\n            else\n                z++;\n        }\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":459,"fileType":"csharp","requestStartTime":1517953974265}}
{"body": {"column":74,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        int ainstr = (from c in s.ToCharArray() where c == 'a' select c ).\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517954004901}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = .(from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return \n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":178,"fileType":"csharp","requestStartTime":1517954070388}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = Convert.(from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return \n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1517954072920}}
{"body": {"column":33,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.Length;\n        int pos=0;\n        int neg=0;\n        int z=0;\n        for(int i=0;i<arr;i++){\n            if(arr[i]<0)\n                neg++;\n            else if(arr[i]>0)\n                pos++;\n            else\n                z++;\n        }\n        Console.WriteLine(String.);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":476,"fileType":"csharp","requestStartTime":1517954077237}}
{"body": {"column":46,"line":21,"wordToComplete":"0:0.}\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.Length;\n        int pos=0;\n        int neg=0;\n        int z=0;\n        for(int i=0;i<arr;i++){\n            if(arr[i]<0)\n                neg++;\n            else if(arr[i]>0)\n                pos++;\n            else\n                z++;\n        }\n        Console.WriteLine(String.Format(\"{0:0.}\"));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":489,"fileType":"csharp","requestStartTime":1517954099134}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = (from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return ((n / s.))\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":271,"fileType":"csharp","requestStartTime":1517954113619}}
{"body": {"column":57,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = (from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return (((n / s.Length) * ainstr) + (from c in s.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517954161129}}
{"body": {"column":76,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = (from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return (((n / s.Length) * ainstr) + (from c in s.Substring(0, n % s.))\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":324,"fileType":"csharp","requestStartTime":1517954195073}}
{"body": {"column":84,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = (from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return (((n / s.Length) * ainstr) + (from c in s.Substring(0, n % s.Length).)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":332,"fileType":"csharp","requestStartTime":1517954202068}}
{"body": {"column":123,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        long ainstr = (from c in s.ToCharArray() where c == 'a' select c ).Count();\n        \n        return (((n / s.Length) * ainstr) + (from c in s.Substring(0, n % s.Length).ToCharArray() where c == 'a' select c).\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":371,"fileType":"csharp","requestStartTime":1517954216762}}
{"body": {"column":64,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.Length;\n        int pos=0;\n        int neg=0;\n        int z=0;\n        for(int i=0;i<total;i++){\n            if(arr[i]<0)\n                neg++;\n            else if(arr[i]>0)\n                pos++;\n            else\n                z++;\n        }\n        Console.WriteLine(String.Format(\"{0:0.######}\", Convert.pos/total));\n        Console.WriteLine(String.Format(\"{0:0.######}\", neg/total));\n        Console.WriteLine(String.Format(\"{0:0.######}\", z/total));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":509,"fileType":"csharp","requestStartTime":1517954233554}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.Length;\n        int pos=0;\n        int neg=0;\n        int z=0;\n        for(int i=0;i<total;i++){\n            if(arr[i]<0)\n                neg++;\n            else if(arr[i]>0)\n                pos++;\n            else\n                z++;\n        }\n        Console.\n        Console.WriteLine(String.Format(\"{0:0.######}\", Convert.ToDouble(pos/total)));\n        Console.WriteLine(String.Format(\"{0:0.######}\", Convert.ToDouble(neg/total)));\n        Console.WriteLine(String.Format(\"{0:0.######}\", Convert.ToDouble(z/total)));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":461,"fileType":"csharp","requestStartTime":1517954324126}}
{"body": {"column":132,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long repeatedString(string s, long n) {\n        return (((n / s.Length) * (from c in s.ToCharArray() where c == 'a' select c ).Count()) + (from c in s.Substring(0, Convert.n % s.Length).ToCharArray() where c == 'a' select c).Count());\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        long n = Convert.ToInt64(Console.ReadLine());\n        long result = repeatedString(s, n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":287,"fileType":"csharp","requestStartTime":1517954388904}}
{"body": {"column":65,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        int total=arr.Length;\n        int pos=0;\n        int neg=0;\n        int z=0;\n        for(int i=0;i<total;i++){\n            if(arr[i]<0)\n                neg++;\n            else if(arr[i]>0)\n                pos++;\n            else\n                z++;\n        }\n        Console.WriteLine(pos);\n        Console.WriteLine(String.Format(\"{0:0.######}\", (Convert.pos/total)));\n        Console.WriteLine(String.Format(\"{0:0.######}\", (neg/total)));\n        Console.WriteLine(String.Format(\"{0:0.######}\", (z/total)));\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":542,"fileType":"csharp","requestStartTime":1517954432964}}
{"body": {"column":35,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<Tuple<int,int>>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(Convert.ToInt32).ToArray();\n            lines.Add(tuple);\n        }\n        lines = lines.OrderBy(x=>x.\n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":545,"fileType":"csharp","requestStartTime":1517954561009}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1517954614814}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int i=0;i<n;i++){\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":223,"fileType":"csharp","requestStartTime":1517954627661}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int i=0;i<n;i++){\n            Console.WriteLine().;\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":236,"fileType":"csharp","requestStartTime":1517954632046}}
{"body": {"column":24,"line":19,"wordToComplete":"z","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<Tuple<int,int>>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(Convert.ToInt32).ToArray();\n            lines.Add(tuple);\n        }\n        lines = lines.OrderBy(x=>x.Item1).ToList();\n        lines.Where(z=>z)\n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":586,"fileType":"csharp","requestStartTime":1517954678966}}
{"body": {"column":35,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<Tuple<int,int>>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(Convert.ToInt32).ToArray();\n            lines.Add(tuple);\n        }\n        lines = lines.OrderBy(x=>x.Item1).ToList();\n        while(lines.Count>0)\n        {\n            var currentLine = lines[0];\n            lines.Skip(1).Where(x=>)\n        }\n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":676,"fileType":"csharp","requestStartTime":1517954748501}}
{"body": {"column":46,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<Tuple<int,int>>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(Convert.ToInt32).ToArray();\n            lines.Add(tuple);\n        }\n        lines = lines.OrderBy(x=>x.Item1).ToList();\n        while(lines.Count>0)\n        {\n            var currentLine = lines[0];\n            lines.Skip(1).Where(x=>x.Item2>=x.)\n        }\n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":687,"fileType":"csharp","requestStartTime":1517954765533}}
{"body": {"column":49,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<Tuple<int,int>>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(Convert.ToInt32).ToArray();\n            lines.Add(tuple);\n        }\n        lines = lines.OrderBy(x=>x.Item1).ToList();\n        while(lines.Count>0)\n        {\n            var currentLine = lines[0];\n            lines.Skip(1).Where(x=>x.Item2>=curr.)\n        }\n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":690,"fileType":"csharp","requestStartTime":1517954771056}}
{"body": {"column":68,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tconst string c = \"scissors-paper-rock\";\n        // fill in the missing code\n\t\tIEnumerable<string> elements = c.Split( new[] { '-' } ).Reverse()..ToList<string>();\n\n        foreach (string element in elements)\n\t\t\tConsole.Write(\"{0},\", element);\n\t}\n}\n","offset":268,"fileType":"csharp","requestStartTime":1517954866615}}
{"body": {"column":85,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tconst string c = \"scissors-paper-rock\";\n        // fill in the missing code\n\t\tIEnumerable<string> elements = c.Split( new[] { '-' } ).Reverse().ToList<string>().;\n\n        foreach (string element in elements)\n\t\t\tConsole.Write(\"{0},\", element);\n\t}\n}\n","offset":285,"fileType":"csharp","requestStartTime":1517954927431}}
{"body": {"column":98,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tconst string c = \"scissors-paper-rock\";\n        // fill in the missing code\n\t\tIEnumerable<string> elements = c.Split( new[] { '-' } ).Reverse().ToList<string>().ForEach(e=>e.;\n\n        foreach (string element in elements)\n\t\t\tConsole.Write(\"{0},\", element);\n\t}\n}\n","offset":298,"fileType":"csharp","requestStartTime":1517954944223}}
{"body": {"column":59,"line":20,"wordToComplete":"StringSplit","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void best_hotels() {\n        var count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<string>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            lines.Add(line);\n        }\n       var hotelRatings = lines.Select(x=>\n                     { \n                         var nums = x.Split(' ',StringSplit).Select(num=>Convert.ToInt32(num)).ToArray();\n                      return nums;\n                     }).GroupBy(x=>x[0]).ToDictionary(x=>x.Key,x=>x.Average(w=>w[1])).OrderByDescending(x=>x.Value);\n        foreach(var rating in hotelRatings)\n        {\n            Console.WriteLine($\"{rating.Key}\");\n        }\n\n    }\n\n    static void Main(String[] args) {\n        best_hotels();\n        \n    }\n}\n\n","offset":553,"fileType":"csharp","requestStartTime":1517955695681}}
{"body": {"column":74,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void best_hotels() {\n        var count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<string>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            lines.Add(line);\n        }\n       var hotelRatings = lines.Select(x=>\n                     { \n                         var nums = x.Split(new[]{' '},StringSplitOptions.).Select(num=>Convert.ToInt32(num)).ToArray();\n                      return nums;\n                     }).GroupBy(x=>x[0]).ToDictionary(x=>x.Key,x=>x.Average(w=>w[1])).OrderByDescending(x=>x.Value);\n        foreach(var rating in hotelRatings)\n        {\n            Console.WriteLine($\"{rating.Key}\");\n        }\n\n    }\n\n    static void Main(String[] args) {\n        best_hotels();\n        \n    }\n}\n\n","offset":568,"fileType":"csharp","requestStartTime":1517955752328}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int i=0;i<n;i++){\n            for(int j=i+1;j<n.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":233,"fileType":"csharp","requestStartTime":1517956160915}}
{"body": {"column":127,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void best_hotels() {\n        var count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<string>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            lines.Add(line);\n        }\n       var hotelRatings = lines.Select(x=>\n                     { \n                         var nums = x.Split(new[]{' '},StringSplitOptions.RemoveEmptyEntries).Select(num=>Convert.ToInt32(num)).ToArray();\n                      return nums;\n                     }).GroupBy(x=>x[0]).ToDictionary(x=>x.Key,x=>x.Average(w=>w[1])).OrderByDescending(x=>x.Value).ThenBy((x=>;\n        foreach(var rating in hotelRatings)\n        {\n            Console.WriteLine($\"{rating.Key}\");\n        }\n\n    }\n\n    static void Main(String[] args) {\n        best_hotels();\n        \n    }\n}\n\n","offset":795,"fileType":"csharp","requestStartTime":1517956188447}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=0;i<n;i++){\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":243,"fileType":"csharp","requestStartTime":1517956254504}}
{"body": {"column":50,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<Tuple<int,int>>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(x=>Convert.ToInt32).ToArray();\n            lines.Add(tuple);\n        }\n        lines = lines.OrderBy(x=>x.Item1).ToList();\n        for(var idx=0;idx<count;idx++)\n        {\n            var currentLine = lines[idx];\n            currentLine.Item2=lines.Where(x=>(x.Item1>=currentLine.Item1 && x.Item2<=currentLine.Item1)).Select(x=>x.Item2).Max();\n        }\n        \n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":445,"fileType":"csharp","requestStartTime":1517956305821}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=0;i<n;i++){\n            Console.WriteLine(\"\".\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":256,"fileType":"csharp","requestStartTime":1517956351005}}
{"body": {"column":52,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n\n\n    static string shortenString(string input) {\n            var wordMatches = System.Text.RegularExpressions.Regex.Matches(input, \"[a-zA-Z]{1,}\");\n\n            foreach (System.Text.RegularExpressions.Match match in wordMatches)\n            {\n                var index = match.Index;\n                var value = match.Value;\n                var length = match.Length;\n\n                input = input.Remove(index, length).Insert(index, ShortenWord(value));  \n            }\n\n            return input;\n\n    }\n\n       private static string ShortenWord(string word)\n        {\n            var firstLetter = word.First();\n            var lastLetter = word.Last();\n            var distinctMiddleLettersCount = word.Substring(1, word.Length - 2).Distinct().Count();\n\n            return String.Concat(firstLetter, distinctMiddleLettersCount, lastLetter); ;\n        }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        string _input;\n        _input = Console.ReadLine();\n        \n        res = shortenString(_input);\n        tw.Write(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":348,"fileType":"csharp","requestStartTime":1517956513482}}
{"body": {"column":32,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<int[]>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(x=>Convert.ToInt32(x)).ToArray();\n            lines.Add(tuple);\n        }\n        \n        for(var idx=0;idx<linex.;idx++)\n        {\n            var currentLine = lines[idx];\n            for(var inner=idx+1;inner<lines.Count;inner++)\n            {\n                \n            }\n            currentLine[1]=lines.Where(x=>(x[0]>=currentLine[0] && x[0]<=currentLine[1])).Select(x=>x[1]).Max();\n        }\n        \n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":548,"fileType":"csharp","requestStartTime":1517956624130}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=1;i<=n;i++){\n            s.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1517956807340}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=1;i<=n;i++){\n            s.PadRight(n);\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":271,"fileType":"csharp","requestStartTime":1517956833474}}
{"body": {"column":32,"line":35,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void merge_overlapping_intervals() {\nvar count = Convert.ToInt32(Console.ReadLine() ?? \"0\");\n        var lines = new List<int[]>(count);\n        for(var idx=0;idx<count;idx++)\n        {\n            var line = Console.ReadLine();\n            var tuple = line.Split(' ').Select(x=>Convert.ToInt32(x)).ToArray();\n            lines.Add(tuple);\n        }\n        \n        for(var idx=0;idx<lines.Count;idx++)\n        {\n            var currentLine = lines[idx];\n            for(var inner=idx+1;inner<lines.Count;inner++)\n            {\n                var innerLine = lines[inner];\n                if((innerLine[1]>=currentLine[0] && innerLine[1]<=currentLine[1])\n                   ||(currentLine[1]>=innerLine[0] && currentLine[1]<=innerLine[1]))\n                {\n                    currentLine[0] = Math.Min(innerLine[0],currentLine[0]);\n                    currentLine[1] = Math.Max(innerLine[1],currentLine[1]);\n                    lines.RemoveAt(inner);\n                    inner--;\n                }\n            }\n        }\n        Console.WriteLine(lines.)\n        foreach(var line in lines)\n        {\n            Console.WriteLine($\"{line[0]} {line[1]}\");\n        }\n        \n        \n\n    }\n\n\n    static void Main(String[] args) {\n        merge_overlapping_intervals();\n        \n    }\n}\n","offset":1215,"fileType":"csharp","requestStartTime":1517956925863}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            if (depth >distances[x][visited[0]])\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517957247288}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            if (depth >depth < distances[x][visited[0]])\n            {\n                distances[x][visited[0]] = depth;\n                distances[visited[0]][x] = depth;\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517957334422}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=1;i<=n;i++){\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517957286566}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=1;i<=n;i++){\n            Console.WriteLine(\"\".)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":257,"fileType":"csharp","requestStartTime":1517957293589}}
{"body": {"column":16,"line":11,"wordToComplete":"pla","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (pla)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":241,"fileType":"csharp","requestStartTime":1517957355978}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":251,"fileType":"csharp","requestStartTime":1517957359898}}
{"body": {"column":44,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static void find_all_possible_teams() {\n        var input = Console.ReadLine();\n        var engineers = input.ToCharArray();\n        for(var len=1;len<engineers.Length;len++)\n        {\n            for(var inner=0;inner<engineers.)\n            foreach(var eng in engineers.Skip(len-1))\n            {\n                Console.WriteLine(eng);\n            }\n        }\n\n\n    }\n\n\n    static void Main(String[] args) {\n        find_all_possible_teams();\n        \n    }\n}\n","offset":379,"fileType":"csharp","requestStartTime":1517957389388}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=1;i<=n;i++){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":99,"fileType":"csharp","requestStartTime":1517957398569}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        for(int i=1;i<=n;i++){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":104,"fileType":"csharp","requestStartTime":1517957400256}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw..Equals(\"rock\")\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":251,"fileType":"csharp","requestStartTime":1517957420042}}
{"body": {"column":67,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToUpper().Equals(\"rock\") && player2Throw.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":292,"fileType":"csharp","requestStartTime":1517957442460}}
{"body": {"column":77,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToUpper().Equals(\"rock\") && player2Throw.Toupper().\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":302,"fileType":"csharp","requestStartTime":1517957453007}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        int cont=1;\n        StringBuilder sb=new StringBuilder();\n        int aux=1;\n        for(int i=n;i>0;i--){\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":327,"fileType":"csharp","requestStartTime":1517957481814}}
{"body": {"column":18,"line":13,"wordToComplete":"player","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n        if (player)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":374,"fileType":"csharp","requestStartTime":1517957516854}}
{"body": {"column":25,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n        if (player1Throw.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":381,"fileType":"csharp","requestStartTime":1517957518751}}
{"body": {"column":19,"line":17,"wordToComplete":"player","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":644,"fileType":"csharp","requestStartTime":1517957612975}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":651,"fileType":"csharp","requestStartTime":1517957616265}}
{"body": {"column":36,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":661,"fileType":"csharp","requestStartTime":1517957624697}}
{"body": {"column":47,"line":17,"wordToComplete":"play","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(play)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":672,"fileType":"csharp","requestStartTime":1517957631937}}
{"body": {"column":56,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(player2Throw.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":681,"fileType":"csharp","requestStartTime":1517957635346}}
{"body": {"column":19,"line":19,"wordToComplete":"Ille","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(player2Throw.ToLower())\n             return \"Tie\";\n         throw Ille\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":738,"fileType":"csharp","requestStartTime":1517957666014}}
{"body": {"column":19,"line":19,"wordToComplete":"Inva","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(player2Throw.ToLower())\n             return \"Tie\";\n         throw Inva\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":738,"fileType":"csharp","requestStartTime":1517957670465}}
{"body": {"column":19,"line":19,"wordToComplete":"Ille","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(player2Throw.ToLower())\n             return \"Tie\";\n         throw Ille\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":738,"fileType":"csharp","requestStartTime":1517957678677}}
{"body": {"column":22,"line":19,"wordToComplete":"Invalid","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string playRPS(string player1Throw, string player2Throw) {\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"paper\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(\"paper\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 2 Wins\";\n         if (player1Throw.ToLower().Equals(\"rock\") && player2Throw.ToLower().Equals(\"scissors\"))\n             return \"Player 1 Wins\";\n         if (player1Throw.ToLower().Equals(player2Throw.ToLower())\n             return \"Tie\";\n         throw Invalid\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string player1Throw;\n        player1Throw = Console.ReadLine();\n\n        string player2Throw;\n        player2Throw = Console.ReadLine();\n\n        res = playRPS(player1Throw, player2Throw);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":741,"fileType":"csharp","requestStartTime":1517957683158}}
{"body": {"column":34,"line":114,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            if (depth > 0 && depth < distances[x][visited[0]])\n            {\n                distances[x][visited[0]] = depth;\n                distances[visited[0]][x] = depth;\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        for(int i = 0; i < m; i++)\n        {\n            \n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    satic void CalculateAllDistances()\n    {\n        \n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.)\n    }\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":3095,"fileType":"csharp","requestStartTime":1517958349020}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        for (int i = 0; i < arr.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":227,"fileType":"csharp","requestStartTime":1517958256224}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] retrn;\n        retrn = new int[n];\n        \n        for(int i=0;i<k;i++)\n        {\n            retrn[n-i-1] =  a[i]; \n            Console.\n        }\n        for(int j=0;j<n-k;j++)\n        {\n           retrn[j] =  a[n-k-1]; \n        }\n        \n        \n    }\n}\n\n\n","offset":567,"fileType":"csharp","requestStartTime":1517958563883}}
{"body": {"column":19,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] retrn;\n        retrn = new int[n];\n        \n        \n        for(int j=0;j<n-k;j++)\n        {\n           retrn[j] =  a[n-k-1]; \n           Console.\n        }\n        for(int i=0;i<k;i++)\n        {\n            retrn[n-i-1] =  a[i]; \n        }\n        \n        \n    }\n}\n\n\n","offset":576,"fileType":"csharp","requestStartTime":1517958589689}}
{"body": {"column":34,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] retrn;\n        retrn = new int[n];\n        \n        \n        for(int j=0;j<n-k;j++)\n        {\n           retrn[j] =  a[n-k-1]; \n           Console.Write(retrn[j].)\n        }\n        for(int i=0;i<k;i++)\n        {\n            retrn[n-i-1] =  a[i]; \n        }\n        \n        \n    }\n}\n\n\n","offset":591,"fileType":"csharp","requestStartTime":1517958606696}}
{"body": {"column":8,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        \n        for (i = l; )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":288,"fileType":"csharp","requestStartTime":1517958745617}}
{"body": {"column":20,"line":14,"wordToComplete":"elements","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elements)\n        for (i = l; )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":337,"fileType":"csharp","requestStartTime":1517958784106}}
{"body": {"column":20,"line":16,"wordToComplete":"ele","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[ele]\n        for (i = l; i )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":400,"fileType":"csharp","requestStartTime":1517958830697}}
{"body": {"column":20,"line":16,"wordToComplete":"ele","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[ele]\n        for (i = l; i )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":400,"fileType":"csharp","requestStartTime":1517958831767}}
{"body": {"column":20,"line":16,"wordToComplete":"ele","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[ele]\n        for (i = l; i )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":400,"fileType":"csharp","requestStartTime":1517958832699}}
{"body": {"column":20,"line":16,"wordToComplete":"ele","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[ele]\n        for (i = l; i )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":400,"fileType":"csharp","requestStartTime":1517958834474}}
{"body": {"column":40,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.)\n            if (depth > 0 && depth < distances[x][visited[0]])\n            {\n                distances[x][visited[0]] = depth;\n                distances[visited[0]][x] = depth;\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        for(int i = 0; i < m; i++)\n        {\n            \n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":345,"fileType":"csharp","requestStartTime":1517958964178}}
{"body": {"column":32,"line":16,"wordToComplete":"ele","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[] = new int[ele\n        for (i = l; i )\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":412,"fileType":"csharp","requestStartTime":1517958871659}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[] = new int[elementsCount];\n        for (i = l; i < \n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":449,"fileType":"csharp","requestStartTime":1517958886838}}
{"body": {"column":29,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                if (depth-i >)\n            }\n            if (depth > 0 && depth < distances[x][visited[0]])\n            {\n                distances[x][visited[0]] = depth;\n                distances[visited[0]][x] = depth;\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        for(int i = 0; i < m; i++)\n        {\n            \n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":443,"fileType":"csharp","requestStartTime":1517959037190}}
{"body": {"column":12,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        elementsCount = (r - l) / 2;\n        if (elementsCount == 0)\n            return new int[0];\n        int odds[] = new int[elementsCount];\n        if (l % 2 == 0)\n            \n        for (i = l; i < r; ++i)\n        {\n            if (i\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":461,"fileType":"csharp","requestStartTime":1517959033064}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        list.\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string a, string b)\n        {\n            return 0;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":276,"fileType":"csharp","requestStartTime":1517959190897}}
{"body": {"column":21,"line":59,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                if (delta > 0  && delta < distances[x][source])\n                {\n                    distances[x][source] = depth;\n                    distances[source]][x] = depth;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        for(int i = 0; i < m; i++)\n        {\n            List<int>\n            CalculateAllDistances(new Node())\n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":1756,"fileType":"csharp","requestStartTime":1517959319042}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        foreach(char ch in a)\n        {\n            a.\n        }\n        \n        \n        \n    }\n}\n\n\n","offset":283,"fileType":"csharp","requestStartTime":1517959230499}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        foreach(char ch in a)\n        {\n            b.\n        }\n        \n        \n        \n    }\n}\n\n\n","offset":283,"fileType":"csharp","requestStartTime":1517959236162}}
{"body": {"column":28,"line":60,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                if (delta > 0  && delta < distances[x][source])\n                {\n                    distances[x][source] = depth;\n                    distances[source]][x] = depth;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            if (!calculated.)\n            CalculateAllDistances(new Node())\n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":1811,"fileType":"csharp","requestStartTime":1517959342656}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        for(int ch=0;ch<a. )\n        {\n            \n        }\n        \n        \n        \n    }\n}\n\n\n","offset":255,"fileType":"csharp","requestStartTime":1517959266451}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        for(int ch=0;ch<a.Length. )\n        {\n            \n        }\n        \n        \n        \n    }\n}\n\n\n","offset":262,"fileType":"csharp","requestStartTime":1517959270086}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int len = a.\n        int row=0;\n        int column=a[0].Length - 1;\n        int solution = 0;\n        for(int index=0;index < a.Length;index++){\n            solution -= a[row][row] - a[row++][column--];\n        }\n        return Math.abs(solution);        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517959288109}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        for(int ch=0;ch<a.Length;ch++)\n        {\n            if(b.)\n        }\n        \n        \n        \n    }\n}\n\n\n","offset":295,"fileType":"csharp","requestStartTime":1517959320857}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int len = a.Length;\n        int row=0;\n        int column=a[0].Length - 1;\n        int solution = 0;\n        for(int index=0;index < len; index++){\n            solution -= a[row][row] - a[row++][column--];\n        }\n        return Math..abs(solution);        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":429,"fileType":"csharp","requestStartTime":1517959326885}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        for(int ch=0;ch<a.Length;ch++)\n        {\n            if(b.indexOf(a[ch]) >)\n        }\n        \n        \n        \n    }\n}\n\n\n","offset":311,"fileType":"csharp","requestStartTime":1517959336395}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        for(int ch=0;ch<a.Length;ch++)\n        {\n            if(b.indexOf(a[ch]) >)\n        }\n        \n        \n        \n    }\n}\n\n\n","offset":311,"fileType":"csharp","requestStartTime":1517959341119}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        list.Sort(new MyComparer());\n        return list.;\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string a, string b)\n        {\n            return 0;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":320,"fileType":"csharp","requestStartTime":1517959414482}}
{"body": {"column":33,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        int toBeDeleted = 0;\n        for(int ch=0;ch<a.Length;ch++)\n        {\n            if(b.indexOf(a[ch]) >=0)\n            {\n                toBeDeleted += b.\n            }\n        }\n        \n        \n        \n    }\n}\n\n\n","offset":382,"fileType":"csharp","requestStartTime":1517959419123}}
{"body": {"column":30,"line":13,"wordToComplete":"L","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        List<int> odds = new L\n        if (l % 2 == 0)\n           first = l + 1\n        int odds[] = new int[elementsCount];\n        \n        for (i = l; i < r; ++i)\n        {\n            if (i\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":310,"fileType":"csharp","requestStartTime":1517959445263}}
{"body": {"column":22,"line":67,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                if (delta > 0  && delta < distances[x][source])\n                {\n                    distances[x][source] = depth;\n                    distances[source]][x] = depth;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[][] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n][n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x), new List<int>());\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y), new List<int>());\n            var dist = distances[x][y];\n            if (dist >)\n        }\n        \n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":2133,"fileType":"csharp","requestStartTime":1517959550179}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        List<int> odds = new List<int>();\n        for (i = l; i < r; ++i)\n        {\n            if (i % 2 != 0)\n                \n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":408,"fileType":"csharp","requestStartTime":1517959491386}}
{"body": {"column":21,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        int elementsCount = 0\n        if (l == r || l > r)\n            return new int[0];\n        List<int> odds = new List<int>();\n        for (i = l; i < r; ++i)\n        {\n            if (i % 2 != 0)\n                odds.\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":413,"fileType":"csharp","requestStartTime":1517959498153}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> odds = new List<int>();        \n        for (i = l; i < r; ++i)\n        {\n            if (i % 2 != 0)\n                odds.Add(i);\n        }\n        return odds.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":369,"fileType":"csharp","requestStartTime":1517959565431}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                Console.\n                var source = visited[i];\n                var delta = depth-i;\n                if (delta > 0  && delta < distances[x,source])\n                {\n                    distances[x,source] = depth;\n                    distances[source,x] = depth;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n,n];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n            var dist = distances[x,y];\n            if (dist > furthestDistance)\n                furthestDistance = dist;\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":397,"fileType":"csharp","requestStartTime":1517959825769}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void tripleRecursion(int n, int m, int k) {\n        // Complete this function\n        var matrix = new int[n,n];\n        for(var i = 0; i < n; ++i)\n        {\n            for(var j = 0; j < n; ++j)\n            {\n                if(i == 0 && j == 0)\n                    matrix[i,j] = m;\n                else if(i == j)\n                    matrix[i,j] = matrix[i-1,j-1] + k;\n                else if(i > j)\n                    matrix[i,j] = matrix[i-1,j] - 1;\n                else if(i < j)\n                    matrix[i,j] = matrix[i,-1] - 1;\n                Console.Write($\"{matrix[i,j] }\");\n            }\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        int k = Convert.ToInt32(tokens_n[2]);\n        tripleRecursion(n, m, k);\n    }\n}\n\n\n","offset":738,"fileType":"csharp","requestStartTime":1517959800046}}
{"body": {"column":31,"line":31,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        list.Sort(new MyComparer());\n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.)\n           {\n              \n           }\n           return 0;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":782,"fileType":"csharp","requestStartTime":1517959838079}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                Console.\n                var source = visited[i];\n                var delta = depth-i;\n                if (delta > 0  && delta < distances[x,source])\n                {\n                    distances[x,source] = depth;\n                    distances[source,x] = depth;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n            var dist = distances[x,y];\n            if (dist > furthestDistance)\n                furthestDistance = dist;\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":397,"fileType":"csharp","requestStartTime":1517959953600}}
{"body": {"column":26,"line":34,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        list.Sort(new MyComparer());\n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              int val = 0;\n              if (\"aeiou\".)\n           }\n           return 0;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":859,"fileType":"csharp","requestStartTime":1517959887512}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Console.\n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":297,"fileType":"csharp","requestStartTime":1517960223373}}
{"body": {"column":31,"line":78,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (distances[x,source] == 0 || delta < distances[x,source])\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var totalDist = distances[x,xt] + ditances[y,yt];\n                if (totalDist >)\n            }\n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":2589,"fileType":"csharp","requestStartTime":1517960323609}}
{"body": {"column":40,"line":78,"wordToComplete":"furthest","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (distances[x,source] == 0 || delta < distances[x,source])\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var totalDist = distances[x,xt] + ditances[y,yt];\n                if (totalDist > furthest)\n            }\n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":2598,"fileType":"csharp","requestStartTime":1517960325128}}
{"body": {"column":45,"line":79,"wordToComplete":"totalD","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (distances[x,source] == 0 || delta < distances[x,source])\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var totalDist = distances[x,xt] + ditances[y,yt];\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalD\n            }\n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":2653,"fileType":"csharp","requestStartTime":1517960331408}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Console.ReadLine();\n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":295,"fileType":"csharp","requestStartTime":1517960249659}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (delta > distances[x,source] == 0 || delta < distances[x,source])\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var totalDist = distances[x,xt] + distances[y,yt];\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n            }\n        }\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":560,"fileType":"csharp","requestStartTime":1517960381061}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Parse(Console.ReadLine());\n        // Read and save an integer, double, and String to your variables.\n        double e = Double.\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":423,"fileType":"csharp","requestStartTime":1517960298891}}
{"body": {"column":40,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Parse(Console.ReadLine());\n        // Read and save an integer, double, and String to your variables.\n        double e = Double.Parse(Console.)\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":437,"fileType":"csharp","requestStartTime":1517960314315}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Parse(Console.ReadLine());\n        // Read and save an integer, double, and String to your variables.\n        double e = Double.Parse(Console.ReadLine())\n        // Print the sum of both integer variables on a new line.\n        string t = Console.\n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":542,"fileType":"csharp","requestStartTime":1517960340764}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Parse(Console.ReadLine());\n        // Read and save an integer, double, and String to your variables.\n        double e = Double.Parse(Console.ReadLine())\n        // Print the sum of both integer variables on a new line.\n        string t = Console.ReadLine();\n        // Print the sum of the double variables on a new line.\n        Console.\n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":634,"fileType":"csharp","requestStartTime":1517960358131}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Parse(Console.ReadLine());\n        // Read and save an integer, double, and String to your variables.\n        double e = Double.Parse(Console.ReadLine())\n        // Print the sum of both integer variables on a new line.\n        string t = Console.ReadLine();\n        // Print the sum of the double variables on a new line.\n        Console.WriteLine(i+j);\n        Console.\n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":666,"fileType":"csharp","requestStartTime":1517960402746}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":450,"fileType":"csharp","requestStartTime":1517960407555}}
{"body": {"column":23,"line":16,"wordToComplete":"Le","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        if(acid_name.Le)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":452,"fileType":"csharp","requestStartTime":1517960414557}}
{"body": {"column":41,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        if(acid_name.Length>=PrefixHydro.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":470,"fileType":"csharp","requestStartTime":1517960422455}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = Int32.Parse(Console.ReadLine());\n        // Read and save an integer, double, and String to your variables.\n        double e = Double.Parse(Console.ReadLine())\n        // Print the sum of both integer variables on a new line.\n        string t = Console.ReadLine();\n        // Print the sum of the double variables on a new line.\n        Console.WriteLine(i+j);\n        Console.WriteLine(\"{0:F1}\",d+e);\n        // Concatenate and print the String variables on a new line\nConsole.\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":767,"fileType":"csharp","requestStartTime":1517960445976}}
{"body": {"column":27,"line":67,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                //Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (delta > 0 && (distances[x,source] == 0 || delta < distances[x,source]))\n                {\n                    //Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        List<int> calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n            {\n                CalculateAllDistances(new Node(x, new List<int>()));\n                calculated.\n            }\n                \n            if (!calculated.Contains(y))\n            {\n                \n            }\n                CalculateAllDistances(new Node(y, new List<int>()));\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var totalDist = distances[x,xt] + distances[y,yt];\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        \n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":2186,"fileType":"csharp","requestStartTime":1517960596213}}
{"body": {"column":29,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int minimumMoves(int[] a, int[] m) {\n        \n        for(int i = 0; i < a.; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int m_size = 0;\n        m_size = Convert.ToInt32(Console.ReadLine());\n        int[] m = new int [m_size];\n        int m_item;\n        for(int m_i = 0; m_i < m_size; m_i++) {\n            m_item = Convert.ToInt32(Console.ReadLine());\n            m[m_i] = m_item;\n        }\n\n        res = minimumMoves(a, m);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":241,"fileType":"csharp","requestStartTime":1517960524262}}
{"body": {"column":32,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        bool isHydro =acid_name. acid_name[0]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       acid_name[2]==PrefixHydro[2] &&\n                       acid_name[3]==PrefixHydro[3] &&\n                       acid_name[4]==PrefixHydro[3];\n        bool isIc = ;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":461,"fileType":"csharp","requestStartTime":1517960563930}}
{"body": {"column":33,"line":23,"wordToComplete":"acid_nameю","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        bool isHydro = acid_name.Length>=PrefixHydro.Length && \n                       acid_name[0]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       acid_name[2]==PrefixHydro[2] &&\n                       acid_name[3]==PrefixHydro[3] &&\n                       acid_name[4]==PrefixHydro[3];\n        bool isIc = acid_name.Length>=PostFixIc.Length && \n             acid_name[acid_nameю]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       ;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":858,"fileType":"csharp","requestStartTime":1517960611734}}
{"body": {"column":33,"line":23,"wordToComplete":"acid_nameю","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        bool isHydro = acid_name.Length>=PrefixHydro.Length && \n                       acid_name[0]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       acid_name[2]==PrefixHydro[2] &&\n                       acid_name[3]==PrefixHydro[3] &&\n                       acid_name[4]==PrefixHydro[3];\n        bool isIc = acid_name.Length>=PostFixIc.Length && \n             acid_name[acid_nameю]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       ;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":858,"fileType":"csharp","requestStartTime":1517960613576}}
{"body": {"column":33,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    private static string PrefixHydro=\"hydro\";\n    private static string PostFixIc=\"ic\";\n    \n    \n    private static string NonMetalAcid=\"non-metal acid\";\n    private static string PolyatomicAcid=\"polyatomic acid\";\n    private static string NotAnAcid=\"not an acid\";\n        \n    static string acidNaming(string acid_name) {\n        bool isHydro = acid_name.Length>=PrefixHydro.Length && \n                       acid_name[0]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       acid_name[2]==PrefixHydro[2] &&\n                       acid_name[3]==PrefixHydro[3] &&\n                       acid_name[4]==PrefixHydro[3];\n        bool isIc = acid_name.Length>=PostFixIc.Length && \n             acid_name[acid_name.]==PrefixHydro[0] &&\n                       acid_name[1]==PrefixHydro[1] &&\n                       ;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":858,"fileType":"csharp","requestStartTime":1517960615196}}
{"body": {"column":11,"line":11,"wordToComplete":"for","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for\n    }\n}\n\n\n","offset":325,"fileType":"csharp","requestStartTime":1517960675551}}
{"body": {"column":18,"line":13,"wordToComplete":"printl","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            printl\n        }\n    }\n}\n\n\n","offset":372,"fileType":"csharp","requestStartTime":1517960700762}}
{"body": {"column":15,"line":13,"wordToComplete":"sys","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            sys\n        }\n    }\n}\n\n\n","offset":369,"fileType":"csharp","requestStartTime":1517960706423}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            sys.\n        }\n    }\n}\n\n\n","offset":370,"fileType":"csharp","requestStartTime":1517960708112}}
{"body": {"column":20,"line":13,"wordToComplete":"prin","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            sys.prin\n        }\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1517960709280}}
{"body": {"column":20,"line":13,"wordToComplete":"prin","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            sys.prin\n        }\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1517960710765}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            console.print\n        }\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1517960724242}}
{"body": {"column":18,"line":13,"wordToComplete":"console","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n            console.print\n        }\n    }\n}\n\n\n","offset":372,"fileType":"csharp","requestStartTime":1517960725487}}
{"body": {"column":22,"line":13,"wordToComplete":"print","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n           Console.print\n        }\n    }\n}\n\n\n","offset":376,"fileType":"csharp","requestStartTime":1517960729086}}
{"body": {"column":23,"line":13,"wordToComplete":"print","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        foreach(int i in arr)\n        {\n           Console.print(i)+' ';\n        }\n    }\n}\n\n\n","offset":377,"fileType":"csharp","requestStartTime":1517960848480}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            if (!calculated.)\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                //Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (delta > 0 && (distances[x,source] == 0 || delta < distances[x,source]))\n                {\n                    //Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    static List<int> calculated;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n            {\n                CalculateAllDistances(new Node(x, new List<int>()));\n                calculated.Add(x);\n            }\n            if (!calculated.Contains(y))\n            {\n                CalculateAllDistances(new Node(y, new List<int>()));\n                calculated.Add(y);\n            }\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var deltaX = distances[x,xt];\n                if (deltaX == 0 && xt != x)\n                    continue;\n                var deltaY = distances[y,yt];\n                if (deltaY == 0 && yt != y)\n                    continue;\n                var totalDist = deltaY + deltaX;\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        \n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1517960937717}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            if (!calculated.Contains(x))\n                calculated.\n            Depth = depth;\n            Visited = visited;\n            Visited.Add(x);\n            for (int i = 0; i < visited.Count(); i++)\n            {\n                var source = visited[i];\n                var delta = depth-i;\n                //Console.WriteLine($\"calculating distance from {x} to {source}\");\n                if (delta > 0 && (distances[x,source] == 0 || delta < distances[x,source]))\n                {\n                    //Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    static List<int> calculated;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n            {\n                CalculateAllDistances(new Node(x, new List<int>()));\n                calculated.Add(x);\n            }\n            if (!calculated.Contains(y))\n            {\n                CalculateAllDistances(new Node(y, new List<int>()));\n                calculated.Add(y);\n            }\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var deltaX = distances[x,xt];\n                if (deltaX == 0 && xt != x)\n                    continue;\n                var deltaY = distances[y,yt];\n                if (deltaY == 0 && yt != y)\n                    continue;\n                var totalDist = deltaY + deltaX;\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        \n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":287,"fileType":"csharp","requestStartTime":1517960943941}}
{"body": {"column":52,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int minimumMoves(int[] a, int[] m) {\n        \n        for(int i = 0;int j = 0; i < a.Length;j < j. ; i++ ) {\n            \n            if(a[i] != m[i])\n            a[i]= a[i] +1\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int m_size = 0;\n        m_size = Convert.ToInt32(Console.ReadLine());\n        int[] m = new int [m_size];\n        int m_item;\n        for(int m_i = 0; m_i < m_size; m_i++) {\n            m_item = Convert.ToInt32(Console.ReadLine());\n            m[m_i] = m_item;\n        }\n\n        res = minimumMoves(a, m);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":264,"fileType":"csharp","requestStartTime":1517960852546}}
{"body": {"column":52,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int minimumMoves(int[] a, int[] m) {\n        \n        for(int i = 0;int j = 0; i < a.Length;j < m. ; i++ ) {\n            \n            if(a[i] != m[i])\n            a[i]= a[i] +1\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int m_size = 0;\n        m_size = Convert.ToInt32(Console.ReadLine());\n        int[] m = new int [m_size];\n        int m_item;\n        for(int m_i = 0; m_i < m_size; m_i++) {\n            m_item = Convert.ToInt32(Console.ReadLine());\n            m[m_i] = m_item;\n        }\n\n        res = minimumMoves(a, m);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":264,"fileType":"csharp","requestStartTime":1517960858141}}
{"body": {"column":55,"line":12,"wordToComplete":"len","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int minimumMoves(int[] a, int[] m) {\n        \n        for(int i = 0;int j = 0; i < a.Length;j < m.len ; i++ ) {\n            \n            if(a[i] != m[i])\n            a[i]= a[i] +1\n        }\n\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int m_size = 0;\n        m_size = Convert.ToInt32(Console.ReadLine());\n        int[] m = new int [m_size];\n        int m_item;\n        for(int m_i = 0; m_i < m_size; m_i++) {\n            m_item = Convert.ToInt32(Console.ReadLine());\n            m[m_i] = m_item;\n        }\n\n        res = minimumMoves(a, m);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":267,"fileType":"csharp","requestStartTime":1517960864690}}
{"body": {"column":24,"line":15,"wordToComplete":"node","code":"\n    /*\n      Insert Node at the beginning of a linked list\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node Insert(Node head, int x)\n    {\n        nodPrev=new node\n    }\n\n\n","offset":389,"fileType":"csharp","requestStartTime":1517960980648}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"\n    /*\n      Insert Node at the beginning of a linked list\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node Insert(Node head, int x)\n    {\n        nodPrev=new Node();\n        nodPrev.\n        return nodPrev;\n    }\n\n\n","offset":409,"fileType":"csharp","requestStartTime":1517961051469}}
{"body": {"column":24,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Console.\n    }\n}\n\n","offset":265,"fileType":"csharp","requestStartTime":1517961301152}}
{"body": {"column":22,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Int32.Console.Readline();\n    }\n}\n\n","offset":263,"fileType":"csharp","requestStartTime":1517961314473}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.)\n        list.Sort(new MyComparer());\n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":296,"fileType":"csharp","requestStartTime":1517961360789}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list.\n        list.Sort(new MyComparer());\n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":325,"fileType":"csharp","requestStartTime":1517961373891}}
{"body": {"column":30,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i] + i\n        list.Sort(new MyComparer());\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i].       \n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":454,"fileType":"csharp","requestStartTime":1517961422319}}
{"body": {"column":51,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i] + i\n        list.Sort(new MyComparer());\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i].Substring(0, list[i].       \n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":475,"fileType":"csharp","requestStartTime":1517961437562}}
{"body": {"column":28,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i] + i\n        list.Sort(new MyComparer());\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i].Substring(0, list[i].Length - 1);       \n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n           string s1 = str1.\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":678,"fileType":"csharp","requestStartTime":1517961485639}}
{"body": {"column":46,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i] + i\n        list.Sort(new MyComparer());\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i].Substring(0, list[i].Length - 1);       \n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n           string s1 = str1.Substring(0, str1.\n            int score1 = calcScore(str1), score2 = calcScore(str2);\n            if (score1 > score2)\n                return 1;\n            if (score1 < score2)\n                return -1;\n            return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":696,"fileType":"csharp","requestStartTime":1517961502728}}
{"body": {"column":26,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i] + i\n        list.Sort(new MyComparer());\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i].Substring(0, list[i].Length - 1);       \n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n           string s1 = str1.Substring(0, str1.Length - 1);\n           string s2 = str2.Substring(0, str2.Length - 1);\n           int pos1 = int.\n           int score1 = calcScore(s1), score2 = calcScore(s1);\n           if (score1 > score2)\n               return 1;\n           if (score1 < score2)\n               return -1;\n           return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":794,"fileType":"csharp","requestStartTime":1517961556708}}
{"body": {"column":35,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] sortWordsByScore(string[] words) {\n        List<string> list = new List<string>(words);\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i] + i\n        list.Sort(new MyComparer());\n        for (int i = 0; i < list.Count; i++)\n            list[i] = list[i].Substring(0, list[i].Length - 1);       \n        return list.ToArray();\n    }\n\n    public class MyComparer : IComparer<string>\n    {\n        public int Compare(string str1, string str2)\n        {\n           string s1 = str1.Substring(0, str1.Length - 1);\n           string s2 = str2.Substring(0, str2.Length - 1);\n           int pos1 = int.Parse(s1.\n           int score1 = calcScore(s1), score2 = calcScore(s1);\n           if (score1 > score2)\n               return 1;\n           if (score1 < score2)\n               return -1;\n           return 0;\n        }\n        \n        int calcScore(string s)\n        {\n           int score = 0;\n           foreach(char c in s.ToLower())\n           {\n              if (\"aeiou\".IndexOf(c) >= 0)\n                  score += (c - 'a' + 1) * 2;\n              else\n                  score += (c - 'a' + 1);\n           }\n           return score;\n        }\n    }\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int words_size = 0;\n        words_size = Convert.ToInt32(Console.ReadLine());\n        string[] words = new string [words_size];\n        string words_item;\n        for(int words_i = 0; words_i < words_size; words_i++) {\n            words_item = Console.ReadLine();\n            words[words_i] = words_item;\n        }\n\n        res = sortWordsByScore(words);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":803,"fileType":"csharp","requestStartTime":1517961561038}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Int32.Parse(Console.Readline());\n        int [,] cities = new int [1,1];\n        cities[0,0] = Int32.\n    }\n}\n\n","offset":358,"fileType":"csharp","requestStartTime":1517961569683}}
{"body": {"column":42,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Int32.Parse(Console.Readline());\n        int [,] cities = new int [1,1];\n        cities[0,0] = Int32.Parse(Console.)\n    }\n}\n\n","offset":372,"fileType":"csharp","requestStartTime":1517961577479}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Int32.Parse(Console.Readline());\n        int [,] cities = new int [1,1];\n        cities[0,0] = Int32.Parse(Console.ReadLine());\n        cities[0,1] = Int32.Parse(Console.ReadLine());\n        cities[1,0] = Int32.Parse(Console.ReadLine());\n        cities[1,1] = Int32.Parse(Console.ReadLine());\n        Console.\n    }\n}\n\n","offset":566,"fileType":"csharp","requestStartTime":1517961638891}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Int32.Parse(Console.Readline());\n        int [,] cities = new int [1,1];\n        cities[0,0] = Int32.Parse(Console.ReadLine());\n        cities[0,1] = Int32.Parse(Console.ReadLine());\n        cities[1,0] = Int32.Parse(Console.ReadLine());\n        cities[1,1] = Int32.Parse(Console.ReadLine());\n        Console.\n    }\n}\n\n","offset":566,"fileType":"csharp","requestStartTime":1517961642814}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int N = Int32.Parse(Console.ReadLine());\n        int [,] cities = new int [1,1];\n        Console.\n        \n    }\n}\n\n","offset":346,"fileType":"csharp","requestStartTime":1517961832493}}
{"body": {"column":30,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            if (!calculated.Contains(x))\n                calculated.Add(x);\n            Depth = depth;\n            Visited = visited.;\n            Visited.Add(x);\n            Console.Write($\"x is {x} and Visited are : \");\n            for (int i = 0; i < Visited.Count(); i++)\n                Console.Write($\"{Visited[i]},\");\n            Console.WriteLine();\n            for (int i = 0; i < Visited.Count(); i++)\n            {\n                var source = Visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                Console.WriteLine($\"depth is {depth}, delta is {delta}\");\n                Console.WriteLine($\"curent distance is {distances[x,source]}\");\n                if (x != source && (distances[x,source] == 0 || delta < distances[x,source]))\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    static List<int> calculated;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n            {\n                CalculateAllDistances(new Node(x, new List<int>()));\n                calculated.Add(x);\n            }\n            if (!calculated.Contains(y))\n            {\n                CalculateAllDistances(new Node(y, new List<int>()));\n                calculated.Add(y);\n            }\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                Console.WriteLine($\"distance from {x},{y} to {xt},{yt}\");\n                var deltaX = distances[x,xt];\n                if (deltaX == 0 && xt != x)\n                    continue;\n                var deltaY = distances[y,yt];\n                if (deltaY == 0 && yt != y)\n                    continue;\n                var totalDist = deltaY + deltaX;\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n                Console.WriteLine($\"distance is {totalDist}\");\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        \n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":352,"fileType":"csharp","requestStartTime":1517962100980}}
{"body": {"column":41,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            if (!calculated.Contains(x))\n                calculated.Add(x);\n            Depth = depth;\n            Visited = visited.Select(x =>);\n            Visited.Add(x);\n            Console.Write($\"x is {x} and Visited are : \");\n            for (int i = 0; i < Visited.Count(); i++)\n                Console.Write($\"{Visited[i]},\");\n            Console.WriteLine();\n            for (int i = 0; i < Visited.Count(); i++)\n            {\n                var source = Visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                Console.WriteLine($\"depth is {depth}, delta is {delta}\");\n                Console.WriteLine($\"curent distance is {distances[x,source]}\");\n                if (x != source && (distances[x,source] == 0 || delta < distances[x,source]))\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    static List<int> calculated;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n            {\n                CalculateAllDistances(new Node(x, new List<int>()));\n                calculated.Add(x);\n            }\n            if (!calculated.Contains(y))\n            {\n                CalculateAllDistances(new Node(y, new List<int>()));\n                calculated.Add(y);\n            }\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                Console.WriteLine($\"distance from {x},{y} to {xt},{yt}\");\n                var deltaX = distances[x,xt];\n                if (deltaX == 0 && xt != x)\n                    continue;\n                var deltaY = distances[y,yt];\n                if (deltaY == 0 && yt != y)\n                    continue;\n                var totalDist = deltaY + deltaX;\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n                Console.WriteLine($\"distance is {totalDist}\");\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        \n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":363,"fileType":"csharp","requestStartTime":1517962125483}}
{"body": {"column":45,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int> visited, int depth = 0)\n        {\n            X = x;\n            if (!calculated.Contains(x))\n                calculated.Add(x);\n            Depth = depth;\n            Visited = visited.Select(v => v).;\n            Visited.Add(x);\n            Console.Write($\"x is {x} and Visited are : \");\n            for (int i = 0; i < Visited.Count(); i++)\n                Console.Write($\"{Visited[i]},\");\n            Console.WriteLine();\n            for (int i = 0; i < Visited.Count(); i++)\n            {\n                var source = Visited[i];\n                var delta = depth-i;\n                Console.WriteLine($\"calculating distance from {x} to {source}\");\n                Console.WriteLine($\"depth is {depth}, delta is {delta}\");\n                Console.WriteLine($\"curent distance is {distances[x,source]}\");\n                if (x != source && (distances[x,source] == 0 || delta < distances[x,source]))\n                {\n                    Console.WriteLine($\"updating distance to {delta}\");\n                    distances[x,source] = delta;\n                    distances[source,x] = delta;\n                }\n            }\n        }\n        \n        public int X {get; set;}\n        public int Depth {get; set;}\n        public List<int> Visited {get; set;}\n    }\n    \n    static int furthestDistance = 0;\n    static int[][] edges;\n    static int[,] distances;\n    static List<int> calculated;\n    \n    static void Main(String[] args) {\n        // init\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        edges = new int[n-1][];\n        distances = new int[n+1,n+1];\n        \n        // read\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // operations\n        \n        calculated = new List<int>();\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n            {\n                CalculateAllDistances(new Node(x, new List<int>()));\n                calculated.Add(x);\n            }\n            if (!calculated.Contains(y))\n            {\n                CalculateAllDistances(new Node(y, new List<int>()));\n                calculated.Add(y);\n            }\n        }\n        for(int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            if (!calculated.Contains(x))\n                CalculateAllDistances(new Node(x, new List<int>()));\n            if (!calculated.Contains(y))\n                CalculateAllDistances(new Node(y, new List<int>()));\n            for(int j = i+1; j < m; j++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                Console.WriteLine($\"distance from {x},{y} to {xt},{yt}\");\n                var deltaX = distances[x,xt];\n                if (deltaX == 0 && xt != x)\n                    continue;\n                var deltaY = distances[y,yt];\n                if (deltaY == 0 && yt != y)\n                    continue;\n                var totalDist = deltaY + deltaX;\n                if (totalDist > furthestDistance)\n                    furthestDistance = totalDist;\n                Console.WriteLine($\"distance is {totalDist}\");\n            }\n        }\n        Console.WriteLine(furthestDistance);\n        \n        /*\n        for(int i = 0; i < m; i++)\n        {\n            for(int j = i+1; j < m; j++)\n            {\n                CalculateDistances(points[i], points[j]);\n            }\n        }\n        \n        */\n    }\n    \n    static void CalculateAllDistances(Node source)\n    {\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            List<Node> children = GetChildren(node);\n            children.ForEach(queue.Add);\n        }\n    }\n    \n    static void CalculateDistances(int[] source, int[] target)\n    {\n        var distance = CalculateDistance(new Node(source[0], new List<int>()), target[0]) \n            + CalculateDistance(new Node(source[1], new List<int>()), target[1]);\n        if (distance > furthestDistance)\n            furthestDistance = distance;\n    }\n    \n    static int CalculateDistance(Node source, int target)\n    {\n        //int furthestX = 0;\n        List<Node> queue = new List<Node>();\n        queue.Add(source);\n        while (queue.Count > 0)\n        {\n            var node = queue[0];\n            queue.RemoveAt(0);\n            if (node.X == target)\n            {\n                \n                return node.Depth;\n                /*\n                if (node.Depth > furthestX)\n                {\n                    furthestX = node.Depth; \n                } \n                */\n            }\n            else\n            {\n                List<Node> children = GetChildren(node);\n                children.ForEach(queue.Add);\n            }\n        }\n        return 0;\n    }\n    \n    /*\n    static int distance(int x, int y)\n    {\n        if (x == y)\n            return 0;\n        for (int i = 0; i < edges.Count(); i++)\n        {\n            if (edge[i][0] == x)\n                something edge[i][1]\n            if (edge[i][1] == x)\n                something edge[i][0]\n        }\n    }\n    */\n    \n    static List<Node> GetChildren(Node parent)\n    {\n        var children = new List<Node>();\n        for(int i = 0; i < edges.Count(); i++)\n        {\n            var edge = edges[i];\n            int start = edge[0];\n            int end = edge[1];\n            if (start == parent.X && !parent.Visited.Contains(end))\n            {\n                children.Add(new Node(end, parent.Visited, parent.Depth+1));\n            }\n            else if (end == parent.X && !parent.Visited.Contains(start))\n            {\n                children.Add(new Node(start, parent.Visited, parent.Depth+1));\n            } \n        }\n        return children;\n    }\n}\n\n\n","offset":367,"fileType":"csharp","requestStartTime":1517962176661}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var oneCount = doors.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":222,"fileType":"csharp","requestStartTime":1517962732974}}
{"body": {"column":42,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var oneCount = doors.Where(d => d.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1517962738773}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var maxCount = doors.Where(d => d == 1).Count();\n        \n        var minCount = 0;\n        for (int i = doors.)\n            \n        return new int[]\n        {\n            minCount,\n            maxCount\n        };\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":312,"fileType":"csharp","requestStartTime":1517962783468}}
{"body": {"column":42,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var maxCount = doors.Where(d => d == 1).Count();\n        \n        var minCount = 0;\n        for (int i = doors.Length - 1; i >)\n            \n        return new int[]\n        {\n            minCount,\n            maxCount\n        };\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":327,"fileType":"csharp","requestStartTime":1517962790212}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var maxCount = doors.Where(d => d == 1).Count();\n        \n        var minCount = 0;\n        for (int i = doors.Length - 1; i >= 0; i--)\n        {\n            if (doors[i] == 0) continue;\n            \n            minCount++;\n            if (i >)\n            if (i == 0)\n            {\n                \n                continue;\n            }\n            else\n            {\n                if (doors[i-1] == 1) i--;\n            }\n        }\n            \n        return new int[]\n        {\n            minCount,\n            maxCount\n        };\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":444,"fileType":"csharp","requestStartTime":1517962857060}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        foreach (string s in hand)\n        {\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            if (r.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":393,"fileType":"csharp","requestStartTime":1517962982107}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        foreach (string s in hand)\n        {\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            r = r.\n            if (r.toLower)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":393,"fileType":"csharp","requestStartTime":1517963009848}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        foreach (string s in hand)\n        {\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            r = r.ToLower();\n            if (r.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":422,"fileType":"csharp","requestStartTime":1517963020423}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        for (int i = 0; i < hand.)\n        {\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            r = r.ToUpper();\n            if (r.Equals(\"J\"))\n                ranks[i]\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":302,"fileType":"csharp","requestStartTime":1517963091587}}
{"body": {"column":23,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            r = r.ToUpper();\n            if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":532,"fileType":"csharp","requestStartTime":1517963132776}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        string[] split = s.\n        split.forEach(so => Console.WriteLine(so));\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":341,"fileType":"csharp","requestStartTime":1517963223625}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.)\n            if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 13;\n            else\n                ranks[i] = r[0] - '0';\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":465,"fileType":"csharp","requestStartTime":1517963286661}}
{"body": {"column":34,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            str r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).\n            if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 13;\n            else\n                ranks[i] = r[0] - '0';\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":481,"fileType":"csharp","requestStartTime":1517963299723}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        List<>\n        for (var i=0;i<columnSize;i++) {\n            \n        }\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517963393769}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        List<string> list = new List<>\n        for (var i=0;i<columnSize;i++) {\n            \n        }\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":352,"fileType":"csharp","requestStartTime":1517963401628}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        List<string> list = new List<string>();\n        \n        for (var i=0;i<columnSize;i++) {\n            list.    \n        }\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":429,"fileType":"csharp","requestStartTime":1517963408723}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        List<string> list = new List<string>();\n        \n        for (var i=0;i<columnSize;i++) {\n            list.Add(s[i+(columnSize*j)]);    \n        }\n        \n        list.\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":491,"fileType":"csharp","requestStartTime":1517963464569}}
{"body": {"column":34,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        List<string> list = new List<string>();\n        \n        for (var i=0;i<columnSize;i++) {\n            list.Add(s[i+(columnSize*j)]);    \n        }\n        \n        list.ForEach(l => Console.\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":512,"fileType":"csharp","requestStartTime":1517963473003}}
{"body": {"column":46,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static string encryption(string s) {\n        s = s.Trim();\n        int size = s.Length;\n        int columnSize = (int) Math.Ceiling(Math.Sqrt(size));\n        int rowSize = (int) Math.Floor(Math.Sqrt(size));\n        List<string> list = new List<string>();\n        \n        for (var i=0;i<columnSize;i++) {\n            list.Add(s[i+(columnSize*j)]);    \n        }\n        \n        list.ForEach(l => Console.WriteLine(l.)\n        return \"nein\";\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = encryption(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":524,"fileType":"csharp","requestStartTime":1517963478981}}
{"body": {"column":17,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1098,"fileType":"csharp","requestStartTime":1517963753876}}
{"body": {"column":17,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1098,"fileType":"csharp","requestStartTime":1517963793333}}
{"body": {"column":28,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1109,"fileType":"csharp","requestStartTime":1517963801026}}
{"body": {"column":28,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1109,"fileType":"csharp","requestStartTime":1517963810862}}
{"body": {"column":28,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1109,"fileType":"csharp","requestStartTime":1517963820544}}
{"body": {"column":28,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1109,"fileType":"csharp","requestStartTime":1517963826418}}
{"body": {"column":28,"line":37,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1109,"fileType":"csharp","requestStartTime":1517963832918}}
{"body": {"column":18,"line":43,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().Count() <= 2)\n            return \"Four of a kind\";\n        if (list.Distinct().Count() <= 3)\n            return \"Full house\";\n        \n        List<char> list2 = new List<char>(suites);\n        if (list2.)\n        \n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1313,"fileType":"csharp","requestStartTime":1517964076266}}
{"body": {"column":28,"line":43,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().Count() <= 2)\n            return \"Four of a kind\";\n        if (list.Distinct().Count() <= 3)\n            return \"Full house\";\n        \n        List<char> list2 = new List<char>(suites);\n        if (list2.Distinct(.))\n        \n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":1323,"fileType":"csharp","requestStartTime":1517964081028}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var ret = new List<int>;\n        \n        for(int i = l; i <= r; i++)\n            ret.\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":284,"fileType":"csharp","requestStartTime":1517964142628}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var ret = new List<int>;\n        \n        for(int i = l; i <= r; i++)\n            ret.\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":284,"fileType":"csharp","requestStartTime":1517964143930}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var ret = new List<int>;\n        \n        for(int i = l; i <= r; i++)\n            if(i % 2 != 0)\n                RET.\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":315,"fileType":"csharp","requestStartTime":1517964157924}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var ret = new List<int>;\n        \n        for(int i = l; i <= r; i++)\n            if(i % 2 != 0)\n                ret.\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":315,"fileType":"csharp","requestStartTime":1517964159114}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        var ret = new List<int>;\n        \n        for(int i = l; i <= r; i++)\n            if(i % 2 != 0)\n                ret.Add(i);\n\n        return ret.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":343,"fileType":"csharp","requestStartTime":1517964170884}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string scoreHand(string[] hand) {\n        char[] suites = new char[5];\n        int[] ranks = new int[5];\n        for (int i = 0; i < hand.Length; i++)\n        {\n            string s = hand[i];\n            suites[i] = s[0];\n            string r = \"\" + s[1];\n            r = r.ToUpper();\n            if (s.s.Substring(1, 2).Equals(\"10\"))\n                ranks[i] = 10;\n            else if (r.Equals(\"J\"))\n                ranks[i] = 11;\n            else if (r.Equals(\"Q\"))\n                ranks[i] = 12;\n            else if (r.Equals(\"K\"))\n                ranks[i] = 13;\n            else if (r.Equals(\"A\"))\n                ranks[i] = 14;\n            else\n                ranks[i] = r[0] - '0';\n        }\n        \n        if (suites[0] == suites[1] && suites[1] == suites[2] && suites[2] == suites[3] && suites[3] == suites[4])\n            return \"Straight Flush\";\n        \n        List<int> list = new List<int>(ranks);\n        if (list.Distinct().Count() <= 2)\n            return \"Four of a kind\";\n        if (list.Distinct().Count() <= 3)\n            return \"Full house\";\n        \n        List<char> list2 = new List<char>(suites);\n        if (list2.Distinct().Count() == 1)\n            return \"Flush\";\n      \n        return \"\";\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        int hand_size = 0;\n        hand_size = Convert.ToInt32(Console.ReadLine());\n        string[] hand = new string [hand_size];\n        string hand_item;\n        for(int hand_i = 0; hand_i < hand_size; hand_i++) {\n            hand_item = Console.ReadLine();\n            hand[hand_i] = hand_item;\n        }\n\n        res = scoreHand(hand);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":470,"fileType":"csharp","requestStartTime":1517964233029}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        int i = 1;\n        foreach(char c in s)\n        {\n            if c.\n        }\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1517964813311}}
{"body": {"column":27,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        for(int x=0; x<arr.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":222,"fileType":"csharp","requestStartTime":1517964854279}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        int i = 1;\n        string UpperAlpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        foreach(char c in s)\n        {\n            if(UpperAlpha.)\n            {\n                i++;\n            }\n        }\n        return i;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":317,"fileType":"csharp","requestStartTime":1517965001653}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        int result = n.\n        foreach(int x in ar)\n            n += x;\n        \n        return n;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":210,"fileType":"csharp","requestStartTime":1517965256053}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        for (int i = 0; i < a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":181,"fileType":"csharp","requestStartTime":1517965326746}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        for (int i = 0, j = a.; i < a.Length; i++) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":181,"fileType":"csharp","requestStartTime":1517965345377}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        int sum = 0;\n        for (int i = 0, j = a.Length - 1; i < a.Length && j > -1; i++, j--) {\n            sum = sum + a.\n        }\n        return sum;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":276,"fileType":"csharp","requestStartTime":1517965457252}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        \n        console.\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":220,"fileType":"csharp","requestStartTime":1517966073540}}
{"body": {"column":11,"line":15,"wordToComplete":"","code":"\n\n\tusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n\n\tstatic int diagonalDifference(int[][] a)\n\t{\n\t\tint sum = 0;\n\n\t\tfor (int i = 0; i <= a.GetUpperBound(0); i++)\n\t\t{\n\t\t\tsum =a.. \n\t\t}\n\t\t// Complete this function\n\n\t\treturn sum; \n\t}\n\n\tstatic void Main(String[] args)\n\t{\n\t\tint n = Convert.ToInt32(Console.ReadLine());\n\t\tint[][] a = new int[n][];\n\t\tfor (int a_i = 0; a_i < n; a_i++)\n\t\t{\n\t\t\tstring[] a_temp = Console.ReadLine().Split(' ');\n\t\t\ta[a_i] = Array.ConvertAll(a_temp, Int32.Parse);\n\t\t}\n\t\tint result = diagonalDifference(a);\n\t\tConsole.WriteLine(result);\n\t}\n}\n\n\n\n","offset":230,"fileType":"csharp","requestStartTime":1517966097263}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        .\n        return \"Epa\"\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":204,"fileType":"csharp","requestStartTime":1517966160840}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n        Console.\n    }\n}\n\n\n","offset":620,"fileType":"csharp","requestStartTime":1517966453137}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long result;\n        for(int i=0; i<n; i++) {\n            result. += ar[i];\n        }\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":259,"fileType":"csharp","requestStartTime":1517966939301}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long result;\n        for(int i=0; i<n; i++) {\n            long. result += ar[i];\n        }\n        return result;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":257,"fileType":"csharp","requestStartTime":1517966955219}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void solve(string s){\n        \n    }\n    static void Main(String[] args) {\n        int n = Convert.Console.Readline()\n    }\n}\n\n","offset":194,"fileType":"csharp","requestStartTime":1517967297927}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void solve(string s){\n        \n    }\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.Readline());\n        for (int i = 0; i < n; i++) {\n            Console.\n        }\n    }\n}\n\n","offset":281,"fileType":"csharp","requestStartTime":1517967328534}}
{"body": {"column":30,"line":6,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void solve(string s){\n        for (int i = 0; i < s.)\n        \n    }\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.Readline());\n        for (int i = 0; i < n; i++) {\n            string tmp = Console.Readline();\n            solve(tmp);\n        }\n    }\n}\n\n","offset":147,"fileType":"csharp","requestStartTime":1517967349767}}
{"body": {"column":11,"line":10,"wordToComplete":"sum","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        sum \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1517967409718}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        lng. \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":218,"fileType":"csharp","requestStartTime":1517967413678}}
{"body": {"column":13,"line":10,"wordToComplete":"s","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        lng.s \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":219,"fileType":"csharp","requestStartTime":1517967414527}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void solve(string s){\n        string even = \"\";\n        string odd = \"\";\n        for (int i = 0; i < s.Length; i++){\n            if(i%2 != 0)\n                odd += s[i];\n            if (i%2 == 0)\n                even += s[i];\n        }\n        Console>\n    }\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.Readline());\n        for (int i = 0; i < n; i++) {\n            string tmp = Console.Readline();\n            solve(tmp);\n        }\n    }\n}\n\n","offset":348,"fileType":"csharp","requestStartTime":1517967456079}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        long. \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":219,"fileType":"csharp","requestStartTime":1517967418485}}
{"body": {"column":15,"line":10,"wordToComplete":"sm","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        long.sm \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":221,"fileType":"csharp","requestStartTime":1517967419272}}
{"body": {"column":14,"line":10,"wordToComplete":"s","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        long.s \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":220,"fileType":"csharp","requestStartTime":1517967420206}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        long r = 0;\n        ulong. \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":220,"fileType":"csharp","requestStartTime":1517967426075}}
{"body": {"column":26,"line":6,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        var str = Console.\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\n","offset":148,"fileType":"csharp","requestStartTime":1517967553913}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for (int i = arr.)\n    }\n}\n\n\n","offset":339,"fileType":"csharp","requestStartTime":1517967570495}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        var l = (from a in ar.)\n        \n        long r = 0;\n        ulong.s  \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":216,"fileType":"csharp","requestStartTime":1517967540887}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        for (int i = arr.Length-1; i >= 0; i--) {\n            Console.\n        }\n    }\n}\n\n\n","offset":384,"fileType":"csharp","requestStartTime":1517967584707}}
{"body": {"column":31,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        var str = Console.ReadLine();\n        for(int i = 0; i < str.)\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\n","offset":191,"fileType":"csharp","requestStartTime":1517967596635}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        var l = (from a in ar)\n        select (long). \n            \n        long r = 0;\n        ulong.s  \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":239,"fileType":"csharp","requestStartTime":1517967560177}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        var l = (from a in ar)\n        select (long)(a)). \n            \n        long r = 0;\n        ulong.s  \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":243,"fileType":"csharp","requestStartTime":1517967578006}}
{"body": {"column":48,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        var l = (from a in ar select (long)(a)). \n            \n        long r = 0;\n        ulong.s  \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":234,"fileType":"csharp","requestStartTime":1517967587852}}
{"body": {"column":66,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        var l = (from a in ar select (long)(a)).DefaultIfEmpty(0). \n            \n        long r = 0;\n        ulong.s  \n        for(int i=0; i<n; i++) {\n            r += ar[i];\n        }\n        return r;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517967598989}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        var str = Console.ReadLine();\n        string evenStr = \"\";\n        string oddStr = \"\";\n        for(int i = 0; i < str.Length; i++){\n            if(i % 2 =0){\n                evenStr = str.\n            }\n        }\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\n","offset":318,"fileType":"csharp","requestStartTime":1517967695390}}
{"body": {"column":30,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        var str = Console.ReadLine();\n        string evenStr = \"\";\n        string oddStr = \"\";\n        for(int i = 0; i < str.Length; i++){\n            if(i % 2 =0){\n                evenStr += str.Substring(i,1);\n            }else{\n                oddStr += str.\n            }\n        }\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\n","offset":384,"fileType":"csharp","requestStartTime":1517967722751}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        var str = Console.ReadLine();\n        string evenStr = \"\";\n        string oddStr = \"\";\n        for(int i = 0; i < str.Length; i++){\n            if(i % 2 =0){\n                evenStr += str.Substring(i,1);\n            }else{\n                oddStr += str.Substring(i,2);\n            }\n        }\n        Console.\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\n","offset":440,"fileType":"csharp","requestStartTime":1517967737483}}
{"body": {"column":20,"line":9,"wordToComplete":"0.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        for(int x=0.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517967759259}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        for(int x=0; x<a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":210,"fileType":"csharp","requestStartTime":1517967775595}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int primeira = 0;\n        int segunda = 0;\n        \n        for(int x=0; x < a.Length; x++)\n        {\n            for(int y=0; x < a[x].Length; x++)\n            {\n                primeira += a[x][y];\n            }\n        }\n        return int.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":436,"fileType":"csharp","requestStartTime":1517967985346}}
{"body": {"column":40,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int primeira = 0;\n        int segunda = 0;\n        \n        for(int x=0; x < a.Length; x++)\n        {\n            for(int y=0; x < a[x].Length; x++)\n            {\n                primeira += a[x][y];\n                break;\n            }\n        }\n        \n        for(int x=0; x < a.Length; x++)\n        {\n            for(int y=a[x].Length-1; x > 0; x--)\n            {\n                segunda += a[x][y];\n                break;\n            }\n        }\n        \n        int retorno = primeira + segunda; \n        if(retorno<0)\n            retorno = retorno*-1;\n        \n        return retorno;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":539,"fileType":"csharp","requestStartTime":1517968324453}}
{"body": {"column":29,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string largestMagical(string binString) {\n        if(String.IsNullOrEmpty(binString)){\n            return binString;\n        }\n        string largestMagical = binString;\n        Dictionary<int, int> magicalIndexes = new Dictionary<int, int>(); //dictionary to store                      magical indexes and the length\n        findMagicalIndexesAndLength(binString, magicalIndexes);\n        return largestMagical;\n    }\n\n    static void findMagicalIndexesAndLength(string str, Dictionary map){\n        if(String.IsNullOrEmpty(str)){\n            return;\n        }\n        int length = 2;\n        for(int index = 0; index < str.Length; index++){\n            String str = str.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string binString;\n        binString = Console.ReadLine();\n\n        res = largestMagical(binString);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":838,"fileType":"csharp","requestStartTime":1517968448039}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string largestMagical(string binString) {\n        if(String.IsNullOrEmpty(binString)){\n            return binString;\n        }\n        string largestMagical = binString;\n        Dictionary<int, int> magicalIndexes = new Dictionary<int, int>(); //dictionary to store                      magical indexes and the length\n        findMagicalIndexesAndLength(binString, magicalIndexes);\n        return largestMagical;\n    }\n\n    static void findMagicalIndexesAndLength(string str, Dictionary map){\n        if(String.IsNullOrEmpty(str)){\n            return;\n        }\n        int length = 2;\n        while(length < str.)\n        for(int index = 0; index < str.Length; index++){\n            String str = str.Substring(index, length);\n            if(isMagical(str)){\n                map.add(index, length);\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string binString;\n        binString = Console.ReadLine();\n\n        res = largestMagical(binString);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":779,"fileType":"csharp","requestStartTime":1517968505748}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.Write(arr.)\n    }\n}\n\n\n","offset":340,"fileType":"csharp","requestStartTime":1517968945536}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        Console.Write(arr.)\n    }\n}\n\n\n","offset":340,"fileType":"csharp","requestStartTime":1517968957360}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2.\n        foreach(int i in arr) {\n            \n        }\n        Console.Write()\n    }\n}\n\n\n","offset":333,"fileType":"csharp","requestStartTime":1517969027196}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2;\n        foreach(int i in arr) {\n            arr2.\n        }\n        Console.Write()\n    }\n}\n\n\n","offset":383,"fileType":"csharp","requestStartTime":1517969030583}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2;\n        foreach(int i in arr) {\n            arr2.\n        }\n        Console.Write()\n    }\n}\n\n\n","offset":383,"fileType":"csharp","requestStartTime":1517969032731}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2;\n        for(int i=arr. in arr) {\n            arr2.Append(i);\n        }\n        Console.Write()\n    }\n}\n\n\n","offset":356,"fileType":"csharp","requestStartTime":1517969071168}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2;\n        for(int i=arr.Length-1; i>=0; i--) {\n            arr2.\n        }\n        Console.Write(arr2);\n    }\n}\n\n\n","offset":396,"fileType":"csharp","requestStartTime":1517969160860}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int N = Convert.ToInt32(Console.ReadLine());\n        \n        if (N % 2 == 0)\n            Console.\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517969225623}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = int[arr.;\n        for(int i=arr.Length-1; i>=0; i--) {\n            arr2.\n        }\n        Console.Write(arr2);\n    }\n}\n\n\n","offset":343,"fileType":"csharp","requestStartTime":1517969206900}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = new int[arr.]  =\n        for(int i=arr.Length-1; i>=0; i--) {\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517969406950}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = new int[arr.Length];\n        for(int i=arr.Length-1; i>=0; i--) {\n            arr2[arr2.]\n            Console.Write(arr[i]);\n        }\n        \n    }\n}\n\n\n","offset":423,"fileType":"csharp","requestStartTime":1517969434324}}
{"body": {"column":27,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = new int[arr.Length];\n        int x = 0;\n        for(int i=arr.Length-1; i>=0; i--) {\n            \n            arr2[x] = \n            \n        }\n        Console.Write(arr2.[i]);\n        \n    }\n}\n\n\n","offset":506,"fileType":"csharp","requestStartTime":1517969486041}}
{"body": {"column":29,"line":18,"wordToComplete":"To","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = new int[arr.Length];\n        int x = 0;\n        for(int i=arr.Length-1; i>=0; i--) {\n            \n            arr2[x] = \n            \n        }\n        Console.Write(arr2.To);\n        \n    }\n}\n\n\n","offset":508,"fileType":"csharp","requestStartTime":1517969488223}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = new int[arr.Length];\n        int x = 0;\n        for(int i=arr.Length-1; i>=0; i--) {\n            \n            arr2[x] = arr[i]; \n            \n        }\n        Console.;\n        \n    }\n}\n\n\n","offset":503,"fileType":"csharp","requestStartTime":1517969555567}}
{"body": {"column":31,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int[] arr2 = new int[arr.Length];\n        int x = 0;\n        for(int i=arr.Length-1; i>=0; i--) {\n            \n            arr2[x] = arr[i]; \n            \n        }\n        Console.WriteLine(arr2.);\n        \n    }\n}\n\n\n","offset":518,"fileType":"csharp","requestStartTime":1517969607740}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":208,"fileType":"csharp","requestStartTime":1517969781333}}
{"body": {"column":31,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.ToUpper().== \"\"\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":218,"fileType":"csharp","requestStartTime":1517969809844}}
{"body": {"column":34,"line":9,"wordToComplete":"Sta","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.ToUpper().Sta\"\"\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":221,"fileType":"csharp","requestStartTime":1517969811894}}
{"body": {"column":34,"line":9,"wordToComplete":"Sta","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.ToUpper().Sta\n           \n           }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":221,"fileType":"csharp","requestStartTime":1517969821623}}
{"body": {"column":74,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.ToUpper().StartsWith(\"HYDRO\") && acid_name.ToUpper().\n           \n           }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1517969842824}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        while(Int32 interactions = 0; interactions++; interactions < k){\n            foreach(Int32 number in a){\n                previousNumber = number;\n                a.\n            }\n        }\n    }\n}\n\n\n","offset":610,"fileType":"csharp","requestStartTime":1517971929537}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        while(Int32 interactions = 0; interactions++; interactions < k){\n            foreach(Int32 number in a){\n                previousNumber = number;\n                a.\n            }\n        }\n    }\n}\n\n\n","offset":610,"fileType":"csharp","requestStartTime":1517972064461}}
{"body": {"column":25,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        while(Int32 interactions = 0; interactions++; interactions < k){\n            foreach(Int32 number in a){\n                previousNumber = number;\n                a.Last().\n            }\n        }\n    }\n}\n\n\n","offset":617,"fileType":"csharp","requestStartTime":1517972074407}}
{"body": {"column":25,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        while(Int32 interactions = 0; interactions++; interactions < k){\n            foreach(Int32 number in a){\n                previousNumber = number;\n                a.Last().\n            }\n        }\n    }\n}\n\n\n","offset":617,"fileType":"csharp","requestStartTime":1517972078608}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        while(Int32 interactions = 0; interactions++; interactions < k){\n            Console.\n            }\n        }\n    }\n}\n\n\n","offset":531,"fileType":"csharp","requestStartTime":1517972196156}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        for(int interactions = 0; interactions <= k; interactions++){\n            foreach(int number in a){\n                a.\n            }\n        }\n    }\n}\n\n\n","offset":564,"fileType":"csharp","requestStartTime":1517972653695}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        for(int interactions = 0; interactions <= k; interactions++){\n            foreach(int number in a){\n                a.\n            }\n        }\n    }\n}\n\n\n","offset":564,"fileType":"csharp","requestStartTime":1517972667615}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        for(int interactions = 0; interactions <= k; interactions++){\n            foreach(int number in a){\n                a.Last(.)\n            }\n        }\n    }\n}\n\n\n","offset":570,"fileType":"csharp","requestStartTime":1517972680927}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        for(int interactions = 0; interactions <= k; interactions++){\n            foreach(int number in a){\n                a.Last().\n            }\n        }\n    }\n}\n\n\n","offset":571,"fileType":"csharp","requestStartTime":1517972685847}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        for(int interactions = 0; interactions <= k; interactions++){\n            foreach(int number in a){\n                a.\n                a.Last() == num\n            }\n        }\n    }\n}\n\n\n","offset":564,"fileType":"csharp","requestStartTime":1517972701767}}
{"body": {"column":31,"line":17,"wordToComplete":"num","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int previousNumber = 0;\n        for(int interactions = 0; interactions <= k; interactions++){\n            foreach(int number in a){\n                previousNumber = a.Last();\n                a.Last() == num\n            }\n        }\n    }\n}\n\n\n","offset":620,"fileType":"csharp","requestStartTime":1517972739226}}
{"body": {"column":25,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string a = Console.ReadLine();\n        string b = Console.ReadLine();\n        \n        Dictionary<char,int> letterCountA = new Dictionary<char,int>();\n        for(char letter in a) {\n            letterCountA.\n        }\n    }\n}\n\n\n","offset":358,"fileType":"csharp","requestStartTime":1517972765011}}
{"body": {"column":71,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Newtonsoft.Json.Linq;\n\nclass Solution {\n    /*\n     * Complete the function below.\n     */\n    static int getNumberOfMovies(string substr) {\n        /*\n         * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n         */\n        int result = 0;\n        HttpClient client = new HttpClient();\n        HttpResponseMessage response = client.GetAsync($\"https://jsonmock.hackerrank.com/api/movies/search/?Title={substr}\").GetAwaiter().GetResult();\n        if (response.IsSuccessStatusCode)\n        {\n            dynamic movies = response.Content.ReadAsync().GetAwaiter().;\n            if (movies != null)\n                result = movies.total;\n            \n        }\n        \n        return result;\n        \n    }\n\n    static void Main(string[] args) {\n        string s = Console.ReadLine();\n        \n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter fileOut = new StreamWriter(@fileName, true);\n        \n        fileOut.WriteLine(getNumberOfMovies(s));\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":753,"fileType":"csharp","requestStartTime":1517972938305}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        queue.\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":396,"fileType":"csharp","requestStartTime":1517973539164}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        int[] openDoors = doors;\n        \n        for(int i=0; i<openDoors.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":268,"fileType":"csharp","requestStartTime":1517973626577}}
{"body": {"column":21,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (queue.)\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":471,"fileType":"csharp","requestStartTime":1517973643983}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (!queue.IsEmpty())\n        {\n            Console.\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":513,"fileType":"csharp","requestStartTime":1517973657515}}
{"body": {"column":33,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (!queue.IsEmpty())\n        {\n            Node current = queue.\n            Console.Write(\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":526,"fileType":"csharp","requestStartTime":1517973690008}}
{"body": {"column":34,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (!queue.IsEmpty())\n        {\n            Node current = queue.DeQueue();\n            Console.Write(current.\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":571,"fileType":"csharp","requestStartTime":1517973697657}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (!queue.IsEmpty())\n        {\n            Node current = queue.DeQueue();\n            Console.Write(current.data);\n            \n            if (current.)\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":615,"fileType":"csharp","requestStartTime":1517973707343}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (!queue.IsEmpty())\n        {\n            Node current = queue.DeQueue();\n            Console.Write(current.data);\n            \n            if (current.left != null)\n                queue.EnQueue(current.left);\n            if (current. != null)\n                queue.EnQueue(current.left);\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":698,"fileType":"csharp","requestStartTime":1517973734048}}
{"body": {"column":38,"line":28,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.EnQueue(root);\n        \n        while (!queue.IsEmpty())\n        {\n            Node current = queue.DeQueue();\n            Console.Write(current.data);\n            \n            if (current.left != null)\n                queue.EnQueue(current.left);\n            if (current.right != null)\n                queue.EnQueue(current.);\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":751,"fileType":"csharp","requestStartTime":1517973737878}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Node{\n    public Node left,right;\n    public int data;\n    public Node(int data){\n        this.data=data;\n        left=right=null;\n    }\n}\nclass Solution{\n\tstatic void levelOrder(Node root){\n  \t\t//Write your code here\n        Queue<Node> queue = new Queue<Node>();\n        if (root != null)\n            queue.Enqueue(root);\n        \n        while (!queue.())\n        {\n            Node current = queue.Dequeue();\n            Console.Write(current.data + \" \");\n            \n            if (current.left != null)\n                queue.Enqueue(current.left);\n            if (current.right != null)\n                queue.Enqueue(current.right);\n        }\n    }\n\tstatic Node insert(Node root, int data){\n        if(root==null){\n            return new Node(data);\n        }\n        else{\n            Node cur;\n            if(data<=root.data){\n                cur=insert(root.left,data);\n                root.left=cur;\n            }\n            else{\n                cur=insert(root.right,data);\n                root.right=cur;\n            }\n            return root;\n        }\n    }\n    static void Main(String[] args){\n        Node root=null;\n        int T=Int32.Parse(Console.ReadLine());\n        while(T-->0){\n            int data=Int32.Parse(Console.ReadLine());\n            root=insert(root,data);            \n        }\n        levelOrder(root);\n        \n    }\n}\n","offset":472,"fileType":"csharp","requestStartTime":1517973844714}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\n\nclass Person {\n    public int age;     \n\tpublic Person(int initialAge) {\n        // Add some more code to run some checks on initialAge\n        if(initialAge < 0){\n            age = 0;\n            Console.WriteLine(\"Age is not valid, setting age to 0.\");\n        }\n        else{\n            age = initialAge;\n        }\n     }\n     public void amIOld() {\n        // Do some computations in here and print out the correct statement to the console \n        if(age < 13){\n            Console.\n        }\n     }\n\n     public void yearPasses() {\n        // Increment the age of the person in here\n        age = age + 1;\n     }\nstatic void Main(String[] args) {\n        int T=int.Parse(Console.In.ReadLine());\n        for (int i = 0; i < T; i++) {\n            int age=int.Parse(Console.In.ReadLine());\n            Person p=new Person(age);\n             p.amIOld();\n                for (int j = 0; j < 3; j++) {\n                  p.yearPasses();\n                }\n                p.amIOld();\n                Console.WriteLine();\n        }\n    }\n}\n\n","offset":556,"fileType":"csharp","requestStartTime":1517974232719}}
{"body": {"column":45,"line":20,"wordToComplete":"You are young.\"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\n\nclass Person {\n    public int age;     \n\tpublic Person(int initialAge) {\n        // Add some more code to run some checks on initialAge\n        if(initialAge < 0){\n            age = 0;\n            Console.WriteLine(\"Age is not valid, setting age to 0.\");\n        }\n        else{\n            age = initialAge;\n        }\n     }\n     public void amIOld() {\n        // Do some computations in here and print out the correct statement to the console \n        if(age < 13){\n            Console.WriteLine(\"You are young.\");\n        }\n     }\n\n     public void yearPasses() {\n        // Increment the age of the person in here\n        age = age + 1;\n     }\nstatic void Main(String[] args) {\n        int T=int.Parse(Console.In.ReadLine());\n        for (int i = 0; i < T; i++) {\n            int age=int.Parse(Console.In.ReadLine());\n            Person p=new Person(age);\n             p.amIOld();\n                for (int j = 0; j < 3; j++) {\n                  p.yearPasses();\n                }\n                p.amIOld();\n                Console.WriteLine();\n        }\n    }\n}\n\n","offset":581,"fileType":"csharp","requestStartTime":1517974254312}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\n\nclass Person {\n    public int age;     \n\tpublic Person(int initialAge) {\n        // Add some more code to run some checks on initialAge\n        if(initialAge < 0){\n            age = 0;\n            Console.WriteLine(\"Age is not valid, setting age to 0.\");\n        }\n        else{\n            age = initialAge;\n        }\n     }\n     public void amIOld() {\n        // Do some computations in here and print out the correct statement to the console \n        if(age < 13){\n            Console.WriteLine(\"You are young.\");\n        }\n        else if(age >= 13 && age < 18){\n            Console.WriteLine(\"You are a teenager.\");\n        }\n        else{\n            Console.\n        }\n     }\n\n     public void yearPasses() {\n        // Increment the age of the person in here\n        age = age + 1;\n     }\nstatic void Main(String[] args) {\n        int T=int.Parse(Console.In.ReadLine());\n        for (int i = 0; i < T; i++) {\n            int age=int.Parse(Console.In.ReadLine());\n            Person p=new Person(age);\n             p.amIOld();\n                for (int j = 0; j < 3; j++) {\n                  p.yearPasses();\n                }\n                p.amIOld();\n                Console.WriteLine();\n        }\n    }\n}\n\n","offset":733,"fileType":"csharp","requestStartTime":1517974318928}}
{"body": {"column":43,"line":26,"wordToComplete":"You are old.\"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\n\nclass Person {\n    public int age;     \n\tpublic Person(int initialAge) {\n        // Add some more code to run some checks on initialAge\n        if(initialAge < 0){\n            age = 0;\n            Console.WriteLine(\"Age is not valid, setting age to 0.\");\n        }\n        else{\n            age = initialAge;\n        }\n     }\n     public void amIOld() {\n        // Do some computations in here and print out the correct statement to the console \n        if(age < 13){\n            Console.WriteLine(\"You are young.\");\n        }\n        else if(age >= 13 && age < 18){\n            Console.WriteLine(\"You are a teenager.\");\n        }\n        else{\n            Console.WriteLine(\"You are old.\");\n        }\n     }\n\n     public void yearPasses() {\n        // Increment the age of the person in here\n        age = age + 1;\n     }\nstatic void Main(String[] args) {\n        int T=int.Parse(Console.In.ReadLine());\n        for (int i = 0; i < T; i++) {\n            int age=int.Parse(Console.In.ReadLine());\n            Person p=new Person(age);\n             p.amIOld();\n                for (int j = 0; j < 3; j++) {\n                  p.yearPasses();\n                }\n                p.amIOld();\n                Console.WriteLine();\n        }\n    }\n}\n\n","offset":756,"fileType":"csharp","requestStartTime":1517974328471}}
{"body": {"column":19,"line":14,"wordToComplete":"finalRo","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRo)\n    }\n}\n\n\n","offset":463,"fileType":"csharp","requestStartTime":1517974445476}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        \n        for(i = 1; i <= 10; i++){\n            Console.\n        }\n    }\n}\n\n\n","offset":258,"fileType":"csharp","requestStartTime":1517974484130}}
{"body": {"column":40,"line":17,"wordToComplete":"final","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - final)\n        }\n    }\n}\n\n\n","offset":565,"fileType":"csharp","requestStartTime":1517974665187}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Solution\n    {\n        static void Main(string[] args)\n        {\n            // read the string filename\n            string filename = Console.ReadLine();\n            if (system.IO.File.Exist(filename == true))\n            {\n                System.IO.StreamReader objReader;\n                objReader = new System.IO.Stream(filename);\n                do\n                {\n                    textLine = textLine + objReader.ReadLine() + ;\n                }while(objReader.Peek() != -1)\n                objReader.      \n              }\n        }\n    }\n}\n\n","offset":629,"fileType":"csharp","requestStartTime":1517974635792}}
{"body": {"column":42,"line":17,"wordToComplete":"finalRo","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRo)\n        }\n    }\n}\n\n\n","offset":567,"fileType":"csharp","requestStartTime":1517974668880}}
{"body": {"column":20,"line":25,"wordToComplete":"mess","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution\n{\n    class Solution\n    {\n        static void Main(string[] args)\n        {\n            // read the string filename\n            string filename = Console.ReadLine();\n            if (system.IO.File.Exist(filename == true))\n            {\n                System.IO.StreamReader objReader;\n                objReader = new System.IO.Stream(filename);\n                do\n                {\n                    textLine = textLine + objReader.ReadLine() + ;\n                }while(objReader.Peek() != -1)\n                objReader.Close();      \n             }\n            else\n            {\n                mess\n            }\n        }\n    }\n}\n\n","offset":710,"fileType":"csharp","requestStartTime":1517974666711}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Split(' ');\n        wordSplited.\n        foreach(string word in wordsSplited)\n        {\n            \n            Console.WriteLine(word);\n             Console.WriteLine(word.Count());\n        }\n        return \" \";\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":268,"fileType":"csharp","requestStartTime":1517974704020}}
{"body": {"column":58,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Split(' ').OrderBy(x=>;\n        \n        foreach(string word in wordsSplited)\n        {\n            \n            Console.WriteLine(word);\n             Console.WriteLine(word.Count());\n        }\n        return \" \";\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":258,"fileType":"csharp","requestStartTime":1517974723654}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        for (int i = 0; i < a.)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":213,"fileType":"csharp","requestStartTime":1517974692175}}
{"body": {"column":33,"line":16,"wordToComplete":"ToU","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Split(' ').OrderBy(x=> x.Length);\n        \n        var newLine = \"\";\n        foreach(string word in wordsSplited)\n        {\n            word[0] = word[0].ToU\n            newLine += word; \n        }\n        return newLine;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":393,"fileType":"csharp","requestStartTime":1517974854361}}
{"body": {"column":36,"line":22,"wordToComplete":"finalRo","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++)\n            {\n                temp[i] = a[finalRotation+i];\n            }\n            \n            for(int i=0; i < finalRo)\n        }\n    }\n}\n\n\n","offset":708,"fileType":"csharp","requestStartTime":1517975002607}}
{"body": {"column":48,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Remove(\".\").Split(' ').OrderBy(x=> x.Length);\n        \n        var newLine = \"\";\n        foreach(string word in wordsSplited)\n        {\n            \n            if(word != \".\")\n               newLine += word;\n            \n            if(word == wordsSplited.Last())\n            {\n                newLine += \".\";\n            }\n            else\n            {\n                newLine += \" \";\n            }\n        }\n        return newLine;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":248,"fileType":"csharp","requestStartTime":1517975057536}}
{"body": {"column":32,"line":23,"wordToComplete":"finalRo","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++)\n            {\n                temp[i] = a[finalRotation+i];\n            }\n            \n            for(int i=0; i < finalRotationCount; i++){\n                temp[n - finalRo]\n            }\n        }\n    }\n}\n\n\n","offset":759,"fileType":"csharp","requestStartTime":1517975070739}}
{"body": {"column":24,"line":16,"wordToComplete":"Is","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Replace(\".\",\"\").Split(' ').OrderBy(x=> x.Length);\n        \n        var newLine = \"\";\n        foreach(string word in wordsSplited)\n        {\n            if(string.Is)\n            if(word != \".\")\n               newLine += word;\n            \n            if(word == wordsSplited.Last())\n            {\n                newLine += \".\";\n            }\n            else\n            {\n                newLine += \" \";\n            }\n        }\n        return newLine;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":400,"fileType":"csharp","requestStartTime":1517975113355}}
{"body": {"column":20,"line":70,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int q = Convert.ToInt32(Console.ReadLine());\n        int i = 0;\n        \n        for (i = 0; i < q; i++) {\n            int _x = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(isPresent(_root,_x));\n        }\n        \n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        var i=0;\n        Node newroot = root;\n        while(i==0){\n            console.\n            if(val==newroot.data){\n                return 1;\n            }else{\n                if(val<newroot.data)\n                {\n                    newroot = root.left;\n                }else{\n                    newroot = root.right;\n                }\n            }\n        }\n        \n        return 0;\n    }\n\n\n}\n","offset":1723,"fileType":"csharp","requestStartTime":1517975216169}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++){\n                temp[i] = a[finalRotation+i];\n            }\n            \n            for(int i=0; i < finalRotationCount; i++){\n                temp[n - finalRotationCount + i] = a[i];\n            }\n            a = temp;\n        }\n        Console.\n    }\n}\n\n\n","offset":833,"fileType":"csharp","requestStartTime":1517975250708}}
{"body": {"column":24,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++){\n                temp[i] = a[finalRotation+i];\n            }\n            \n            for(int i=0; i < finalRotationCount; i++){\n                temp[n - finalRotationCount + i] = a[i];\n            }\n            a = temp;\n        }\n        Console.Write(a.)\n    }\n}\n\n\n","offset":841,"fileType":"csharp","requestStartTime":1517975255260}}
{"body": {"column":28,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++){\n                temp[i] = a[finalRotation+i];\n            }\n            \n            for(int i=0; i < finalRotationCount; i++){\n                temp[n - finalRotationCount + i] = a[i];\n            }\n            a = temp;\n        }\n        Console.WriteLine(a.)\n    }\n}\n\n\n","offset":845,"fileType":"csharp","requestStartTime":1517975279863}}
{"body": {"column":27,"line":69,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int q = Convert.ToInt32(Console.ReadLine());\n        int i = 0;\n        \n        for (i = 0; i < q; i++) {\n            int _x = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(isPresent(_root,_x));\n        }\n        \n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        var i=0;\n        Node newroot = root;\n        Console.Write(root.)\n        /*while(i==0){\n            if(val==newroot.data){\n                return 1;\n            }else{\n                if(val<newroot.data)\n                {\n                    newroot = root.left;\n                }else{\n                    newroot = root.right;\n                }\n            }\n        }*/\n        \n        return 0;\n    }\n\n\n}\n","offset":1709,"fileType":"csharp","requestStartTime":1517975305218}}
{"body": {"column":33,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++){\n                temp[i] = a[finalRotation+i];\n            }\n            \n            for(int i=0; i < finalRotationCount; i++){\n                temp[n - finalRotationCount + i] = a[i];\n            }\n            a = temp;\n        }\n        Console.WriteLine(string.)\n    }\n}\n\n\n","offset":850,"fileType":"csharp","requestStartTime":1517975319431}}
{"body": {"column":23,"line":34,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Replace(\".\",\"\").ToLower()Split(' ').OrderBy(x=> x.Length);\n        \n        var newLine = \"\";\n        foreach(string word in wordsSplited)\n        {\n            if(!string.IsNullOrEmpty(word))\n            {\n            if(word != \".\")\n            {\n               newLine += word;\n            }\n            \n            if(word == wordsSplited.Last())\n            {\n                newLine += \".\";\n            }\n            else\n            {\n                newLine += \" \";\n            }\n            }\n        }\n        \n        return newLine.;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":781,"fileType":"csharp","requestStartTime":1517975358305}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        var finalRotationCount = k%n;\n        if (finalRotationCount > 0)\n        {\n            var temp = new int[n];\n            for(int i = 0; i < n - finalRotationCount; i++){\n                temp[i] = a[finalRotationCount + i];\n            }\n            \n            for(int i=0; i < finalRotationCount; i++){\n                temp[n - finalRotationCount + i] = a[i];\n            }\n            a = temp;\n        }\n        Console.\n        Console.WriteLine(string.Join(\" \", a));\n    }\n}\n\n\n","offset":840,"fileType":"csharp","requestStartTime":1517975379605}}
{"body": {"column":50,"line":34,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        var wordsSplited = sentence.Replace(\".\",\"\").ToLower().Split(' ').OrderBy(x=> x.Length);\n        \n        var newLine = \"\";\n        foreach(string word in wordsSplited)\n        {\n            if(!string.IsNullOrEmpty(word))\n            {\n            if(word != \".\")\n            {\n               newLine += word;\n            }\n            \n            if(word == wordsSplited.Last())\n            {\n                newLine += \".\";\n            }\n            else\n            {\n                newLine += \" \";\n            }\n            }\n        }\n        \n        return char.ToUpper(newLine[0]) + newLine.SubString(1);\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":809,"fileType":"csharp","requestStartTime":1517975408988}}
{"body": {"column":16,"line":70,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int q = Convert.ToInt32(Console.ReadLine());\n        int i = 0;\n        \n        for (i = 0; i < q; i++) {\n            int _x = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(isPresent(_root,_x));\n        }\n        \n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        var found = false;\n        \n            \n        if(root..data == val)\n        {\n            found = true;\n            \n        }\n        \n          if(found == false)\n          {\n         if(root.left != null)\n            isPresent(root.left, val);\n        \n     \n        if(root.right != null)\n            isPresent(root.right,val);\n        \n          }\n        return found == true ? 1 : 0;\n       \n    }\n\n\n}\n","offset":1701,"fileType":"csharp","requestStartTime":1517975915916}}
{"body": {"column":34,"line":70,"wordToComplete":"t","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int q = Convert.ToInt32(Console.ReadLine());\n        int i = 0;\n        \n        for (i = 0; i < q; i++) {\n            int _x = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(isPresent(_root,_x));\n        }\n        \n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        var i=0;\n        Node newroot = root;\n        while(i==0){\n            Console.Write(newroo.t)\n            if(val==newroot.data){\n                return 1;\n            }else{\n                try{\n                    if(val<newroot.data){\n                        newroot = newroot.left;\n                    }else{\n                        newroot = newroot.right;\n                    }\n                }catch{\n                    return 0;\n                }\n            }\n        }\n        return 0;\n    }\n\n\n}\n","offset":1737,"fileType":"csharp","requestStartTime":1517976046622}}
{"body": {"column":27,"line":73,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\n    class Node {\n        public Node left, right;\n        public int data;\n\n        public Node(int newData) {\n            left = right = null;\n            data = newData;\n        }\n    }\n\n    static Node insert(Node node, int data) {\n        if (node==null) {\n            node = new Node(data);\n        }\n        else {\n            if (data <= node.data) {\n                node.left = insert(node.left, data);\n            }\n            else {\n                node.right = insert(node.right, data);\n            }\n        }\n        return(node);\n    }\n\n    static void Main(String[] args) {\n        Node _root;\n        int root_i=0, root_cnt = 0, root_num = 0;\n        root_cnt = Convert.ToInt32(Console.ReadLine());\n        _root=null;\n        for(root_i = 0; root_i < root_cnt; root_i++){\n            root_num = Convert.ToInt32(Console.ReadLine());\n            if( root_i == 0)\n                _root = new Node(root_num);\n            else           \n                insert(_root, root_num);\n        }\n\n        int q = Convert.ToInt32(Console.ReadLine());\n        int i = 0;\n        \n        for (i = 0; i < q; i++) {\n            int _x = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(isPresent(_root,_x));\n        }\n        \n        return;\n    }\n\n\n    static int isPresent(Node root, int val){\n        /* For your reference\n           class Node {\n           Node left, right;\n           int data;\n           Node(int newData) {\n           left = right = null;\n           data = newData;\n           }\n           }\n           */\n        var i=0;\n        Node newroot = root;\n        while(i==0){\n            if(val==newroot.data){\n                return 1;\n            }else{\n                if(newroot. != null) {{\n                    if(val<newroot.data){\n                        newroot = newroot.left;\n                    }else{\n                        newroot = newroot.right;\n                    }\n                }catch{\n                    return 0;\n                }\n            }\n        }\n        return 0;\n    }\n\n\n}\n","offset":1810,"fileType":"csharp","requestStartTime":1517976128583}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void extraLongFactorials(int n) {\n        // Complete this function\n        long fac = 0;\n        while(n>)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        extraLongFactorials(n);\n    }\n}\n\n\n","offset":221,"fileType":"csharp","requestStartTime":1517977397115}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void extraLongFactorials(int n) {\n        // Complete this function\n        long fac = 1;\n        while(n>0){\n            fac*=n;\n            n--;\n        }\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        extraLongFactorials(n);\n    }\n}\n\n\n","offset":288,"fileType":"csharp","requestStartTime":1517977425665}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        sentence.\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":217,"fileType":"csharp","requestStartTime":1517977805367}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System..BigInteger; \nclass Solution {\n\n    static void extraLongFactorials(int n) {\n        // Complete this function\n        BigInteger  fac = 1;\n        while(n>0){\n            fac*=n;\n            n--;\n            Console.WriteLine(fac);\n        }\n        Console.WriteLine(fac);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        extraLongFactorials(n);\n    }\n}\n\n\n","offset":99,"fileType":"csharp","requestStartTime":1517977954308}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string arrange(string sentence) {\n        string[] words = sentence.Split(null);\n        Array.Sort(words,(x,y) => x.Length.CompareTo(y.Length));\n        foreach (string s in words){\n            Console.Write(s);\n        }\n        return String.Join(\" \",words.;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string res;\n        string sentence;\n        sentence = Console.ReadLine();\n\n        res = arrange(sentence);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":426,"fileType":"csharp","requestStartTime":1517978055046}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":220,"fileType":"csharp","requestStartTime":1517978053523}}
{"body": {"column":49,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.Substring(0, 5).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":236,"fileType":"csharp","requestStartTime":1517978066055}}
{"body": {"column":49,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.Substring(0, 5).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":236,"fileType":"csharp","requestStartTime":1517978074328}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":277,"fileType":"csharp","requestStartTime":1517978094168}}
{"body": {"column":50,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":297,"fileType":"csharp","requestStartTime":1517978107122}}
{"body": {"column":63,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.Length-3, 2).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":310,"fileType":"csharp","requestStartTime":1517978119009}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.Length-3, 2).ToLower();\n        \n        if(hydro.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1517978132365}}
{"body": {"column":15,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        bool hyd=false, met=false;\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.Length-3, 2).ToLower();\n        \n        if(hydro.CompareTo(\"hydro\")) \n            hyd = true;\n        if(met.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":442,"fileType":"csharp","requestStartTime":1517978179513}}
{"body": {"column":8,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        bool hyd=false, met=false;\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.Length-3, 2).ToLower();\n        \n        true == hydro.CompareTo(\"hydro\")) \n            hyd = true;\n        if(met.CompareTo(\"ic\"))\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":373,"fileType":"csharp","requestStartTime":1517978201145}}
{"body": {"column":8,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        bool hyd=false, met=false;\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.Length-3, 2).ToLower();\n        \n        == hydro.CompareTo(\"hydro\")) \n            hyd = true;\n        if(met.CompareTo(\"ic\"))\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":373,"fileType":"csharp","requestStartTime":1517978201570}}
{"body": {"column":22,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":180,"fileType":"csharp","requestStartTime":1517978272786}}
{"body": {"column":22,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":180,"fileType":"csharp","requestStartTime":1517978273213}}
{"body": {"column":22,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":180,"fileType":"csharp","requestStartTime":1517978275898}}
{"body": {"column":27,"line":8,"wordToComplete":"Order","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.Order\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1517978280138}}
{"body": {"column":31,"line":8,"wordToComplete":"OrderByDe","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.OrderByDe\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1517978285370}}
{"body": {"column":31,"line":8,"wordToComplete":"OrderByDe","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.OrderByDe\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1517978286210}}
{"body": {"column":31,"line":8,"wordToComplete":"OrderByDe","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.OrderByDe\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1517978286762}}
{"body": {"column":42,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.OrderByDescending().\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":200,"fileType":"csharp","requestStartTime":1517978302672}}
{"body": {"column":47,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        int max = arr.OrderByDescending(x =>x).\n        int rep = 0;\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517978330456}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":211,"fileType":"csharp","requestStartTime":1517978350712}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517978376886}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.(i>)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1517978397496}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.(i=>)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517978399862}}
{"body": {"column":25,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.(i=>i).\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":251,"fileType":"csharp","requestStartTime":1517978402200}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":244,"fileType":"csharp","requestStartTime":1517978404752}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.OrderBy(i=>\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":255,"fileType":"csharp","requestStartTime":1517978409192}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        arr = arr.OrderBy(i=>i).\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":258,"fileType":"csharp","requestStartTime":1517978411152}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        \n        for(int i=0;i<s.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":259,"fileType":"csharp","requestStartTime":1517978477007}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        int hyd=1, met=1;\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        string ic = acid_name.Substring(acid_name.Length-3, 2).ToLower();\n        \n        hyd = String.Compare(hydro, \"hydro\"); \n        met = String.Compare(ic, \"ic\");\n        \n        Console.\n        if(hyd == 0 && met == 0)\n            return \"non-metal acid\";\n        else if (met == 0) \n            return \"polyatomic acid\";\n        else\n            return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":468,"fileType":"csharp","requestStartTime":1517978538412}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\";\n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]==arr[i+1]){\n                ret=ret+arr[i];\n            }\n        }\n        if(ret.)\n        super_reduced_string(ret);\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":393,"fileType":"csharp","requestStartTime":1517978693138}}
{"body": {"column":14,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\";\n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]==arr[i+1]){\n                ret=ret+arr[i];\n            }\n        }\n        if(!ret.Equals(\"\"))\n        super_reduced_string(ret);\n        if(re.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":455,"fileType":"csharp","requestStartTime":1517978785482}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\";\n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]==arr[i+1]){\n                ret=ret+arr[i];\n            }\n        }\n        if(!ret.Equals(\"\"))\n        super_reduced_string(ret);\n        if(ret.)\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":456,"fileType":"csharp","requestStartTime":1517978791466}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        // Complete this function\n        return ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517978902361}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        //find the sum of all the integers and see by deleting each \n        int s = arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":267,"fileType":"csharp","requestStartTime":1517979063810}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        int hyd=1, met=1;\n        if(acid.)\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        hyd = String.Compare(hydro, \"hydro\"); \n        \n        string ic = acid_name.Substring(acid_name.Length-2, 2).ToLower();\n        met = String.Compare(ic, \"ic\");\n        \n        if(hyd == 0 && met == 0)\n            return \"non-metal acid\";\n        else if (met == 0) \n            return \"polyatomic acid\";\n        else\n            return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517979076866}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        int hyd=1, met=1;\n        if(acid_name.)\n        string hydro = acid_name.Substring(0, 5).ToLower();\n        hyd = String.Compare(hydro, \"hydro\"); \n        \n        string ic = acid_name.Substring(acid_name.Length-2, 2).ToLower();\n        met = String.Compare(ic, \"ic\");\n        \n        if(hyd == 0 && met == 0)\n            return \"non-metal acid\";\n        else if (met == 0) \n            return \"polyatomic acid\";\n        else\n            return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":234,"fileType":"csharp","requestStartTime":1517979079662}}
{"body": {"column":21,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        int hyd=1, met=1;\n        if(acid_name.Length >= 5) {\n            string hydro = acid_name.Substring(0, 5).ToLower();\n            hyd = String.Compare(hydro, \"hydro\"); \n        } \n        \n        if(acid_name.)\n        string ic = acid_name.Substring(acid_name.Length-2, 2).ToLower();\n        met = String.Compare(ic, \"ic\");\n        \n        if(hyd == 0 && met == 0)\n            return \"non-metal acid\";\n        else if (met == 0) \n            return \"polyatomic acid\";\n        else\n            return \"not an acid\";\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":405,"fileType":"csharp","requestStartTime":1517979164395}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        return ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517979245406}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int length = a.\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":208,"fileType":"csharp","requestStartTime":1517979334588}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int length = a.Length;\n        \n        int d1 = 0;\n        for(int x = 0; x < length; ++x)\n        {\n            d1 += a[x][x];\n        }\n\n        int d2 = 0;\n        for(int x = 0; x < length; ++x)\n        {\n            d2 += a[x][length-x];\n        }\n        \n        return Math.\n\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":476,"fileType":"csharp","requestStartTime":1517979422078}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        //find the sum of all the integers and see by deleting each \n        int s = arr.Sum(), min=-1, max=0;\n        \n        foreach ( int i in arr)\n        {\n           if (min= -1) min = s-i;\n           min = min > s-i? s-i: min;\n            max = max < s-i? s-i: max;\n        }\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":478,"fileType":"csharp","requestStartTime":1517979446430}}
{"body": {"column":33,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        //find the sum of all the integers and see by deleting each \n        int s = arr.Sum(), min=-1, max=0;\n        \n        foreach ( int i in arr)\n        {\n           if (min= -1) min = s-i;\n           min = min > s-i? s-i: min;\n            max = max < s-i? s-i: max;\n        }\n        Console.WriteLine(string.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":495,"fileType":"csharp","requestStartTime":1517979489347}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        float pos = arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":201,"fileType":"csharp","requestStartTime":1517979618500}}
{"body": {"column":48,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        float pos = arr.Count(i => i > 0) / arr.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":225,"fileType":"csharp","requestStartTime":1517979634738}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int[] arr) {\n        // Complete this function\n        float pos = arr.Count(i => i > 0) / (float)arr.Length;\n        float neg = arr.Count(i => i < 0) / (float)arr.Length;\n        float zero = arr.Count(i => i == 0) / (float)arr.Length;\n        \n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(arr);\n    }\n}\n\n\n","offset":393,"fileType":"csharp","requestStartTime":1517979690627}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        if(arr != null) && (arr.)\n        foreach(int item in arr) {\n            if(item == k) return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":227,"fileType":"csharp","requestStartTime":1517979760626}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":256,"fileType":"csharp","requestStartTime":1517979820012}}
{"body": {"column":34,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( string.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":270,"fileType":"csharp","requestStartTime":1517979823676}}
{"body": {"column":34,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( string.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":270,"fileType":"csharp","requestStartTime":1517979828759}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( new string())\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":274,"fileType":"csharp","requestStartTime":1517979840124}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        //find the sum of all the integers and see by deleting each \n        long s = arr.Sum(), min=-1, max=0;\n        arr.\n        \n        foreach ( int i in arr)\n        {\n           if (min == -1) min = s-i;\n           min = min > s-i? s-i: min;\n           max = max < s-i? s-i: max;\n        }\n        Console.WriteLine(min +\" \" + max);\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":302,"fileType":"csharp","requestStartTime":1517979876607}}
{"body": {"column":34,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( string.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":270,"fileType":"csharp","requestStartTime":1517979909084}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( \" \".\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":267,"fileType":"csharp","requestStartTime":1517979913935}}
{"body": {"column":40,"line":24,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Newtonsoft.Json.Linq;\n\nclass Solution {\n    /*\n     * Complete the function below.\n     */\n    static int getNumberOfMovies(string substr) {\n        /*\n         * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n         */\n        string url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr;\n\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n        HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n        Stream resStream = response.GetResponseStream();\n        \n        JsonResult result = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<JsonResult>(json);\n        for (int i = 0; i = result.data.)\n    }\n\n    static void Main(string[] args) {\n        string s = Console.ReadLine();\n        \n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter fileOut = new StreamWriter(@fileName, true);\n        \n        fileOut.WriteLine(getNumberOfMovies(s));\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":871,"fileType":"csharp","requestStartTime":1517979926592}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( \" \".Repeat(spaces) );\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":305,"fileType":"csharp","requestStartTime":1517979934513}}
{"body": {"column":34,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(int spaces = n-1; spaces >= 0; spaces++)\n        {\n            Console.Write( \" \".Repeat(spaces) );\n            Console.WriteLine(\"#\".)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":319,"fileType":"csharp","requestStartTime":1517979942032}}
{"body": {"column":32,"line":25,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Newtonsoft.Json.Linq;\n\nclass Solution {\n    /*\n     * Complete the function below.\n     */\n    static int getNumberOfMovies(string substr) {\n        /*\n         * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n         */\n        string url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr;\n           int count = 0;\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n        HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n        Stream resStream = response.GetResponseStream();\n        \n        JsonResult result = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize<JsonResult>(json);\n        for (int i = 0; i = result.data.Size(); i++ )\n            if ( result.data[i].)\n    }\n\n    static void Main(string[] args) {\n        string s = Console.ReadLine();\n        \n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter fileOut = new StreamWriter(@fileName, true);\n        \n        fileOut.WriteLine(getNumberOfMovies(s));\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":942,"fileType":"csharp","requestStartTime":1517979964441}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.)\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":396,"fileType":"csharp","requestStartTime":1517980117565}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.)\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":396,"fileType":"csharp","requestStartTime":1517980123073}}
{"body": {"column":38,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.Substring(ret.)\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":410,"fileType":"csharp","requestStartTime":1517980133206}}
{"body": {"column":38,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.Substring(ret.)\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":410,"fileType":"csharp","requestStartTime":1517980136512}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int max = arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":200,"fileType":"csharp","requestStartTime":1517980132710}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int max = arr.Max();\n        int min = arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517980140792}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int max = arr.Max();\n        int min = arr.Min();\n        int sum = arr.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":258,"fileType":"csharp","requestStartTime":1517980145827}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int max = arr.Max();\n        int min = arr.Min();\n        int sum = arr.Sum();\n\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":282,"fileType":"csharp","requestStartTime":1517980169107}}
{"body": {"column":50,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.Substring(ret.Length-1,1).arr[i])\n                ret=ret+arr[i];   \n            else\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":422,"fileType":"csharp","requestStartTime":1517980202392}}
{"body": {"column":64,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.Substring(ret.Length-1,1).Equals(arr[i].)\n                ret=ret+arr[i];   \n            else\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":436,"fileType":"csharp","requestStartTime":1517980210881}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())\n                ret=ret+arr[i];   \n            else\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":396,"fileType":"csharp","requestStartTime":1517980245375}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var longs = arr.\n        int max = arr.Max();\n        int min = arr.Min();\n        int sum = arr.Sum();\n\n        Console.WriteLine((sum-max) + \" \" + (sum-min));\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":202,"fileType":"csharp","requestStartTime":1517980242895}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            } \n            else if(ret.Length>ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())\n                ret=ret+arr[i];   \n            else\n                i++;\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        //ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":403,"fileType":"csharp","requestStartTime":1517980249639}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var longs = arr.\n        int max = arr.Max();\n        int min = arr.Min();\n        int sum = arr.Sum();\n\n        Console.WriteLine((sum-max) + \" \" + (sum-min));\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":202,"fileType":"csharp","requestStartTime":1517980249989}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        int tallest = ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1517980365396}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        int tallest = ar.Max();\n        return ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":242,"fileType":"csharp","requestStartTime":1517980370002}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        int tallest = ar.Max();\n        return ar.Count(i =>)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517980377212}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        var hours = s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517980451268}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        var hours = s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517980455999}}
{"body": {"column":38,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        //find the sum of all the integers and see by deleting each \n        long s = arr.Sum(x =>long x);\n         long[] arrlng = Array.ConvertAll(arr,long);\n        long min=-1, max=0, s =arrlng.;\n        \n        \n        foreach ( int i in arr)\n        {\n           if (min == -1) min = s-i;\n           min = min > s-i? s-i: min;\n           max = max < s-i? s-i: max;\n        }\n        Console.WriteLine(min +\" \" + max);\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":376,"fileType":"csharp","requestStartTime":1517980482442}}
{"body": {"column":31,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        DateTime dt = DateTime.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":214,"fileType":"csharp","requestStartTime":1517980480032}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        DateTime dt = DateTime.Parse(s);\n        return dt.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":242,"fileType":"csharp","requestStartTime":1517980497893}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        DateTime dt = DateTime.Parse(s);\n        return dt.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":242,"fileType":"csharp","requestStartTime":1517980512037}}
{"body": {"column":44,"line":23,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Newtonsoft.Json.Linq;\n\nclass Solution {\n    /*\n     * Complete the function below.\n     */\n    static int getNumberOfMovies(string substr) {\n        /*\n         * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n         */\n        string url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr;\n           int count = 0;\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n        HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n        Stream jsonString = response.GetResponseStream();\n        \n        var MovieDB = JSON.parse(jsonString.);\n        \n        foreach ( var record in MovieDB.data )\n        {\n            if ( record.Title.IndexOf(sbstr) >=0 )\n                count++;\n        }\n        \n        return count;\n    }\n\n    static void Main(string[] args) {\n        string s = Console.ReadLine();\n        \n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter fileOut = new StreamWriter(@fileName, true);\n        \n        fileOut.WriteLine(getNumberOfMovies(s));\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":783,"fileType":"csharp","requestStartTime":1517980556039}}
{"body": {"column":37,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        int[] ranks = new int[scores.]\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":241,"fileType":"csharp","requestStartTime":1517980553093}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=1; i<ranks.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":302,"fileType":"csharp","requestStartTime":1517980575213}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.)\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517980680874}}
{"body": {"column":30,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.Length>)\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":422,"fileType":"csharp","requestStartTime":1517980687550}}
{"body": {"column":39,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.Length>0 && ret.)\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":431,"fileType":"csharp","requestStartTime":1517980695825}}
{"body": {"column":53,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.Length>0 && ret.Substring(ret.)\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":445,"fileType":"csharp","requestStartTime":1517980703506}}
{"body": {"column":65,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.Length>0 && ret.Substring(ret.Length-1,1).\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":457,"fileType":"csharp","requestStartTime":1517980714314}}
{"body": {"column":79,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.Length>0 && ret.Substring(ret.Length-1,1).Equals(arr[i].\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":471,"fileType":"csharp","requestStartTime":1517980726338}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        int minCnt = 0;\n        int maxCnt = 0;\n        for (int i = 0; i < door.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":240,"fileType":"csharp","requestStartTime":1517980806274}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n            if(arr[i]!=arr[i+1]){\n               ret=ret+arr[i];   \n            }  \n            else {\n                if(ret.)\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }\n                i++;\n            }\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n        ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":415,"fileType":"csharp","requestStartTime":1517980836964}}
{"body": {"column":33,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        int minCnt = 0;\n        int maxCnt = 0;\n        for (int i = 0; i < door.Length; i++)\n        {\n            \n        }\n        \n        return new int[] {minCnt.}\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n    }\n}\n\n\n","offset":328,"fileType":"csharp","requestStartTime":1517980846316}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int round(int grade)\n    {\n        if (grade < 38) return grade;\n        if (grade % 5 == 4) return grade +1;\n        if (grade % 5 == 3) return grade +2;\n        return grade;\n            \n    }\n    \n    static int[] solve(int[] grades){\n        // Complete this function\n        return grades.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":410,"fileType":"csharp","requestStartTime":1517980887666}}
{"body": {"column":36,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int round(int grade)\n    {\n        if (grade < 38) return grade;\n        if (grade % 5 == 4) return grade +1;\n        if (grade % 5 == 3) return grade +2;\n        return grade;\n            \n    }\n    \n    static int[] solve(int[] grades){\n        // Complete this function\n        return grades.Select(round).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] grades = new int[n];\n        for(int grades_i = 0; grades_i < n; grades_i++){\n           grades[grades_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int[] result = solve(grades);\n        Console.WriteLine(String.Join(\"\\n\", result));\n        \n\n    }\n}\n\n\n","offset":424,"fileType":"csharp","requestStartTime":1517980895707}}
{"body": {"column":30,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=1; i<ranks.Length; ++i) {\n            if (scores[i] == scores[i-1]) {\n                ranks[i] = ranks[i-1];\n            }\n            else {\n                ranks[i] = ranks[i-1] + 1;\n            }\n        }\n        for (int i=0; i<alice.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":530,"fileType":"csharp","requestStartTime":1517980913985}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=1; i<ranks.Length; ++i) {\n            if (scores[i] == scores[i-1]) {\n                ranks[i] = ranks[i-1];\n            }\n            else {\n                ranks[i] = ranks[i-1] + 1;\n            }\n        }\n        int[] output = new int[alice.\n        for (int i=0; i<alice.Length; ++i) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":537,"fileType":"csharp","requestStartTime":1517980951303}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n      int min = ((l % 2) == 1) ? l : l + 1; // determine min odd\n      int max = ((r % 2) == 1) ? r : r - 1; // determine max odd\n      int[] output = new int[(max - min + 2)/2]; // create array for all combinations\n      int index = 0; // start at array 0\n      while (min <= max) {\n        output[index] = min;  .\n        min += 2;\n        index++;\n      }\n      return output;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":505,"fileType":"csharp","requestStartTime":1517981042036}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=1; i<ranks.Length; ++i) {\n            if (scores[i] == scores[i-1]) {\n                ranks[i] = ranks[i-1];\n            }\n            else {\n                ranks[i] = ranks[i-1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":228,"fileType":"csharp","requestStartTime":1517981202448}}
{"body": {"column":34,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=1; i<ranks.Length; ++i) {\n            if (scores[i] == scores[i-1]) {\n                ranks[i] = ranks[i-1];\n            }\n            else {\n                ranks[i] = ranks[i-1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1517981206141}}
{"body": {"column":22,"line":28,"wordToComplete":"","code":"using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing Newtonsoft.Json.Linq;\n\nclass Solution {\n    /*\n     * Complete the function below.\n     */\n    static int getNumberOfMovies(string substr) {\n        /*\n         * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n         */\n        string url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr;\n           int count = 0;\n        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n        HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n        Stream streamResponse = response.GetResponseStream();\n        StreamReader reader = new StreamReader(streamResponse);\n\n        var MovieDB = Newtonsoft.Json.Linq.JObject.Parse(reader.ReadToEnd());\n        \n        foreach ( var record in MovieDB[\"data\"] )\n        {\n            System.IO.\n            if ( ((string)record[\"Title\"]).IndexOf(substr) >=0 )\n                count++;\n        }\n        \n        return count;\n    }\n\n    static void Main(string[] args) {\n        string s = Console.ReadLine();\n        \n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter fileOut = new StreamWriter(@fileName, true);\n        \n        fileOut.WriteLine(getNumberOfMovies(s));\n        \n        fileOut.Flush();\n        fileOut.Close();\n    }\n}\n","offset":968,"fileType":"csharp","requestStartTime":1517981241425}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=ranks.; i<ranks.Length; ++i) {\n            if (scores[i] == scores[i-1]) {\n                ranks[i] = ranks[i-1];\n            }\n            else {\n                ranks[i] = ranks[i-1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":342,"fileType":"csharp","requestStartTime":1517981250411}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[0] = 1;\n        for (int i=ranks.Length-2; i.) {\n            if (scores[i] == scores[i-1]) {\n                ranks[i] = ranks[i-1];\n            }\n            else {\n                ranks[i] = ranks[i-1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":354,"fileType":"csharp","requestStartTime":1517981270987}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[ranks.\n        for (int i=ranks.Length-2; i>=0; --i) {\n            if (scores[i] == scores[i+1]) {\n                ranks[i] = ranks[i+1];\n            }\n            else {\n                ranks[i] = ranks[i+1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":315,"fileType":"csharp","requestStartTime":1517981300888}}
{"body": {"column":15,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n\n        boolean flag=false;\n        foreach (int element in arr)\n        {\n           if(element==k)\n           {\n               flag=true;\n               break;\n           }\n        }\n        System.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":396,"fileType":"csharp","requestStartTime":1517981345221}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n\n        boolean flag=false;\n        foreach (int element in arr)\n        {\n           if(element==k)\n           {\n               flag=true;\n               break;\n           }\n        }\n        System.out.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":400,"fileType":"csharp","requestStartTime":1517981346578}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n\n        boolean flag=false;\n        foreach (int element in arr)\n        {\n           if(element==k)\n           {\n               flag=true;\n               break;\n           }\n        }\n        System.Out.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":400,"fileType":"csharp","requestStartTime":1517981349292}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n\n        boolean flag=false;\n        foreach (int element in arr)\n        {\n           if(element==k)\n           {\n               flag=true;\n               break;\n           }\n        }\n        Console.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":397,"fileType":"csharp","requestStartTime":1517981353933}}
{"body": {"column":33,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[ranks.Length-1] = 1;\n        for (int i=ranks.Length-2; i>=0; --i) {\n            if (scores[i] == scores[i+1]) {\n                ranks[i] = ranks[i+1];\n            }\n            else {\n                ranks[i] = ranks[i+1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            int scoreIdx = Array.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":685,"fileType":"csharp","requestStartTime":1517981386398}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n\n        bool flag=false;\n        foreach (int element in arr)\n        {\n           if(element==k)\n           {\n               flag=true;\n               break;\n           }\n        }\n        return flag.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":398,"fileType":"csharp","requestStartTime":1517981394697}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[ranks.Length-1] = 1;\n        for (int i=ranks.Length-2; i>=0; --i) {\n            if (scores[i] == scores[i+1]) {\n                ranks[i] = ranks[i+1];\n            }\n            else {\n                ranks[i] = ranks[i+1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            int scoreIdx = Array.BinarySearch(scores, alice[i]);\n            if (scoreIdx >)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":743,"fileType":"csharp","requestStartTime":1517981407332}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n            if(re.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":698,"fileType":"csharp","requestStartTime":1517981579481}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n            if(ret.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":699,"fileType":"csharp","requestStartTime":1517981582802}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n            if(ret.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":699,"fileType":"csharp","requestStartTime":1517981585970}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n            if(ret.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":699,"fileType":"csharp","requestStartTime":1517981593049}}
{"body": {"column":33,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n            if(ret.Substring(ret.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":713,"fileType":"csharp","requestStartTime":1517981599657}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n             if(ret.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":700,"fileType":"csharp","requestStartTime":1517981614177}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n             if(ret.Length>)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":707,"fileType":"csharp","requestStartTime":1517981621370}}
{"body": {"column":36,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n             if(ret.Length>0 && ret.)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":716,"fileType":"csharp","requestStartTime":1517981625776}}
{"body": {"column":49,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n             if(ret.Length>0 && ret.Substring(re.))\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":729,"fileType":"csharp","requestStartTime":1517981631642}}
{"body": {"column":50,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n             if(ret.Length>0 && ret.Substring(ret.))\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":730,"fileType":"csharp","requestStartTime":1517981633514}}
{"body": {"column":62,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string super_reduced_string(string s){\n        // Complete this function\n        char[] arr = s.ToCharArray();\n        string ret=\"\"; \n        for(int i=0;i<s.Length-1;i++){\n           \n            if(arr[i]==arr[i+1]){\n              i++;   \n            }  \n            else {\n                 ret=ret+arr[i];\n                /*\n                if(ret.Length ==0){ret=ret+arr[i];}\n                if(ret.Length>0 && !ret.Substring(ret.Length-1,1).Equals(arr[i].ToString())){\n                    ret=ret+arr[i];   \n                }*/\n                \n            }\n             if(ret.Length>0 && ret.Substring(ret.Length-1,1).)\n        }\n        if(ret.Equals(\"\")) return \"Empty String\";\n       // ret = super_reduced_string(ret);\n        return ret;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = super_reduced_string(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":742,"fileType":"csharp","requestStartTime":1517981639842}}
{"body": {"column":20,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[ranks.Length-1] = 1;\n        for (int i=ranks.Length-2; i>=0; --i) {\n            if (scores[i] == scores[i+1]) {\n                ranks[i] = ranks[i+1];\n            }\n            else {\n                ranks[i] = ranks[i+1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            int scoreIdx = Array.BinarySearch(scores, alice[i]);\n            if (scoreIdx >= 0) {\n                output[i] = ranks[scoreIdx];\n            }\n            else {\n                scoreIdx = ~scoreIdx;\n                output[i] = 1 + ranks[scoreIdx];\n            }\n            Console.\n        }\n        return output;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":949,"fileType":"csharp","requestStartTime":1517981697818}}
{"body": {"column":39,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        scores = scores.Reverse().ToArray();\n        int[] ranks = new int[scores.Length];\n        ranks[ranks.Length-1] = 1;\n        for (int i=ranks.Length-2; i>=0; --i) {\n            if (scores[i] == scores[i+1]) {\n                ranks[i] = ranks[i+1];\n            }\n            else {\n                ranks[i] = ranks[i+1] + 1;\n            }\n        }\n        int[] output = new int[alice.Length];\n        for (int i=0; i<alice.Length; ++i) {\n            int scoreIdx = Array.BinarySearch(scores, alice[i]);\n            if (scoreIdx >= 0) {\n                output[i] = ranks[scoreIdx];\n            }\n            else {\n                scoreIdx = ~scoreIdx;\n                if (scoreIdx == scores.)\n                output[i] = 1 + ranks[scoreIdx];\n            }\n            Console.WriteLine(output[i]);\n        }\n        return output;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":905,"fileType":"csharp","requestStartTime":1517981780937}}
{"body": {"column":21,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> odds = new List<int>();\n        int i=0;\n        for(i=0;l<=r;l++)\n        {\n            if(l%2!=0){\n                odds.=l;\n                i++;\n            }\n        }\n        return odds;\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":330,"fileType":"csharp","requestStartTime":1517981796617}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        List<int> odds = new List<int>();\n        int i=0;\n        while(l<=r)\n        {\n            if(l%2!=0)\n                odds.Add(l);\n            \n            l++;\n        }\n        return odds.;\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":391,"fileType":"csharp","requestStartTime":1517981839437}}
{"body": {"column":34,"line":20,"wordToComplete":"","code":"\n    /*\n      Reverse a linked list and return pointer to the head\n      The input list will have at least one element\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node Reverse(Node head)\n    {\n      // Complete this method\n        if (head == null)\n            return null;\n        \n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.);\n        \n        \n        \n        return tail;\n    }\n\n    private static Node Reverse2(Node head)\n    {\n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        if (tail.Next == null)\n        {\n            tail.Next = head;\n            head.Next = null;\n        }\n        else\n        {\n            Node current = FindTail(tail.Next);\n            head.Next = null;\n            current.Next = head;\n        }\n        \n        return tail;\n    }\n\n    private static Node FindTail(Node tail)\n    {\n        if (tail.Next != null)\n        {\n            return FindTail(tail.Next);\n        }\n        return tail;\n    }\n\n\n","offset":456,"fileType":"csharp","requestStartTime":1517982214896}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"\n    /*\n      Reverse a linked list and return pointer to the head\n      The input list will have at least one element\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node Reverse(Node head)\n    {\n      // Complete this method\n        if (head == null)\n            return null;\n        \n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        \n        head.\n        \n        return tail;\n    }\n\n    private static Node Reverse2(Node head)\n    {\n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        if (tail.Next == null)\n        {\n            tail.Next = head;\n            head.Next = null;\n        }\n        else\n        {\n            Node current = FindTail(tail.Next);\n            head.Next = null;\n            current.Next = head;\n        }\n        \n        return tail;\n    }\n\n    private static Node FindTail(Node tail)\n    {\n        if (tail.Next != null)\n        {\n            return FindTail(tail.Next);\n        }\n        return tail;\n    }\n\n\n","offset":485,"fileType":"csharp","requestStartTime":1517982262110}}
{"body": {"column":18,"line":22,"wordToComplete":"","code":"\n    /*\n      Reverse a linked list and return pointer to the head\n      The input list will have at least one element\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node Reverse(Node head)\n    {\n      // Complete this method\n        if (head == null)\n            return null;\n        \n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        \n        head.Next.\n        \n        return tail;\n    }\n\n    private static Node Reverse2(Node head)\n    {\n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        if (tail.Next == null)\n        {\n            tail.Next = head;\n            head.Next = null;\n        }\n        else\n        {\n            Node current = FindTail(tail.Next);\n            head.Next = null;\n            current.Next = head;\n        }\n        \n        return tail;\n    }\n\n    private static Node FindTail(Node tail)\n    {\n        if (tail.Next != null)\n        {\n            return FindTail(tail.Next);\n        }\n        return tail;\n    }\n\n\n","offset":490,"fileType":"csharp","requestStartTime":1517982263886}}
{"body": {"column":13,"line":23,"wordToComplete":"","code":"\n    /*\n      Reverse a linked list and return pointer to the head\n      The input list will have at least one element\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    public static Node Reverse(Node head)\n    {\n      // Complete this method\n        if (head == null)\n            return null;\n        \n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        \n        head.Next.Next = head;\n        head.\n        \n        return tail;\n    }\n\n    private static Node Reverse2(Node head)\n    {\n        if (head.Next == null)\n            return head;\n        \n        Node tail = Reverse2(head.Next);\n        if (tail.Next == null)\n        {\n            tail.Next = head;\n            head.Next = null;\n        }\n        else\n        {\n            Node current = FindTail(tail.Next);\n            head.Next = null;\n            current.Next = head;\n        }\n        \n        return tail;\n    }\n\n    private static Node FindTail(Node tail)\n    {\n        if (tail.Next != null)\n        {\n            return FindTail(tail.Next);\n        }\n        return tail;\n    }\n\n\n","offset":516,"fileType":"csharp","requestStartTime":1517982272414}}
{"body": {"column":84,"line":10,"wordToComplete":"it is taking 30 mins to test my code, you are getting json errors in your code...","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n// i am having problems running the \"Run Code\" so cant validate the code so going to submit it anyway...\n// it is taking 30 mins to test my code, you are getting json errors in your code...\n\n    static string FindFirstStringPair(int matchLength, string searchString) {\n      // first determine if string is null empty, determin if length is greater than the max we want to match\n      if (!string.IsNullOrEmpty(searchString) && (searchString.Length > matchLength) && (matchLength > 0))\n      {\n        int maxIndex = searchString.Length-matchLength;             // get max index to search upto\n        int nextIndex = 0;                                          // when to start next index at\n        while(nextIndex < maxIndex) {                               // our outer loop we continue to we reach max\n          int startIndex = nextIndex+matchLength;                 // we start search our first search and skip the first match\n          string toMatch = searchString.Substring(nextIndex, matchLength);    // get our string to match to\n          while(startIndex <= maxIndex) {                          // ok inner loop to slide accross the string\n            if (searchString.Substring(startIndex, matchLength) == toMatch) return toMatch;\n            startIndex++;\n          }\n          nextIndex++;\n        }\n      }\n      return \"\";\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        int _matchLength;\n        _matchLength = Convert.ToInt32(Console.ReadLine());\n        \n        string _searchString;\n        _searchString = Console.ReadLine();\n        \n        res = FindFirstStringPair(_matchLength, _searchString);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":335,"fileType":"csharp","requestStartTime":1517983872993}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n        \n        List<int>\n        for( int i=l; i<=r;i++)\n        {\n           if(i%2==1)\n           {\n               numbers.Append(i);\n           }\n        }\n\nreturn numbers;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":216,"fileType":"csharp","requestStartTime":1517984216913}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] braces(string[] values) {\n        List<string> Result = new List<string>;\n            foreach(string x in values){\n                x.\n            }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int values_size = 0;\n        values_size = Convert.ToInt32(Console.ReadLine());\n        string[] values = new string [values_size];\n        string values_item;\n        for(int values_i = 0; values_i < values_size; values_i++) {\n            values_item = Console.ReadLine();\n            values[values_i] = values_item;\n        }\n\n        res = braces(values);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":308,"fileType":"csharp","requestStartTime":1517984399482}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long countInversions(int arr) \n    {\n        bool inverted = false;\n        int count = 0;\n        for (int i = 0; i < arr.)\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            long result = countInversions(arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1517984495205}}
{"body": {"column":36,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long countInversions(int arr) \n    {\n        bool inverted = false;\n        int count = 0;\n        for (int i = 0; i < arr.Length; i++)\n        {\n            for (int j = 0; j < arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            long result = countInversions(arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":297,"fileType":"csharp","requestStartTime":1517984506950}}
{"body": {"column":29,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long countInversions(int arr) \n    {\n        bool inverted = false;\n        int count = 0;\n        for (int i = 0; i < arr.Length; i++)\n        {\n            for (int j = 0; j < arr.Length - 1 - i; j++)\n            {\n                if (arr[j] > )\n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            long result = countInversions(arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":361,"fileType":"csharp","requestStartTime":1517984554890}}
{"body": {"column":11,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] braces(string[] values) {\n        List<string> Result = new List<string>();\n        Hastable ht = new Hastable();\n        ht.\n            foreach(string x in values){\n                foreach (char y in x){\n                    if (y)\n                }\n            }\n        return Result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int values_size = 0;\n        values_size = Convert.ToInt32(Console.ReadLine());\n        string[] values = new string [values_size];\n        string values_item;\n        for(int values_i = 0; values_i < values_size; values_i++) {\n            values_item = Console.ReadLine();\n            values[values_i] = values_item;\n        }\n\n        res = braces(values);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":300,"fileType":"csharp","requestStartTime":1517984735500}}
{"body": {"column":11,"line":14,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] braces(string[] values) {\n        List<string> Result = new List<string>();\n        Hastable ht = new Hastable();\n        ht.Add('{','}');\n        ht.\n            foreach(string x in values){\n                foreach (char y in x){\n                    if (y)\n                }\n            }\n        return Result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int values_size = 0;\n        values_size = Convert.ToInt32(Console.ReadLine());\n        string[] values = new string [values_size];\n        string values_item;\n        for(int values_i = 0; values_i < values_size; values_i++) {\n            values_item = Console.ReadLine();\n            values[values_i] = values_item;\n        }\n\n        res = braces(values);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":325,"fileType":"csharp","requestStartTime":1517984775760}}
{"body": {"column":36,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] braces(string[] values) {\n        List<string> Result = new List<string>();\n        Hastable ht = new Hastable();\n        \n        ht.Add('{','}');\n        ht.Add('[',']');\n        ht.Add('(',')');\n        \n        string currentOpen = null;\n            foreach(string x in values){\n                for (int i=0;i<x.Length;i++){\n                    if (i > 0 && ht.x[i])\n                }\n            }\n        return Result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int values_size = 0;\n        values_size = Convert.ToInt32(Console.ReadLine());\n        string[] values = new string [values_size];\n        string values_item;\n        for(int values_i = 0; values_i < values_size; values_i++) {\n            values_item = Console.ReadLine();\n            values[values_i] = values_item;\n        }\n\n        res = braces(values);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":540,"fileType":"csharp","requestStartTime":1517984950286}}
{"body": {"column":31,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] braces(string[] values) {\n        List<string> Result = new List<string>();\n        Hastable ht = new Hastable();\n        \n        ht.Add('{','}');\n        ht.Add('[',']');\n        ht.Add('(',')');\n        \n        string currentOpen = null;\n            foreach(string x in values){\n                for (int i=0;i<x.Length;i++){\n                    if (i > 0 && ht[x[i-1]].ToString() == ht[x[i]].ToString())\n                        Result.\n                }\n            }\n        return Result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int values_size = 0;\n        values_size = Convert.ToInt32(Console.ReadLine());\n        string[] values = new string [values_size];\n        string values_item;\n        for(int values_i = 0; values_i < values_size; values_i++) {\n            values_item = Console.ReadLine();\n            values[values_i] = values_item;\n        }\n\n        res = braces(values);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":614,"fileType":"csharp","requestStartTime":1517985021288}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static string[] braces(string[] values) {\n        List<string> Result = new List<string>();\n        Syste.Hastable ht = new Hastable();\n        \n        ht.Add('{','}');\n        ht.Add('[',']');\n        ht.Add('(',')');\n        \n        string currentOpen = null;\n            foreach(string x in values){\n                for (int i=0;i<x.Length;i++){\n                    if (i > 0 && ht[x[i-1]].ToString() == ht[x[i]].ToString()){\n                        i++;\n                        if (i < x.Length){\n                            continue;\n                        }\n                        else\n                        {\n                        Result.Add(\"YES\");\n                        }\n                    }\n                    else {\n                        Result.Add(\"NO\");\n                        break;\n                    }\n                }\n            }\n        return Result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int values_size = 0;\n        values_size = Convert.ToInt32(Console.ReadLine());\n        string[] values = new string [values_size];\n        string values_item;\n        for(int values_i = 0; values_i < values_size; values_i++) {\n            values_item = Console.ReadLine();\n            values[values_i] = values_item;\n        }\n\n        res = braces(values);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":265,"fileType":"csharp","requestStartTime":1517985343359}}
{"body": {"column":31,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]); //length of arr\n        int k = Convert.ToInt32(tokens_n[1]);//position from where we have to move\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        if(k<n){\n            int[] temp_a = new int[n];\n            for (int z=K,y=0;z<N,y<N;z++,y++){\n                temp_a[y]=a[z];\n            }\n            for (int z=K,y=0;z>,y<N;z++,y++){\n                temp_a[y]=a[z];\n            }\n               \n        }\n        \n    }\n}\n\n\n","offset":639,"fileType":"csharp","requestStartTime":1517985685142}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]); //length of arr\n        int k = Convert.ToInt32(tokens_n[1]);//position from where we have to move\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        if(k<n){\n            int[] temp_a = new int[n];\n            for (int z=k,y=0;z<n,y<n;z++,y++){\n                temp_a[y]=a[z];\n            }\n            for (int z=K-1,y=k;z=>0,y<n;z--,y--){\n                temp_a[y]=a[z];\n            }\n            for(int x= 0; x<n;x++){\n                Console.\n            }\n               \n        }\n        \n    }\n}\n\n\n","offset":764,"fileType":"csharp","requestStartTime":1517985792276}}
{"body": {"column":45,"line":9,"wordToComplete":"tag>[A-Za-z]+)\\s.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+)\\s.\";\n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\"{0};{1};{2}\",\n                              m.Groups[\"q_id\"], m.Groups[\"q_text\"], m.Groups[\"q_relt\"] );\n            }\n        }\n    }\n}\n\n","offset":261,"fileType":"csharp","requestStartTime":1517987657133}}
{"body": {"column":23,"line":12,"wordToComplete":"meal","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (meal)\n    }\n}\n\n","offset":365,"fileType":"csharp","requestStartTime":1517987725034}}
{"body": {"column":23,"line":12,"wordToComplete":"tip_","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_)\n    }\n}\n\n","offset":365,"fileType":"csharp","requestStartTime":1517987732119}}
{"body": {"column":23,"line":12,"wordToComplete":"tip_","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_)\n    }\n}\n\n","offset":365,"fileType":"csharp","requestStartTime":1517987762627}}
{"body": {"column":40,"line":12,"wordToComplete":"meal","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal\n    }\n}\n\n","offset":382,"fileType":"csharp","requestStartTime":1517987772416}}
{"body": {"column":22,"line":13,"wordToComplete":"tax","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax)\n    }\n}\n\n","offset":411,"fileType":"csharp","requestStartTime":1517987781953}}
{"body": {"column":40,"line":13,"wordToComplete":"meal","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal\n    }\n}\n\n","offset":429,"fileType":"csharp","requestStartTime":1517987790208}}
{"body": {"column":15,"line":15,"wordToComplete":"console","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        console\n    }\n}\n\n","offset":460,"fileType":"csharp","requestStartTime":1517987796908}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.\n    }\n}\n\n","offset":461,"fileType":"csharp","requestStartTime":1517987798201}}
{"body": {"column":30,"line":15,"wordToComplete":"Meal","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.WriteLine(Meal\n    }\n}\n\n","offset":475,"fileType":"csharp","requestStartTime":1517987806881}}
{"body": {"column":30,"line":15,"wordToComplete":"math","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.WriteLine(math\n    }\n}\n\n","offset":475,"fileType":"csharp","requestStartTime":1517987808485}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.WriteLine(Math.\n    }\n}\n\n","offset":476,"fileType":"csharp","requestStartTime":1517987810058}}
{"body": {"column":33,"line":15,"wordToComplete":"ro","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.WriteLine(Math.ro\n    }\n}\n\n","offset":478,"fileType":"csharp","requestStartTime":1517987811121}}
{"body": {"column":41,"line":15,"wordToComplete":"meal","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.WriteLine(Math.Round(meal\n    }\n}\n\n","offset":486,"fileType":"csharp","requestStartTime":1517987825797}}
{"body": {"column":52,"line":15,"wordToComplete":"tip","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        int tip = (tip_percent/100)*meal_cost;\n        int tax = (tax_percent/100)*meal_cost;\n        \n        Console.WriteLine(Math.Round(meal_cost + tip\n    }\n}\n\n","offset":497,"fileType":"csharp","requestStartTime":1517987829534}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        for (int i=0;i<a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":210,"fileType":"csharp","requestStartTime":1517987996029}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n=a.\n        for (int i=0;i<)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":201,"fileType":"csharp","requestStartTime":1517988012005}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n=a.\n        for (int i=0;i<)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":201,"fileType":"csharp","requestStartTime":1517988053926}}
{"body": {"column":51,"line":10,"wordToComplete":"attr>[a-z]+)(\\s*=\\s*\"\".\"\")?\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*\"\".\"\")?\";\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n            }\n        }\n    }\n}\n\n","offset":316,"fileType":"csharp","requestStartTime":1517988064878}}
{"body": {"column":42,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*\"\".*?\"\" )?\";\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                var ms2 = Regex.Matches(m., rgx_tag);\n            }\n        }\n    }\n}\n\n","offset":657,"fileType":"csharp","requestStartTime":1517988115111}}
{"body": {"column":99,"line":15,"wordToComplete":"dollars.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = (meal_cost / 100) * tip_percent;\n        double tax = (meal_cost / 100) * tax_percent;\n\n        Console.WriteLine(\"The total meal cost is \"+  Math.Round(meal_cost + tip + tax)+ \" dollars.\");\n    }\n}\n\n","offset":550,"fileType":"csharp","requestStartTime":1517988203435}}
{"body": {"column":33,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n       string strArray = Console.;\n            bool funcCmp = false;\n            string Result = CheckBalancedDelemeters(strArray);\n            Console.WriteLine(strArray);\n    }\n       public static string CheckBalancedDelemeters(string strArray)\n        {\n            string strCheck = string.Empty;\n            string temp = string.Empty;\n            if (strArray.Length % 2 != 0)\n            {\n                strCheck = \"False\";\n            }\n            char[] charArray = strArray.ToCharArray();\n            List<char> lstTemp = new List<char>();\n            for (int i = 0; i < charArray.Length; i++)\n            {\n                if (charArray[i].ToString() == \"(\" && charArray[i + 1].ToString() == \")\")\n                {\n                    i = i + 1;\n                }\n                else if (charArray[i].ToString() == \"{\" && charArray[i + 1].ToString() == \"}\")\n                {\n                    i = i + 1;\n                }\n                else if (charArray[i].ToString() == \"[\" && charArray[i + 1].ToString() == \"]\")\n                {\n                    i = i + 1;\n                }\n                else\n                {\n                    lstTemp.Add(charArray[i]);\n                }\n            }\n            if (lstTemp.Count == 0)\n            {\n                return strCheck = \"True\";\n            }\n            else\n            {\n                foreach (char c in lstTemp)\n                {\n                    temp += c.ToString();\n                }\n                if (strArray == temp)\n                {\n                    return strCheck = \"False\";\n                }\n                else\n                {\n                    return CheckBalancedDelemeters(temp);\n                }\n            }\n        }\n\n}\n\n","offset":274,"fileType":"csharp","requestStartTime":1517988340478}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(dict.)\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":714,"fileType":"csharp","requestStartTime":1517988413400}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(!dict.ContainsKey(m.Groups[\"tag\"]))\n                    dic.\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":769,"fileType":"csharp","requestStartTime":1517988440042}}
{"body": {"column":25,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(!dict.ContainsKey(m.Groups[\"tag\"]))\n                    dict.\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":770,"fileType":"csharp","requestStartTime":1517988442021}}
{"body": {"column":25,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(!dict.ContainsKey(m.Groups[\"tag\"]))\n                    dict.\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":770,"fileType":"csharp","requestStartTime":1517988446647}}
{"body": {"column":53,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(!dict.ContainsKey(m.Groups[\"tag\"].))\n                    dict.Add(m.Groups[\"tag\"], new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":743,"fileType":"csharp","requestStartTime":1517988484518}}
{"body": {"column":48,"line":27,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].\n                    \n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":993,"fileType":"csharp","requestStartTime":1517988528135}}
{"body": {"column":70,"line":27,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                Console.WriteLine(\n                              m.Groups[\"tag\"] + \" \" + m );\n                \n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].)\n                    \n                    Console.WriteLine(\n                                  m2.Groups[\"attr\"] + \" \" + m2 );\n                }\n            }\n        }\n    }\n}\n\n","offset":1015,"fileType":"csharp","requestStartTime":1517988536020}}
{"body": {"column":20,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict){\n            Console.\n        }\n    }\n}\n\n","offset":1015,"fileType":"csharp","requestStartTime":1517988638075}}
{"body": {"column":32,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict){\n            Console.WriteLine(d.\n        }\n    }\n}\n\n","offset":1027,"fileType":"csharp","requestStartTime":1517988654907}}
{"body": {"column":51,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict){\n            Console.WriteLine(d.Key + \":\" + string.\n        }\n    }\n}\n\n","offset":1046,"fileType":"csharp","requestStartTime":1517988666219}}
{"body": {"column":62,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict){\n            Console.WriteLine(d.Key + \":\" + string.Join(\",\",d.\n        }\n    }\n}\n\n","offset":1057,"fileType":"csharp","requestStartTime":1517988677838}}
{"body": {"column":30,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict.){\n            Console.WriteLine(d.Key + \":\" + string.Join(\",\",d.Value));\n        }\n    }\n}\n\n","offset":993,"fileType":"csharp","requestStartTime":1517988705344}}
{"body": {"column":35,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict.Keys.){\n            Console.WriteLine(d.Key + \":\" + string.Join(\",\",d.Value));\n        }\n    }\n}\n\n","offset":998,"fileType":"csharp","requestStartTime":1517988718176}}
{"body": {"column":32,"line":30,"wordToComplete":"Or","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict.Or){\n            Console.WriteLine(d.Key + \":\" + string.Join(\",\",d.Value));\n        }\n    }\n}\n\n","offset":1014,"fileType":"csharp","requestStartTime":1517988737903}}
{"body": {"column":44,"line":30,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var rgx_tag = @\"<(?<tag>[A-Za-z]+).*?>\";\n        var rgx_att = @\" (?<attr>[a-z]+)(\\s*=\\s*['\"\"].*?['\"\"])\";\n        \n        var dict = new Dictionary<string, HashSet<string>>();\n        \n        while(n-- > 0){\n            var aname = Console.ReadLine();\n            var ms = Regex.Matches(aname, rgx_tag);\n            \n            foreach(Match m in ms){\n                if(!dict.ContainsKey(m.Groups[\"tag\"].Value))\n                    dict.Add(m.Groups[\"tag\"].Value, new HashSet<string>());\n                \n                var ms2 = Regex.Matches(m.Value, rgx_att);\n                foreach(Match m2 in ms2){\n                    dict[m.Groups[\"tag\"].Value].Add(m2.Groups[\"attr\"].Value);\n                }\n            }\n        }\n        \n        foreach(var d in dict.OrderBy(d=> d.){\n            Console.WriteLine(d.Key + \":\" + string.Join(\",\",d.Value));\n        }\n    }\n}\n\n","offset":1026,"fileType":"csharp","requestStartTime":1517988748228}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=n-1;i>=0;i++){\n            Console.\n        }\n    }\n}\n\n\n","offset":248,"fileType":"csharp","requestStartTime":1517988768223}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int arry[]= Console.ReadLine();\n        for(int i=arry.;i>=0;i++){\n            Console.WriteLine(\n        }\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517988806479}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n=a.Length;\n        int resulta=0;\n        int resultb0;\n        int difference=0;\n        for (int i=0;i<n; i++){\n            for(int j=i;j<n;j++){\n                resulta+=a[i][j];\n                \n                \n            }\n        }\n        for (int i=n;i>0; i--){\n            for(int j=i;j.n;j++){\n                \n                resultb+=a[n-i][n-j];\n                \n            }\n        }\n        \n        difference=resulta-resultb;\n        return difference;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":496,"fileType":"csharp","requestStartTime":1517988945789}}
{"body": {"column":26,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n=a.Length;\n        int resulta=0;\n        int resultb0;\n        int difference=0;\n        for (int i=0;i<n; i++){\n            for(int j=i;j<n;j++){\n                resulta+=a[i][j];\n                \n                \n            }\n        }\n        for (int i=n;i>0; i--){\n            for(int j=i;j>n;j++){\n                \n                resultb+=a[n-i][n-j];\n                \n            }\n        }\n        \n        difference=resulta-resultb;\n        return difference;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":496,"fileType":"csharp","requestStartTime":1517988947158}}
{"body": {"column":25,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var lines = new List<string>();\n        while(n-- > 0){\n            lines.Add(Console.ReadLine());\n        }\n        \n        var txt = string.Join(\" \", lines);\n        \n        var q = int.Parse(Console.ReadLine());\n        \n        var rgx_t = \"(?<=\\\\w){0}(?=\\\\w)\";\n        while(q-- > 0){\n            var qe = Console.ReadLine();\n            var rgx = qe.;     \n            var m = Regex.Matches(txt, rgx);\n        \n            Console.WriteLine(m.Count);\n        }\n\n    }\n}\n\n","offset":582,"fileType":"csharp","requestStartTime":1517989153808}}
{"body": {"column":41,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.RegularExpressions;\nclass Solution {\n    static void Main(String[] args) {\n        var n = int.Parse(Console.ReadLine());\n        \n        var lines = new List<string>();\n        while(n-- > 0){\n            lines.Add(Console.ReadLine());\n        }\n        \n        var txt = string.Join(\" \", lines);\n        \n        var q = int.Parse(Console.ReadLine());\n        \n        var rgx_t = \"(?<=\\\\w){0}(?=\\\\w)\";\n        while(q-- > 0){\n            var qe = Console.ReadLine();\n            var rgx = qe.Substring(0, qe.;     \n            var m = Regex.Matches(txt, rgx);\n        \n            Console.WriteLine(m.Count);\n        }\n\n    }\n}\n\n","offset":598,"fileType":"csharp","requestStartTime":1517989163189}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(int[][] a) {\n        // Complete this function\n        int n=a.Length;\n        int resulta=0;\n        int resultb=0;\n        int difference=0;\n        for (int i=0;i<n; i++){\n                  resulta+=a[i][i];\n}\n           \n        for (int i=0;i<n; i++){\n                \n                resultb+=a[i][n-1-i];\n                \n            }\n        \n       difference=resulta-resultb;\n        return Math.Abs(difference);\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":545,"fileType":"csharp","requestStartTime":1517990368954}}
{"body": {"column":60,"line":24,"wordToComplete":"","code":"\nusing System;\n\nclass Solution\n{\n    private static int numRows = 8;\n    private static int numCols = 8;\n\n    static int waysToGiveACheck(char[][] board)\n    {\n        //find all pawns\n        return 0;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for (int a0 = 0; a0 < t; a0++)\n        {\n            char[][] board = new char[8][];\n            for (int board_i = 0; board_i < 8; board_i++)\n            {\n                string[] board_temp = Console.ReadLine().Split(' ');\n                \n                foreach(var ch in board_temp) Console.Error.WriteLine(ch);\n                \n                board[board_i] = Array.ConvertAll(board_temp, Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n","offset":617,"fileType":"csharp","requestStartTime":1517990533281}}
{"body": {"column":62,"line":22,"wordToComplete":"tocha","code":"\nusing System;\n\nclass Solution\n{\n    private static int numRows = 8;\n    private static int numCols = 8;\n\n    static int waysToGiveACheck(char[][] board)\n    {\n        //find all pawns\n        return 0;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for (int a0 = 0; a0 < t; a0++)\n        {\n            char[][] board = new char[8][];\n            for (int board_i = 0; board_i < 8; board_i++)\n            {\n                string[] board_temp = Console.ReadLine().tocha(' ');\n                \n                foreach(var ch in board_temp) Console.Error.WriteLine(ch);\n                \n                board[board_i] = Array.ConvertAll(board_temp, Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n","offset":533,"fileType":"csharp","requestStartTime":1517990629009}}
{"body": {"column":31,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(i = 0; i < board[].)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":222,"fileType":"csharp","requestStartTime":1517991413084}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(i = 0; i < board.)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":220,"fileType":"csharp","requestStartTime":1517991418098}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":224,"fileType":"csharp","requestStartTime":1517992325313}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":224,"fileType":"csharp","requestStartTime":1517992347286}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.Rows.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517992370189}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.Rows.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517992371618}}
{"body": {"column":37,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.Row.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":228,"fileType":"csharp","requestStartTime":1517992372774}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.Rows.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517992374684}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.Rows.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517992377853}}
{"body": {"column":33,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":224,"fileType":"csharp","requestStartTime":1517992386000}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int n = 0;\n        \n        for(int i = 0; i < board.Rows.; i++)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1517992388138}}
{"body": {"column":34,"line":27,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n        int pawnPosX = -1, pawnPosY = -1;\n        \n        for(int i = 0; i < 8; i++)\n        {\n            for(k = 0; k < 8; k++)\n            {\n                if(board[i, k] = 'P')\n                {\n                    pawnPosX = k;\n                    pawnPosY = i;\n                }\n            }\n        }\n        \n        \n        \n    }\n\n    static int[] findPiece(char[,.])\n    \n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":542,"fileType":"csharp","requestStartTime":1517992749297}}
{"body": {"column":35,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int intSeperated = Console.\n    }\n}\n\n","offset":276,"fileType":"csharp","requestStartTime":1517992841991}}
{"body": {"column":35,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int intSeperated = Convert.Console.ReadLine();\n        \n    }\n}\n\n","offset":276,"fileType":"csharp","requestStartTime":1517992851077}}
{"body": {"column":32,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        for(int i = 0 ; i < arr.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":224,"fileType":"csharp","requestStartTime":1517993523690}}
{"body": {"column":44,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        int[] sortedCopy = ar.OrderBy(i => i).ToArray();\n        int bigger =  sortedCopy[sortedCopy.]\n        for(int i = 0 ; i < arr.Length ; i++){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":293,"fileType":"csharp","requestStartTime":1517993610091}}
{"body": {"column":45,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        int[] sortedCopy = ar.OrderBy(i => i).ToArray();\n        int bigger =  sortedCopy[sortedCopy.Length-1];\n        for(int i = sortedCopy.Length-1 ; i > arr.Length ; i++){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":349,"fileType":"csharp","requestStartTime":1517993622747}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        console.\n        int[] pawnPosition = findPiece(board, 'P');\n        pawnPosition[0]--;\n        int[] kingPosition = findPiece(board, 'k');\n        \n        int availablePieces = 0;\n        \n        bool diagonal = ifDiagonal( pawnPosition, kingPosition);\n        \n        if(diagonal == true)\n        {\n            availablePieces += 2;\n        }\n        else if((kingPosition[0] == pawnPosition[0]) || (kingPosition[1] == pawnPosition[1]))\n        {\n            availablePieces += 2;\n        }\n        \n        return availablePieces;\n    }\n\n    static int[] findPiece(char[][] board, char piece)\n    {\n        int[]  position = new int[2];\n        \n        for(int i = 0; i < 8; i++)\n        {\n            for(int k = 0; k < 8; k++)\n            {\n                if(board[i][k] == piece)\n                {\n                    position[0] = i;\n                    position[1] = k;\n                }\n            }\n        }\n        \n        return position;\n    }\n    \n    static bool ifDiagonal(int[] pawn, int[] king)\n    {\n        bool ifDiagonal = false;\n        \n        for(int i = 1; i < 8; i++)\n        {\n            if(((pawn[0] + i) == king[0]) && ((pawn[1] + i) == king[1]))\n            {\n                ifDiagonal = true;\n            }\n            \n            if(((pawn[0] + i) == king[0]) && ((pawn[1] - i) == king[1]))\n            {\n                ifDiagonal = true;\n            }\n        }\n        \n        return ifDiagonal;\n    }\n    \n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":170,"fileType":"csharp","requestStartTime":1517993636347}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        int[] sortedCopy = ar.OrderBy(i => i).ToArray();\n        if(sortedCopy.Length>)\n        int bigger =  sortedCopy[sortedCopy.Length-1];\n        \n        for(int i = sortedCopy.Length-2 ; i >= 0 ; i--){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":278,"fileType":"csharp","requestStartTime":1517993670670}}
{"body": {"column":21,"line":70,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.)\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":1882,"fileType":"csharp","requestStartTime":1517994251298}}
{"body": {"column":37,"line":70,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.HasValue || res.)\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":1898,"fileType":"csharp","requestStartTime":1517994254775}}
{"body": {"column":32,"line":77,"wordToComplete":"GetMins","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.HasValue || res > max)\n            {\n                max = res;\n            }\n        }\n        \n        // Get global mins\n        var globalMins = GetMins\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":2038,"fileType":"csharp","requestStartTime":1517994273909}}
{"body": {"column":45,"line":77,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.HasValue || res > max)\n            {\n                max = res;\n            }\n        }\n        \n        // Get global mins\n        var globalMins = GetMins(arr, 0, arr.)\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":2051,"fileType":"csharp","requestStartTime":1517994279974}}
{"body": {"column":31,"line":78,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.HasValue || res > max)\n            {\n                max = res;\n            }\n        }\n        \n        // Get global mins\n        var globalMins = GetMins(arr, 0, arr.Length - 1);\n        var res = S(globalMins.)\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":2095,"fileType":"csharp","requestStartTime":1517994291885}}
{"body": {"column":50,"line":78,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.HasValue || res > max)\n            {\n                max = res;\n            }\n        }\n        \n        // Get global mins\n        var globalMins = GetMins(arr, 0, arr.Length - 1);\n        var res = S(globalMins.Item1, globalMins2.)\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":2114,"fileType":"csharp","requestStartTime":1517994296549}}
{"body": {"column":17,"line":80,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int AndXorOrSlow(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            for (var j = i + 1; j <= arr.Length - 1; j++)\n            {\n                var mins = GetMins(arr, i, j);\n                var res = S(mins.Item1, mins.Item2);\n                if (!max.HasValue || res > max)\n                {\n                    max = res;\n                }\n            }\n        }\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n       \n    // first item is smallest\n    // second item is second smallest\n    static Tuple<int, int> GetMins(int[] arr, int l, int r)\n    {\n        // l, r inclusive\n        int? min1 = null; // smallest\n        int? min2 = null; // 2nd smalles\n        \n        for (var i = l; i <= r; i++)\n        {\n            if (!min1.HasValue)\n            {\n                min1 = arr[i];\n            }\n            else if (arr[i] > min1 && (!min2.HasValue || arr[i] < min2))\n            {\n                min2 = arr[i];\n            }\n            else\n            {\n                // arr[i] is less than min1\n                min2 = min1;\n                min1 = arr[i];\n            }\n        }\n        \n        // Assume we iterate at least twice\n        return Tuple.Create<int, int>(min1.Value, min2.Value);\n    }\n    \n    static int S(int m1, int m2)\n    {\n        return (((m1 & m2) ^ (m1 | m2)) & (m1 ^ m2));\n    }\n    \n    static int AndXorOrFast(int[] arr)\n    {\n        int? max = null;\n        for (var i = 0; i <= arr.Length - 2; i++)\n        {\n            // Consecutive pairs\n            var pair1 = arr[i];\n            var pair2 = arr[i+1];\n            \n            var res = pair1 < pair2 ? S(pair1, pair2) : S(pair2, pair1);\n            if (!max.HasValue || res > max)\n            {\n                max = res;\n            }\n        }\n        \n        // Get global mins\n        var globalMins = GetMins(arr, 0, arr.Length - 1);\n        var res = S(globalMins.Item1, globalMins.Item2);\n        \n        if (res >)\n        \n        // Assume that we iterate at least once through i and j\n        return max.Value;\n    }\n        \n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        var numElements = int.Parse(System.Console.ReadLine());\n        var integersString = System.Console.ReadLine().Split(' ');\n        var integers = new int[numElements];\n        for (var i = 0; i < integersString.Length; i++)\n        {\n            integers[i] = int.Parse(integersString[i]);\n        }\n        \n        System.Console.WriteLine(AndXorOrSlow(integers));\n    }\n}\n\n","offset":2147,"fileType":"csharp","requestStartTime":1517994328341}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double result = meal_cost + (double)tip_percent + (double)tax_percent;\n        Console.\n    }\n}\n\n","offset":437,"fileType":"csharp","requestStartTime":1517994490603}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = meal_cost * ((double)tip_percent / 100);\n        double tax = meal_cost * ((double)tax_percent / 100);\n        double result = meal_cost + tip + tax;\n        Console.WriteLine(Math.result);\n    }\n}\n\n","offset":544,"fileType":"csharp","requestStartTime":1517994598408}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = meal_cost * ((double)tip_percent / 100);\n        double tax = meal_cost * ((double)tax_percent / 100);\n        double result = meal_cost + tip + tax;\n        Console.WriteLine(Math.result);\n    }\n}\n\n","offset":544,"fileType":"csharp","requestStartTime":1517994600863}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = meal_cost * ((double)tip_percent / 100);\n        double tax = meal_cost * ((double)tax_percent / 100);\n        double result = meal_cost + tip + tax;\n        Console.WriteLine(Math. result);\n    }\n}\n\n","offset":544,"fileType":"csharp","requestStartTime":1517994604806}}
{"body": {"column":85,"line":15,"wordToComplete":"dollars.\"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        double meal_cost = Convert.ToDouble(Console.ReadLine());\n        int tip_percent = Convert.ToInt32(Console.ReadLine());\n        int tax_percent = Convert.ToInt32(Console.ReadLine());\n        \n        double tip = meal_cost * ((double)tip_percent / 100);\n        double tax = meal_cost * ((double)tax_percent / 100);\n        double result = meal_cost + tip + tax;\n        Console.WriteLine(\"The total meal cost is \" + Math.Round(result) + \" dollars.\");\n    }\n}\n\n","offset":598,"fileType":"csharp","requestStartTime":1517994668628}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) \n    {\n        var list = new List<string>;\n        int N = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < N; a0++)\n        {\n            string[] tokens_firstName = Console.ReadLine().Split(' ');\n            string firstName = tokens_firstName[0];\n            string emailID = tokens_firstName[1];\n            \n            if (emailID.Contains(\"gmail\"))\n            {\n                list.Add(firstName)\n            }\n        }\n        \n        list = list.OrderBy();\n        foreach (string item in list)\n        {\n            Console.\n        }\n    }\n}\n\n\n","offset":696,"fileType":"csharp","requestStartTime":1517994755807}}
{"body": {"column":29,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] sortedArray = BubbleSort(a);\n    }\n    \n    private static BubbleSort(int[] array)\n    {\n        for(int i=0; i<array.)\n    }\n}\n\n\n","offset":449,"fileType":"csharp","requestStartTime":1517995085656}}
{"body": {"column":33,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] sortedArray = BubbleSort(a);\n    }\n    \n    private static BubbleSort(int[] array)\n    {\n        for(int i=0; i<array.Length; array++)\n        {\n            for(int j=0; j<array.)\n        }\n    }\n}\n\n\n","offset":509,"fileType":"csharp","requestStartTime":1517995114599}}
{"body": {"column":29,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] sortedArray = BubbleSort(a);\n    }\n    \n    private static BubbleSort(int[] array)\n    {\n        for(int i=0; i<array.Length; i++)\n        {\n            for(int j=i+1; j<array.Length; j++)\n            {\n                if(array[i] >)\n            }\n        }\n    }\n}\n\n\n","offset":563,"fileType":"csharp","requestStartTime":1517995155542}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] sortedArray = BubbleSort(a);\n        console.\n    }\n    \n    private static int[] BubbleSort(int[] array)\n    {\n        int temp;\n        \n        for(int i=0; i<array.Length; i++)\n        {\n            for(int j=i+1; j<array.Length; j++)\n            {\n                if(array[i] > array[j])\n                {\n                    temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n            }\n        }\n        return array;\n    }\n}\n\n\n","offset":376,"fileType":"csharp","requestStartTime":1517995303398}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":249,"fileType":"csharp","requestStartTime":1517995661355}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":281,"fileType":"csharp","requestStartTime":1517995670491}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":289,"fileType":"csharp","requestStartTime":1517995676891}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr));\n        }\n        return result.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":334,"fileType":"csharp","requestStartTime":1517995686299}}
{"body": {"column":32,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr));\n        }\n        return result.OrderBy().\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517995692292}}
{"body": {"column":41,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr));\n        }\n        return result.OrderBy().Select().\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":353,"fileType":"csharp","requestStartTime":1517995696916}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>).Select().ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":348,"fileType":"csharp","requestStartTime":1517995723556}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k.).Select().ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":350,"fileType":"csharp","requestStartTime":1517995723995}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k.).Select().ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":350,"fileType":"csharp","requestStartTime":1517995724263}}
{"body": {"column":55,"line":40,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int[] sortedArray = BubbleSort(a);\n        for (int k=0; k < sortedArray.Length;k++ )\n        {\n             Console.WriteLine(array[k]);\n        }\n    }\n    \n    private static int[] BubbleSort(int[] array)\n    {\n        int temp;\n        int swapCount = 0;\n        \n        for(int i=0; i<array.Length; i++)\n        {\n            for(int j=i+1; j<array.Length; j++)\n            {\n                if(array[i] > array[j])\n                {\n                    temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                    swapCount++;\n                }\n            }\n        }\n\n        Console.WriteLine(\"Array is sorted in \"+ swapCount +\" swaps.);\n        Console.WriteLine(\"First Element: \"+ array[0] +\" swaps.);\n        Console.WriteLine(\"Last Element:\"+ array[array.+\" swaps.);\n    }\n}\n\n\n","offset":1148,"fileType":"csharp","requestStartTime":1517995733298}}
{"body": {"column":37,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k)..ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":352,"fileType":"csharp","requestStartTime":1517995739555}}
{"body": {"column":45,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k).Select(k.)ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":360,"fileType":"csharp","requestStartTime":1517995746419}}
{"body": {"column":48,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k).Select(m=>m.)ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":363,"fileType":"csharp","requestStartTime":1517995748843}}
{"body": {"column":48,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k).Select(m=>m.)ToString();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":363,"fileType":"csharp","requestStartTime":1517995749119}}
{"body": {"column":60,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k).Select(m=>m.ToString()).;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":375,"fileType":"csharp","requestStartTime":1517995754083}}
{"body": {"column":60,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        var result = new List<int>();\n        for(var i=0;i<arr.Length;i++){\n            result.Add(int.Parse(arr[i]));\n        }\n        return result.OrderBy(k=>k).Select(m=>m.ToString()).;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":375,"fileType":"csharp","requestStartTime":1517995757732}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\nclass MyQueue<T>\n{\n    private Stack<T> stackA;\n    private Stack<T> stackB;\n    \n    public MyQueue<T>(){\n        stackA=new \n    }\n    \n}\n\n","offset":376,"fileType":"csharp","requestStartTime":1517995873020}}
{"body": {"column":23,"line":18,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getOneBits(int n) {\n        var result = new List<int>();\n        result[0] = 0;\n        for(int i=0; i < sizeof(n) * 8; i++)\n        {\n            if(n & (1 << i) != 0)\n            {\n                result[0]++;\n                result.i;\n            }\n        }\n        return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        res = getOneBits(n);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":408,"fileType":"csharp","requestStartTime":1517996002697}}
{"body": {"column":22,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getOneBits(int n) {\n        var result = new List<int>();\n        result[0] = 0;\n        for(int i=0; i < sizeof(n) * 8; i++)\n        {\n            if(n & (1 << i) != 0)\n            {\n                result[0]++;\n                result.Add(i);\n            }\n        }\n        return result.;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        res = getOneBits(n);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":462,"fileType":"csharp","requestStartTime":1517996008774}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        return arr..OrderBy(k=>k).Select(m=>m.ToString()).ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":205,"fileType":"csharp","requestStartTime":1517996009643}}
{"body": {"column":36,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string[] bigSorting(string[] arr) {\n        // Complete this function\n        return arr.OrderBy(k=>k[0])..Select(m=>m.ToString()).ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Console.ReadLine();   \n        }\n        string[] result = bigSorting(arr);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":221,"fileType":"csharp","requestStartTime":1517996018940}}
{"body": {"column":36,"line":39,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static int waysToGiveACheck(char[][] board)\n    {\n        int pawnRow = -1;\n        int pawnCol = -1;\n\n        for (int x = 0; x < board.Length; x++)\n        {\n            if (board[1][x] == 'P' && board[0][x] == '#')\n            {\n                pawnRow = 0;\n                pawnCol = x;\n                break;\n            }\n        }\n\n        //Knight\n        if (pawnRow + 1 < board.Length && pawnCol - 2 > 0 && board[pawnRow + 1][pawnCol - 2] == 'k') return 1;\n        if (pawnRow + 1 < board.Length && pawnCol + 2 < board.Length && board[pawnRow + 1][pawnCol + 2] == 'k') return 1;\n        if (pawnRow + 2 < board.Length && pawnCol - 1 > 0 && board[pawnRow + 2][pawnCol - 1] == 'k') return 1;\n        if (pawnRow + 2 < board.Length && pawnCol + 1 < board.Length && board[pawnRow + 2][pawnCol + 1] == 'k') return 1;\n\n        bool rObstacle = false;\n        bool lObstacle = false;\n        bool uObstacle = false;\n        bool dObstacle = false;\n        \n        for (int x = 1; x < board.Length; x++)\n        {\n            if (pawnCol + x < board.Length)\n            {\n                \n            }\n            \n            if (pawnRow + x < board.Length)\n            \n            if (board[pawnRow][x] == 'k' || board[x][pawnCol] == 'k')\n            {\n                return 2;\n            }\n        }\n\n        //Diagonal\n        for (int x = 1; x < board.Length; x++)\n        {\n            if (pawnRow + x < board.Length)\n            {\n                if ((pawnCol - x > 0 && board[pawnRow + x][pawnCol - x] == 'k') ||\n                    (pawnCol + x < board.Length && board[pawnRow + x][pawnCol + x] == 'k'))\n                {\n                    return 2;\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        \n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            \n            for(int row = 0; row < 8; row++){\n               string line = Console.ReadLine();\n                \n               board[row] = new char[8];\n                \n               for (int column = 0; column < 8; column++)\n               {\n                   board[row][column] = line[column];\n               }               \n            }\n            \n            Console.WriteLine(waysToGiveACheck(board));\n        }\n    }\n}\n\n\n","offset":1261,"fileType":"csharp","requestStartTime":1517996052850}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int[] getOneBits(int n) {\n        var result = new List<int>();\n        result.0;\n        for(int i=0; i < sizeof(int) * 8; i++)\n        {\n            if((n & (1 << i)) != 0)\n            {\n                result[0]++;\n                result.Add(i);\n            }\n        }\n        return result.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int[] res;\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        res = getOneBits(n);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":245,"fileType":"csharp","requestStartTime":1517996101600}}
{"body": {"column":24,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.  \n    }\n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        \n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":150,"fileType":"csharp","requestStartTime":1517996385241}}
{"body": {"column":40,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.);  \n    }\n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        \n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":166,"fileType":"csharp","requestStartTime":1517996398913}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        bool[] cities = new bool[n];\n        cities=cities.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517996416729}}
{"body": {"column":34,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        bool[] cities = new bool[n];\n        cities=cities.Select(x=>c.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":264,"fileType":"csharp","requestStartTime":1517996429624}}
{"body": {"column":51,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        bool[] cities = new bool[n];\n        cities=cities.Select((x,1)=>c.Contains(i)).\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":281,"fileType":"csharp","requestStartTime":1517996468680}}
{"body": {"column":35,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.\n        }\n    }\n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":255,"fileType":"csharp","requestStartTime":1517996571229}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.\n        }\n    }\n    \n    \n    static \n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":305,"fileType":"csharp","requestStartTime":1517996620047}}
{"body": {"column":40,"line":11,"wordToComplete":"Sp","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Sp\n        }\n    }\n    \n    \n    static \n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":307,"fileType":"csharp","requestStartTime":1517996621348}}
{"body": {"column":41,"line":11,"wordToComplete":"Spl","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Spl\n        }\n    }\n    \n    \n    static \n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":308,"fileType":"csharp","requestStartTime":1517996624825}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int=0;i<n;i++){\n            dist.\n        }\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":280,"fileType":"csharp","requestStartTime":1517996655664}}
{"body": {"column":23,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            if(comArgs.)\n        }\n    }\n    \n    \n    static \n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":340,"fileType":"csharp","requestStartTime":1517996658584}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int=0;i<n;i++){\n            dist.Add(c.)\n        }\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":286,"fileType":"csharp","requestStartTime":1517996666128}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            if(comArgs.Length==1)\n            {\n                \n            }\n            else if(comArgs.)\n        }\n    }\n    \n    \n    static \n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":424,"fileType":"csharp","requestStartTime":1517996681310}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int=0;i<n;i++){\n            dist.Add(c.Select(x=>Math.))\n        }\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":301,"fileType":"csharp","requestStartTime":1517996686240}}
{"body": {"column":48,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int i=0;i<n;i++){\n            dist.Add(c.Select(x=>Math.Abs(x-i)).)\n        }\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":313,"fileType":"csharp","requestStartTime":1517996725049}}
{"body": {"column":33,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=Convert.\n            if(comArgs.Length==1)\n            {\n                \n            }\n            else if(comArgs.Length==2)\n            {\n                \n            }\n        }\n    }\n    \n    \n    static \n}\n\nclass MyCustomQueue<T>{\n\n    enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    }\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":350,"fileType":"csharp","requestStartTime":1517996730039}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int i=0;i<n;i++){\n            dist.Add(c.Select(x=>Math.Abs(x-i)).Min());\n        }\n        \n        return dist.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":360,"fileType":"csharp","requestStartTime":1517996768017}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                Console.\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":454,"fileType":"csharp","requestStartTime":1517996921852}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op.)\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":452,"fileType":"csharp","requestStartTime":1517996949859}}
{"body": {"column":33,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.)\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":463,"fileType":"csharp","requestStartTime":1517996977748}}
{"body": {"column":12,"line":7,"wordToComplete":"MyCu","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCu\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    \n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":138,"fileType":"csharp","requestStartTime":1517997003975}}
{"body": {"column":37,"line":7,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new \n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    \n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":163,"fileType":"csharp","requestStartTime":1517997014379}}
{"body": {"column":31,"line":18,"wordToComplete":"qu","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    int head=qu\n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":577,"fileType":"csharp","requestStartTime":1517997055959}}
{"body": {"column":35,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    int head=queue.\n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":581,"fileType":"csharp","requestStartTime":1517997057034}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    Console.int head=queue.Peek();\n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":574,"fileType":"csharp","requestStartTime":1517997069577}}
{"body": {"column":34,"line":18,"wordToComplete":"WriteLint","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    Console.WriteLint head=queue.Peek();\n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":580,"fileType":"csharp","requestStartTime":1517997073563}}
{"body": {"column":51,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                if(op==Operation.PEEK)\n                {\n                    Console.WriteLine(queue.Peek().);\n                }\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":597,"fileType":"csharp","requestStartTime":1517997081788}}
{"body": {"column":18,"line":16,"wordToComplete":"sw","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                sw\n                if(op==Operation.PEEK)\n                {\n                    Console.WriteLine(queue.Peek().ToString());\n                }\n                else\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":507,"fileType":"csharp","requestStartTime":1517997093986}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {\n                switch op:\n                if(op==Operation.PEEK)\n                {\n                    Console.WriteLine(queue.Peek().ToString());\n                }\n                else\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":515,"fileType":"csharp","requestStartTime":1517997100387}}
{"body": {"column":38,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {                \n                if(op==Operation.PEEK)\n                {\n                    Console.WriteLine(queue.Peek().ToString());\n                }\n                else if(op==Operation.)\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":682,"fileType":"csharp","requestStartTime":1517997122418}}
{"body": {"column":38,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n            if(comArgs.Length==0)\n            {                \n                if(op==Operation.PEEK)\n                {\n                    Console.WriteLine(queue.Peek().ToString());\n                }\n                else if(op==Operation.)\n            }\n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":682,"fileType":"csharp","requestStartTime":1517997125927}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.\n            }\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":649,"fileType":"csharp","requestStartTime":1517997160123}}
{"body": {"column":37,"line":19,"wordToComplete":"que","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.WriteLine(que\n            }\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":662,"fileType":"csharp","requestStartTime":1517997169744}}
{"body": {"column":40,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.WriteLine(queue.\n            }\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":665,"fileType":"csharp","requestStartTime":1517997170866}}
{"body": {"column":50,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.WriteLine(queue.Dequeue().\n            }\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":675,"fileType":"csharp","requestStartTime":1517997174586}}
{"body": {"column":34,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.WriteLine(queue.Dequeue().ToString());\n            }\n            else if(op==Operation.)\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":736,"fileType":"csharp","requestStartTime":1517997189281}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.WriteLine(queue.Dequeue().ToString());\n            }\n            else if(op==Operation.ENQUEUE){\n                queue. comArgs[1]\n            }\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":768,"fileType":"csharp","requestStartTime":1517997235082}}
{"body": {"column":38,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args)\n    {\n        MyCustomQueue<int> queue=new MyCustomQueue<int>();\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i=0; i<n; i++)\n        {\n            string command=Console.ReadLine();\n            string[] comArgs=commands.Split(' ');\n            Operation op=(Operation)Convert.ToInt32(comArgs[0]);\n                            \n            if(op==Operation.PEEK){\n                 Console.WriteLine(queue.Peek().ToString());\n            }\n            else if(op==Operation.DEQUEUE){\n                Console.WriteLine(queue.Dequeue().ToString());\n            }\n            else if(op==Operation.ENQUEUE){\n                queue.Enqueue(Convert. comArgs[1]);\n            }\n            \n            \n        }\n    }\n    \n    \n    static enum Operation{\n        ENQUEUE=1,\n        DEQUEUE=2,\n        PEEK=3\n    } \n}\n\nclass MyCustomQueue<T>{\n    \n    private Stack<T> stackA;\n    private Stack<T> stackB;\n       \n    public MyCustomQueue()\n    {\n        stackA=new Stack<T>();\n        stackB=new Stack<T>();\n    }\n    \n    public void Enqueue(T element)\n    {\n    \n    }\n    \n    public T Dequeue()\n    {\n        return default(T);\n    }\n    \n    public T Peek()\n    {\n        return default(T);\n    }\n    \n}\n\n","offset":784,"fileType":"csharp","requestStartTime":1517997246497}}
{"body": {"column":36,"line":11,"wordToComplete":"returnValue","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        int returnValue = 0;\n        foreach (int i in ar)\n        {\n            yield return returnValue + i;\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":258,"fileType":"csharp","requestStartTime":1517997396175}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int i=0;i<n;i++){\n            \n            dist.Add(Math.(c.Aggregate((x,y) => Math.Abs(x-i) < Math.Abs(y-i) ? x : y));\n        }\n        \n        return dist.Max();\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":304,"fileType":"csharp","requestStartTime":1517997415603}}
{"body": {"column":21,"line":13,"wordToComplete":"return","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        int returnValue = 0;\n        for (int i = 0; i < n; i++)\n        {\n            returnValue + ar[i];\n        }\n        return return\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":292,"fileType":"csharp","requestStartTime":1517997497987}}
{"body": {"column":22,"line":13,"wordToComplete":"returnV","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        int returnValue = 0;\n        for (int i = 0; i < n; i++)\n        {\n            returnValue + ar[i];\n        }\n        return returnV\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":293,"fileType":"csharp","requestStartTime":1517997499938}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":208,"fileType":"csharp","requestStartTime":1517997808288}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        acid_name = acid_name.\n        if(acid_name.StartsWith(\"hydro\")\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1517997844031}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        acid_name = acid_name.\n        if(acid_name.StartsWith(\"hydro\")\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1517997846703}}
{"body": {"column":54,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        acid_name = acid_name.ToLower();\n        if(acid_name.StartsWith(\"hydro\") && acid_name.){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":282,"fileType":"csharp","requestStartTime":1517997877407}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int i=0;i<n;i++){\n            foreach(var s in c){\n                var temp = Math.\n            }\n        }\n        \n        return dist.Max();\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1517997882021}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        // Complete this function\n        acid_name = acid_name.ToLower();\n        if(acid_name.StartsWith(\"hydro\") && acid_name.EndsWith(\"ic\")){\n            return \"non-metal acid\";\n        }\n        else if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":372,"fileType":"csharp","requestStartTime":1517997918223}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        // Complete this function\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":204,"fileType":"csharp","requestStartTime":1517997937477}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static string formatAsCustomString(DateTime date, int number) {\n\n        return date.\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        DateTime _date;\n        _date = Convert.ToDateTime(Console.ReadLine());\n        \n        int _number;\n        _number = Convert.ToInt32(Console.ReadLine());\n        \n        res = formatAsCustomString(_date, _number);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":196,"fileType":"csharp","requestStartTime":1517997825308}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int i=0;i<n;i++){\n            int iDis=-1;\n            foreach(var s in c){\n                var temp = Math.Abs(s-i);\n                if(iDis==-1 || temp<iDis){\n                    iDis=temp;\n                }\n            }\n            dist.\n        }\n        \n        return dist.Max();\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":488,"fileType":"csharp","requestStartTime":1517998049374}}
{"body": {"column":64,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\n\npublic class Solution {\n    public static void Main(string[] args) { new Compete.Week36.().Solve(Console.In, Console.Out); }\n}\n\n\npublic interface IProblem {\n    void Solve(TextReader input, TextWriter output);\n}\n\n\npublic static class Utils {\n    // Input.\n    private static TextReader ReadValue<T>(this TextReader self, Func<string, T> parser, Action<T> action) {\n        var rv = parser(self.ReadLine());\n        action(rv);\n        return self;\n    }\n\n    private static TextReader ReadValues<T>(this TextReader self, Func<string, T> parser, params Action<T>[] actions) {\n        var n = actions.Length;\n        var strs = self.ReadLine().Split(' ');\n        for (var i = 0; i < n; i++) {\n            var rv = parser(strs[i]);\n            actions[i](rv);\n        }\n        return self;\n    }\n\n    private static TextReader ReadArray<T>(this TextReader self, Func<string, T> parser, int n, Action<T[]> action) {\n        var strs = self.ReadLine().Split(' ');\n        var rv = Make1<T>(n);\n        for (var i = 0; i < n; i++)\n            rv[i] = parser(strs[i]);\n        action(rv);\n        return self;\n    }\n\n    private static TextReader ReadMatrix<T>(this TextReader self, Func<string, T> parser, int n, int m, Action<T[][]> action) {\n        var rv = Make2<T>(n, m);\n        for (var i = 0; i < n; i++) {\n            var strs = self.ReadLine().Split(' ');\n            for (var j = 0; j < m; j++)\n                rv[i][j] = parser(strs[j]);\n        }\n        action(rv);\n        return self;\n    }\n\n    private static TextReader ReadMatrixT<T>(this TextReader self, Func<string, T> parser, int n, int m, Action<T[][]> action) {\n        var rv = Make2<T>(m, n);\n        for (var i = 0; i < n; i++) {\n            var strs = self.ReadLine().Split(' ');\n            for (var j = 0; j < m; j++)\n                rv[j][i] = parser(strs[j]);\n        }\n        action(rv);\n        return self;\n    }\n\n\n    public static TextReader String(this TextReader self, Action<string> action) => self.ReadValue(x => x, action);\n    public static TextReader Int(this TextReader self, Action<int> action) => self.ReadValue(Int32.Parse, action);\n    public static TextReader Long(this TextReader self, Action<long> action) => self.ReadValue(Int64.Parse, action);\n\n    public static TextReader Strings(this TextReader self, params Action<string>[] actions) => self.ReadValues(x => x, actions);\n    public static TextReader Ints(this TextReader self, params Action<int>[] actions) => self.ReadValues(Int32.Parse, actions);\n    public static TextReader Longs(this TextReader self, params Action<long>[] actions) => self.ReadValues(Int64.Parse, actions);\n\n    public static TextReader StringArray(this TextReader self, int n, Action<string[]> action) => self.ReadArray(x => x, n, action);\n    public static TextReader IntArray(this TextReader self, int n, Action<int[]> action) => self.ReadArray(Int32.Parse, n, action);\n    public static TextReader LongArray(this TextReader self, int n, Action<long[]> action) => self.ReadArray(Int64.Parse, n, action);\n\n    public static TextReader StringMatrix(this TextReader self, int n, int m, Action<string[][]> action) => self.ReadMatrix(x => x, n, m, action);\n    public static TextReader IntMatrix(this TextReader self, int n, int m, Action<int[][]> action) => self.ReadMatrix(Int32.Parse, n, m, action);\n    public static TextReader LongMatrix(this TextReader self, int n, int m, Action<long[][]> action) => self.ReadMatrix(Int64.Parse, n, m, action);\n\n    public static TextReader StringMatrixT(this TextReader self, int n, int m, Action<string[][]> action) => self.ReadMatrixT(x => x, n, m, action);\n    public static TextReader IntMatrixT(this TextReader self, int n, int m, Action<int[][]> action) => self.ReadMatrixT(Int32.Parse, n, m, action);\n    public static TextReader LongMatrixT(this TextReader self, int n, int m, Action<long[][]> action) => self.ReadMatrixT(Int64.Parse, n, m, action);\n\n\n    // Output.\n    public static TextWriter Result(this TextWriter self, object x) {\n        self.WriteLine(x);\n        return self;\n    }\n\n\n    // Array.\n    public static T[] Make1<T>(int n) {\n        var rv = new T[n];\n        return rv;\n    }\n\n    public static T[][] Make2<T>(int n, int m) {\n        var rv = new T[n][];\n        for (var i = 0; i < n; i++)\n            rv[i] = new T[m];\n        return rv;\n    }\n}\n\n\nnamespace Compete.Week36 {\n    // ways-to-give-a-check; medium; 30\n    // #3 #compete\n    public class WaysToGiveACheck : IProblem {\n        public void Solve(TextReader input, TextWriter output) {\n            int t = 0;\n            input.Int(x => t = x);\n\n            for (var ti = 0; ti < t; ti++) {\n                // INPUT\n                string[] lines = null;\n                input.StringMatrixT(8, 1, x => lines = x[0]);\n\n                // SOLUTION\n                var board = Board.Parse(lines);\n                var pBK = board.Find(Cell.BK);\n\n                var rv = 0;\n                for (var column = 1; column <= 8; column++) {\n                    var pWP = (7, column);\n                    var pW = (8, column);\n\n                    if (board[pWP] == Cell.WP && board[pW] == Cell.E) {\n                        board[pWP] = Cell.E;\n\n                        var moves = (NMoves(board, pW))\n                            .Concat(BMoves(board, pW))\n                            .Concat(RMoves(board, pW))\n                            .Concat(QMoves(board, pW));\n                        rv += moves.Count(p => IsEqual(p, pBK));\n                    }\n                }\n\n                // OUTPUT\n                output.Result(rv);\n            }\n        }\n\n\n        private static IEnumerable<(int row, int column)> Positions() {\n            for (var row = 1; row <= 8; row++)\n                for (var column = 1; column <= 8; column++)\n                    yield return (row, column);\n        }\n\n        private static bool IsValid((int row, int column) position) =>\n            1 <= position.row && position.row <= 8 &&\n            1 <= position.column && position.column <= 8;\n\n        private static bool IsEqual((int row, int column) a, (int row, int column) b) =>\n            a.row == b.row && a.column == b.column;\n\n\n        private IEnumerable<(int row, int column)> NMoves(Board board, (int row, int column) from) {\n            var ds = new(int row, int column)[] {\n                (+2, -1), (+2, +1), (+1, -2), (+1, +2),\n                (-2, -1), (-2, +1), (-1, -2), (-1, +2)\n            };\n            foreach (var d in ds) {\n                var to = (from.row + d.row, from.column + d.column);\n                if (IsValid(to))\n                    yield return to;\n            }\n        }\n\n        private static (int row, int column)[] dB = new(int row, int column)[] { (+1, +1), (+1, -1), (-1, +1), (-1, -1) };\n        private static (int row, int column)[] dR = new(int row, int column)[] { (+1, 0), (-1, 0), (0, +1), (0, -1) };\n\n        private IEnumerable<(int row, int column)> Line(Board board, (int row, int column) from, (int row, int column) d) {\n            for (var m = 1; m <= 8; m++) {\n                var to = (from.row + d.row * m, from.column + d.column * m);\n                if (!IsValid(to)) break;\n                yield return to;\n                if (board[to] != Cell.E) break;\n            }\n        }\n\n        private IEnumerable<(int row, int column)> BMoves(Board board, (int row, int column) from) =>\n            dB.SelectMany(d => Line(board, from, d));\n\n        private IEnumerable<(int row, int column)> RMoves(Board board, (int row, int column) from) =>\n            dR.SelectMany(d => Line(board, from, d));\n\n        private IEnumerable<(int row, int column)> QMoves(Board board, (int row, int column) from) =>\n            (dB).Concat(dR).SelectMany(d => Line(board, from, d));\n\n\n        private enum Cell {\n            E,\n            WK, WQ, WN, WB, WR, WP,\n            BK, BQ, BN, BB, BR, BP\n        }\n\n        private class Board {\n            private readonly Cell[][] _b = Utils.Make2<Cell>(8, 8);\n\n            public Cell this[(int row, int column) position] {\n                get => _b[position.row - 1][position.column - 1];\n                set => _b[position.row - 1][position.column - 1] = value;\n            }\n\n            public (int row, int column) Find(Cell piece) =>\n                Positions().First(p => this[p] == piece);\n\n            public static Board Parse(string[] lines) {\n                var board = new Board();\n                foreach (var position in Positions()) {\n                    var p = Cell.E;\n                    switch (lines[8 - position.row][position.column - 1]) {\n                        case 'K': p = Cell.WK; break;\n                        case 'Q': p = Cell.WQ; break;\n                        case 'N': p = Cell.WN; break;\n                        case 'B': p = Cell.WB; break;\n                        case 'R': p = Cell.WR; break;\n                        case 'P': p = Cell.WP; break;\n\n                        case 'k': p = Cell.BK; break;\n                        case 'q': p = Cell.BQ; break;\n                        case 'n': p = Cell.BN; break;\n                        case 'b': p = Cell.BB; break;\n                        case 'r': p = Cell.BR; break;\n                        case 'p': p = Cell.BP; break;\n                    }\n                    board[position] = p;\n                }\n                return board;\n            }\n        }\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1517998169382}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        List<int> dist = new List<int>();\n        for(int i=0;i<c.;i++){\n            int iDis=-1;\n            foreach(var s in c){\n                var temp = Math.Abs(s-i);\n                if(iDis==-1 || temp<iDis){\n                    iDis=temp;\n                }\n            }\n            dist.Add(iDis);\n        }\n        \n        return dist.Max();\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":259,"fileType":"csharp","requestStartTime":1517998240942}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        int max=0;\n        c=c.\n        for(int i=0;i<c.Length-1;i++){\n            int temp= (c[i+1]-c[i])/2;\n            \n            if(max<temp){\n                max=temp;\n            }\n        }\n        \n        return max;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":224,"fileType":"csharp","requestStartTime":1517998486046}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        int max=0;\n        c=c.OrderBy(x=>x).;\n        for(int i=0;i<c.Length-1;i++){\n            int temp= (c[i+1]-c[i])/2;\n            \n            if(max<temp){\n                max=temp;\n            }\n        }\n        \n        return max;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1517998504262}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\n\nclass Person {\n    public int age;     \n\tpublic Person(int initialAge) {\n        if(age < 0)\n        {\n            Console.\n        }\n     }\n     public void amIOld() {\n        // Do some computations in here and print out the correct statement to the console \n     }\n\n     public void yearPasses() {\n        // Increment the age of the person in here\n     }\nstatic void Main(String[] args) {\n        int T=int.Parse(Console.In.ReadLine());\n        for (int i = 0; i < T; i++) {\n            int age=int.Parse(Console.In.ReadLine());\n            Person p=new Person(age);\n             p.amIOld();\n                for (int j = 0; j < 3; j++) {\n                  p.yearPasses();\n                }\n                p.amIOld();\n                Console.WriteLine();\n        }\n    }\n}\n\n","offset":191,"fileType":"csharp","requestStartTime":1517998584560}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        int i = Convert.\n        double dd = Convert.ToDouble(Console.ReadLine());\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":381,"fileType":"csharp","requestStartTime":1517998672032}}
{"body": {"column":40,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        \n        // Read and save an integer, double, and String to your variables.\n        int i = Convert.ToInt32(Console.\n        double dd = Convert.ToDouble(Console.ReadLine());\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":397,"fileType":"csharp","requestStartTime":1517998680806}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int flatlandSpaceStations(int n, int[] c) {\n        // Complete this function\n        int max=0;\n        c=c.OrderBy(x=>x).ToArray();\n        for(int i=0;i<c.Length-1;i++){\n            int temp= (c[i+1]-c[i])/2;\n            \n            if(max<temp){\n                max=temp;\n            }\n        }\n        if(c[0]/2>max){\n            max=c[0]/2;\n        }\n        if((n-c.)/2>max){\n            max=(n-c[n-1]-1)/2;\n        }\n        \n        return max;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = flatlandSpaceStations(n, c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":490,"fileType":"csharp","requestStartTime":1517998740657}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        door.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":206,"fileType":"csharp","requestStartTime":1517998782781}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        doors.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517998784477}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        doors.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1517998795390}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        \n        max[1] = doors.\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":295,"fileType":"csharp","requestStartTime":1517998905709}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        \n        max[1] = doors.\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":295,"fileType":"csharp","requestStartTime":1517998918061}}
{"body": {"column":32,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        \n        max[1] = doors.ToList().\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":304,"fileType":"csharp","requestStartTime":1517998924029}}
{"body": {"column":43,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        \n        max[1] = doors.ToList().FindAll(s=>\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":315,"fileType":"csharp","requestStartTime":1517998928205}}
{"body": {"column":45,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        \n        max[1] = doors.ToList().FindAll(s=>s.\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":317,"fileType":"csharp","requestStartTime":1517998928589}}
{"body": {"column":50,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        \n        max[1] = doors.ToList().FindAll(s=>s = 1).\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":322,"fileType":"csharp","requestStartTime":1517998937869}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        for(int i = 0; i<doors.)\n        \n        \n        max[1] = doors.ToList().FindAll(s=>s == 1).Count();\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":294,"fileType":"csharp","requestStartTime":1517998977452}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string hackerrankInString(string s) {\n        // Complete this function\n        string test = \"hackerrank\";\n        \n        if(s.)\n        \n        \n        \n        return found?\"YES\":\"NO\";\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            string result = hackerrankInString(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1517999111978}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string hackerrankInString(string s) {\n        // Complete this function\n        string test = \"hackerrank\";\n        \n        if(s.Length < test.)\n        \n        \n        \n        return found?\"YES\":\"NO\";\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            string result = hackerrankInString(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":259,"fileType":"csharp","requestStartTime":1517999119391}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string hackerrankInString(string s) {\n        // Complete this function\n        string test = \"hackerrank\";\n        \n        if(s.Length < test.Length)\n        {\n            return \"NO\";\n        }\n        \n        int j = 0;\n        for(int i = 0; i<s.)\n        \n        \n        \n        return found?\"YES\":\"NO\";\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            string result = hackerrankInString(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":367,"fileType":"csharp","requestStartTime":1517999138215}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string hackerrankInString(string s) {\n        // Complete this function\n        string test = \"hackerrank\";\n        \n        if(s.Length < test.Length)\n        {\n            return \"NO\";\n        }\n        \n        int j = 0;\n        for(int i = 0; i<s.Length;i++)\n        {\n            if(j < test.)\n        }\n        \n        \n        \n        return found?\"YES\":\"NO\";\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            string result = hackerrankInString(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":413,"fileType":"csharp","requestStartTime":1517999153887}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string hackerrankInString(string s) {\n        // Complete this function\n        string test = \"hackerrank\";\n        \n        if(s.Length < test.Length)\n        {\n            return \"NO\";\n        }\n        \n        int j = 0;\n        for(int i = 0; i<s.Length;i++)\n        {\n            if(j < test.Lengt && (s[i] == test[j]))\n            {\n                j++;\n            }\n        }\n        \n        \n        \n        return (j==test.?\"YES\":\"NO\";\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            string result = hackerrankInString(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":551,"fileType":"csharp","requestStartTime":1517999193280}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var max = 0;\n        \n        for(var i = 0; i < ar.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":252,"fileType":"csharp","requestStartTime":1517999193605}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var max = 0;\n        \n        for(var i = 0; i < ar.length; i++)\n        {\n            if(ar[i] >)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":297,"fileType":"csharp","requestStartTime":1517999212118}}
{"body": {"column":24,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string hackerrankInString(string s) {\n        // Complete this function\n        string test = \"hackerrank\";\n        \n        if(s.Length < test.Length)\n        {\n            return \"NO\";\n        }\n        \n        int j = 0;\n        for(int i = 0; i<s.Length;i++)\n        {\n            if(j < test.Length && (s[i] == test[j]))\n            {\n                j++;\n            }\n            \n            if(j = test.)\n        }\n        \n        \n        \n        return (j==test.Length)?\"YES\":\"NO\";\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            string result = hackerrankInString(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":528,"fileType":"csharp","requestStartTime":1517999223371}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Text;\nclass Solution {\n    \n    static string ReverseWords(string input) {\n        // TODO: implement this method\n        string str =\"\";\n        char []inputArr = input.\n        \n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        string _input;\n        _input = Console.ReadLine();\n        \n        res = ReverseWords(_input);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":294,"fileType":"csharp","requestStartTime":1517999201223}}
{"body": {"column":29,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        // Complete this function\n        var max = new int[2];\n        max[0] = 0;\n        max[1] = 0;\n        var copy = doors;\n        for(int i = 0; i<copy.Count();i++){\n            if(copy[i] == 1){\n                ++i;\n                ++max[0];\n                if( i < copy.copy[i]==1){\n                    ++i;\n                    continue;\n                }\n            }\n            \n        }\n        \n        \n        max[1] = doors.ToList().FindAll(s=>s == 1).Count();\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":439,"fileType":"csharp","requestStartTime":1517999390188}}
{"body": {"column":30,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var max = 0;\n        var count = 0;\n        \n        for(var i = 0; i < ar.; i++)\n        {\n            if(ar[i] > max)\n            {\n                max = ar[i];\n            }\n        }\n        for(var j = 0; j < ar.length; j++)\n        {\n            if(ar[i] == max)\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":275,"fileType":"csharp","requestStartTime":1517999475164}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        Console.\n    }\n}\n}\n\n\n","offset":266,"fileType":"csharp","requestStartTime":1517999571445}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    public static int fib(int k){\n        if(k==0) return 1;\n        if(k==1) return 1;\n        else return fib(k-1)+fib(k-2);\n    }\n    static void Main(String[] args) {\n       int t = Convert.ToInt32(Console.ReadLine());\n        int[] tt = new int[t];\n        int z = 0;\n        for(int i=0;i<t;i++){\n            tt[i]=Convert.ToInt32(Console.ReadLine());\n        }\n        for(int i=0;i<t;i++){\n        \n            int len=0;\n        do{\n            len = fib(z).ToString().Length;\n            z++;\n        }while(len<tt[i]);\n            Console.\n        }\n    }\n}\n\n","offset":634,"fileType":"csharp","requestStartTime":1517999727917}}
{"body": {"column":32,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        Console.WriteLine(input.);\n    }\n}\n}\n\n\n","offset":334,"fileType":"csharp","requestStartTime":1517999863040}}
{"body": {"column":42,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        Console.WriteLine(input.ToLower().);\n    }\n}\n}\n\n\n","offset":344,"fileType":"csharp","requestStartTime":1517999876747}}
{"body": {"column":43,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        Console.WriteLine(input.ToLower()..);\n    }\n}\n}\n\n\n","offset":345,"fileType":"csharp","requestStartTime":1517999903854}}
{"body": {"column":56,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        Console.WriteLine(input.ToLower().GroupBy(t=>t).);\n    }\n}\n}\n\n\n","offset":358,"fileType":"csharp","requestStartTime":1517999915070}}
{"body": {"column":32,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.)\n        }\n    }\n}\n}\n\n\n","offset":435,"fileType":"csharp","requestStartTime":1517999999400}}
{"body": {"column":71,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x => x.GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":373,"fileType":"csharp","requestStartTime":1518000093506}}
{"body": {"column":71,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x => x. GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":373,"fileType":"csharp","requestStartTime":1518000098626}}
{"body": {"column":72,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x => x.. GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1518000113110}}
{"body": {"column":75,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x => x.Key. GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":377,"fileType":"csharp","requestStartTime":1518000117289}}
{"body": {"column":75,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x => x.Key. GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":377,"fileType":"csharp","requestStartTime":1518000119667}}
{"body": {"column":94,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x => x.Key.IsAlpha() == True).GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":396,"fileType":"csharp","requestStartTime":1518000135403}}
{"body": {"column":36,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(g.Key.);\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":439,"fileType":"csharp","requestStartTime":1518000158111}}
{"body": {"column":84,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x=> Char.IsLetter(x.GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(Char.IsLetter(g.Key));\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":386,"fileType":"csharp","requestStartTime":1518000223498}}
{"body": {"column":90,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) \n    {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        string input = Console.ReadLine();\n        \n        foreach(IGrouping<char,char> g in input.ToLower().Where(x=> Char.IsLetter(x.Key)).GroupBy(t=>t).OrderBy(u=>u.Key))\n        {\n            Console.WriteLine(Char.IsLetter(g.Key));\n        }\n        Console.WriteLine(input.ToLower().GroupBy(t=>t).Count());\n    }\n}\n}\n\n\n","offset":392,"fileType":"csharp","requestStartTime":1518000227094}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.\nclass Solution {\n    static void Main(String[] args) \n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> st1 = new Stack<int>();\n        Stack<int> st2 = new Stack<int>();\n        for (int i = 0; i < n; i++)\n        {\n            string[] querry = (Console.ReadLine().Split(' '));\n            switch (querry[0])\n            {\n                case \"1\":\n                    int number = Convert.ToInt32(querry[1]);\n                    st1.Push(number);\n                    break;\n                case \"2\":\n                    st1.Pop();\n                    break;\n                case \"3\":\n                    int length = st1.Count;\n                    int maxValue = int.MinValue;\n\n                    for (int j = 0; j < length; j++)\n                    {\n                        int next = st1.Peek();\n                        if(next > maxValue)\n                        {\n                            maxValue = next;\n                        }\n                        st2.Push(st1.Pop());\n                    }\n\n                    for (int j = 0; j < length; j++)\n                    {                         \n                        st1.Push(st2.Pop());\n                    }\n                    Console.WriteLine(maxValue);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n","offset":80,"fileType":"csharp","requestStartTime":1518000527036}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.\nclass Solution {\n    static void Main(String[] args) {\n         int n = Convert.ToInt32(Console.ReadLine());\n            Stack<int> st1 = new Stack<int>();\n            for (int i = 0; i < n; i++)\n            {\n                string[] querry = (Console.ReadLine().Split(' '));\n                switch (querry[0])\n                {\n                    case \"1\":\n                        int number = Convert.ToInt32(querry[1]);\n                        st1.Push(number);\n                        break;\n                    case \"2\":\n                        st1.Pop();\n                        break;\n                    case \"3\":\n                        Console.WriteLine(st1.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n    }\n}\n\n","offset":80,"fileType":"csharp","requestStartTime":1518000551097}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n         int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> st1 = new Stack<int>();\n        int maxValue = int.\n        for (int i = 0; i < n; i++)\n        {\n            string[] querry = (Console.ReadLine().Split(' '));\n            switch (querry[0])\n            {\n                case \"1\":\n                    int number = Convert.ToInt32(querry[1]);\n                    st1.Push(number);\n                    break;\n                case \"2\":\n                    st1.Pop();\n                    break;\n                case \"3\":\n                    Console.WriteLine(st1.Max());\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n","offset":265,"fileType":"csharp","requestStartTime":1518000595942}}
{"body": {"column":35,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n         int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> st1 = new Stack<int>();\n        int currentMaxValue = int.MinValue;\n        int previoudMaxValue = int.\n        for (int i = 0; i < n; i++)\n        {\n            string[] querry = (Console.ReadLine().Split(' '));\n            switch (querry[0])\n            {\n                case \"1\":\n                    int number = Convert.ToInt32(querry[1]);\n                    st1.Push(number);\n                    if(number > maxValue)\n                    {\n                        maxValue = number;\n                    }\n                    break;\n                case \"2\":\n                    int value = st1.Pop();\n                    if(value == maxValue)\n                    break;\n                case \"3\":\n                    Console.WriteLine(st1.Max());\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n","offset":317,"fileType":"csharp","requestStartTime":1518000872835}}
{"body": {"column":21,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Text;\nclass Solution {\n    \n    static string ReverseWords(string input) {\n        // TODO: implement this method\n        string str = \"\";\n        string sub = \"\";\n        int index = 0;\n        char []inputArr = input.ToCharArray();\n        \n        for(int x = 0; x <= input.Length - 1; x++){\n            if(input.)\n            \n            \n            \n            if(inputArr[x] != ' ' || inputArr[x] != '.'){\n                str = str + inputArr[x] + \"\";    \n                sub = \n            }\n            \n          index++;\n        }\n        return str;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        string _input;\n        _input = Console.ReadLine();\n        \n        res = ReverseWords(_input);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":440,"fileType":"csharp","requestStartTime":1518000791475}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        arr.\n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":207,"fileType":"csharp","requestStartTime":1518000979326}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n        if(arr.Contains(k))\n        {\n            console.\n        }\n\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":253,"fileType":"csharp","requestStartTime":1518001007076}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    }\n}\n    private static int GetNumberOfLoops(){\n        console.\n    }\n}\n\n","offset":241,"fileType":"csharp","requestStartTime":1518001021634}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    }\n}\n    private static int GetNumberOfLoops(){\n        console.\n    }\n}\n\n","offset":241,"fileType":"csharp","requestStartTime":1518001053102}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    }\n}\n    private static int GetNumberOfLoops(){\n        Console.\n    }\n}\n\n","offset":241,"fileType":"csharp","requestStartTime":1518001056318}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\nusing System;\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    }\n}\n    private static int GetNumberOfLoops(){\n        var input = Console.\n    }\n}\n\n","offset":253,"fileType":"csharp","requestStartTime":1518001084557}}
{"body": {"column":37,"line":22,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Diagnostics;\nusing System.Text;\nclass Solution {\n    \n    static string ReverseWords(string input) {\n        // TODO: implement this method\n        string str = \"\";\n        string sub = \"\";\n        int index = 0;\n        char []inputArr; \n        \n        for(int x = 0; x <= input.Length - 1; x++){\n            \n            if(input.chartAt(x) != ' '){\n                sub = input.Substring(index, x);    \n                index = x;\n                inputArr = input.ToCharArray();\n                \n                for(int i = inputArr.)\n                \n            }else{\n                str = str + \" \";\n            }\n            \n            \n            \n            if(inputArr[x] != ' ' || inputArr[x] != '.'){\n                str = str + inputArr[x] + \"\";    \n                sub = \n            }\n            \n          \n        }\n        return str;\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        string _input;\n        _input = Console.ReadLine();\n        \n        res = ReverseWords(_input);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":634,"fileType":"csharp","requestStartTime":1518001131818}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        board.\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":168,"fileType":"csharp","requestStartTime":1518001763547}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        board[1].\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":171,"fileType":"csharp","requestStartTime":1518001769054}}
{"body": {"column":31,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        var pawnCol = board[1].\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518001819668}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n\n    static int[] oddNumbers(int l, int r) {\n        for(int i=l; i<=r; i++){\n            if(i%2==1){\n                int j=0;\n                int [] x={};\n                \n                 array[j]=i.;  \n                \n                j++;\n            }\n            return array;\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":347,"fileType":"csharp","requestStartTime":1518001871690}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n\n    static int[] oddNumbers(int l, int r) {\n        for(int i=l; i<=r; i++){\n            if(i%2==1){\n                int j=0;\n                int [] x={};\n                \n                 x[j]=i.\n                \n                j++;\n            }\n            return array;\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":343,"fileType":"csharp","requestStartTime":1518001917583}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n\n    static int[] oddNumbers(int l, int r) {\n        for(int i=l; i<=r; i++){\n            if(i%2==1){\n                int j=0;\n                int [] x={};\n                \n                 x[j]=i.\n                \n                j++;\n            }\n            return array;\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":343,"fileType":"csharp","requestStartTime":1518001924455}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n\n    static int[] oddNumbers(int l, int r) {\n        for(int i=l; i<=r; i++){\n            if(i%2==1){\n                int j=0;\n                int [] x={};\n                \n                 x[j]=i.\n                \n                j++;\n            }\n            return array;\n        }\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":343,"fileType":"csharp","requestStartTime":1518001927591}}
{"body": {"column":68,"line":5,"wordToComplete":"Declare a variable named 'inputString' to hold our input.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n    }\n}\n\n\n","offset":189,"fileType":"csharp","requestStartTime":1518002109991}}
{"body": {"column":31,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        var pawnCol = board[1].\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518002126132}}
{"body": {"column":31,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        var pawnCol = board[1].\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518002131116}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        Console.\n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1518002151446}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        var pawnCol = Array.board[1]\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":182,"fileType":"csharp","requestStartTime":1518002153223}}
{"body": {"column":36,"line":9,"wordToComplete":"Try switch to Queen Rook.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        var pawnCol = Array.IndexOf(board[1], \"P\");\n        // Try switch to Queen Rook.\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":242,"fileType":"csharp","requestStartTime":1518002289344}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        for(int i = 0; i < 8; ++i)\n        {\n            if(board[1][i] == 'P')\n            {\n                Console.\n            }\n        }\n        \n        // if the pawn promoted to (Q,R,B,K) how will it be a check\n        // if the pawn is promoted but promotion cannot give check, can it be a discovered check\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               board[board_i] = Console.ReadLine().ToCharArray();\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1518002595086}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int angryChildren(int n, int k, int[] arr)\n    {\n        Array.\n    }\n\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int k = Convert.ToInt32(Console.ReadLine());\n        int[] arr = new int[n];\n        for(int arr_i = 0; arr_i < n; arr_i++)\n        {\n           arr[arr_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int result = angryChildren(n, k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":178,"fileType":"csharp","requestStartTime":1518002913831}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int angryChildren(int n, int k, int[] arr)\n    {\n        Array.Sort(arr);\n        int minUnfairness = int.\n    }\n\n    static void Main(String[] args)\n    {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int k = Convert.ToInt32(Console.ReadLine());\n        int[] arr = new int[n];\n        for(int arr_i = 0; arr_i < n; arr_i++)\n        {\n           arr[arr_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int result = angryChildren(n, k, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":221,"fileType":"csharp","requestStartTime":1518002945262}}
{"body": {"column":35,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public enum Pieces {\n        KingW = \"K\",\n        QueenW = \"Q\",\n        KnightW = \"N\",\n        BishopW = \"B\",\n        RookW = \"R\",\n        PawnW = \"P\",\n        KingB = \"k\",\n        QueenB = \"q\",\n        KnightB = \"n\",\n        BishopB = \"b\",\n        RookB = \"r\",\n        PawnB = \"p\",\n        Empty = \"#\"\n    }\n\n    struct Point {\n        public int x, y;\n        \n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        public override bool Equals(object o) {\n            Point toCompare = (Point)o;\n            \n            if(toCompare.x == this.)\n        }\n    }\n    \n    static int waysToGiveACheck(char[][] board) {        \n        Point pawnLocation = null;\n        Point kingLocation = null;\n        List<Point> blackPieces = new List<Point>();\n        List<Point> whitePieces = new List<Point>();\n        \n        // First find the pawn that can be promoted\n        for(int i = 0; i < 8; i++) {\n            for(int j = 0; j < 8; j++) {\n                // Is there a white pawn at the current location?\n                if(board[i][j] == Pieces.PawnW) {\n                    // Are we at the 7th row and can the pawn be moved to an empty cell above it?\n                    if(j == 1 && board[i][0] == Pieces.Empty) {\n                        // Found the pawn to be promoted\n                        pawnLocation = new Point(i, 0);\n                        // Only one white spawn can be promoted, move on\n                        break;\n                    }\n                }\n                \n                // Is there the black king at the current location?\n                if(board[i][j] == Pieces.KingB) {\n                    kingLocation = new Point(i, j);\n                    blackPieces.Add(kingLocation);\n                }\n                \n                else if(board[i][j] == Pieces.BishopB || \n                        board[i][j] == Pieces.KnightB || \n                        board[i][j] == Pieces.PawnB || \n                        board[i][j] == Pieces.QueenB || \n                        board[i][j] == Pieces.RookB) {\n                    blackPieces.Add(new Point(i, j));\n                }\n                \n                else if(board[i][j] == Pieces.BishopW || \n                        board[i][j] == Pieces.KnightW || \n                        board[i][j] == Pieces.PawnW || \n                        board[i][j] == Pieces.QueenW || \n                        board[i][j] == Pieces.RookW) {\n                    whitePieces.Add(new Point(i, j));\n                }\n            }\n        }\n\n        var queenMoves = GetLegalMovesQueen(pawnLocation, blackPieces, whitePieces);\n        var rookMoves = GetLegalMovesRook(pawnLocation, blackPieces, whitePieces);\n        var bishopMoves = GetLegalMovesBishop(pawnLocation, blackPieces, whitePieces);\n        var knightMoves = GetLegalMovesKnight(pawnLocation);\n        \n        var checkCount = 0;\n        \n        if(queenMoves.Contains(kingLocation)) checkCount++;\n        if(rookMoves.Contains(kingLocation)) checkCount++;\n        if(bishopMoves.Contains(kingLocation)) checkCount++;\n        if(knightMoves.Contains(kingLocation)) checkCount++;\n        \n        return checkCount;\n    }\n    \n    // Queen can move horizontally, vertically and diagonally \n    static List<Point> GetLegalMovesQueen(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n    }\n    \n    static List<Point> GetLegalMovesRook(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n    }\n    \n    static List<Point> GetLegalMovesBishop(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n    }\n    \n    static List<Point> GetLegalMovesKnight(Point s) {\n        var legalMoves = new List<Point>();\n        \n        var possibleMoves = new Point[] {\n            new Point(s.x - 2, s.y + 1),\n            new Point(s.x + 2, s.y + 1),\n            new Point(s.x - 1, s.y + 2),\n            new Point(s.x + 1, s.y + 2)\n        };\n        \n        foreach(var move in legalMoves) {\n            if(move.x >= 0 || move.x < 8) legalMoves.Add(move);\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalDiagonalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece diagonally until it goes out of bounds or hits a black piece\n        while(newLocation.x > 0 && newLocation.x < 8 && newLocation.y < 8) \n        {\n            // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            // Nothing on the way, legal move\n            legalMoves.Add(newLocation);\n            \n            newLocation.x += xc;\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalHorizontalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.x > 0 && newLocation.x < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && newLocation != s) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.x += xc;\n        }\n        \n        return legalMoves;\n    }\n    \n     // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalVerticalMoves(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.y > 0 && newLocation.y < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && newLocation != s) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }    \n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n","offset":711,"fileType":"csharp","requestStartTime":1518003134920}}
{"body": {"column":22,"line":71,"wordToComplete":"math","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int p=0,o=0,c=0;\n        int[] kp=new int[2]{-1,-1};\n        \n        for(int i=0;i<8;i++){\n            if(board[1][i]=='P')\n                p=i;\n            if(board[1][i]=='k'){\n                kp[0]=1;\n                kp[1]=i;\n            }\n        }\n        if(kp[0]<0){\n            if(p-2>=0)                \n                if(board[1][p-2]=='k')\n                    return 1;\n            else if(p-1>=0)\n                if(board[2][p-1]=='k')\n                    return 1;\n            else if(p+2<=7)                \n                if(board[1][p+2]=='k')\n                    return 1;\n            else if(p+1<=7)\n                if(board[2][p+1]=='k')\n                    return 1;       \n            else{\n                int i=p-1;\n                \n                while(i>-1){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;                        \n                }\n                i=p+1;\n                o=0;\n                while(i<8){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;                        \n                }\n                i=1;\n                o=0;\n                while(i<8){\n                    if(board[i][p]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][p]!='#')\n                        o++;                        \n                }\n                \n            }\n        }\n        else\n        {\n            int r=math\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":2066,"fileType":"csharp","requestStartTime":1518003181516}}
{"body": {"column":64,"line":178,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    public enum Pieces {\n        KingW = \"K\",\n        QueenW = \"Q\",\n        KnightW = \"N\",\n        BishopW = \"B\",\n        RookW = \"R\",\n        PawnW = \"P\",\n        KingB = \"k\",\n        QueenB = \"q\",\n        KnightB = \"n\",\n        BishopB = \"b\",\n        RookB = \"r\",\n        PawnB = \"p\",\n        Empty = \"#\"\n    }\n\n    struct Point {\n        public int x, y;\n        \n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        public override bool Equals(object o) {\n            Point toCompare = (Point)o;\n            \n            if(toCompare.x == this.x &&\n              toCompare.y == this.y) return true;\n            \n            return false;\n        }\n    }\n    \n    static int waysToGiveACheck(char[][] board) {        \n        Point pawnLocation = null;\n        Point kingLocation = null;\n        List<Point> blackPieces = new List<Point>();\n        List<Point> whitePieces = new List<Point>();\n        \n        // First find the pawn that can be promoted\n        for(int i = 0; i < 8; i++) {\n            for(int j = 0; j < 8; j++) {\n                // Is there a white pawn at the current location?\n                if(board[i][j] == Pieces.PawnW) {\n                    // Are we at the 7th row and can the pawn be moved to an empty cell above it?\n                    if(j == 1 && board[i][0] == Pieces.Empty) {\n                        // Found the pawn to be promoted\n                        pawnLocation = new Point(i, 0);\n                        // Only one white spawn can be promoted, move on\n                        break;\n                    }\n                }\n                \n                // Is there the black king at the current location?\n                if(board[i][j] == Pieces.KingB) {\n                    kingLocation = new Point(i, j);\n                    blackPieces.Add(kingLocation);\n                }\n                \n                else if(board[i][j] == Pieces.BishopB || \n                        board[i][j] == Pieces.KnightB || \n                        board[i][j] == Pieces.PawnB || \n                        board[i][j] == Pieces.QueenB || \n                        board[i][j] == Pieces.RookB) {\n                    blackPieces.Add(new Point(i, j));\n                }\n                \n                else if(board[i][j] == Pieces.BishopW || \n                        board[i][j] == Pieces.KnightW || \n                        board[i][j] == Pieces.PawnW || \n                        board[i][j] == Pieces.QueenW || \n                        board[i][j] == Pieces.RookW) {\n                    whitePieces.Add(new Point(i, j));\n                }\n            }\n        }\n\n        var queenMoves = GetLegalMovesQueen(pawnLocation, blackPieces, whitePieces);\n        var rookMoves = GetLegalMovesRook(pawnLocation, blackPieces, whitePieces);\n        var bishopMoves = GetLegalMovesBishop(pawnLocation, blackPieces, whitePieces);\n        var knightMoves = GetLegalMovesKnight(pawnLocation);\n        \n        var checkCount = 0;\n        \n        if(queenMoves.Contains(kingLocation)) checkCount++;\n        if(rookMoves.Contains(kingLocation)) checkCount++;\n        if(bishopMoves.Contains(kingLocation)) checkCount++;\n        if(knightMoves.Contains(kingLocation)) checkCount++;\n        \n        return checkCount;\n    }\n    \n    // Queen can move horizontally, vertically and diagonally \n    static List<Point> GetLegalMovesQueen(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n    }\n    \n    static List<Point> GetLegalMovesRook(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n    }\n    \n    static List<Point> GetLegalMovesBishop(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n    }\n    \n    static List<Point> GetLegalMovesKnight(Point s) {\n        var legalMoves = new List<Point>();\n        \n        var possibleMoves = new Point[] {\n            new Point(s.x - 2, s.y + 1),\n            new Point(s.x + 2, s.y + 1),\n            new Point(s.x - 1, s.y + 2),\n            new Point(s.x + 1, s.y + 2)\n        };\n        \n        foreach(var move in legalMoves) {\n            if(move.x >= 0 || move.x < 8) legalMoves.Add(move);\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalDiagonalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece diagonally until it goes out of bounds or hits a black piece\n        while(newLocation.x > 0 && newLocation.x < 8 && newLocation.y < 8) \n        {\n            // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            // Nothing on the way, legal move\n            legalMoves.Add(newLocation);\n            \n            newLocation.x += xc;\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalHorizontalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.x > 0 && newLocation.x < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && newLocation.s) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.x += xc;\n        }\n        \n        return legalMoves;\n    }\n    \n     // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalVerticalMoves(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.y > 0 && newLocation.y < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && newLocation != s) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }    \n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n","offset":6904,"fileType":"csharp","requestStartTime":1518003239157}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        \n        \n        for(int a0 = 0; a0 < m; a0++){\n            string[] tokens_a = Console.ReadLine().Split(' ');\n            int a = Convert.ToInt32(tokens_a[0]);\n            int b = Convert.ToInt32(tokens_a[1]);\n            int k = Convert.ToInt32(tokens_a[2]);\n            \n            \n        }\n        \n        Console.\n        \n    }\n}\n\n\n","offset":624,"fileType":"csharp","requestStartTime":1518003305006}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int solveMeFirst(int a, int b) { \n      return a + b; \n      \n    }\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }   \n}      \n\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }\n}      \n","offset":229,"fileType":"csharp","requestStartTime":1518003377873}}
{"body": {"column":49,"line":8,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int solveMeFirst(int a, int b) => a+b;\n      return a + b;       \n    }\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }   \n}      \n\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }\n}      \n","offset":214,"fileType":"csharp","requestStartTime":1518003394362}}
{"body": {"column":26,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string isBalanced(string s)\n    {\n        char[] array = s.ToArray();\n        Stack<char> stack = new Stack<char>();\n\n        for (int i = 0; i < array.Length; i++)\n        {\n            char c = array[i];\n            switch (c)\n            {\n                case '{':\n                case '(':\n                case '[':\n                    stack.Push(c);\n                    break;\n                case '}':\n                    if (stack.Count == 0 || stack.Peek() != '{')\n                        return \"NO\";  \n                    stack.\n                    break;\n                case ')':\n                    if (stack.Count == 0 || stack.Peek() != '(')\n                        return \"NO\";\n                    break;\n                case ']':\n                    if (stack.Count == 0 || stack.Peek() != '[')\n                        return \"NO\";\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return stack.Count > 0 ? \"YES\" : \"NO\";\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            string s = Console.ReadLine();\n            string result = isBalanced(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":654,"fileType":"csharp","requestStartTime":1518003627790}}
{"body": {"column":60,"line":117,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int p=0,o=0,c=0;\n        int[] kp=new int[2]{-1,-1};\n        \n        for(int i=0;i<8;i++){\n            if(board[1][i]=='P')\n                p=i;\n            if(board[1][i]=='k'){\n                kp[0]=1;\n                kp[1]=i;\n            }\n        }\n        if(kp[0]<0){\n            if(p-2>=0)                \n                if(board[1][p-2]=='k')\n                    return 1;\n            else if(p-1>=0)\n                if(board[2][p-1]=='k')\n                    return 1;\n            else if(p+2<=7)                \n                if(board[1][p+2]=='k')\n                    return 1;\n            else if(p+1<=7)\n                if(board[2][p+1]=='k')\n                    return 1;       \n            else{\n                int i=p-1;\n                \n                while(i>-1){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  \n                    i--;\n                }\n                i=p+1;\n                o=0;\n                while(i<8){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  \n                    i++;\n                }\n                i=1;\n                o=0;\n                while(i<8){\n                    if(board[i][p]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][p]!='#')\n                        o++;   \n                    i++;\n                }\n                \n                i=p-1;\n                o=0;\n                int j=1;\n                while(i>=0){\n                    if(board[j][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[j][i]!='#')\n                        o++;   \n                    i--;j++;\n                }\n                \n                i=p+1;\n                o=0;\n                while(i>=0){\n                    if(board[i][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][i]!='#')\n                        o++;   \n                    i++;\n                }\n                \n            }\n        }\n        else\n        {\n            int r=Math.Abs(p-kp[1]);\n            if(r==2)\n                return 1;\n            if(r==1)\n                return 2;\n            \n        }\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp.,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":3402,"fileType":"csharp","requestStartTime":1518003800514}}
{"body": {"column":38,"line":218,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    struct Point {\n        public int x, y;\n        \n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        public override bool Equals(object o) {\n            Point toCompare = (Point)o;\n            \n            if(toCompare.x == this.x &&\n              toCompare.y == this.y) return true;\n            \n            return false;\n        }\n        \n        public override int GetHashCode() { return 1; }\n    }\n    \n    static int waysToGiveACheck(char[][] board) {        \n        Point pawnLocation = new Point(-1, -1);\n        Point kingLocation = new Point(-1, -1);\n        List<Point> blackPieces = new List<Point>();\n        List<Point> whitePieces = new List<Point>();\n        \n        // First find the pawn that can be promoted\n        for(int i = 0; i < 8; i++) {\n            for(int j = 0; j < 8; j++) {\n                // Is there a white pawn at the current location?\n                if(board[i][j] == 'p') {\n                    // Are we at the 7th row and can the pawn be moved to an empty cell above it?\n                    if(j == 1 && board[i][0] == '#') {\n                        // Found the pawn to be promoted\n                        pawnLocation = new Point(i, 0);\n                        // Only one white spawn can be promoted, move on\n                        break;\n                    }\n                }\n                \n                // Is there the black king at the current location?\n                if(board[i][j] == 'k') {\n                    kingLocation = new Point(i, j);\n                    blackPieces.Add(kingLocation);\n                }\n                \n                else if(board[i][j] == 'b' || \n                        board[i][j] == 'n' || \n                        board[i][j] =='p' || \n                        board[i][j] == 'q' || \n                        board[i][j] == 'r') {\n                    blackPieces.Add(new Point(i, j));\n                }\n                \n                else if(board[i][j] == 'B' || \n                        board[i][j] == 'N' || \n                        board[i][j] == 'P' || \n                        board[i][j] == 'Q' || \n                        board[i][j] == 'R') {\n                    whitePieces.Add(new Point(i, j));\n                }\n            }\n        }\n\n        var queenMoves = GetLegalMovesQueen(pawnLocation, blackPieces, whitePieces);\n        var rookMoves = GetLegalMovesRook(pawnLocation, blackPieces, whitePieces);\n        var bishopMoves = GetLegalMovesBishop(pawnLocation, blackPieces, whitePieces);\n        var knightMoves = GetLegalMovesKnight(pawnLocation);\n        \n        var checkCount = 0;\n        \n        if(queenMoves.Contains(kingLocation)) checkCount++;\n        if(rookMoves.Contains(kingLocation)) checkCount++;\n        if(bishopMoves.Contains(kingLocation)) checkCount++;\n        if(knightMoves.Contains(kingLocation)) checkCount++;\n        \n        return checkCount;\n    }\n    \n    // Queen can move horizontally, vertically and diagonally \n    static List<Point> GetLegalMovesQueen(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n        return legalMoves;\n    }\n    \n    static List<Point> GetLegalMovesRook(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n        return legalMoves;\n    }\n    \n    static List<Point> GetLegalMovesBishop(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n        return legalMoves;\n    }\n    \n    static List<Point> GetLegalMovesKnight(Point s) {\n        var legalMoves = new List<Point>();\n        \n        var possibleMoves = new Point[] {\n            new Point(s.x - 2, s.y + 1),\n            new Point(s.x + 2, s.y + 1),\n            new Point(s.x - 1, s.y + 2),\n            new Point(s.x + 1, s.y + 2)\n        };\n        \n        foreach(var move in possibleMoves) {\n            if(move.x >= 0 || move.x < 8) legalMoves.Add(move);\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalDiagonalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece diagonally until it goes out of bounds or hits a black piece\n        while(newLocation.x > 0 && newLocation.x < 8 && newLocation.y < 8) \n        {\n            // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            // Nothing on the way, legal move\n            legalMoves.Add(newLocation);\n            \n            newLocation.x += xc;\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalHorizontalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.x > 0 && newLocation.x < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && !newLocation.Equals(s)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.x += xc;\n        }\n        \n        return legalMoves;\n    }\n    \n     // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalVerticalMoves(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.y > 0 && newLocation.y < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && !newLocation.Equals(s)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }    \n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][8];\n            for(int board_i = 0; board_i < 8; board_i++){\n               //string[] board_temp = Console.ReadLine().Split(' ');\n               //board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n                \n                string line = Console.\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n","offset":8467,"fileType":"csharp","requestStartTime":1518003821708}}
{"body": {"column":15,"line":11,"wordToComplete":"Con","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i = 0; i < 10; i++)\n        {\n            Con\n        }\n    }\n}\n\n\n","offset":256,"fileType":"csharp","requestStartTime":1518003885573}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int i = 0; i < 10; i++)\n        {\n            Console.\n        }\n    }\n}\n\n\n","offset":261,"fileType":"csharp","requestStartTime":1518003887203}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        Console.\n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1518003975854}}
{"body": {"column":22,"line":12,"wordToComplete":"8.","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j = 8;\n        double d1 = 8.\n        // Read and save an integer, double, and String to your variables.\n        \n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":314,"fileType":"csharp","requestStartTime":1518004151407}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString;\n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        Console.\n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n    }\n}\n\n\n","offset":515,"fileType":"csharp","requestStartTime":1518004191379}}
{"body": {"column":15,"line":15,"wordToComplete":"Console","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j;\n        double d1;\n        string s1;\n        // Read and save an integer, double, and String to your variables.\n        Console\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":416,"fileType":"csharp","requestStartTime":1518004205295}}
{"body": {"column":37,"line":118,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int p=0,o=0,c=0;\n        int[] kp=new int[2]{-1,-1};\n        \n        for(int i=0;i<8;i++){\n            if(board[1][i]=='P')\n                p=i;\n            if(board[1][i]=='k'){\n                kp[0]=1;\n                kp[1]=i;\n            }\n        }\n        if(kp[0]<0){\n            if(p-2>=0)                \n                if(board[1][p-2]=='k')\n                    return 1;\n            else if(p-1>=0)\n                if(board[2][p-1]=='k')\n                    return 1;\n            else if(p+2<=7)                \n                if(board[1][p+2]=='k')\n                    return 1;\n            else if(p+1<=7)\n                if(board[2][p+1]=='k')\n                    return 1;       \n            else{\n                int i=p-1;\n                \n                while(i>-1){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  \n                    i--;\n                }\n                i=p+1;\n                o=0;\n                while(i<8){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  \n                    i++;\n                }\n                i=1;\n                o=0;\n                while(i<8){\n                    if(board[i][p]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][p]!='#')\n                        o++;   \n                    i++;\n                }\n                \n                i=p-1;\n                o=0;\n                int j=1;\n                while(i>=0){\n                    if(board[j][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[j][i]!='#')\n                        o++;   \n                    i--;j++;\n                }\n                \n                i=p+1;\n                o=0;\n                while(i>=0){\n                    if(board[i][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][i]!='#')\n                        o++;   \n                    i++;\n                }\n                \n            }\n        }\n        else\n        {\n            int r=Math.Abs(p-kp[1]);\n            if(r==2)\n                return 1;\n            if(r==1)\n                return 2;\n            \n        }\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n                Console.Error.Write(board_temp.Length);\n               board[board_i] = char.//Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":3435,"fileType":"csharp","requestStartTime":1518004255764}}
{"body": {"column":37,"line":118,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int p=0,o=0,c=0;\n        int[] kp=new int[2]{-1,-1};\n        \n        for(int i=0;i<8;i++){\n            if(board[1][i]=='P')\n                p=i;\n            if(board[1][i]=='k'){\n                kp[0]=1;\n                kp[1]=i;\n            }\n        }\n        if(kp[0]<0){\n            if(p-2>=0)                \n                if(board[1][p-2]=='k')\n                    return 1;\n            else if(p-1>=0)\n                if(board[2][p-1]=='k')\n                    return 1;\n            else if(p+2<=7)                \n                if(board[1][p+2]=='k')\n                    return 1;\n            else if(p+1<=7)\n                if(board[2][p+1]=='k')\n                    return 1;       \n            else{\n                int i=p-1;\n                \n                while(i>-1){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  \n                    i--;\n                }\n                i=p+1;\n                o=0;\n                while(i<8){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  \n                    i++;\n                }\n                i=1;\n                o=0;\n                while(i<8){\n                    if(board[i][p]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][p]!='#')\n                        o++;   \n                    i++;\n                }\n                \n                i=p-1;\n                o=0;\n                int j=1;\n                while(i>=0){\n                    if(board[j][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[j][i]!='#')\n                        o++;   \n                    i--;j++;\n                }\n                \n                i=p+1;\n                o=0;\n                while(i>=0){\n                    if(board[i][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][i]!='#')\n                        o++;   \n                    i++;\n                }\n                \n            }\n        }\n        else\n        {\n            int r=Math.Abs(p-kp[1]);\n            if(r==2)\n                return 1;\n            if(r==1)\n                return 2;\n            \n        }\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n                Console.Error.Write(board_temp.Length);\n               board[board_i] = Char.//Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":3435,"fileType":"csharp","requestStartTime":1518004278649}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j;\n        double d1;\n        string s1;\n        // Read and save an integer, double, and String to your variables.\n        Console.\n        // Print the sum of both integer variables on a new line.\n        \n        // Print the sum of the double variables on a new line.\n        \n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":417,"fileType":"csharp","requestStartTime":1518004282923}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\n    static void Main(String[] args) {\n        int i = 4;\n        double d = 4.0;\n        string s = \"HackerRank \";\n        \n        // Declare second integer, double, and String variables.\n        int j;\n        double d1;\n        string s1;\n        // Read and save an integer, double, and String to your variables.\n        j = Convert.ToInt32(Console.ReadLine());\n        d1 = Convert.ToInt64(Console.ReadLine());\n        s1 = Console.ReadLine();\n        // Print the sum of both integer variables on a new line.\n        var sum = i+j;\n        // Print the sum of the double variables on a new line.\n        Console.\n        // Concatenate and print the String variables on a new line\n        // The 's' variable above should be printed first.\n        \n\n    }\n}\n","offset":702,"fileType":"csharp","requestStartTime":1518004586783}}
{"body": {"column":46,"line":123,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int p=0,o=0;\n        int[] kp=new int[2]{-1,-1};\n        \n        for(int i=0;i<8;i++){\n            if(board[1][i]=='P')\n                p=i;\n            if(board[1][i]=='k'){\n                kp[0]=1;\n                kp[1]=i;\n            }\n        }\n        \n            if(p-2>=0)                \n                if(board[1][p-2]=='k')\n                    return 1;\n            else if(p-1>=0)\n                if(board[2][p-1]=='k')\n                    return 1;\n            else if(p+2<=7)                \n                if(board[1][p+2]=='k')\n                    return 1;\n            else if(p+1<=7)\n                if(board[2][p+1]=='k')\n                    return 1; \n        \n        if(kp[0]<0){                 \n            \n                int i=p-1;\n                \n                while(i>-1){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  ;\n                    i--;\n                }\n            \n                i=p+1;\n                o=0;\n                while(i<8){\n                    if(board[0][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[0][i]!='#')\n                        o++;  ;\n                    i++;\n                }\n            \n                i=1;\n                o=0;\n                while(i<8){\n                    if(board[i][p]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][p]!='#')\n                        o++;   ;\n                    i++;\n                }\n                \n                i=p-1;\n                o=0;\n                int j=1;\n                while(i>=0){\n                    if(board[j][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[j][i]!='#')\n                        o++;  ;\n                    \n                    i--;j++;\n                }\n                \n                i=p+1;\n                o=0;\n                while(i>=0){\n                    if(board[i][i]=='k')\n                        if(o==0)\n                            return 2;\n                        else\n                            return 0;\n                    else if(board[i][i]!='#')\n                        o++;   \n                    i++;\n                }\n                \n            \n        }\n        else\n        {\n            int r=Math.Abs(p-kp[1]);\n            if(r==2)\n                return 1;\n            if(r==1)\n                return 2;\n            \n        }\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n                //Console.Error.Write(board_temp.Length);\n               board[board_i] = board_temp[0]..ToCharArray();//Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":3515,"fileType":"csharp","requestStartTime":1518004715186}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518005311696}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        return s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":192,"fileType":"csharp","requestStartTime":1518005318089}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        return s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":192,"fileType":"csharp","requestStartTime":1518005335158}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518005347903}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518005353991}}
{"body": {"column":9,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        .\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":184,"fileType":"csharp","requestStartTime":1518005363022}}
{"body": {"column":14,"line":49,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        \n    }\n\n    function waysToGiveACheck(board) {\n        var result = 0;\n        var P_rf = {};\n        var k_rf = {};\n        for (let i = 0; i < 8; i++) {\n            for (let j = 0; j < 8; i++) {\n                if (board[i][j] == \"P\") {\n                    P_rf.r = 9 - i;\n                    P_rf.f = j + 1;\n                } else if (board[i][j] == \"k\") {\n                    k_rf.r = 8 - i;\n                    k_rf.f = j + 1;\n                }\n            }\n        }\n        if (queenCheck(P_rf, k_rf)) result++;\n        if (rookCheck(P_rf, k_rf)) result++;\n        if (bishopCheck(P_rf, k_rf)) result++;\n        if (knightCheck(P_rf, k_rf)) result++;\n        return result;\n    }\n\n    function queenCheck(P_rf, k_rf) { \n        retun horiCheck(P_rf, k_rf) || vertCheck(P_rf, k_rf) || diagCheck(P_rf, k_rf);\n    }\n\n    function rookCheck(P_rf, k_rf) { \n        retun horiCheck(P_rf, k_rf) || vertCheck(P_rf, k_rf);\n    }\n\n    function bishopCheck(P_rf, k_rf) { \n        retun diagCheck(P_rf, k_rf);\n    }\n\n    static bool knightCheck(P_rf, k_rf) { \n        int dr = Math.Abs(rf1.r - rf2.r);\n        int df = Math.Abs(rf1.f - rf2.f);\n        int[] result = new int[] {dr, df};\n        Array.\n        return result[0] == 1 && result[1] == 2; \n    }\n\n    static bool horiCheck(rf1, rf2) {\n        return rf1[0] == rf2[0];\n    }\n\n    static bool vertCheck(int[] rf1, int[] rf2) {\n        return rf1[1] == rf2[1];\n    }\n\n    static bool diagCheck(int[] rf1, int[] rf2) {\n        int d1 = Math.Abs(rf1[0] - rf1[1]);\n        int d2 = Math.Abs(rf2[0] - rf2[1]);\n        return d1 == d2;\n    }\n    \n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":1359,"fileType":"csharp","requestStartTime":1518005701068}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        \n        for(int i=0;i<arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":213,"fileType":"csharp","requestStartTime":1518006303726}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int toplam=0;\n        for(int i=0;i<arr.Length;i++){\n            for(int a=0;a<arr.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":269,"fileType":"csharp","requestStartTime":1518006397563}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int toplam=0;\n        for(int i=0;i<arr.Length;i++){\n            for(int a=0;a<arr.Length;a++){\n                if(arr[i]!=arr[a]){\n                toplam+=arr[a];\n            }\n            }    \n        }\n        console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":408,"fileType":"csharp","requestStartTime":1518006458565}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.\n\nclass Solution\n{\n\n    static int[] kaprekarNumbers(int p, int q)\n    {\n        for(int i = p; i <= q; i++)\n        {\n            var x = new BigInteger(i);\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int p = Convert.ToInt32(Console.ReadLine());\n        int q = Convert.ToInt32(Console.ReadLine());\n        int[] result = kaprekarNumbers(p, q);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":99,"fileType":"csharp","requestStartTime":1518006459182}}
{"body": {"column":25,"line":17,"wordToComplete":"writeline","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int toplam=0;\n        for(int i=0;i<arr.Length;i++){\n            for(int a=0;a<arr.Length;a++){\n                if(arr[i]!=arr[a]){\n                toplam+=arr[a];\n            }\n            }    \n        }\n        console.writeline\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":417,"fileType":"csharp","requestStartTime":1518006464713}}
{"body": {"column":33,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        int toplam=0;\n        for(int i=0;i<arr.Length;i++){\n            for(int a=0;a<arr.Length;a++){\n                if(arr[i]!=arr[a]){\n                toplam+=arr[a];\n            }\n            }    \n        }\n        console.WriteLine(toplam.);\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":425,"fileType":"csharp","requestStartTime":1518006478884}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Numerics;\n\nclass Solution\n{\n\n    static List<> kaprekarNumbers(int p, int q)\n    {\n        var \n        for(int i = p; i <= q; i++)\n        {\n            var x = new BigInteger(i);\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int p = Convert.ToInt32(Console.ReadLine());\n        int q = Convert.ToInt32(Console.ReadLine());\n        var result = kaprekarNumbers(p, q);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":145,"fileType":"csharp","requestStartTime":1518006509097}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Numerics;\n\nclass Solution\n{\n\n    static List<int> kaprekarNumbers(int p, int q)\n    {\n        var res = new List<int>\n        for(int i = p; i <= q; i++)\n        {\n            var x = new BigInteger(i);\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        int p = Convert.ToInt32(Console.ReadLine());\n        int q = Convert.ToInt32(Console.ReadLine());\n        var result = kaprekarNumbers(p, q);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":216,"fileType":"csharp","requestStartTime":1518006519033}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        int result = 0;\n        a.\n        foreach (var item in a){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":217,"fileType":"csharp","requestStartTime":1518006599965}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        int result = 0;\n        int min = a.Min();\n        Console.\n        foreach (var item in a){\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":250,"fileType":"csharp","requestStartTime":1518006621348}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        int result = 0;\n        int min = a.Min();\n        int max = b.\n        Console.WriteLine(min);\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":254,"fileType":"csharp","requestStartTime":1518006670006}}
{"body": {"column":31,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Numerics;\n\nclass Solution\n{\n\n    static List<int> kaprekarNumbers(int p, int q)\n    {\n        var res = new List<int>();\n        for(int i = p; i <= q; i++)\n        {\n            var x = new BigInteger(i);\n            var xx = BigInteger.Multiply(x, x);\n            \n            var a = BigInteger.\n            \n        }\n        return res;\n    }\n\n    static void Main(String[] args) {\n        int p = Convert.ToInt32(Console.ReadLine());\n        int q = Convert.ToInt32(Console.ReadLine());\n        var result = kaprekarNumbers(p, q);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":397,"fileType":"csharp","requestStartTime":1518006816743}}
{"body": {"column":29,"line":70,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n\n    static int waysToGiveACheck(char[,] board)\n    {\n        int ikingIndex=0,jkingIndex=0;\n        int ipawnIndex = 0, jpawnIndex = 0;\n        int d = 0;\n        // Complete this function\n        for (int i=0;i<8;i++)\n        {\n            for(int j=0;j<8;j++)\n            {\n                if(board[i,j]=='k')\n                {\n                    ikingIndex = i;\n                    jkingIndex = j;\n                }\n                if (board[i,j] == 'P')\n                {\n                    ipawnIndex = i;\n                    jpawnIndex = j;\n                }\n                              \n            }\n        }\n        if(ikingIndex == (ipawnIndex-1) && jkingIndex == jpawnIndex )\n        {\n            d = d + 2;\n        }\n        if(Math.Abs(ikingIndex-(ipawnIndex-1)) == Math.Abs(jkingIndex-jpawnIndex))\n        {\n            d = d + 2;\n        }\n        if (ipawnIndex == ikingIndex)\n        {\n            d = d + 1;\n        }\n        return d;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = 8 * t;\n        int[] result = new int[0];\n      \n\n        while (t!=0)\n        {\n            char[,] board = new char[8, n];\n            for (int a0 = 0; a0 < 8; a0++)\n            {              \n                char[] board_temp = Console.ReadLine().ToCharArray();\n                for (int board_i = 0; board_i < 8; board_i++)\n                {\n                    board[a0,board_i] = board_temp[board_i];\n\n                }\n               \n            }\n            Array.Resize(ref result, result.Length + 1);\n            result[result.Length - 1] = waysToGiveACheck(board);\n            t--;            \n        }\n        for(int i=0;i<result.)\n        Console.WriteLine(result);\n\n    }\n}\n\n\n","offset":1828,"fileType":"csharp","requestStartTime":1518006738165}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int simpleArraySum(int n, int[] ar) {\n        return ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = simpleArraySum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":171,"fileType":"csharp","requestStartTime":1518006884447}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        for(i=0;i<ar.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1518007054831}}
{"body": {"column":34,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        int result = 0;\n        int min = a.Min();\n        int max = b.Min();\n        bool isOk;\n        for(var i=min; i<=max; i++){\n            isOk=true;\n            while(isOk==true||i<a.){\n                if()\n                \n                \n                \n            }\n            \n        }\n        Console.WriteLine(min);\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1518007059077}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        for(int i=0;i<ar.Length;i++){\n            n+=ar[i].;\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":245,"fileType":"csharp","requestStartTime":1518007181218}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        for(int i=0;i<ar.Length;i++){\n            n+=Convert. ar[i];\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1518007198884}}
{"body": {"column":14,"line":10,"wordToComplete":"foreac","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long aVeryBigSum(int n, long[] ar) {\n        // Complete this function\n        \n        foreac\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp,Int64.Parse);\n        long result = aVeryBigSum(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":209,"fileType":"csharp","requestStartTime":1518007421628}}
{"body": {"column":29,"line":38,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int res = 0;\n        \n        int[][] b = FindPieces(board, 'b');\n        int[][] w = FindPieces(board, 'w');\n\n        for(int i = 0; i < w.Count(); i++){\n            if(w[i][0] == 1 && board[w[i][0]][w[i][1]] == 'P' && board[0][w[i][1]]=='#'){\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'Q'), b, MovePiece(w,i));\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'B'), b, MovePiece(w,i));\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'R'), b, MovePiece(w,i));\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'N'), b, MovePiece(w,i));    \n            }\n        }\n        return res;\n    }\n    \n    static char[][] UpgradePawn(char[][] board, int n, char c){\n        char[][] _board = (char[][]) board.Clone();\n        _board[1][n] = '#';\n        _board[0][n] = c;\n        return _board;\n    }\n    \n    static int[][] MovePiece(int[][] w, int n){\n        int[][] _w = (int[][])w.Clone();\n        _w[n][0] = 0;\n        return _w;\n    }\n    \n    static int CheckCheck(char[][] board, int[][] b, int[][] w){\n        for(int i = 0; i < w.)\n    }\n    \n    static int[][] FindPieces(char[][] board, char col){\n        int[][] p = new int[4][];\n        int n = 0;\n        int k = 0;\n        char[] b = new char[]{'k','q','n','b','r','p'};\n        char[] w = new char[]{'K','Q','N','B','R','P'};\n        for(int i = 0; i < 8; i++){\n            for(int j = 0; j < 8; j++){\n                if(col == 'b'){\n                    if(b.Contains(board[i][j])){\n                        p[n] = new int[]{i,j};\n                        if(board[i][j]=='k'){\n                            k = n;\n                        }\n                        n++;\n                    } \n                }\n                if(col == 'w'){\n                    if(w.Contains(board[i][j])){\n                        p[n] = new int[]{i,j};\n                        if(board[i][j]=='K'){\n                            k = n;\n                        }\n                        n++;\n                    } \n                } \n            }\n        }\n        \n        int[][] _p = new int[n][];\n        _p[0] = p[k];\n        int r = 1;\n        for(int i = 0; i < n; i++){\n            if(i!=k){\n                _p[r] = p[i];\n                r++;\n            }\n        }\n        return _p;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               char[] board_temp = Console.ReadLine().ToCharArray();\n               board[board_i] = board_temp;\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":1241,"fileType":"csharp","requestStartTime":1518007696088}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        if(acid_name.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":174,"fileType":"csharp","requestStartTime":1518007818237}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        if(acid_name.Length < 7){\n            if(acid_name.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":212,"fileType":"csharp","requestStartTime":1518007832365}}
{"body": {"column":25,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string acidNaming(string acid_name) {\n        if(acid_name.Length < 7)\n        {\n            if(acid_name.EndsWith(\"ic\"))\n               {\n                    return \"polyatomic acid\";\n                }\n               else\n               {\n                   return \"not an acid\";\n               }\n           }\n        else{\n            \n            if(acid_name.)\n            \n        }\n        }\n    \n               \n               \n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            string acid_name = Console.ReadLine();\n            string result = acidNaming(acid_name);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":478,"fileType":"csharp","requestStartTime":1518007949673}}
{"body": {"column":55,"line":80,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    struct Point {\n        public int x, y;\n        \n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        public override bool Equals(object o) {\n            Point toCompare = (Point)o;\n            \n            if(toCompare.x == this.x &&\n              toCompare.y == this.y) return true;\n            \n            return false;\n        }\n        \n        public override int GetHashCode() { return 1; }\n    }\n    \n    static int waysToGiveACheck(char[,] board) {        \n        Point pawnLocation = new Point(-1, -1);\n        Point kingLocation = new Point(-1, -1);\n        List<Point> blackPieces = new List<Point>();\n        List<Point> whitePieces = new List<Point>();\n        List<char> validWhitePieces = new List<Point>();\n        \n        // First find the pawn that can be promoted\n        for(int y = 0; y < 8; y++) {\n            for(int x = 0; x < 8; x++) {\n                // Is there a white pawn at the current location?\n                if(board[x,y] == 'P') {\n                    // Are we at the 7th row and can the pawn be moved to an empty cell above it?\n                    if(y == 1 && board[x,0] == '#') {\n                        // Found the pawn to be promoted\n                        pawnLocation = new Point(x, 0);\n                        // Only one white spawn can be promoted, move on\n                    }\n                }\n                \n                // Is there the black king at the current location?\n                else if(board[x,y] == 'k') {\n                    kingLocation = new Point(x, y);\n                    blackPieces.Add(kingLocation);\n                }\n                \n                else if(board[x,y] == 'b' || \n                        board[x,y] == 'n' || \n                        board[x,y] =='p' || \n                        board[x,y] == 'q' || \n                        board[x,y] == 'r') {\n                    blackPieces.Add(new Point(x, y));\n                }\n                \n                else if(board[x,y] == 'B' || \n                        board[x,y] == 'N' || \n                        board[x,y] == 'P' || \n                        board[x,y] == 'Q' || \n                        board[x,y] == 'R') {\n                    whitePieces.Add(new Point(x, y));\n                    validWhitePieces.Add(board[x,y]);\n                }\n            }\n        }\n\n        var queenMoves = GetLegalMovesQueen(pawnLocation, blackPieces, whitePieces);\n        var rookMoves = GetLegalMovesRook(pawnLocation, blackPieces, whitePieces);\n        var bishopMoves = GetLegalMovesBishop(pawnLocation, blackPieces, whitePieces);\n        var knightMoves = GetLegalMovesKnight(pawnLocation);\n        \n        var checkCount = 0;\n        \n        if(!validWhitePieces.Contains('Q') && queenMoves.Contains(kingLocation)) checkCount++;\n        if(!validWhitePieces.Where(x => x.Equals('R')). && rookMoves.Contains(kingLocation)) checkCount++;\n        if(bishopMoves.Contains(kingLocation)) checkCount++;\n        if(knightMoves.Contains(kingLocation)) checkCount++;\n\n        // Go through all other pieces to check if they're\n        foreach(var piece in whitePieces) {\n            switch(board[piece.x, piece.y]) {\n                case 'B':\n                    if(GetLegalMovesBishop(new Point(piece.x, piece.y), blackPieces, whitePieces).Contains(kingLocation)) \n                        checkCount++;\n                    break;\n\n                case 'Q':\n                    if(GetLegalMovesQueen(new Point(piece.x, piece.y), blackPieces, whitePieces).Contains(kingLocation))\n                        checkCount++;\n                    break;\n                    \n                case 'R':\n                    if(GetLegalMovesRook(new Point(piece.x, piece.y), blackPieces, whitePieces).Contains(kingLocation))\n                        checkCount++;\n                    break;\n            }\n        }\n        return checkCount;\n    }\n    \n    // Queen can move horizontally, vertically and diagonally \n    static List<Point> GetLegalMovesQueen(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n        return legalMoves;\n    }\n    \n    static List<Point> GetLegalMovesRook(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalHorizontalMoves(s, -1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalVerticalMoves(s, blackPieces, whitePieces));\n        return legalMoves;\n    }\n    \n    static List<Point> GetLegalMovesBishop(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, 1, blackPieces, whitePieces));\n        legalMoves.AddRange(GetLegalDiagonalMoves(s, -1, blackPieces, whitePieces));\n        return legalMoves;\n    }\n    \n    static List<Point> GetLegalMovesKnight(Point s) {\n        var legalMoves = new List<Point>();\n        \n        var possibleMoves = new Point[] {\n            new Point(s.x - 2, s.y + 1),\n            new Point(s.x - 2, s.y - 1),\n            new Point(s.x + 2, s.y + 1),\n            new Point(s.x + 2, s.y - 1),\n            new Point(s.x - 1, s.y + 2),\n            new Point(s.x + 1, s.y + 2)\n        };\n        \n        foreach(var move in possibleMoves) {\n            if(move.x >= 0 || move.x < 8) legalMoves.Add(move);\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalDiagonalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece diagonally until it goes out of bounds or hits a black piece\n        while(newLocation.x > 0 && newLocation.x < 8 && newLocation.y < 8) \n        {\n            // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            // Nothing on the way, legal move\n            legalMoves.Add(newLocation);\n            \n            newLocation.x += xc;\n            newLocation.y++;\n        }\n        \n        newLocation = s;\n        \n        // Move the piece diagonally until it goes out of bounds or hits a black piece\n        while(newLocation.x > 0 && newLocation.x < 8 && newLocation.y >=0) \n        {\n            // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            // Nothing on the way, legal move\n            legalMoves.Add(newLocation);\n            \n            newLocation.x += xc;\n            newLocation.y--;\n        }\n        \n        return legalMoves;\n    }\n    \n    // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalHorizontalMoves(Point s, int xc, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.x > 0 && newLocation.x < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && !newLocation.Equals(s)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.x += xc;\n        }\n        \n        return legalMoves;\n    }\n    \n     // s is the starting point, xc is the horizontal direction\n    static List<Point> GetLegalVerticalMoves(Point s, List<Point> blackPieces, List<Point> whitePieces) {\n        var legalMoves = new List<Point>();        \n        var newLocation = s;\n        \n        // Move the piece horizontally until it hits something or goes out of bounds\n        while(newLocation.y > 0 && newLocation.y < 8) \n        {\n             // If we hit a white piece, it's no longer a legal move\n            if(whitePieces.Contains(newLocation) && !newLocation.Equals(s)) {\n                break;\n            }\n            \n            // If we hit a black piece, it's a valid location but movement stops there\n            if(blackPieces.Contains(newLocation)) {\n                legalMoves.Add(newLocation);\n                break;\n            }\n            \n            legalMoves.Add(newLocation);\n            newLocation.y++;\n        }\n        \n        return legalMoves;\n    }    \n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[,] board = new char[8,8];\n            for(int board_i = 0; board_i < 8; board_i++){\n               //string[] board_temp = Console.ReadLine().Split(' ');\n               //board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n                \n                string line = Console.ReadLine();\n                for(int i = 0; i < 8; i++) {\n                    board[i, board_i] = line[i];\n                }\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n","offset":2993,"fileType":"csharp","requestStartTime":1518008025115}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        \n        Scanner sc = new Scanner(System.in);\n        String word = sc.next();\n        System.out.\n    }\n}\n\n","offset":347,"fileType":"csharp","requestStartTime":1518008024883}}
{"body": {"column":18,"line":32,"wordToComplete":"7.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    \n    static char[] Promotions = new char{'Q', 'R', 'B', 'N'};\n\n    static int waysToGiveACheck(char[][] board) {\n        int pawnCol = Array.IndexOf(board[1], \"P\");\n        int result = 0;\n        foreach(string promotion in Promotions) {\n            var newBoard = Promote(board, pawnCol, Promotion);\n            if(IsCheck(newBoard)) result++;\n        }\n        return result;\n    }\n    \n    static char[][] Promote(char[][] board, int column, char promotion) {\n        var result = new char[8][];\n        for(int i=0; i<7; i++) {\n            result[i] = board[i];\n        }\n        result[7] = board[7].Clone();\n        result[7][column] = '#';\n        result[8] = board[8].Clone();\n        result[8][column] = promotion;\n    }\n    \n    static bool IsCheck(char[][] board) {\n        int i = 7.\n        for(int i=7; i>0)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < n; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string[] board_temp = Console.ReadLine().Split(' ');\n               board[board_i] = Array.ConvertAll(board_temp,Char.Parse);\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":904,"fileType":"csharp","requestStartTime":1518008233536}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        var min = 0;\n        for(int i = 0; i < doors.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":213,"fileType":"csharp","requestStartTime":1518008208116}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int>\n        int[] numbers = Array.ConvertAll(tokens, int.Parse); \n    }\n}\n\n","offset":312,"fileType":"csharp","requestStartTime":1518008254395}}
{"body": {"column":37,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>\n        int[] numbers = Array.ConvertAll(tokens, int.Parse); \n    }\n}\n\n","offset":331,"fileType":"csharp","requestStartTime":1518008272362}}
{"body": {"column":29,"line":70,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n\n    static int waysToGiveACheck(char[,] board)\n    {\n        int ikingIndex=0,jkingIndex=0;\n        int ipawnIndex = 0, jpawnIndex = 0;\n        int d = 0;\n        // Complete this function\n        for (int i=0;i<8;i++)\n        {\n            for(int j=0;j<8;j++)\n            {\n                if(board[i,j]=='k')\n                {\n                    ikingIndex = i;\n                    jkingIndex = j;\n                }\n                if (board[i,j] == 'P')\n                {\n                    ipawnIndex = i;\n                    jpawnIndex = j;\n                }\n                              \n            }\n        }\n        if(ikingIndex == (ipawnIndex-1) && jkingIndex == jpawnIndex )\n        {\n            d = d + 2;\n        }\n        if(Math.Abs(ikingIndex-(ipawnIndex-1)) == Math.Abs(jkingIndex-jpawnIndex))\n        {\n            d = d + 2;\n        }\n        if (ipawnIndex == ikingIndex)\n        {\n            d = d + 1;\n        }\n        return d;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = 8 * t;\n        int[] result = new int[0];\n      \n\n        while (t!=0)\n        {\n            char[,] board = new char[8, n];\n            for (int a0 = 0; a0 < 8; a0++)\n            {              \n                char[] board_temp = Console.ReadLine().ToCharArray();\n                for (int board_i = 0; board_i < 8; board_i++)\n                {\n                    board[a0,board_i] = board_temp[board_i];\n\n                }\n               \n            }\n            Array.Resize(ref result, result.Length + 1);\n            result[result.Length - 1] = waysToGiveACheck(board);\n            t--;            \n        }\n        for(int i=0;i<result.;i++)\n        {\n            Console.WriteLine(result[i]);\n          \n        }\n        \n          Console.ReadLine();\n    }\n}\n\n\n","offset":1828,"fileType":"csharp","requestStartTime":1518008174460}}
{"body": {"column":43,"line":41,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int res = 0;\n        \n        int[][] b = FindPieces(board, 'b');\n        int[][] w = FindPieces(board, 'w');\n\n        for(int i = 0; i < w.Count(); i++){\n            if(w[i][0] == 1 && board[w[i][0]][w[i][1]] == 'P' && board[0][w[i][1]]=='#'){\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'Q'), b, MovePiece(w,i));\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'B'), b, MovePiece(w,i));\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'R'), b, MovePiece(w,i));\n                res+=CheckCheck(UpgradePawn(board,w[i][1],'N'), b, MovePiece(w,i));    \n            }\n        }\n        return res;\n    }\n    \n    static char[][] UpgradePawn(char[][] board, int n, char c){\n        char[][] _board = (char[][]) board.Clone();\n        _board[1][n] = '#';\n        _board[0][n] = c;\n        return _board;\n    }\n    \n    static int[][] MovePiece(int[][] w, int n){\n        int[][] _w = (int[][])w.Clone();\n        _w[n][0] = 0;\n        return _w;\n    }\n    \n    static int CheckCheck(char[][] board, int[][] b, int[][] w){\n        if(b[0][0] > 0){\n            for(int i = b[0][0]; i >=0; i--){\n                if(board[i][b[0][1]] != '#'){\n                    if(new char[]{'Q','R'}.board[i][b[0][1]])\n                }\n            }\n        }\n    }\n    \n    static int[][] FindPieces(char[][] board, char col){\n        int[][] p = new int[4][];\n        int n = 0;\n        int k = 0;\n        char[] b = new char[]{'k','q','n','b','r','p'};\n        char[] w = new char[]{'K','Q','N','B','R','P'};\n        for(int i = 0; i < 8; i++){\n            for(int j = 0; j < 8; j++){\n                if(col == 'b'){\n                    if(b.Contains(board[i][j])){\n                        p[n] = new int[]{i,j};\n                        if(board[i][j]=='k'){\n                            k = n;\n                        }\n                        n++;\n                    } \n                }\n                if(col == 'w'){\n                    if(w.Contains(board[i][j])){\n                        p[n] = new int[]{i,j};\n                        if(board[i][j]=='K'){\n                            k = n;\n                        }\n                        n++;\n                    } \n                } \n            }\n        }\n        \n        int[][] _p = new int[n][];\n        _p[0] = p[k];\n        int r = 1;\n        for(int i = 0; i < n; i++){\n            if(i!=k){\n                _p[r] = p[i];\n                r++;\n            }\n        }\n        return _p;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               char[] board_temp = Console.ReadLine().ToCharArray();\n               board[board_i] = board_temp;\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":1372,"fileType":"csharp","requestStartTime":1518008301159}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr].)\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":266,"fileType":"csharp","requestStartTime":1518008338417}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].)\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":272,"fileType":"csharp","requestStartTime":1518008360761}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        for (int i=0; i<n; i++){\n            String tokens=Console.ReadLine();\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.\n        }\n        \n    }\n}\n\n","offset":510,"fileType":"csharp","requestStartTime":1518008372411}}
{"body": {"column":12,"line":12,"wordToComplete":"syso","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        syso\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":298,"fileType":"csharp","requestStartTime":1518008378867}}
{"body": {"column":12,"line":12,"wordToComplete":"syso","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        syso\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":298,"fileType":"csharp","requestStartTime":1518008380595}}
{"body": {"column":11,"line":12,"wordToComplete":"sys","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        sys\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":297,"fileType":"csharp","requestStartTime":1518008382458}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        System.\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":301,"fileType":"csharp","requestStartTime":1518008383928}}
{"body": {"column":19,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        System.out.\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":305,"fileType":"csharp","requestStartTime":1518008388856}}
{"body": {"column":22,"line":12,"wordToComplete":"pri","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        System.out.pri\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":308,"fileType":"csharp","requestStartTime":1518008391068}}
{"body": {"column":22,"line":12,"wordToComplete":"pri","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        System.out.pri\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":308,"fileType":"csharp","requestStartTime":1518008392882}}
{"body": {"column":13,"line":12,"wordToComplete":"conso","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        conso\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":299,"fileType":"csharp","requestStartTime":1518008400306}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        Console.\n    }\n    }\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":302,"fileType":"csharp","requestStartTime":1518008401634}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    if(board[posr][posc].Equals('d')){\n        Console.WriteLine(\"CLEAN\");\n        return;\n    }\n    Console.\n}\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":356,"fileType":"csharp","requestStartTime":1518008473688}}
{"body": {"column":16,"line":50,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    int counter = 0;\n    int N,M;\n    void traverse(vector< vector<int> > grid, int x, int y){\n        counter++;\n        grid[x][y]=0;\n        if(x-1>=0 && grid[x-1][y]==1){\n            traverse(grid, x-1, y);\n        }\n        if(y-1>=0 && grid[x][y-1]==1){\n            traverse(grid, x, y-1);\n        }\n        if(x+1<M && grid[x+1][y]==1){\n            traverse(grid, x+1, y);\n        }\n        if(y+1<N && grid[x][y+1]==1){\n            traverse(grid, x, y+1);\n        }\n    }\n\n    int get_biggest_region(vector< vector<int> > grid) {\n        int max = 0;\n        for(int i=0; i<M; i++){\n            for(int j=0; j<N; j++){\n                if(grid[i][j]==1){\n                    traverse(grid, i, j);\n                    if(counter>max){\n                        max=counter;\n                        counter=0;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n    \n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int m = Convert.ToInt32(Console.ReadLine());\n        int[][] grid = new int[n][];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           string[] grid_temp = Console.ReadLine().Split(' ');\n           grid[grid_i] = Array.ConvertAll(grid_temp,Int32.Parse);\n        }\n        Console.\n    }\n}\n\n\n","offset":1400,"fileType":"csharp","requestStartTime":1518008480357}}
{"body": {"column":28,"line":17,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        for (int i=0; i<n; i++){\n            String tokens=Console.ReadLine();\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":666,"fileType":"csharp","requestStartTime":1518008514049}}
{"body": {"column":31,"line":50,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    int counter = 0;\n    int N,M;\n    void traverse(int[][] grid, int x, int y){\n        counter++;\n        grid[x][y]=0;\n        if(x-1>=0 && grid[x-1][y]==1){\n            traverse(grid, x-1, y);\n        }\n        if(y-1>=0 && grid[x][y-1]==1){\n            traverse(grid, x, y-1);\n        }\n        if(x+1<M && grid[x+1][y]==1){\n            traverse(grid, x+1, y);\n        }\n        if(y+1<N && grid[x][y+1]==1){\n            traverse(grid, x, y+1);\n        }\n    }\n\n    int get_biggest_region(int[][] grid) {\n        int max = 0;\n        for(int i=0; i<M; i++){\n            for(int j=0; j<N; j++){\n                if(grid[i][j]==1){\n                    traverse(grid, i, j);\n                    if(counter>max){\n                        max=counter;\n                        counter=0;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n    \n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int m = Convert.ToInt32(Console.ReadLine());\n        int[][] grid = new int[n][];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           string[] grid_temp = Console.ReadLine().Split(' ');\n           grid[grid_i] = Array.ConvertAll(grid_temp,Int32.Parse);\n        }\n        Console.WriteLine(this.get_biggest_region(grid));\n    }\n}\n\n\n","offset":1387,"fileType":"csharp","requestStartTime":1518008543271}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        for (int i=0; i<n; i++){\n            String tokens=Console.ReadLine();\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.push(numbers[1]);\n                        break;\n                    case 2:\n                        seq.\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":771,"fileType":"csharp","requestStartTime":1518008547374}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        for (int i=0; i<n; i++){\n            String tokens=Console.ReadLine();\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.push(numbers[1]);\n                        break;\n                    case 2:\n                        seq.pop();\n                        break;\n                    case 3:\n                        Console.\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":869,"fileType":"csharp","requestStartTime":1518008572748}}
{"body": {"column":46,"line":23,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        for (int i=0; i<n; i++){\n            String tokens=Console.ReadLine();\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.push(numbers[1]);\n                        break;\n                    case 2:\n                        seq.pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":883,"fileType":"csharp","requestStartTime":1518008585652}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nclass Solution {\nstatic void next_move(int posr, int posc, int dimh, int dimw, String [] board){\n    Console.\n    if(board[posr][posc].Equals('d')){\n        Console.WriteLine(\"CLEAN\");\n        return;\n    }\n    Console.WriteLine(\"RIGHT\");\n}\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n\nstatic void Main(String[] args) {\n        String temp = Console.ReadLine();\n        String[] position = temp.Split(' ');\n        int[] pos = new int[2];\n        for(int i=0;i<2;i++) pos[i] = Convert.ToInt32(position[i]);\n        String[] dimension = Console.ReadLine().Split(' ');\n        int[] dim = new int[2];\n        for(int i=0;i<2;i++) dim[i] = Convert.ToInt32(dimension[i]);\n        String[] board = new String[dim[0]];\n        for(int i=0;i<dim[0];i++) {\n            board[i] = Console.ReadLine();\n        }\n        next_move(pos[0], pos[1],dim[0], dim[1], board);\n    }\n}\n","offset":259,"fileType":"csharp","requestStartTime":1518008598841}}
{"body": {"column":38,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int besttotalOperations = int.\n        int totalOperations = 0;\n        for (j = 0; j > -5; j--)\n        {\n            minStart -= j;\n            for (i = 0; i < n; i++)\n            {\n                arr[i] -= minStart;\n                totalOperations += arr[i] / 5;\n                arr[i] %= 5;\n                totalOperations += arr[i] / 2;\n                arr[i] %= 2;\n                totalOperations += arr[i];\n                arr[i] += minStart;\n            }\n        }\n        \n        return totalOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":238,"fileType":"csharp","requestStartTime":1518008760436}}
{"body": {"column":39,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int besttotalOperations = int.MaxValue;\n        int totalOperations = 0;\n        for (j = 0; j > -5; j--)\n        {\n            minStart -= j;\n            for (i = 0; i < n; i++)\n            {\n                arr[i] -= minStart;\n                totalOperations += arr[i] / 5;\n                arr[i] %= 5;\n                totalOperations += arr[i] / 2;\n                arr[i] %= 2;\n                totalOperations += arr[i];\n                arr[i] += minStart;\n            }\n            bestTotalOperations = Math.\n        }\n        \n        return totalOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":721,"fileType":"csharp","requestStartTime":1518008774107}}
{"body": {"column":33,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        for (int i = 1; i < grid.; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                if (grid[i][j] < grid[i - 1][j])\n                {\n                    Console.WriteLine(\"NO\");\n                    return;\n                }\n            }\n        }\n\n        Console.WriteLine(\"YES\");\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":195,"fileType":"csharp","requestStartTime":1518008889676}}
{"body": {"column":31,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        int aScore, bScore = 0;\n        // Complete this function\n        if(a0 > b0) {\n          aScore += 1;\n        } else if (b0 > a0) {\n           bScore += 1;\n        }\n        \n        if(a1 > b1) {\n          aScore += 1;\n        } else if (b1 > a1) {\n           bScore += 1;\n        }\n        \n        if(a2 > b2) {\n          aScore += 1;\n        } else if (b2 > a2) {\n           bScore += 1;\n        }\n        \n        String output = aScore.ToString( + \"\" + bScore);\n        return output;\n  \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":627,"fileType":"csharp","requestStartTime":1518008902898}}
{"body": {"column":49,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        int aScore, bScore = 0;\n        // Complete this function\n        if(a0 > b0) {\n          aScore += 1;\n        } else if (b0 > a0) {\n           bScore += 1;\n        }\n        \n        if(a1 > b1) {\n          aScore += 1;\n        } else if (b1 > a1) {\n           bScore += 1;\n        }\n        \n        if(a2 > b2) {\n          aScore += 1;\n        } else if (b2 > a2) {\n           bScore += 1;\n        }\n        \n        String output = aScore.ToString + bScore.;\n        return output;\n  \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":645,"fileType":"csharp","requestStartTime":1518008910192}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n    }\n}\n\nint num1 = sc.\n\n","offset":264,"fileType":"csharp","requestStartTime":1518009018398}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        int result = 0;\n        int amin = a.Min();\n        int amax = a.Max();\n        List<int> result1 = new List<int>();\n        for(a.)\n        \n        \n        int a=0;\n        bool isOk;\n        for(var i=min; i<=max; i++){\n            isOk=true;\n            a=0;\n            while(isOk==true||i<a.Length){\n                if()\n                \n                \n                \n            }\n            \n        }\n        Console.WriteLine(min);\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":322,"fileType":"csharp","requestStartTime":1518009029766}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        int result = 0;\n        int amin = a.Min();\n        int amax = a.Max();\n        List<int> result1 = new List<int>();\n        for(var i = a.)\n        \n        \n        int a=0;\n        bool isOk;\n        for(var i=min; i<=max; i++){\n            isOk=true;\n            a=0;\n            while(isOk==true||i<a.Length){\n                if()\n                \n                \n                \n            }\n            \n        }\n        Console.WriteLine(min);\n        return 0;\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":330,"fileType":"csharp","requestStartTime":1518009037277}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        \n        while(int i = 0, i < 10, i++)\n        {\n            console.\n        }\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1518009153946}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        \n        while(int i = 0, i < 10, i++)\n        {\n            Console.\n        }\n    }\n}\n\n\n","offset":272,"fileType":"csharp","requestStartTime":1518009162336}}
{"body": {"column":36,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        int m=INT_MIN;\n        int mm=m;\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n                        if (numbers[1]>m){\n                            mm=m;\n                            m=numbers[1];\n                        }\n                        break;\n                    case 2:\n                        int top=seq.\n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":920,"fileType":"csharp","requestStartTime":1518009261660}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        int aScore, bScore = 0;\n        // Complete this function\n        if(a0 > b0) {\n          aScore += 1;\n        } else if (b0 > a0) {\n           bScore += 1;\n        }\n        \n        if(a1 > b1) {\n          aScore += 1;\n        } else if (b1 > a1) {\n           bScore += 1;\n        }\n        \n        if(a2 > b2) {\n          aScore += 1;\n        } else if (b2 > a2) {\n           bScore += 1;\n        }\n        \n        string aStringScore = (string)aScore.ToString(); \n        string bStringScore = (string)bScore.ToString();\n        \n        console.typeof\n        return output;\n  \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":736,"fileType":"csharp","requestStartTime":1518009269143}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        int aScore, bScore = 0;\n        // Complete this function\n        if(a0 > b0) {\n          aScore += 1;\n        } else if (b0 > a0) {\n           bScore += 1;\n        }\n        \n        if(a1 > b1) {\n          aScore += 1;\n        } else if (b1 > a1) {\n           bScore += 1;\n        }\n        \n        if(a2 > b2) {\n          aScore += 1;\n        } else if (b2 > a2) {\n           bScore += 1;\n        }\n        \n        string aStringScore = (string)aScore.ToString(); \n        string bStringScore = (string)bScore.ToString();\n        \n        Console.typeof\n        return output;\n  \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":736,"fileType":"csharp","requestStartTime":1518009274293}}
{"body": {"column":42,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        while(q-- != 0)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            char[][] grid = new char[grid.][];\n            for (int i = 0; i < n; i++)\n            {\n                grid[i] = Console.ReadLine().ToCharArray();\n                Array.Sort(grid[i]);\n            }\n\n            bool valid = true;\n            for (int i = 1; i < n && valid; i++)\n                for (int j = 0; j < n && valid; j++)\n                    if (grid[i - 1][j] > grid[i][j])\n                        valid = false;\n\n            if (valid)\n                Console.WriteLine(\"YES\");\n            else\n                Console.WriteLine(\"NO\");\n        }\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":295,"fileType":"csharp","requestStartTime":1518009413239}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        int aScore, bScore = 0;\n        // Complete this function\n        if(a0 > b0) {\n          aScore += 1;\n        } else if (b0 > a0) {\n           bScore += 1;\n        }\n        \n        if(a1 > b1) {\n          aScore += 1;\n        } else if (b1 > a1) {\n           bScore += 1;\n        }\n        \n        if(a2 > b2) {\n          aScore += 1;\n        } else if (b2 > a2) {\n           bScore += 1;\n        }\n        \n        Console.\n        \n        string aStringScore = \"test\"; \n        string bStringScore = bScore.ToString();\n        \n        Console.WriteLine(aStringScore);\n        return output;\n  \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":612,"fileType":"csharp","requestStartTime":1518009418839}}
{"body": {"column":32,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int totalOperations = 0;\n        int minOperations = int.;\n        for (j = 0; j < 5; j++)\n        {\n            minStart -= j;\n            totalOperations = 0;\n            for (i = 0; i < n; i++)\n            {\n                temp = arr[i];\n                temp -= minStart;\n                totalOperations += temp / 5;\n                temp %= 5;\n                totalOperations += temp / 2;\n                temp %= 2;\n                totalOperations += temp;\n            }\n            if (minOperations > totalOperations)\n            {\n                minOperations = totalOperations;\n            }\n        }\n        return totalOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":265,"fileType":"csharp","requestStartTime":1518009492807}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] solve(int a0, int a1, int a2, int b0, int b1, int b2){\n        int aScore, bScore = 0;\n        // Complete this function\n        if(a0 > b0) {\n          aScore += 1;\n        } else if (b0 > a0) {\n           bScore += 1;\n        }\n        \n        if(a1 > b1) {\n          aScore += 1;\n        } else if (b1 > a1) {\n           bScore += 1;\n        }\n        \n        if(a2 > b2) {\n          aScore += 1;\n        } else if (b2 > a2) {\n           bScore += 1;\n        }\n        \n        Console.\n     \n        return 0;\n  \n    }\n\n    static void Main(String[] args) {\n        string[] tokens_a0 = Console.ReadLine().Split(' ');\n        int a0 = Convert.ToInt32(tokens_a0[0]);\n        int a1 = Convert.ToInt32(tokens_a0[1]);\n        int a2 = Convert.ToInt32(tokens_a0[2]);\n        string[] tokens_b0 = Console.ReadLine().Split(' ');\n        int b0 = Convert.ToInt32(tokens_b0[0]);\n        int b1 = Convert.ToInt32(tokens_b0[1]);\n        int b2 = Convert.ToInt32(tokens_b0[2]);\n        int[] result = solve(a0, a1, a2, b0, b1, b2);\n        Console.WriteLine(String.Join(\" \", result));\n        \n\n    }\n}\n\n\n","offset":612,"fileType":"csharp","requestStartTime":1518009499544}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int totalOperations = 0;\n        int minOperations = int.MaxValue;\n        int temp;\n        for (j = 0; j < 5; j++)\n        {\n            minStart -= j;\n            totalOperations = 0;\n            for (i = 0; i < n; i++)\n            {\n                temp = arr[i];\n                temp -= minStart;\n                totalOperations += temp / 5;\n                temp %= 5;\n                totalOperations += temp / 2;\n                temp %= 2;\n                totalOperations += temp;\n            }\n            Console.\n            if (minOperations > totalOperations)\n            {\n                minOperations = totalOperations;\n            }\n        }\n        return minOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":729,"fileType":"csharp","requestStartTime":1518009589981}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.\n    }\n}\n\n","offset":311,"fileType":"csharp","requestStartTime":1518009599594}}
{"body": {"column":39,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').\n    }\n}\n\n","offset":322,"fileType":"csharp","requestStartTime":1518009605146}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int totalOperations = 0;\n        int minOperations = int.MaxValue;\n        int temp;\n        for (j = 0; j < 5; j++)\n        {\n            minStart -= j;\n            totalOperations = 0;\n            for (i = 0; i < n; i++)\n            {\n                Console.\n                temp = arr[i];\n                temp -= minStart;\n                totalOperations += temp / 5;\n                temp %= 5;\n                totalOperations += temp / 2;\n                temp %= 2;\n                totalOperations += temp;\n            }\n            Console.WriteLine(totalOperations);\n            if (minOperations > totalOperations)\n            {\n                minOperations = totalOperations;\n            }\n        }\n        return minOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":469,"fileType":"csharp","requestStartTime":1518009614502}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').sele\n    }\n}\n\n","offset":80,"fileType":"csharp","requestStartTime":1518009615296}}
{"body": {"column":39,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').\n    }\n}\n\n","offset":341,"fileType":"csharp","requestStartTime":1518009618793}}
{"body": {"column":24,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int totalOperations = 0;\n        int minOperations = int.MaxValue;\n        int temp;\n        for (j = 0; j < 5; j++)\n        {\n            minStart -= j;\n            totalOperations = 0;\n            for (i = 0; i < n; i++)\n            {\n                temp = arr[i];\n                Console.\n                temp -= minStart;\n                totalOperations += temp / 5;\n                temp %= 5;\n                totalOperations += temp / 2;\n                temp %= 2;\n                totalOperations += temp;\n            }\n            Console.WriteLine(totalOperations);\n            if (minOperations > totalOperations)\n            {\n                minOperations = totalOperations;\n            }\n        }\n        return minOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":500,"fileType":"csharp","requestStartTime":1518009624158}}
{"body": {"column":55,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.\n    }\n}\n\n","offset":357,"fileType":"csharp","requestStartTime":1518009625457}}
{"body": {"column":20,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution\n{\n    static int equal(int n, int[] arr)\n    {\n        int i, j;\n        int minStart = arr.Min();\n        int totalOperations = 0;\n        int minOperations = int.MaxValue;\n        int temp;\n        for (j = 0; j < 5; j++)\n        {\n            minStart -= j;\n            totalOperations = 0;\n            for (i = 0; i < n; i++)\n            {\n                temp = arr[i];\n                Console.Write(\"{0} \", temp);\n                temp -= minStart;\n                totalOperations += temp / 5;\n                temp %= 5;\n                totalOperations += temp / 2;\n                temp %= 2;\n                totalOperations += temp;\n            }\n            Console.\n            Console.WriteLine(totalOperations);\n            if (minOperations > totalOperations)\n            {\n                minOperations = totalOperations;\n            }\n        }\n        return minOperations;\n    }\n\n    static void Main(String[] args)\n    {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n            int result = equal(n, arr);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":774,"fileType":"csharp","requestStartTime":1518009641990}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int beautifulTriplets(int d, int[] arr) {\n      for (i=0;i<arr.;i++)\n{\n    for (j=i+1;j<arr_size;j++)\n    {\n        if ((arr[j] - arr[i])==d)\n        {\n            for (k=j+1;k<arr_size;k++)\n                if ((arr[k]-arr[j]) ==d) cnt++;\n        }\n    }\n\n}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int d = Convert.ToInt32(tokens_n[1]);\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int result = beautifulTriplets(d, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":178,"fileType":"csharp","requestStartTime":1518009643844}}
{"body": {"column":65,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).;\n        \n    }\n}\n\n","offset":367,"fileType":"csharp","requestStartTime":1518009649659}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = val    .\n    }\n}\n\n","offset":407,"fileType":"csharp","requestStartTime":1518009676155}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = values.\n    }\n}\n\n","offset":406,"fileType":"csharp","requestStartTime":1518009678587}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = values.Length;\n                \n        decimal mean = 0;\n        values.\n    }\n}\n\n","offset":472,"fileType":"csharp","requestStartTime":1518009709492}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = values.Length;\n                \n        decimal mean = 0;\n        values.ToList().\n    }\n}\n\n","offset":481,"fileType":"csharp","requestStartTime":1518009714933}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = values.Length;\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.\n    }\n}\n\n","offset":546,"fileType":"csharp","requestStartTime":1518009736230}}
{"body": {"column":25,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = values.Length;\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n    }\n}\n\n","offset":285,"fileType":"csharp","requestStartTime":1518009770944}}
{"body": {"column":39,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.Parse(Console.\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n        int length = values.Length;\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n    }\n}\n\n","offset":299,"fileType":"csharp","requestStartTime":1518009774104}}
{"body": {"column":34,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        SortedDictionary<int, int>\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n        \n                        break;\n                    case 2:\n                        int top=seq.Peek();                        \n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":279,"fileType":"csharp","requestStartTime":1518009817293}}
{"body": {"column":69,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        SortedDictionary<int, int> sd =new SortedDictionary<int, int>\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n        \n                        break;\n                    case 2:\n                        int top=seq.Peek();                        \n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":314,"fileType":"csharp","requestStartTime":1518009828582}}
{"body": {"column":31,"line":22,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        SortedDictionary<int, int> sd =new SortedDictionary<int, int>();\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n                        if (sd.)  \n                        break;\n                    case 2:\n                        int top=seq.Peek();                        \n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":743,"fileType":"csharp","requestStartTime":1518009857135}}
{"body": {"column":30,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.Parse(Console.ReadLine());\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n        \n        int diff = length / 2;\n        int[] sorted = values.\n        decimal median = (values[diff] + values[diff + 1]) / 2;\n        Console.WriteLine(median);\n    }\n}\n\n","offset":658,"fileType":"csharp","requestStartTime":1518009879449}}
{"body": {"column":39,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.Parse(Console.ReadLine());\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n        \n        int diff = length / 2;\n        int[] sorted = values.ToList().\n        decimal median = (values[diff] + values[diff + 1]) / 2;\n        Console.WriteLine(median);\n    }\n}\n\n","offset":667,"fileType":"csharp","requestStartTime":1518009889489}}
{"body": {"column":31,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        SortedDictionary<int, int> sd =new SortedDictionary<int, int>();\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n                        if (sd.Contains(numbers[1])){\n                            sd[numbers[1]]++;\n                        }else{\n                            sd.\n                        }  \n                        break;\n                    case 2:\n                        int top=seq.Peek();                        \n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":874,"fileType":"csharp","requestStartTime":1518009894409}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid, int t) {\n        \n        while(t-- != 0)\n        {\n            int n = grid.;\n            char[][] grid = new char[n][];\n            for (int i = 0; i < n; i++)\n            {\n                grid[i] = Console.ReadLine().ToCharArray();\n                Array.Sort(grid[i]);\n            }\n\n            bool valid = true;\n            for (int i = 1; i < n && valid; i++)\n                for (int j = 0; j < n && valid; j++)\n                    if (grid[i - 1][j] > grid[i][j])\n                        valid = false;\n\n            if (valid)\n                Console.WriteLine(\"YES\");\n            else\n                Console.WriteLine(\"NO\");\n        }\n        \n        return \"NO\";\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":228,"fileType":"csharp","requestStartTime":1518009934993}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.Parse(Console.ReadLine());\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n        \n        int diff = length / 2;\n        values.ToList().Sort();\n        Console.\n        decimal median = (values[diff] + values[diff + 1]) / 2;\n        Console.WriteLine(median);\n    }\n}\n\n","offset":676,"fileType":"csharp","requestStartTime":1518009937434}}
{"body": {"column":33,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.Parse(Console.ReadLine());\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n        \n        int diff = length / 2;\n        values.ToList().Sort();\n        Console.WriteLine(values.\n        decimal median = (values[diff] + values[diff + 1]) / 2;\n        Console.WriteLine(median);\n    }\n}\n\n","offset":693,"fileType":"csharp","requestStartTime":1518009941290}}
{"body": {"column":33,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int length = int.Parse(Console.ReadLine());\n        \n        string data = Console.ReadLine();\n        int[] values = data.Split(' ').Select(n => int.Parse(n)).ToArray();\n                \n        decimal mean = 0;\n        values.ToList().ForEach(n => mean += n);\n        mean /= length;\n        Console.WriteLine(mean);\n        \n        int diff = length / 2;\n        values.ToList().Sort();\n        Console.WriteLine(string.\n        decimal median = (values[diff] + values[diff + 1]) / 2;\n        Console.WriteLine(median);\n    }\n}\n\n","offset":693,"fileType":"csharp","requestStartTime":1518009946594}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        for(int i=0;i<arr.)\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":170,"fileType":"csharp","requestStartTime":1518009992862}}
{"body": {"column":31,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        SortedDictionary<int, int> sd =new SortedDictionary<int, int>();\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n                        if (sd.Contains(numbers[1])){\n                            sd[numbers[1]]++;\n                        }else{\n                            sd.add(numbers[1],1);\n                        }  \n                        break;\n                    case 2:\n                        int top=seq.Peek();\n                        if(sd[top]>1){\n                            sd[top]--;\n                        }else{\n                            sd.\n                        }\n                            \n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(seq.Max());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":1164,"fileType":"csharp","requestStartTime":1518010003287}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        for(int i =0; i<grid.)\n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":191,"fileType":"csharp","requestStartTime":1518010015414}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        for(int i =0; i<grid.Length; i++)\n        {\n            grid[i] = grid.\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":241,"fileType":"csharp","requestStartTime":1518010041842}}
{"body": {"column":28,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<a.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":220,"fileType":"csharp","requestStartTime":1518010043035}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nstatic void displayPathtoPrincess(int n, String [] grid){\n    \n    Console.\n  }\nstatic void Main(String[] args) {\n        int m;\n\n        m = int.Parse(Console.ReadLine());\n\n        String[] grid  = new String[m];\n        for(int i=0; i < m; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        displayPathtoPrincess(m,grid);\n     }\n}\n\nstatic void Main(String[] args) {\n        int m;\n\n        m = int.Parse(Console.ReadLine());\n\n        String[] grid  = new String[m];\n        for(int i=0; i < m; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        displayPathtoPrincess(m,grid);\n     }\n}\n","offset":240,"fileType":"csharp","requestStartTime":1518010087496}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int sum[] = new int[a.]\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<a.Length;j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":174,"fileType":"csharp","requestStartTime":1518010089393}}
{"body": {"column":32,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int sum[] = new int[arr.]\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<a.Length;j++)\n            {\n                \n            }\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":176,"fileType":"csharp","requestStartTime":1518010092541}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        for(int i =0; i<grid.Length; i++)\n        {\n            var tempArray =grid.ToCharArray();\n            Array.\n            grid[i] =  grid.ToCharArray();\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":279,"fileType":"csharp","requestStartTime":1518010110531}}
{"body": {"column":33,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        for(int i =0; i<grid.Length; i++)\n        {\n            var tempArray =grid.ToCharArray();\n            Array.Sort(tempArray);\n            \n            grid[i] =  tempArray.;\n        }\n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":342,"fileType":"csharp","requestStartTime":1518010126624}}
{"body": {"column":33,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid) {\n        \n        for(int i =0; i<grid.Length; i++)\n        {\n            var tempArray =grid.ToCharArray();\n            Array.Sort(tempArray);\n            \n            grid[i] =  tempArray.ToString();\n        }\n        \n        bool valid = true;\n        for (int i = 1; i < grid. && valid; i++)\n            for (int j = 0; j < n && valid; j++)\n                if (grid[i - 1][j] > grid[i][j])\n                    valid = false;\n\n        if (valid)\n            Console.WriteLine(\"YES\");\n        else\n            Console.WriteLine(\"NO\");\n        \n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine();   \n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":433,"fileType":"csharp","requestStartTime":1518010168073}}
{"body": {"column":29,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int arrsum[] = new int[arr.Length];\n        int sum = 0,max=0,min=0;\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<arr.Length;j++)\n            {\n                if(i!=j)\n                    sum+=arr[j];\n            }\n            arrsum[i]=sum;\n        }\n        \n        for(int i=0;i<arrsum>)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":472,"fileType":"csharp","requestStartTime":1518010228133}}
{"body": {"column":29,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int arrsum[] = new int[arr.Length];\n        int sum = 0,max=0,min=0;\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<arr.Length;j++)\n            {\n                if(i!=j)\n                    sum+=arr[j];\n            }\n            arrsum[i]=sum;\n        }\n        \n        for(int i=0;i<arrsum.)\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":472,"fileType":"csharp","requestStartTime":1518010229009}}
{"body": {"column":31,"line":33,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static void Main(String[] args) {\n        \n        int n = Convert.ToInt32(Console.ReadLine());\n        Stack<int> seq=new Stack<int>();\n        SortedDictionary<int, int> sd =new SortedDictionary<int, int>();\n        for (int i=0; i<n; i++){\n            String line=Console.ReadLine();\n            String[] tokens = line.Split(' ');\n            int[] numbers = Array.ConvertAll(tokens, int.Parse);     \n            int l=numbers.Length;\n            if (l<=2 && l>0){\n                int q=numbers[0];\n                switch (q){\n                    case 1:\n                        seq.Push(numbers[1]);\n                        if (sd.ContainsKey(numbers[1])){\n                            sd[numbers[1]]++;\n                        }else{\n                            sd.Add(numbers[1],1);\n                        }  \n                        break;\n                    case 2:\n                        int top=seq.Peek();\n                        if(sd[top]>1){\n                            sd[top]--;\n                        }else{ \n                            sd.Remove[top];\n                        }                            \n                        seq.Pop();\n                        break;\n                    case 3:\n                        Console.WriteLine(sd.Keys.Last());\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        \n    }\n}\n\n","offset":1168,"fileType":"csharp","requestStartTime":1518010256255}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.\nclass Solution {\nstatic void displayPathtoPrincess(int n, String [] grid){\n    Point \n    foreach(string s in grid){\n        if(s==\"m\")\n            \n    }\n    \n    Console.WriteLine(direction);\n  }\nstatic void Main(String[] args) {\n        int m;\n\n        m = int.Parse(Console.ReadLine());\n\n        String[] grid  = new String[m];\n        for(int i=0; i < m; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        displayPathtoPrincess(m,grid);\n     }\n}\n\nstatic void Main(String[] args) {\n        int m;\n\n        m = int.Parse(Console.ReadLine());\n\n        String[] grid  = new String[m];\n        for(int i=0; i < m; i++) {\n            grid[i] = Console.ReadLine(); \n        }\n\n        displayPathtoPrincess(m,grid);\n     }\n}\n","offset":161,"fileType":"csharp","requestStartTime":1518010321181}}
{"body": {"column":25,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) \n    {\n       int[] test = new int[] {1,1,1,2,2,4,4,5,5,5};\n        var testV = test.\n        \n       \n    }\n}\n\n\n","offset":225,"fileType":"csharp","requestStartTime":1518010363008}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) \n    {\n       int[] test = new int[] {1,1,1,2,2,4,4,5,5,5};\n        var testV = test.GroupBy(x=>((x>2)|(x<2)));\n        \n        foreach(IGrouping<int,int> a in testV)\n        {\n            COnsole.\n        }\n                                 \n        \n       \n    }\n}\n\n\n","offset":338,"fileType":"csharp","requestStartTime":1518010444125}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) \n    {\n       int[] test = new int[] {1,1,1,2,2,4,4,5,5,5};\n        var testV = test.GroupBy(x=>((x>2)|(x<2)));\n        \n        foreach(IGrouping<int,int> a in testV)\n        {\n            Console.\n        }\n                                 \n        \n       \n    }\n}\n\n\n","offset":338,"fileType":"csharp","requestStartTime":1518010448279}}
{"body": {"column":32,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) \n    {\n       int[] test = new int[] {1,1,1,2,2,4,4,5,5,5};\n        var testV = test.GroupBy(x=>((x>2)|(x<2)));\n        \n        foreach(IGrouping<int,int> a in testV)\n        {\n            Console.WriteLine(a.)\n        }\n                                 \n        \n       \n    }\n}\n\n\n","offset":350,"fileType":"csharp","requestStartTime":1518010454173}}
{"body": {"column":16,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int arrsum[] = new int[arr.Length];\n        int sum = 0,max=0,min=0;\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<arr.Length;j++)\n            {\n                if(i!=j)\n                    sum+=arr[j];\n            }\n            arrsum[i]=sum;\n        }\n        max = arrsum[0];\n        min = arrsum[0];\n        for(int i=1;i<arrsum.Length;i++)\n        {\n            if(arrsum[i]>max)\n            {\n                max = arrsum[i];\n            }\n             if(arrsum[i]<min)\n            {\n                min = arrsum[i];\n            }\n           \n        }\n        \n        Console.\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":765,"fileType":"csharp","requestStartTime":1518010503515}}
{"body": {"column":25,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n       for(int i =0; i<a.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":172,"fileType":"csharp","requestStartTime":1518010587517}}
{"body": {"column":20,"line":36,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        int nOP = noOfPawns(board[1]);\n        int max = 0;\n        int[] pawnX = findPawnXs(board[1],nOP);\n        for(int i = 0; i<nOP; i++){\n            int temp = 0;\n            int[] kingCoords = findKingCoords(board);\n            int kingY = kingCoords[0];\n            int kingX = kingCoords[1];\n            bool isOrto = (kingX == pawnX[i] || kingY == 0);\n            bool isDiag = isDiagonal(kingX,kingY,pawnX[i]);\n            if(!isOrto && !isDiag){\n                temp= (canGetHorsed(kingX,kingY,pawnX[i])?1:0);\n            }   \n            if(isOrto && !isDiag){\n                bool isBlockedOrto = isBlockedOrtognal(kingX,kingY,pawnX[i],board);\n                if(isBlockedOrto){\n                    temp= 0;\n                }else{\n                    temp= 2;\n                }\n            }else if(!isOrto && isDiag){\n                bool isBlockedDiag = isBlockedDiagonal(kingX,kingY,pawnX[i],board);\n                if(isBlockedDiag){\n                    temp= 0;\n                }else{\n                    temp= 2;\n                }\n            }\n            if(temp>)\n        }\n        return max;\n    }\n    \n    static bool isBlockedDiagonal(int kingX,int kingY,int pawnX,char[][]board){\n        if(kingX>pawnX){\n            for(int i = pawnX+1; i<kingX;i++){\n                if(board[i-pawnX][i]!='#'&&board[i-pawnX][i]!='k'){\n                    return true;\n                }\n            }\n        }else{\n            for(int i = pawnX-1; i>kingX;i--){\n                if(board[i-pawnX+2][i]!='#'&&board[i-pawnX+2][i]!='k'){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    static bool isBlockedOrtognal(int kingX,int kingY,int pawnX,char[][]board){\n        if(kingY==0){\n            for(int i = Math.Min(kingX,pawnX); i<Math.Max(kingX,pawnX);i++){\n                if(board[0][i]!='k'&&board[0][i]!='#'){\n                    return true;\n                }\n            }\n        }else if(kingX==pawnX && kingY>2){\n            for(int i = 3; i<kingY; i++){\n                if(board[i][pawnX]!='#'){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    static bool canGetHorsed(int kingX,int kingY, int pawnX){\n        return (kingY==1&&kingX==pawnX-2)||\n               (kingY==2&&kingX==pawnX-1)||\n               (kingY==1&&kingX==pawnX+2)||\n               (kingY==2&&kingX==pawnX+1);\n    }\n    \n    static bool isDiagonal(int kingX, int kingY, int pawnX){\n        bool isDiagToLeft = kingX == (pawnX-kingY);\n        bool isDiagToRight = kingX == (pawnX+kingY);\n        return isDiagToLeft || isDiagToRight;\n    }\n    \n    static int[] findKingCoords(char[][]board){\n        for(int i = 0; i<8; i++){\n            for(int j = 0; j<8;j++){\n                if(board[i][j]=='k'){\n                    return new int[] {i,j};\n                }\n            }\n        }\n        return new int[] {-1,-1};\n    }\n    \n    static int[] findPawnXs(char[] board, int nOP){\n        int[] pwnXs = new int[nOP];\n        int index = 0;\n        for(int i = 0; i<8; i++){\n            if(board[i]=='P'){\n                pwnXs[index++]=i;\n            }\n        }\n        return pwnXs;\n    }\n    \n    \n    static int noOfPawns(char[] line1){\n        int res = 0;\n        for(int i = 0; i<8; i++){\n            if(line1[i]=='P'){\n                res++;\n            }\n        }\n        return res;\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               Char[] board_temp = Console.ReadLine().ToCharArray();\n               board[board_i] = board_temp;\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":1240,"fileType":"csharp","requestStartTime":1518010592516}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0)\n    {\n        console.\n    }\n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":250,"fileType":"csharp","requestStartTime":1518010640529}}
{"body": {"column":15,"line":15,"wordToComplete":"console","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0)\n    {\n        console\n    }\n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":249,"fileType":"csharp","requestStartTime":1518010654147}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0)\n    {\n        Console.\n    }\n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":250,"fileType":"csharp","requestStartTime":1518010656650}}
{"body": {"column":45,"line":31,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string gridChallenge(string[] grid, int t) {\n        \n        while(t-- != 0)\n        {\n            bool valid = true;\n            for (int i = 1; i < grid.Length && valid; i++)\n                for (int j = 0; j < grid.Length && valid; j++)\n                    if (grid[i - 1][j] > grid[i][j])\n                        valid = false;\n\n            if (valid)\n                return \"YES\";\n            else\n                return \"NO\";\n        }\n        \n        return \"YES\";\n    }\n\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] grid = new string[n];\n        for(int grid_i = 0; grid_i < n; grid_i++){\n           grid[grid_i] = Console.ReadLine().;\n           Array.Sort(grid[grid_i]);\n        }\n        string result = gridChallenge(grid, t);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":875,"fileType":"csharp","requestStartTime":1518010664541}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n       for(int i = 0; i<a.Length;i++){\n           a.\n       }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":199,"fileType":"csharp","requestStartTime":1518010722889}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n       for(int i = 0; i<a.Length;i++){\n           a.\n       }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":199,"fileType":"csharp","requestStartTime":1518010750809}}
{"body": {"column":12,"line":15,"wordToComplete":"cons","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        cons\n    }\n    if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":256,"fileType":"csharp","requestStartTime":1518010770401}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        cons.\n    }\n    if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":257,"fileType":"csharp","requestStartTime":1518010770962}}
{"body": {"column":12,"line":15,"wordToComplete":"cons","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        cons\n    }\n    if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":256,"fileType":"csharp","requestStartTime":1518010773569}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        Console.\n    }\n    if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":260,"fileType":"csharp","requestStartTime":1518010776599}}
{"body": {"column":14,"line":27,"wordToComplete":"consol","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        Console.Write(\"both\");\n    }\n    else if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    else\n    {\n        consol\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":430,"fileType":"csharp","requestStartTime":1518010819573}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        Console.Write(\"both\");\n    }\n    else if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    else\n    {\n        Console.\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":432,"fileType":"csharp","requestStartTime":1518010821639}}
{"body": {"column":14,"line":27,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static void fizzBuzz(int n) {\nfor(int i=0;i<=n;i++)\n{\n    if(i%3==0 && i%5==0)\n    {\n        Console.Write(\"both\");\n    }\n    else if(i%3==0)\n    {\n        Console.Write(\"3\");\n    }\n    else if(i%5==0)\n    {\n        Console.Write(\"3\");\n    }\n    else\n    {\n      Console.\n    }\n    \n}\n    }\n\n    static void Main(String[] args) {\n        int n;\n        n = Convert.ToInt32(Console.ReadLine());\n\n        fizzBuzz(n);\n        \n    }\n}\n\n","offset":430,"fileType":"csharp","requestStartTime":1518010828349}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        int min=int.;\n       for(int i = 0; i<a.Length;i++){\n           for(int j = i+1; j<a.Length;j++){\n                if(a[i]==a[j])\n            }\n       }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":167,"fileType":"csharp","requestStartTime":1518010871366}}
{"body": {"column":29,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int minimumDistances(int[] a) {\n        int min=int.MaxValue;\n       for(int i = 0; i<a.Length;i++){\n           for(int j = i+1; j<a.Length;j++){\n                if(a[i]==a[j]){\n                    min=Math.\n                }\n            }\n       }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        int result = minimumDistances(a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":322,"fileType":"csharp","requestStartTime":1518010892717}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        int[] arrsum = new int[arr.Length];\n        int sum = 0,max=0,min=0;\n        for(int i=0;i<arr.Length;i++)\n        {\n            for(int j=0;j<arr.Length;j++)\n            {\n                if(i!=j)\n                    sum+=arr[j];\n            }\n            arrsum[i]=sum;\n            sum=0;\n        }\n        max = arrsum[0];\n        min = arrsum[0];\n        for(int i=0;i<arrsum.Length;i++)\n        {\n            Console.\n            if(arrsum[i]>max)\n            {\n                max = arrsum[i];\n            }\n             if(arrsum[i]<min)\n            {\n                min = arrsum[i];\n            }\n           \n        }\n        \n        Console.WriteLine(min+\" \"+max);\n        \n        \n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":574,"fileType":"csharp","requestStartTime":1518010989019}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n      // foreach ( var s in t)\n        //   Console.WriteLine(s.val + \" \" + s.rank);\n        var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n        t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":218,"fileType":"csharp","requestStartTime":1518011239049}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n      // foreach ( var s in t)\n        //   Console.WriteLine(s.val + \" \" + s.rank);\n        var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n        t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":246,"fileType":"csharp","requestStartTime":1518011248641}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int  shift = k % a.Length;\n    T[] buffer = new T[shift];\n    Array.Copy(arr, buffer, shift);\n    Array.Copy(arr, shift, arr, 0, arr.Length - shift);\n    Array.Copy(buffer, 0, arr, arr.Length - shift, shift);\n        Console.\n    }\n}\n\n\n","offset":648,"fileType":"csharp","requestStartTime":1518011393523}}
{"body": {"column":14,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int  shift = k % a.Length;\n    T[] buffer = new T[shift];\n    Array.Copy(arr, buffer, shift);\n    Array.Copy(arr, shift, arr, 0, arr.Length - shift);\n    Array.Copy(buffer, 0, arr, arr.Length - shift, shift);\n        Array.\n    }\n}\n\n\n","offset":646,"fileType":"csharp","requestStartTime":1518011401085}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int gecici;\n        int size = arr.Length;\n        for (int i = 0; i < arr.Length; i++){\n            gecici = arr[i];\n            arr[i] = arr[size - i];\n            arr[size - i] = gecici;\n               \n           }\n        for(int j=0; j<arr.Length;j++)\n            Console.\n        }\n    }\n\n\n\n","offset":600,"fileType":"csharp","requestStartTime":1518011666679}}
{"body": {"column":14,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int  shift = k % a.Length;\n    T[] buffer = new T[shift];\n    Array.Copy(arr, buffer, shift);\n    Array.Copy(arr, shift, arr, 0, arr.Length - shift);\n    Array.Copy(buffer, 0, arr, arr.Length - shift, shift);\n        Array.\n    }\n}\n\n\n","offset":646,"fileType":"csharp","requestStartTime":1518011408549}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores..Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       foreach ( var s in t)\n          Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":622,"fileType":"csharp","requestStartTime":1518011422156}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int  shift = k % a.Length;\n    T[] buffer = new T[shift];\n    Array.Copy(arr, buffer, shift);\n    Array.Copy(arr, shift, arr, 0, arr.Length - shift);\n    Array.Copy(buffer, 0, arr, arr.Length - shift, shift);\n     string.\n    }\n}\n\n\n","offset":644,"fileType":"csharp","requestStartTime":1518011421507}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n      int[] max = ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":179,"fileType":"csharp","requestStartTime":1518011429508}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n      int[] max = ar.Max(i=>\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":186,"fileType":"csharp","requestStartTime":1518011444481}}
{"body": {"column":30,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n      int[] max = ar.Max(i=>i.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":188,"fileType":"csharp","requestStartTime":1518011445306}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores.OrderByDescending(x=>x).Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       foreach ( var s in t)\n          Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":643,"fileType":"csharp","requestStartTime":1518011464792}}
{"body": {"column":33,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int jumpingOnClouds(int[] c) {\n        // Complete this function\n        int count=-1;\n        for(int step = 0; step<c. in c)\n        {\n            if(c == 1)\n                continue;\n        }\n        \n        return count;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = jumpingOnClouds(c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1518011471528}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int k = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        \n        int  shift = k % a.Length;\n    int[] buffer = new int[shift];\n    Array.Copy(a, buffer, shift);\n    Array.Copy(a, shift, a, 0, arr.Length - shift);\n    Array.Copy(buffer, 0, a, a.Length - shift, shift);\n  Console.   string.Join(' ', a)\n    }\n}\n\n\n","offset":636,"fileType":"csharp","requestStartTime":1518011482913}}
{"body": {"column":30,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int gecici;\n        int size = arr.Length;\n        \n        for (int i =0; i< arr.)\n        \n    }\n\n\n\n","offset":404,"fileType":"csharp","requestStartTime":1518011785983}}
{"body": {"column":50,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int gecici;\n        int size = arr.Length;\n        \n        for (int i =0; i< arr.Length; i++)Console.\n        \n    }\n\n\n\n","offset":424,"fileType":"csharp","requestStartTime":1518011794959}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores.OrderByDescending(x=>x).Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       //foreach ( var s in t)\n        //  Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n           t= t.\n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":1255,"fileType":"csharp","requestStartTime":1518011551309}}
{"body": {"column":26,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores.OrderByDescending(x=>x).Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       //foreach ( var s in t)\n        //  Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n           t= t. Where(a=>)\n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":1265,"fileType":"csharp","requestStartTime":1518011558155}}
{"body": {"column":26,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores.OrderByDescending(x=>x).Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       //foreach ( var s in t)\n        //  Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n           t= t. Where(w=>)\n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":1265,"fileType":"csharp","requestStartTime":1518011563842}}
{"body": {"column":28,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores.OrderByDescending(x=>x).Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       //foreach ( var s in t)\n        //  Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n           t= t. Where(w=>w.)\n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":1267,"fileType":"csharp","requestStartTime":1518011564806}}
{"body": {"column":33,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] climbingLeaderboard(int[] scores, int[] alice) {\n        // Complete this function\n        Array.Sort(scores);\n        Array.Sort(alice);\n      //  var t = scores.Select(s => new { val =s , rank = scores.Distinct().Count(c=>c > s)+1  });\n       // var cnt = scores.Distinct().ToList().Select((s,i) => new {n =i+1 ,sc =s});\n       // var t = (from s1 in scores.ToList() join s2 in cnt on s1 equals s2.sc\n             //    select new { val =s1 , rank = s2.n}).ToList();\n        \n        var t = scores.OrderByDescending(x=>x).Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n       //foreach ( var s in t)\n        //  Console.WriteLine(s.val + \" \" + s.rank);\n       // var t = scores.Distinct().ToList().Select((s,i) => new {rank =i+1 ,val =s});\n        List<int> res = new List<int>();\n       // t = t.Where(s=> s.val < )\n       foreach( var a in alice)\n       {\n           //t.All(x=>x.val > a) ? (t.Max(s=>s.rank) + 1) : (t.All(x=>x.val < a)  ? 1 \n                   // :\n           var r = (t.Where(x=>x.val > a).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1);\n           res.Add(r) ; \n           t= t. Where(w=>w.val >)\n       }\n      //  res = alice.Select( s=> new {v =(t.OrderBy(a=>a.rank).Where(x=>x.val > //s).Select(x=>x.rank).OrderByDescending(x=>x).FirstOrDefault() +1) }).Select(z=>z.v).ToList();\n            return res.ToArray();\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] scores_temp = Console.ReadLine().Split(' ');\n        int[] scores = Array.ConvertAll(scores_temp,Int32.Parse);\n        int m = Convert.ToInt32(Console.ReadLine());\n        string[] alice_temp = Console.ReadLine().Split(' ');\n        int[] alice = Array.ConvertAll(alice_temp,Int32.Parse);\n        int[] result = climbingLeaderboard(scores, alice);\n        Console.WriteLine(String.Join(\"\\n\", result));\n\n\n    }\n}\n\n\n","offset":1272,"fileType":"csharp","requestStartTime":1518011567574}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n      int max = ar.Max();\n        int counter=0;\n        for(int i=0;i<n;i++)\n        {\n            if(max==ar[i])\n                counter++;\n        }\n        Console.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":326,"fileType":"csharp","requestStartTime":1518011592012}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        int gecici;\n        int size = arr.Length;\n        \n        for (int i =arr.; i< arr.Length; i++){\n            gecici = size -i;\n            Console.Write(arr[gecici]+\" \");\n        }\n    }\n}\n\n\n","offset":398,"fileType":"csharp","requestStartTime":1518011916519}}
{"body": {"column":46,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int jumpingOnClouds(int[] c) {\n        // Complete this function\n        int count=-1;\n        for(int step = 0; step<c.Length; step++)\n        {\n            if(c[step + 1] == 0 || c[step + 2] == 0)\n            {\n                if(c[step + 2] == 0 && step<c.)\n                    step++;\n                \n                count++;\n            }\n        }\n        \n        return count;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] c_temp = Console.ReadLine().Split(' ');\n        int[] c = Array.ConvertAll(c_temp,Int32.Parse);\n        int result = jumpingOnClouds(c);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":374,"fileType":"csharp","requestStartTime":1518011923152}}
{"body": {"column":29,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var l = arr.Length().;\n        var list = arr.ToList();\n        for (i = 0; i < l; i++) {\n            \n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1518012336369}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string twoStrings(string s1, string s2){\n        // Complete this function\n        string result=\"NO\";\n       // int intResult;\n        // intResult = string.Compare(s1, s2);\n        for(int i=0;i<s1.Length;i++)\n        {\n            if(s2.)\n            /*for(int j=0;j<s2.Length;j++)\n            {\n                if(s1[i]==s2[j])\n                {\n                    result=\"YES\";\n                    return result;\n                }\n            }   */         \n        }\n       //result=(intResult==1)?\"YES\":\"NO\"\n        return  result;\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s1 = Console.ReadLine();\n            string s2 = Console.ReadLine();\n            string result = twoStrings(s1, s2);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":355,"fileType":"csharp","requestStartTime":1518012363556}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var l = arr.Length();\n        long[] results = new long[l];\n        for (i = 0; i < l; i++) {\n            arr.\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":296,"fileType":"csharp","requestStartTime":1518012482320}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var l = arr.Length();\n        long[] results = new long[l];\n        for (i = 0; i < l; i++) {\n            result[i] = arr.Sum() - arr[i];\n        }\n        Console.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":350,"fileType":"csharp","requestStartTime":1518012525567}}
{"body": {"column":33,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var l = arr.Length();\n        long[] results = new long[l];\n        for (i = 0; i < l; i++) {\n            result[i] = arr.Sum() - arr[i];\n        }\n        Console.WriteLine(result.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":367,"fileType":"csharp","requestStartTime":1518012537167}}
{"body": {"column":54,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void miniMaxSum(int[] arr) {\n        // Complete this function\n        var l = arr.Length();\n        long[] results = new long[l];\n        for (i = 0; i < l; i++) {\n            result[i] = arr.Sum() - arr[i];\n        }\n        Console.WriteLine(result.Min() + \" \" + result.\n    }\n\n    static void Main(String[] args) {\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        miniMaxSum(arr);\n    }\n}\n\n\n","offset":388,"fileType":"csharp","requestStartTime":1518012546967}}
{"body": {"column":16,"line":113,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        // Complete this function\n        //board[x][y]\n        //x = horizontal direction\n        //y = vertical direction\n        //need to only know the position for the black king\n        //find the position of k, since it is guaranteed that a promotion is valid, we just need to find positions thats have valid checks\n        //if it can be checked by a rook or bishop then +2 per piece, if horse then +1\n        Dictionary<string,char> positions = new Dictionary<string,char>();\n        \n        int[] k = new int[2];\n        int i,j;\n        for(i = 0; i<8;i++){\n            for(j = 0;j<8;j++){\n                if(board[i][j] != '#'){\n                    if(board[i][j] == 'k'){\n                        k[0] = i+1;\n                        k[1] = j+1;\n                    }\n                    else{\n                        positions.Add(((i+1)+\"\"+(j+1)),board[i][j]);\n                    }\n                }\n            }\n        }\n        int result = 0;\n        //finds P\n        for(i = 0; i<8;i++){\n           if(board[1][i] == 'P'){\n               result += check(k,positions,i+1);\n           }\n        }\n        \n        \n        return result;\n    }\n    static int check(int[] k,Dictionary<string,char> positions,int P){\n        int kx = k[0],ky = k[1]; //black king position\n        int px = 1,py = P; //promoted piece position\n        int check = 0;\n        //promotes pawn\n        positions.Remove(\"2\"+P);\n        //Console.WriteLine(positions.Remove(\"2\"+P));\n        //Console.WriteLine(positions.Keys);\n        \n        check = knight(kx,ky,px,py)+rook(kx,ky,px,py,positions)+bishop(kx,ky,px,py,positions);\n        /*\n        Console.WriteLine(positions.Remove(\"2 \"+P));\n        foreach(var item in positions){\n            Console.WriteLine(item.Key+\" py:\"+py);\n        }*/\n        return check;\n    }\n    static int knight(int kx, int ky, int px, int py){\n        if(Math.Abs(kx-px) == 1){\n            if(Math.Abs(ky-py) == 2){\n                return 1;\n            }\n        }\n        if(Math.Abs(kx-px) == 2){\n            if(Math.Abs(ky-py) == 1){\n                return 1;\n            }\n        }\n        return 0;\n    }\n    static int rook(int kx, int ky, int px, int py,Dictionary<string,char> positions){\n        //vertical check\n        if(ky == py){\n            for(int i = px+1;i<kx;i++){\n                if(positions.ContainsKey(i+\"\"+py)){\n                    return 0;\n                }\n            }\n        }\n        //horizontal check\n        else if(kx == px){\n            int sv = 0;//where i will start\n            int ev = 0;\n            //if the closest piece to the left is the king, start with the position of the king, else start with the rook\n            if(ky>py){\n                sv = py;\n                ev = ky;\n            }\n            else{\n                sv = ky;\n                ev = py;\n            }\n            for(int i = sv+1;i<ev;i++){\n                if(positions.ContainsKey(px+\"\"+i)){\n                    return 0;\n                }\n            }\n        }\n        return 2;\n    }\n    static int bishop(int kx, int ky, int px, int py,Dictionary<string,char> positions){\n        int sv = 0,ev = 0;\n        if(kx>px){\n            sv = px+1;\n            ev = kx;\n        }\n        else{\n            sv = kx+1;\n            ev = px;\n        }\n        if(Math.)\n        return 0;\n    }\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string board_temp = Console.ReadLine();\n               board[board_i] = board_temp.ToCharArray();\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":3470,"fileType":"csharp","requestStartTime":1518012722249}}
{"body": {"column":35,"line":113,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int waysToGiveACheck(char[][] board) {\n        // Complete this function\n        //board[x][y]\n        //x = horizontal direction\n        //y = vertical direction\n        //need to only know the position for the black king\n        //find the position of k, since it is guaranteed that a promotion is valid, we just need to find positions thats have valid checks\n        //if it can be checked by a rook or bishop then +2 per piece, if horse then +1\n        Dictionary<string,char> positions = new Dictionary<string,char>();\n        \n        int[] k = new int[2];\n        int i,j;\n        for(i = 0; i<8;i++){\n            for(j = 0;j<8;j++){\n                if(board[i][j] != '#'){\n                    if(board[i][j] == 'k'){\n                        k[0] = i+1;\n                        k[1] = j+1;\n                    }\n                    else{\n                        positions.Add(((i+1)+\"\"+(j+1)),board[i][j]);\n                    }\n                }\n            }\n        }\n        int result = 0;\n        //finds P\n        for(i = 0; i<8;i++){\n           if(board[1][i] == 'P'){\n               result += check(k,positions,i+1);\n           }\n        }\n        \n        \n        return result;\n    }\n    static int check(int[] k,Dictionary<string,char> positions,int P){\n        int kx = k[0],ky = k[1]; //black king position\n        int px = 1,py = P; //promoted piece position\n        int check = 0;\n        //promotes pawn\n        positions.Remove(\"2\"+P);\n        //Console.WriteLine(positions.Remove(\"2\"+P));\n        //Console.WriteLine(positions.Keys);\n        \n        check = knight(kx,ky,px,py)+rook(kx,ky,px,py,positions)+bishop(kx,ky,px,py,positions);\n        /*\n        Console.WriteLine(positions.Remove(\"2 \"+P));\n        foreach(var item in positions){\n            Console.WriteLine(item.Key+\" py:\"+py);\n        }*/\n        return check;\n    }\n    static int knight(int kx, int ky, int px, int py){\n        if(Math.Abs(kx-px) == 1){\n            if(Math.Abs(ky-py) == 2){\n                return 1;\n            }\n        }\n        if(Math.Abs(kx-px) == 2){\n            if(Math.Abs(ky-py) == 1){\n                return 1;\n            }\n        }\n        return 0;\n    }\n    static int rook(int kx, int ky, int px, int py,Dictionary<string,char> positions){\n        //vertical check\n        if(ky == py){\n            for(int i = px+1;i<kx;i++){\n                if(positions.ContainsKey(i+\"\"+py)){\n                    return 0;\n                }\n            }\n        }\n        //horizontal check\n        else if(kx == px){\n            int sv = 0;//where i will start\n            int ev = 0;\n            //if the closest piece to the left is the king, start with the position of the king, else start with the rook\n            if(ky>py){\n                sv = py;\n                ev = ky;\n            }\n            else{\n                sv = ky;\n                ev = py;\n            }\n            for(int i = sv+1;i<ev;i++){\n                if(positions.ContainsKey(px+\"\"+i)){\n                    return 0;\n                }\n            }\n        }\n        return 2;\n    }\n    static int bishop(int kx, int ky, int px, int py,Dictionary<string,char> positions){\n        int sv = 0,ev = 0;\n        if(kx>px){\n            sv = px+1;\n            ev = kx;\n        }\n        else{\n            sv = kx+1;\n            ev = px;\n        }\n        if(Math.Abs(kx-px) == Math.\n        return 0;\n    }\n    static void Main(String[] args) {\n        int t = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < t; a0++){\n            char[][] board = new char[8][];\n            for(int board_i = 0; board_i < 8; board_i++){\n               string board_temp = Console.ReadLine();\n               board[board_i] = board_temp.ToCharArray();\n            }\n            int result = waysToGiveACheck(board);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":3489,"fileType":"csharp","requestStartTime":1518012736583}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string twoStrings(string s1, string s2){\n        // Complete this function\n        string result=\"NO\";\n       // int intResult;\n        // intResult = string.Compare(s1, s2);\n        ifs1.\n        \n        for(int i=0;i<s1.Length;i++)\n        {\n            if(s2.IndexOf(s1[i])>-1)\n                  {\n                    result=\"YES\";\n                    return result;\n                }\n            /*for(int j=0;j<s2.Length;j++)\n            {\n                if(s1[i]==s2[j])\n                {\n                    result=\"YES\";\n                    return result;\n                }\n            }   */         \n        }\n       //result=(intResult==1)?\"YES\":\"NO\"\n        return  result;\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s1 = Console.ReadLine();\n            string s2 = Console.ReadLine();\n            string result = twoStrings(s1, s2);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":303,"fileType":"csharp","requestStartTime":1518012667957}}
{"body": {"column":20,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int candies(int n, int[] arr)\n    {\n        int[] candy = new int[n];\n        int i;\n        candy[0] = 1;\n        for (i = 1; i < n; i++)\n        {\n            if (arr[i] > arr[i-1])\n            {\n                candy[i] = candy[i-1] + 1;\n            }\n            else\n            {\n                candy[i] = 1;\n            }\n        }\n        for (i = n - 2; i >= 0; i--)\n        {\n            if (arr[i] > arr[i+1] && candy[i] <= candy[i+1])\n            {\n                candy[i] = candy[i-1] + 1;\n            }\n        }\n        int sum = 0;\n        for (i = 0; i < n; i++)\n        {\n            sum += candy[i];\n            Console.\n        }\n        return sum;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] arr = new int[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int result = candies(n, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":756,"fileType":"csharp","requestStartTime":1518012765653}}
{"body": {"column":16,"line":36,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int candies(int n, int[] arr)\n    {\n        int[] candy = new int[n];\n        int i;\n        candy[0] = 1;\n        for (i = 1; i < n; i++)\n        {\n            if (arr[i] > arr[i-1])\n            {\n                candy[i] = candy[i-1] + 1;\n            }\n            else\n            {\n                candy[i] = 1;\n            }\n        }\n        for (i = n - 2; i >= 0; i--)\n        {\n            if (arr[i] > arr[i+1] && candy[i] <= candy[i+1])\n            {\n                candy[i] = candy[i-1] + 1;\n            }\n        }\n        int sum = 0;\n        for (i = 0; i < n; i++)\n        {\n            sum += candy[i];\n            Console.Write(candy[i]);\n        }\n        Console.\n        return sum;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] arr = new int[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n           arr[arr_i] = Convert.ToInt32(Console.ReadLine());   \n        }\n        int result = candies(n, arr);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":799,"fileType":"csharp","requestStartTime":1518012772780}}
{"body": {"column":22,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var list = ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":214,"fileType":"csharp","requestStartTime":1518012842797}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var list = ar.ToList();\n        var count = ar.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":247,"fileType":"csharp","requestStartTime":1518012887211}}
{"body": {"column":36,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var list = ar.ToList();\n        var count = ar.Where(w => w.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":260,"fileType":"csharp","requestStartTime":1518012898387}}
{"body": {"column":42,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var list = ar.ToList();\n        var count = ar.Where(w => w == ar.)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":266,"fileType":"csharp","requestStartTime":1518012914404}}
{"body": {"column":49,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var list = ar.ToList();\n        var count = ar.Where(w => w == ar.Max()).\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":273,"fileType":"csharp","requestStartTime":1518012924180}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var max = ar.\n        var count = ar.Where(w => w == ar.Max()).Count();\n        return n - count;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":213,"fileType":"csharp","requestStartTime":1518013020445}}
{"body": {"column":13,"line":8,"wordToComplete":"Dicti","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dicti\n        \n    }\n}\n\n","offset":270,"fileType":"csharp","requestStartTime":1518013303391}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int birthdayCakeCandles(int n, int[] ar) {\n        // Complete this function\n        var max = ar.Max();\n        var count = ar.Where(w => w == max).Count();\n        return n - count;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        int[] ar = Array.ConvertAll(ar_temp,Int32.Parse);\n        int result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":368,"fileType":"csharp","requestStartTime":1518013052911}}
{"body": {"column":49,"line":8,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, char> phoneBook = new \n        \n    }\n}\n\n","offset":306,"fileType":"csharp","requestStartTime":1518013349750}}
{"body": {"column":64,"line":8,"wordToComplete":"stri","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, char> phoneBook = new Dictionary<stri\n        \n    }\n}\n\n","offset":321,"fileType":"csharp","requestStartTime":1518013360310}}
{"body": {"column":22,"line":129,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    public enum DateType\n    {\n        DAY,\n        MON,\n        YEAR\n    }    \n\n    static string convertDate(DateType type, string stDate)\n    {\n        string resultDate = string.Empty;\n\n        switch (type)\n        {\n            case DateType.DAY:\n                resultDate = convertDay(stDate);\n                break;\n\n            case DateType.MON:\n                resultDate = convertMon(stDate);\n                break;\n\n            case DateType.YEAR:\n                resultDate = stDate + \"-\";\n                break;\n        }\n\n        return resultDate;\n    }\n\n    static string convertDay(string stDay)\n    {            \n        if (stDay.Contains(\"st\"))\n        {\n            stDay = stDay.Replace(\"st\", string.Empty);\n        }\n        else if (stDay.Contains(\"nd\"))\n        {\n            stDay = stDay.Replace(\"nd\", string.Empty);\n        }\n        else if (stDay.Contains(\"rd\"))\n        {\n            stDay = stDay.Replace(\"rd\", string.Empty);\n        }\n        else\n        {\n            stDay = stDay.Replace(\"th\", string.Empty);\n        }\n\n        int iDay;\n        if (int.TryParse(stDay, out iDay))\n        {\n            stDay = string.Format(\"{0:D2}\", iDay);\n        }\n\n        return stDay;\n    }\n\n    static string convertMon(string stMon)\n    {\n        if (stMon.Contains(\"Jan\"))\n        {\n            stMon = \"01\";\n        }\n        else if (stMon.Contains(\"Feb\"))\n        {\n            stMon = \"02\";\n        }\n        else if (stMon.Contains(\"Mar\"))\n        {\n            stMon = \"03\";\n        }\n        else if (stMon.Contains(\"Apr\"))\n        {\n            stMon = \"04\";\n        }\n        else if (stMon.Contains(\"May\"))\n        {\n            stMon = \"05\";\n        }\n        else if (stMon.Contains(\"Jun\"))\n        {\n            stMon = \"06\";\n        }\n        else if (stMon.Contains(\"Jul\"))\n        {\n            stMon = \"07\";\n        }\n        else if (stMon.Contains(\"Aug\"))\n        {\n            stMon = \"08\";\n        }\n        else if (stMon.Contains(\"Sep\"))\n        {\n            stMon = \"09\";\n        }\n        else if (stMon.Contains(\"Oct\"))\n        {\n            stMon = \"10\";\n        }\n        else if (stMon.Contains(\"Nov\"))\n        {\n            stMon = \"11\";\n        }\n        else if (stMon.Contains(\"Dec\"))\n        {\n            stMon = \"12\";\n        }\n\n        return stMon + \"-\";\n    }\n\n    static string convertYear(string stYear)\n    {\n        int iYear;\n        if (int.TryParse(stYear, out iYear))\n        {\n            if(iYear >= 1900 && iYear <= 2100)\n            {\n                return stYear + \"-\";\n            }\n        }\n        \n        return string.\n    }\n\n    /*\n     * Complete the function below.\n     */\n    static string[] reformatDate(string[] dates) \n    {\n        List<string> arrDates = new List<string>();\n            \n        for (int i = 0; i < dates.Length; ++i)\n        {                \n            string date = dates[i];\n            string [] tempDates = date.Split(' ');\n            string makeDate = string.Empty;\n\n            for (int j = tempDates.Length - 1; j >= 0; --j)\n            {\n                makeDate += convertDate((DateType)j, tempDates[j]);                \n            }\n\n            arrDates.Add(makeDate);\n        }\n\n        return arrDates.ToArray();\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        string[] res;\n        int dates_size = 0;\n        dates_size = Convert.ToInt32(Console.ReadLine());\n        string[] dates = new string [dates_size];\n        string dates_item;\n        for(int dates_i = 0; dates_i < dates_size; dates_i++) {\n            dates_item = Console.ReadLine();\n            dates[dates_i] = dates_item;\n        }\n\n        res = reformatDate(dates);\n        for(int res_i = 0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":2716,"fileType":"csharp","requestStartTime":1518013207662}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, char> phoneBook = new Dictionary<string, char>();\n        \n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.\n        }\n        \n    }\n}\n\n","offset":461,"fileType":"csharp","requestStartTime":1518013524336}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n        \n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        foreach(element in phoneBook){\n            Console.\n        }\n    }\n}\n\n","offset":565,"fileType":"csharp","requestStartTime":1518013614528}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] revisedRussianRoulette(int[] doors) {\n        int min=0;\n        int max=0;\n        \n        int runStart = 0;\n        \n        // Look for where it changes\n        for (int idx=1; idx<doors.Length; idx++) {\n            if (doors[idx] != doors[idx-1]) {\n                // We're only interested in runs of unlocked doors\n                if (doors[idx-1] == 1) {\n                    int length = idx-runStart;\n                    max += length;\n                    min += length/2;                \n                }\n                runStart = idx;\n            }\n        }\n        \n        // Add the last run if it's of unlocked doors\n        if (doors[doors.-1] == 1) {\n            length = idx-runStart;\n            max += length;\n        }\n        \n        return new int[] {min, max};\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] doors_temp = Console.ReadLine().Split(' ');\n        int[] doors = Array.ConvertAll(doors_temp,Int32.Parse);\n        int[] result = revisedRussianRoulette(doors);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":779,"fileType":"csharp","requestStartTime":1518013388714}}
{"body": {"column":25,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long birthdayCakeCandles(long n, long[] ar) {\n        // Complete this function\n        var max = ar.Max();\n        var count = ar.Where(w => w == max).Count();\n        if (n - count == 0) {\n            return n;\n        }\n        return n - count;\n    }\n\n    static void Main(String[] args) {\n        long n = Convert.(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp, long.Parse);\n        long result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":434,"fileType":"csharp","requestStartTime":1518013434932}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution \n{\n    static void countApplesAndOranges(int s, int t, int a, int b, int[] apples, int[] oranges) \n    {\n        int larry = 0, rob = 0;\n        foreach(int i in apples)\n        {\n            if(a + i >= s && a + i <= t) larry++; \n        }\n        foreach(int i in oranges)\n        {\n            if(a + i >= s && a + i <= t) rob++;\n        }\n        Console.\n    }\n\n    static void Main(String[] args) \n    {\n        string[] tokens_s = Console.ReadLine().Split(' ');\n        int s = Convert.ToInt32(tokens_s[0]);\n        int t = Convert.ToInt32(tokens_s[1]);\n        string[] tokens_a = Console.ReadLine().Split(' ');\n        int a = Convert.ToInt32(tokens_a[0]);\n        int b = Convert.ToInt32(tokens_a[1]);\n        string[] tokens_m = Console.ReadLine().Split(' ');\n        int m = Convert.ToInt32(tokens_m[0]);\n        int n = Convert.ToInt32(tokens_m[1]);\n        string[] apple_temp = Console.ReadLine().Split(' ');\n        int[] apple = Array.ConvertAll(apple_temp,Int32.Parse);\n        string[] orange_temp = Console.ReadLine().Split(' ');\n        int[] orange = Array.ConvertAll(orange_temp,Int32.Parse);\n        countApplesAndOranges(s, t, a, b, apple, orange);\n    }\n}\n\n\n","offset":460,"fileType":"csharp","requestStartTime":1518013489327}}
{"body": {"column":32,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution \n{\n    static void countApplesAndOranges(int s, int t, int a, int b, int[] apples, int[] oranges) \n    {\n        int larry = 0, rob = 0;\n        foreach(int i in apples)\n        {\n            if(a + i >= s && a + i <= t) larry++; \n        }\n        foreach(int i in oranges)\n        {\n            if(a + i >= s && a + i <= t) rob++;\n        }\n        Console.WriteLine(larry.);\n    }\n\n    static void Main(String[] args) \n    {\n        string[] tokens_s = Console.ReadLine().Split(' ');\n        int s = Convert.ToInt32(tokens_s[0]);\n        int t = Convert.ToInt32(tokens_s[1]);\n        string[] tokens_a = Console.ReadLine().Split(' ');\n        int a = Convert.ToInt32(tokens_a[0]);\n        int b = Convert.ToInt32(tokens_a[1]);\n        string[] tokens_m = Console.ReadLine().Split(' ');\n        int m = Convert.ToInt32(tokens_m[0]);\n        int n = Convert.ToInt32(tokens_m[1]);\n        string[] apple_temp = Console.ReadLine().Split(' ');\n        int[] apple = Array.ConvertAll(apple_temp,Int32.Parse);\n        string[] orange_temp = Console.ReadLine().Split(' ');\n        int[] orange = Array.ConvertAll(orange_temp,Int32.Parse);\n        countApplesAndOranges(s, t, a, b, apple, orange);\n    }\n}\n\n\n","offset":476,"fileType":"csharp","requestStartTime":1518013499702}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static long birthdayCakeCandles(long n, long[] ar) {\n        // Complete this function\n        var max = ar.Max();\n        var count = ar..Where(w => w == max).Count();\n        if (n - count == 0) {\n            return n;\n        }\n        return n - count;\n    }\n\n    static void Main(String[] args) {\n        long n = Convert.ToInt64(Console.ReadLine());\n        string[] ar_temp = Console.ReadLine().Split(' ');\n        long[] ar = Array.ConvertAll(ar_temp, long.Parse);\n        long result = birthdayCakeCandles(n, ar);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":246,"fileType":"csharp","requestStartTime":1518013531943}}
{"body": {"column":36,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        \n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        for (int j=0; j<n; j++){\n            string[] name = Console.\n        }\n        \n    }\n}\n\n","offset":625,"fileType":"csharp","requestStartTime":1518013817414}}
{"body": {"column":46,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        \n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        for (int j=0; j<n; j++){\n            string[] name = Console.ReadLine(.)\n        }\n        \n    }\n}\n\n","offset":635,"fileType":"csharp","requestStartTime":1518013820192}}
{"body": {"column":47,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        \n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        for (int j=0; j<n; j++){\n            string[] name = Console.ReadLine().\n        }\n        \n    }\n}\n\n","offset":636,"fileType":"csharp","requestStartTime":1518013822096}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        \n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n            string[] name = Console.ReadLine().Split(' ');\n            \n        }\n        foreach(var elemant in name ){\n            Console.\n        }\n    }\n}\n\n","offset":739,"fileType":"csharp","requestStartTime":1518013848296}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name;\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n             name = Console.ReadLine().Split(' ');\n            Console.\n        }\n        \n    }\n}\n\n","offset":683,"fileType":"csharp","requestStartTime":1518013998447}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n        Console.\n    }\n}\n\n\n","offset":620,"fileType":"csharp","requestStartTime":1518013791975}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        DateTime.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":200,"fileType":"csharp","requestStartTime":1518013819530}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        var date1 = DateTime.ParseExact(s, \"{0:hh:mm:sstt}\");\n        return date1.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":266,"fileType":"csharp","requestStartTime":1518013910964}}
{"body": {"column":87,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Globalization;\n\nclass Solution {\n\n    static string timeConversion(string s) {\n        // Complete this function\n        var date1 = DateTime.ParseExact(s, \"hh:mm:sstt\", CultureInfo.InvariantCulture).;\n        return date1.;\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        string result = timeConversion(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":299,"fileType":"csharp","requestStartTime":1518014119383}}
{"body": {"column":25,"line":24,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.)\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":809,"fileType":"csharp","requestStartTime":1518014536680}}
{"body": {"column":23,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                Consol.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":854,"fileType":"csharp","requestStartTime":1518014567319}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                Consolo.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":855,"fileType":"csharp","requestStartTime":1518014568575}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                Console.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":855,"fileType":"csharp","requestStartTime":1518014572719}}
{"body": {"column":36,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                Console.Write(phone.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":867,"fileType":"csharp","requestStartTime":1518014579903}}
{"body": {"column":41,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                Console.Write(phone.Book.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":872,"fileType":"csharp","requestStartTime":1518014581199}}
{"body": {"column":40,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                Console.Write(phoneBook.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":871,"fileType":"csharp","requestStartTime":1518014591711}}
{"body": {"column":41,"line":25,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                string value = phoneBook.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":872,"fileType":"csharp","requestStartTime":1518014637471}}
{"body": {"column":24,"line":26,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                string value = phoneBook[name[a]];\n                Console.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":906,"fileType":"csharp","requestStartTime":1518014657207}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLenght = a.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":207,"fileType":"csharp","requestStartTime":1518014407072}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLength = a.Length;\n        var bLength = b.\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":239,"fileType":"csharp","requestStartTime":1518014426607}}
{"body": {"column":24,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */\n        int n ;\n        Dictionary<string, string> phoneBook = new Dictionary<string, string>();\n         n = Convert.ToInt32(Console.ReadLine());\n        string[] name = new string[n];\n        for(int i= 0; i<n; i++){\n            string[] arr_temp = Console.ReadLine().Split(' ');\n            phoneBook.Add(arr_temp[0], arr_temp[1]);\n        }\n        \n        for (int j=0; j<n; j++){\n              name[j] = Console.ReadLine();\n            //Console.WriteLine(name[j]);\n        }\n        \n        \n        \n        for(int a=0 ; a<n; a++){\n            if(phoneBook.ContainsKey(name[a]){\n                string value = phoneBook[name[a]];\n                Console.WriteLine(name[a]+\"=\"+value);\n            }else{\n                Console.\n            }\n            //for(int b=0; b<n; b++)\n            //if[name[a] == phoneBook[b]]\n        }\n        \n    }\n}\n\n","offset":979,"fileType":"csharp","requestStartTime":1518014695440}}
{"body": {"column":30,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLength = a.Length;\n        var bLength = b.Length;\n        \n        for (int i = 0; i < b.)\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":286,"fileType":"csharp","requestStartTime":1518014538610}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int stringConstruction(string s) {\n        // Complete this function\n        string p=\"\";\n        for(int i=0;i<s.)\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            int result = stringConstruction(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":229,"fileType":"csharp","requestStartTime":1518014633026}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int stringConstruction(string s) {\n        // Complete this function\n        string p=\"\";\n        for(int i=0;i<s.Length;i++)\n        {\n            if(p.)\n        }\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            int result = stringConstruction(s);\n            Console.WriteLine(result);\n        }\n    }\n}\n\n\n","offset":268,"fileType":"csharp","requestStartTime":1518014669978}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLength = a.Length;\n        var bLength = b.Length;\n        \n        for (int i = 1; i < b.Max(); i++) {\n            a.\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":314,"fileType":"csharp","requestStartTime":1518014678003}}
{"body": {"column":47,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLength = a.Length;\n        var bLength = b.Length;\n        \n        for (int i = 1; i < b.Max(); i++) {\n            if ((a.Count(w => i % w == 0) == a. ;\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":347,"fileType":"csharp","requestStartTime":1518014727276}}
{"body": {"column":62,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLength = a.Length;\n        var bLength = b.Length;\n        \n        for (int i = 1; i < b.Max(); i++) {\n            if ((a.Count(w => i % w == 0) == a.Count()) && (b.) ;\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":362,"fileType":"csharp","requestStartTime":1518014742091}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution \n{\n    static string kangaroo(int x1, int v1, int x2, int v2) \n    {\n        if(x1 == x2 && v1 == v2) return \"YES\";\n        else if(x1 < x2 && v1 > v2) return \"YES\";\n        else if(x1 >)\n    }\n\n    static void Main(String[] args) \n    {\n        string[] tokens_x1 = Console.ReadLine().Split(' ');\n        int x1 = Convert.ToInt32(tokens_x1[0]);\n        int v1 = Convert.ToInt32(tokens_x1[1]);\n        int x2 = Convert.ToInt32(tokens_x1[2]);\n        int v2 = Convert.ToInt32(tokens_x1[3]);\n        string result = kangaroo(x1, v1, x2, v2);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":287,"fileType":"csharp","requestStartTime":1518014745331}}
{"body": {"column":90,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int getTotalX(int[] a, int[] b) {\n        // Complete this function\n        var aLength = a.Length;\n        var bLength = b.Length;\n        \n        for (int i = 1; i < b.Max(); i++) {\n            if ((a.Count(w => i % w == 0) == a.Count()) && (b.Count(w => w % i == 0) == b.) ;\n        }\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        string[] a_temp = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(a_temp,Int32.Parse);\n        string[] b_temp = Console.ReadLine().Split(' ');\n        int[] b = Array.ConvertAll(b_temp,Int32.Parse);\n        int total = getTotalX(a, b);\n        Console.WriteLine(total);\n    }\n}\n\n\n","offset":390,"fileType":"csharp","requestStartTime":1518014765204}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        \n        public int X {get; set;}\n        public Node parent {get; set;}\n        public List<Node> children\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        int[][] edges = new int[n-1][];\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        // your code goes here\n    }\n}\n\n\n","offset":235,"fileType":"csharp","requestStartTime":1518015174690}}
{"body": {"column":38,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, int[][] edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            for (int i = 0; i < edges.)\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        int[][] edges = new int[n-1][];\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges[edges_i] = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        // your code goes here\n    }\n}\n\n\n","offset":287,"fileType":"csharp","requestStartTime":1518015265760}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int[] breakingRecords(int[] score) {\n        // Complete this function\n        int len = score.\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] score_temp = Console.ReadLine().Split(' ');\n        int[] score = Array.ConvertAll(score_temp,Int32.Parse);\n        int[] result = breakingRecords(score);\n        Console.WriteLine(String.Join(\" \", result));\n\n\n    }\n}\n\n\n","offset":210,"fileType":"csharp","requestStartTime":1518015268454}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Solution {\n    static long largestRectangle(int[] h, int size) {\n        // Complete this function\n        long max = Int64.MinValue;\n        long curr = 0;\n        int tab = 0;\n        int count = 0;\n        \n        for(int i = 0; i < size; i++){\n            if(h[i] == 0) continue;\n            tab = 1;\n            count = 0;\n            for(int j = 0; j < size; j++){\n                if(j == i){\n                    tab += count;\n                    count = 0;\n                }else if(j < i){\n                    if(h[j] >= h[i]){\n                        count++;\n                    }else{\n                        count = 0;\n                    }\n                }else{\n                    if(h[i] > h[j]){\n                        \n                    }else if(h[j] == 0){\n                        break;\n                    }\n                }\n\n            }\n            tab += count;\n            Console.Error.WriteLine(\"h[i]: \" + h[i] + \", tab: \" + tab);\n            curr = h[i] * tab;\n            max = (curr > max) ? curr: max;\n\n        }\n        return max;\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] h_temp = Console.ReadLine().Split(' ');\n        int[] h = Array.ConvertAll(h_temp,Int32.Parse);\n        long result = largestRectangle(h, n);\n        Console.WriteLine(result);\n    }\n}\n\n","offset":798,"fileType":"csharp","requestStartTime":1518015307808}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int factorial(int n) {\n        // Complete this function\n        if(n>)\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int result = factorial(n);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518015343433}}
{"body": {"column":17,"line":34,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, int[][] edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                    C\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges. = Array.ConvertAll(edges_temp,Int32.Parse);\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // your code goes here\n    }\n}\n\n\n","offset":971,"fileType":"csharp","requestStartTime":1518015465574}}
{"body": {"column":33,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Children = new List<>\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                    Children\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // your code goes here\n    }\n}\n\n\n","offset":286,"fileType":"csharp","requestStartTime":1518015498054}}
{"body": {"column":29,"line":19,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                    Children.\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // your code goes here\n    }\n}\n\n\n","offset":491,"fileType":"csharp","requestStartTime":1518015506175}}
{"body": {"column":26,"line":20,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.\n                    Children.Add(new Node);\n                }\n                    \n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        \n        // your code goes here\n    }\n}\n\n\n","offset":506,"fileType":"csharp","requestStartTime":1518015531769}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        Console.\n    }\n}\n}\n\n","offset":261,"fileType":"csharp","requestStartTime":1518015660412}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Distances[x,parent.]\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n}\n\n\n","offset":318,"fileType":"csharp","requestStartTime":1518015745731}}
{"body": {"column":29,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[parent.]\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n}\n\n\n","offset":355,"fileType":"csharp","requestStartTime":1518015758963}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        var bNum = Convert.\n    }\n}\n\n\n","offset":222,"fileType":"csharp","requestStartTime":1518015887332}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Distances[x,parent.]\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n}\n\n\n","offset":318,"fileType":"csharp","requestStartTime":1518015937000}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        var bNum = Convert.ToString(n, 2); //convert to string\n        \n        int max = 0;\n        for(int i=0; i<bNum.)\n    }\n}\n\n\n","offset":316,"fileType":"csharp","requestStartTime":1518015929294}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            X = x;\n            Parent = parent;\n            Distances[x,parent.X] = 1;\n            Distances[prent.]\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n}\n\n\n","offset":354,"fileType":"csharp","requestStartTime":1518015942875}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution \n{\n    static string kangaroo(int x1, int v1, int x2, int v2) \n    {\n        int xmin = Math.\n    }\n\n    static void Main(String[] args) \n    {\n        string[] tokens_x1 = Console.ReadLine().Split(' ');\n        int x1 = Convert.ToInt32(tokens_x1[0]);\n        int v1 = Convert.ToInt32(tokens_x1[1]);\n        int x2 = Convert.ToInt32(tokens_x1[2]);\n        int v2 = Convert.ToInt32(tokens_x1[3]);\n        string result = kangaroo(x1, v1, x2, v2);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":194,"fileType":"csharp","requestStartTime":1518015944994}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int kDifference(int[] a, int k) {\n        \n        for(int i=0;i<a.)\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int k;\n        k = Convert.ToInt32(Console.ReadLine());\n\n        res = kDifference(a, k);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":233,"fileType":"csharp","requestStartTime":1518015981530}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        var bNum = Convert.ToString(n, 2); //convert to string\n        \n        int max = 0;\n        for(int i=0; i<bNum.Length; i++){\n            if(bNum[i] == 1){\n                max++;\n            }\n            else{\n                max = 0;\n            }\n        }\n        \n        Console.\n    }\n}\n\n\n","offset":489,"fileType":"csharp","requestStartTime":1518016025857}}
{"body": {"column":21,"line":26,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int kDifference(int[] a, int k) {\n        int result = 0;\n        Dictionary<int,int> mydic = new Dictionary<int,int>();\n        for(int i=0;i<a.Length;i++)\n        {\n            int num = a[i];\n            int diff = 0;\n            if(num < k)\n            {\n                diff = num + k;\n            }\n            else\n            {\n                diff = num - k;\n            }\n            int value = 0;\n            if(mydic.)\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int k;\n        k = Convert.ToInt32(Console.ReadLine());\n\n        res = kDifference(a, k);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":596,"fileType":"csharp","requestStartTime":1518016221027}}
{"body": {"column":18,"line":30,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int kDifference(int[] a, int k) {\n        int result = 0;\n        Dictionary<int,int> mydic = new Dictionary<int,int>();\n        for(int i=0;i<a.Length;i++)\n        {\n            int num = a[i];\n            int diff = 0;\n            if(num < k)\n            {\n                diff = num + k;\n            }\n            else\n            {\n                diff = num - k;\n            }\n            int value = 0;\n            if(mydic.TryGetValue(diff,out value) == true)\n            {\n                result++;\n            }\n            mydic.\n        }\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int k;\n        k = Convert.ToInt32(Console.ReadLine());\n\n        res = kDifference(a, k);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":705,"fileType":"csharp","requestStartTime":1518016283362}}
{"body": {"column":24,"line":29,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n\n    /*\n     * Complete the function below.\n     */\n    static int kDifference(int[] a, int k) {\n        int result = 0;\n        Dictionary<int,int> mydic = new Dictionary<int,int>();\n        for(int i=0;i<a.Length;i++)\n        {\n            int num = a[i];\n            int diff = 0;\n            if(num < k)\n            {\n                diff = num + k;\n            }\n            else\n            {\n                diff = num - k;\n            }\n            int value = 0;\n            if(mydic.TryGetValue(diff,out value) == true)\n            {\n                result++;\n                Console.\n            }\n            else\n            {\n                mydic.Add(num,1);\n            }\n        }\n        return result;\n    }\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n\n        int res;\n        int a_size = 0;\n        a_size = Convert.ToInt32(Console.ReadLine());\n        int[] a = new int [a_size];\n        int a_item;\n        for(int a_i = 0; a_i < a_size; a_i++) {\n            a_item = Convert.ToInt32(Console.ReadLine());\n            a[a_i] = a_item;\n        }\n\n        int k;\n        k = Convert.ToInt32(Console.ReadLine());\n\n        res = kDifference(a, k);\n        tw.WriteLine(res);\n\n        tw.Flush();\n        tw.Close();\n    }\n}\n\n","offset":697,"fileType":"csharp","requestStartTime":1518016474723}}
{"body": {"column":23,"line":73,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<Node>();\n        visitedParents.\n    }\n}\n\n\n","offset":2289,"fileType":"csharp","requestStartTime":1518016550588}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":185,"fileType":"csharp","requestStartTime":1518016644972}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int camelcase(string s) {\n        // Complete this function\n        retun s.\n    }\n\n    static void Main(String[] args) {\n        string s = Console.ReadLine();\n        int result = camelcase(s);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":191,"fileType":"csharp","requestStartTime":1518016650955}}
{"body": {"column":36,"line":79,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<Node>();\n        int i = 0;\n        while (true)\n        {\n            Node parent = null;\n            for (int j = 0; j <= i; j++)\n            {\n                parent = sourceNode.\n            }\n            visited\n        }\n    }\n}\n\n\n","offset":2439,"fileType":"csharp","requestStartTime":1518016678281}}
{"body": {"column":37,"line":76,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<Node>();\n        int i = 0;\n        while (true)\n        {\n            Node parent = sourceNode.;\n            for (int j = 0; j <= i; j++)\n            {\n                parent = sourceNode.Parent\n            }\n            visited\n        }\n    }\n}\n\n\n","offset":2353,"fileType":"csharp","requestStartTime":1518016692384}}
{"body": {"column":32,"line":79,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<Node>();\n        int i = 0;\n        while (true)\n        {\n            Node parent = sourceNode.Parent;\n            for (int j = 0; j <= i; j++)\n            {\n                parent = parent.\n            }\n            visited\n        }\n    }\n}\n\n\n","offset":2448,"fileType":"csharp","requestStartTime":1518016697752}}
{"body": {"column":27,"line":81,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<Node>();\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            visitedParents.\n        }\n    }\n}\n\n\n","offset":2490,"fileType":"csharp","requestStartTime":1518016753074}}
{"body": {"column":31,"line":81,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<Node>();\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.)\n        }\n    }\n}\n\n\n","offset":2494,"fileType":"csharp","requestStartTime":1518016762107}}
{"body": {"column":47,"line":81,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent.))\n        }\n    }\n}\n\n\n","offset":2509,"fileType":"csharp","requestStartTime":1518016775875}}
{"body": {"column":38,"line":84,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        Node commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent.X))\n            {\n                commonParent = parent.;\n            }\n        }\n    }\n}\n\n\n","offset":2599,"fileType":"csharp","requestStartTime":1518016810341}}
{"body": {"column":27,"line":13,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int diagonalDifference(in n, int[][] a) {\n        // Complete this function\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < n; ++i) {\n            sum1+=a[i][i];\n            sum2+=a[i][n-i.]\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[][] a = new int[n][];\n        for(int a_i = 0; a_i < n; a_i++){\n           string[] a_temp = Console.ReadLine().Split(' ');\n           a[a_i] = Array.ConvertAll(a_temp,Int32.Parse);\n        }\n        int result = diagonalDifference(n, a);\n        Console.WriteLine(result);\n    }\n}\n\n\n","offset":327,"fileType":"csharp","requestStartTime":1518016827436}}
{"body": {"column":31,"line":89,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Distances[X,parent.X] = 1;\n            Distances[prent.X,X] = 1;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public \n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        Node commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.\n            }\n        }\n    }\n}\n\n\n","offset":2700,"fileType":"csharp","requestStartTime":1518016832092}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(String[] args) {\n        // Declare a variable named 'inputString' to hold our input.\n        String inputString; \n        \n        // Read a full line of input from stdin (cin) and save it to our variable, input_string.\n        inputString = Console.ReadLine(); \n        \n        // Print a string literal saying \"Hello, World.\" to stdout using cout.\n        Console.WriteLine(\"Hello, World.\");\n        \n        // TODO: Write a line of code here that prints the contents of input_string to stdout.\n        Console.\n    }\n}\n\n\n","offset":620,"fileType":"csharp","requestStartTime":1518016848861}}
{"body": {"column":23,"line":14,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        var bNum = Convert.ToString(n, 2); //convert to string\n        \n        int max = 0;\n        int temp = 0;\n        for(int i=0; i<bNum.Length; i++){\n            if(bNum[i]. == 1){\n                max++;\n            }\n            else{\n                max = 0;\n            }\n        }\n        \n        Console.WriteLine(max);\n    }\n}\n\n\n","offset":375,"fileType":"csharp","requestStartTime":1518016985531}}
{"body": {"column":27,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string deger;\n       while(n>1){\n        string a = Convert. n%2;\n           \n          deger = deger\n       }\n    }\n}\n\n\n","offset":263,"fileType":"csharp","requestStartTime":1518017309633}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string deger;\n       while(n>1){\n        string a =  (n%2).;\n           \n          deger = deger\n       }\n    }\n}\n\n\n","offset":262,"fileType":"csharp","requestStartTime":1518017324225}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string deger;\n       while(n>1){\n        string a =  Convert.\n           \n          deger = deger\n       }\n    }\n}\n\n\n","offset":264,"fileType":"csharp","requestStartTime":1518017352345}}
{"body": {"column":50,"line":38,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public void CalculateDistanceFromParents(int x, Node p, int depth = 1\n            {\n                Distances[x,p] = depth;\n                Distances[p,x] = depth;\n                CalculateDistanceFromParents(x, p.)\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        Node commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            Node parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[parent,source] + Distances[parent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":1110,"fileType":"csharp","requestStartTime":1518017145279}}
{"body": {"column":22,"line":38,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public void CalculateDistanceFromParents(int x, Node p, int depth = 1\n            {\n                Distances[x,p] = depth;\n                Distances[p,x] = depth;\n                if (p.)\n                CalculateDistanceFromParents(x, p.Parent)\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        \n    }\n    \n    public int CalculateDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        Node commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            Node parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[parent,source] + Distances[parent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":1082,"fileType":"csharp","requestStartTime":1518017157481}}
{"body": {"column":27,"line":71,"wordToComplete":"0.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public void CalculateDistanceFromParents(int x, Node p, int depth = 1\n            {\n                Distances[x,p] = depth;\n                Distances[p,x] = depth;\n                if (p.Parent != null)\n                    CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0.)\n        }\n    }\n    \n    public int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        Node commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            Node parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[parent,source] + Distances[parent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":2344,"fileType":"csharp","requestStartTime":1518017263623}}
{"body": {"column":16,"line":80,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n            \n            public void CalculateDistanceFromParents(int x, Node p, int depth = 1\n            {\n                Distances[x,p] = depth;\n                Distances[p,x] = depth;\n                if (p.Parent != null)\n                    CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n        }\n        \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.\n    }\n    \n    public int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        Node commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            Node parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[parent,source] + Distances[parent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":2641,"fileType":"csharp","requestStartTime":1518017338319}}
{"body": {"column":11,"line":10,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static string findNumber(int[] arr, int k) {\n    if(arr.)\n\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        string res;\n        \n        int _arr_size = 0;\n        _arr_size = Convert.ToInt32(Console.ReadLine());\n        int[] _arr = new int [_arr_size];\n        int _arr_item;\n        for(int _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n            _arr_item = Convert.ToInt32(Console.ReadLine());\n            _arr[_arr_i] = _arr_item;\n        }\n        \n        int _k;\n        _k = Convert.ToInt32(Console.ReadLine());\n        \n        res = findNumber(_arr, _k);\n        tw.WriteLine(res);\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":206,"fileType":"csharp","requestStartTime":1518017423686}}
{"body": {"column":38,"line":102,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                Distances[x,p] = depth;\n                Distances[p,x] = depth;\n                if (p.Parent != null)\n                    CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        int commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":3354,"fileType":"csharp","requestStartTime":1518017492606}}
{"body": {"column":38,"line":116,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                Distances[x,p] = depth;\n                Distances[p,x] = depth;\n                if (p.Parent != null)\n                    CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        int commonParent = null;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":3730,"fileType":"csharp","requestStartTime":1518017497054}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void plusMinus(int n, int[] arr) {\n        // Complete this function\n        int positives = 0;\n        int negatives = 0;\n        int zeros = 0;\n        for (var i = 0; i < n; ++i) {\n            if (arr[i] > 0) ++positives;\n            if (arr[i] < 0) ++negatives;\n            if (arr[i] == 0) ++zeros;\n        }\n        \n        Console.\n        \n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr_temp = Console.ReadLine().Split(' ');\n        int[] arr = Array.ConvertAll(arr_temp,Int32.Parse);\n        plusMinus(n, arr);\n    }\n}\n\n\n","offset":454,"fileType":"csharp","requestStartTime":1518017531450}}
{"body": {"column":30,"line":37,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                Distances[x,p.] = depth;\n                Distances[p,x] = depth;\n                if (p.Parent != null)\n                    CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        int commonParent = 0;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":1057,"fileType":"csharp","requestStartTime":1518017546509}}
{"body": {"column":28,"line":38,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                Distances[x,p.X] = depth;\n                Distances[p.,x] = depth;\n                if (p.Parent != null)\n                    CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        var origin = new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = List<int>();\n        int commonParent = 0;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":1097,"fileType":"csharp","requestStartTime":1518017549029}}
{"body": {"column":26,"line":20,"wordToComplete":"","code":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n/*\n * Complete the function below.\n */\n    static int[] oddNumbers(int l, int r) {\n\nList<int> arr=new List<int>();\n        for(int i=l;l<=r;i++)\n        {\n            if(i%2==1)\n            {\n                arr.Add(i);\n            }\n           // Console.WriteLine(arr[i]);\n        }\n        for(int a=0;a<arr.)\n        return arr.ToArray();\n    }\n\n\n    static void Main(String[] args) {\n        string fileName = System.Environment.GetEnvironmentVariable(\"OUTPUT_PATH\");\n        TextWriter tw = new StreamWriter(@fileName, true);\n        int[] res;\n        int _l;\n        _l = Convert.ToInt32(Console.ReadLine());\n        \n        int _r;\n        _r = Convert.ToInt32(Console.ReadLine());\n        \n        res = oddNumbers(_l, _r);\n        for(int res_i=0; res_i < res.Length; res_i++) {\n        \ttw.WriteLine(res[res_i]);\n        }\n        \n        tw.Flush();\n        tw.Close();\n    }\n}\n","offset":418,"fileType":"csharp","requestStartTime":1518017641921}}
{"body": {"column":42,"line":107,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                if (p.Parent == null) return;\n                Distances[x,p.X] = depth;\n                Distances[p.X,x] = depth;\n                CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public static int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = new List<int>();\n        int commonParent = 0;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.);\n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent);\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":3471,"fileType":"csharp","requestStartTime":1518017662800}}
{"body": {"column":42,"line":121,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                if (p.Parent == null) return;\n                Distances[x,p.X] = depth;\n                Distances[p.X,x] = depth;\n                CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        new Node(points[0][0], edges);\n        var furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public static int GetDistance(int source, int target)\n    {\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = new List<int>();\n        int commonParent = 0;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.X);\n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (visitedParents.Contains(parent?.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.);\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":3849,"fileType":"csharp","requestStartTime":1518017668384}}
{"body": {"column":16,"line":84,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                if (p.Parent == null) return;\n                Distances[x,p.X] = depth;\n                Distances[p.X,x] = depth;\n                CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        new Node(points[0][0], edges);\n        int furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public static int GetDistance(int source, int target)\n    {\n        Consolr.\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = new List<int>();\n        int commonParent = 0;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (parent != null) \n            {\n               if (visitedParents.Contains(parent.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.X);\n            } \n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (parent != null) \n            {\n            if (visitedParents.Contains(parent.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.X);\n            }\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":2777,"fileType":"csharp","requestStartTime":1518017838538}}
{"body": {"column":16,"line":84,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n    \n    static int[,] Distances;\n    static Node[] Nodes;\n    \n    class Node\n    {\n        public Node(int x, List<int[]> edges, Node parent = null)\n        {\n            Nodes[x] = this;\n            X = x;\n            Parent = parent;\n            CalculateDistanceFromParents(x, parent);\n            Children = new List<Node>();\n            for (int i = 0; i < edges.Count(); i++)\n            {\n                var s = edges[i][0];\n                var e = edges[i][1];\n                if (s == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(e, edges, this));\n                }\n                else if (e == x)\n                {\n                    edges.RemoveAt(i);\n                    Children.Add(new Node(s, edges, this));\n                }    \n            }\n        }\n        public void CalculateDistanceFromParents(int x, Node p, int depth = 1)\n            {\n                if (p.Parent == null) return;\n                Distances[x,p.X] = depth;\n                Distances[p.X,x] = depth;\n                CalculateDistanceFromParents(x, p.Parent, depth+1);\n            }\n                                                     \n        public int X {get; set;}\n        public Node Parent {get; set;}\n        public List<Node> Children {get; set;}\n    }\n\n    static void Main(String[] args) {\n        string[] tokens_n = Console.ReadLine().Split(' ');\n        int n = Convert.ToInt32(tokens_n[0]);\n        int m = Convert.ToInt32(tokens_n[1]);\n        List<int[]> edges = new List<int[]>();\n        for(int edges_i = 0; edges_i < n-1; edges_i++){\n           string[] edges_temp = Console.ReadLine().Split(' ');\n           edges.Add(Array.ConvertAll(edges_temp,Int32.Parse));\n        }\n        int[][] points = new int[m][];\n        for(int points_i = 0; points_i < m; points_i++){\n           string[] points_temp = Console.ReadLine().Split(' ');\n           points[points_i] = Array.ConvertAll(points_temp,Int32.Parse);\n        }\n        Distances = new int[n+1,n+1];\n        // your code goes here\n        new Node(points[0][0], edges);\n        int furthest = 0;\n        for (int i = 0; i < m; i++)\n        {\n            var x = points[i][0];\n            var y = points[i][1];\n            for (int j = 0; j < m; i++)\n            {\n                var xt = points[j][0];\n                var yt = points[j][1];\n                var distance = GetDistance(x,xt) + GetDistance(y,yt);\n                if (distance > furthest)\n                    furthest = distance;\n            }\n        }\n        Console.WriteLine(furthest);\n    }\n    \n    public static int GetDistance(int source, int target)\n    {\n        Console.\n        if (source == target)\n            return 0;\n        if (Distances[source,target] > 0)\n            return Distances[source,target];\n        var sourceNode = Nodes[source];\n        var targetNode = Nodes[target];\n        var visitedParents = new List<int>();\n        int commonParent = 0;\n        int i = 1;\n        while (true)\n        {\n            Node parent = sourceNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (parent != null) \n            {\n               if (visitedParents.Contains(parent.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.X);\n            } \n            }\n            parent = targetNode;\n            for (int j = 1; j <= i; j++)\n            {\n                parent = parent.Parent;\n            }\n            if (parent != null) \n            {\n            if (visitedParents.Contains(parent.X))\n            {\n                commonParent = parent.X;\n                break;\n            } \n            else\n            {\n                visitedParents.Add(parent.X);\n            }\n            }\n        }\n        var distance = Distances[commonParent,source] + Distances[commonParent,target];\n        Distances[source,target] = distance;\n        Distances[target,source] = distance;\n        return distance;\n    }\n}\n\n\n","offset":2777,"fileType":"csharp","requestStartTime":1518017839473}}
{"body": {"column":18,"line":28,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n        static bool IsPrime(long number)\n        {\n            if (number == 1) return false;\n            if (number == 2) return true;\n            if (number % 2 == 0) return false;\n\n            var boundary = (long)Math.Floor(Math.Sqrt(number));\n\n            for (int i = 3; i <= boundary; i += 2)\n            {\n                if (number % i == 0) return false;\n            }\n\n            return true;\n        }\n    \n     static List<long> CalculatePrimes(int n){\n         var list = Enumeration.Range(2, n);\n         \n         for(int i = 0; i<list.Length; i++){\n             var num = list[i];\n             list.\n         }\n         \n         return list;\n     } \n    \n    static void Main(String[] args) {\n        var primeList = CalculatePrimes(1000000);\n        int t = Convert.ToInt32(Console.ReadLine());\n        \n        for(int a0 = 0; a0 < t; a0++){\n            int n = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(primeList.Where(num => num <= n).Sum());\n        }\n    }\n}\n\n\n","offset":721,"fileType":"csharp","requestStartTime":1518017851880}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(var i = 0; i < n; ++i) {\n            for (var j = 0; j < n-i-1; ++j)\n                Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":278,"fileType":"csharp","requestStartTime":1518017853873}}
{"body": {"column":26,"line":9,"wordToComplete":"eg num = 5, 5/2 = 2.","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    //when odd number must over the half then get eaten\n    //eg num = 5, 5/2 = 2.\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n        int num;\n        Console.ReadLine(num);\n        print(num);\n    }\n    static void print(int num)\n    {\n        int len = num *2 -1;\n        for(int i=0;i<len;i++)\n        {\n            for(int j=num;j<len;j++)\n            {\n                \n            }\n        }\n    }\n}\n}\n\n","offset":207,"fileType":"csharp","requestStartTime":1518018010340}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static void staircase(int n) {\n        // Complete this function\n        for(var i = 0; i < n; ++i) {\n            for (var j = 0; j < n; ++j)\n                if (j < n-i-1)\n                    Console.Write(\" \");\n                else            \n                    Console.Write(\"#\");\n            Console.\n        }\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        staircase(n);\n    }\n}\n\n\n","offset":414,"fileType":"csharp","requestStartTime":1518018091283}}
