{"body": {"column":22,"line":3,"wordToComplete":"","code":"\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef n = br.readLine().\nif (n>=1 && n)\ndef acid=''\n(1..n).each {   \n  acid= br.readLine()\n  if (!acid) return\n  prefix=(acid.length()>=5)?acid.substring(0,5):''\n  sufix=(acid.length()>=2)?acid.substring(acid.length()-2):acid\n  if (prefix=='hydro' && sufix=='ic')  {\n          println \"non-metal acid\"\n   }    \n   else if  ( sufix =='ic')  {\n        println \"polyatomic acid\" \n  } \n    else println  \"not an acid\" \n}\n\n","offset":167,"fileType":"groovy","requestStartTime":1517934502674}}
{"body": {"column":22,"line":7,"wordToComplete":"","code":"\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef n = br.readLine().toInteger()\nif !(n>=1 && n<=100) return\ndef acid=''\n(1..n).each {   \n  acid= br.readLine().\n  if (!acid) return\n  prefix=(acid.length()>=5)?acid.substring(0,5):''\n  sufix=(acid.length()>=2)?acid.substring(acid.length()-2):acid\n  if (prefix=='hydro' && sufix=='ic')  {\n          println \"non-metal acid\"\n   }    \n   else if  ( sufix =='ic')  {\n        println \"polyatomic acid\" \n  } \n    else println  \"not an acid\" \n}\n\n","offset":258,"fileType":"groovy","requestStartTime":1517934577736}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n//Enter your code here. Read input from STDIN. Print output to STDOUT\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef n = br.readLine().toInteger()\nif !(n>=1 && n<=100) return\ndef acid=''\n(1..n).each {   \n  acid= br.readLine().toString()\n  if acid.  \n  if (!acid) return\n  prefix=(acid.length()>=5)?acid.substring(0,5):''\n  sufix=(acid.length()>=2)?acid.substring(acid.length()-2):acid\n  if (prefix=='hydro' && sufix=='ic')  {\n          println \"non-metal acid\"\n   }    \n   else if  ( sufix =='ic')  {\n        println \"polyatomic acid\" \n  } \n    else println  \"not an acid\" \n}\n\n","offset":279,"fileType":"groovy","requestStartTime":1517934590643}}
{"body": {"column":21,"line":5,"wordToComplete":"","code":"\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().\n\n\n\n","offset":172,"fileType":"groovy","requestStartTime":1517936246289}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\ndoors.\n\n\n\n","offset":192,"fileType":"groovy","requestStartTime":1517936284352}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\nif doors.\ndoors.each { if (it!='0' &&  it!='1' ) return}\n\n\n\n","offset":195,"fileType":"groovy","requestStartTime":1517936426730}}
{"body": {"column":7,"line":13,"wordToComplete":"","code":"\ndef \n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\nanswer=[]\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\nidoors=doors.findAll {it=='0' ||  it=='1'}\nif (doors.size()!=n) return\n\nanswer=revisedRussianRoulette(doors)\nanswer.\n\n\n","offset":318,"fileType":"groovy","requestStartTime":1517937025578}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\ndef \n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\nanswer=[]\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\nidoors=doors.findAll {it=='0' ||  it=='1'}\nif (doors.size()!=n) return\n\nanswer=revisedRussianRoulette(doors)\nprintln answer.\n\n\n","offset":326,"fileType":"groovy","requestStartTime":1517937042833}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\ndef revisedRussianRoulette(doors) {\n    foward=doors\n    reverse=doors.\n    \n}\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\nanswer=[]\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\nidoors=doors.findAll {it=='0' ||  it=='1'}\nif (doors.size()!=n) return\n\nanswer=revisedRussianRoulette(doors)\nprintln answer.join(' ')\n\n\n","offset":73,"fileType":"groovy","requestStartTime":1517937181218}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\ndef revisedRussianRoulette(doors) {\n    foward=doors\n    reverse=doors.reverse()\n    \n    fowrs.\n}\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\nanswer=[]\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\nidoors=doors.findAll {it=='0' ||  it=='1'}\nif (doors.size()!=n) return\n\nanswer=revisedRussianRoulette(doors)\nprintln answer.join(' ')\n\n\n","offset":98,"fileType":"groovy","requestStartTime":1517937243411}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\ndef revisedRussianRoulette(doors) {\n    foward=doors\n    reverse=doors.reverse()\n    \n    foward.\n}\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\nanswer=[]\ndef n = br.readLine().toInteger()\nif (!n) return\nif (n<1 || n>10000) return\ndoors= br.readLine().tokenize(' ')\nidoors=doors.findAll {it=='0' ||  it=='1'}\nif (doors.size()!=n) return\n\nanswer=revisedRussianRoulette(doors)\nprintln answer.join(' ')\n\n\n","offset":99,"fileType":"groovy","requestStartTime":1517937278391}}
{"body": {"column":51,"line":7,"wordToComplete":"","code":"\ndef scan = new Scanner(System.in)\ndef map = [:]\n// read the string filename\ndef filename = scan.nextLine()\n\nfilename.each {\n    def timestamp = it.tokenize(' ')[3].toString().\n    if (map.containsKey(timestamp)) {\n        def val = map.getValue(timestamp)\n        val++\n        map.put(timestamp,val)\n    } else {\n        map.put(timestamp,1)\n    }\n}\n\nFile file = new File(\"req_\" + filename)\n\nfile << \"Heyo!\"\n\nmap.each {\n    if (it.value > 1) {\n        file << it.key\n    }\n}\n\n","offset":177,"fileType":"groovy","requestStartTime":1517942940238}}
{"body": {"column":33,"line":3,"wordToComplete":"","code":"\nclass Solution {\n    static void main(String[] args) {\n        def inputString = System.\n        println(\"Hello, World\");\n    }\n}\n\n","offset":90,"fileType":"groovy","requestStartTime":1517969354316}}
{"body": {"column":34,"line":3,"wordToComplete":"","code":"\nclass Solution {\n    static void main(String[] args) {\n        def inputString = System..\n        println(\"Hello, World\");\n    }\n}\n\n","offset":91,"fileType":"groovy","requestStartTime":1517969356529}}
{"body": {"column":43,"line":3,"wordToComplete":"","code":"\nclass Solution {\n    static void main(String[] args) {\n        def inputString = System.console().\n        println(\"Hello, World\");\n    }\n}\n\n","offset":100,"fileType":"groovy","requestStartTime":1517969359949}}
{"body": {"column":30,"line":4,"wordToComplete":"Hello, World.\"","code":"\nclass solution {\n    static void main(String[] args) {\n        def inputString = System.in.newReader().readLine()\n        println \"Hello, World.\"\n        println inputString\n    }\n}\n\n","offset":146,"fileType":"groovy","requestStartTime":1517969693967}}
