{"body": {"column":25,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    try:\n        print str(doors).\n    except ValueError:\n        pass\n    #locked_doors = doors.count(1)\n    \n    #if locked_doors%2 == 0:\n    #    return locked_doors/2, locked_doors\n    #else: return int(math.floor(locked_doors/2)+1), locked_doors\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = [int(i) for i in raw_input().strip().split()][:n]\n    result = revisedRussianRoulette(doors)\n    #print \" \".join(map(str, result))\n\n","offset":139,"fileType":"python","requestStartTime":1517907584632}}
{"body": {"column":13,"line":35,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    \n    # Variables used\n    discount = []\n    noDiscount = []\n    price = 0\n    pricesQ = len(prices)\n    counta = 0\n    countb = 0\n    found = False\n    #Select the first index\n    while(counta != pricesQ and counta != 100000):\n        countb = counta +1\n        found = False\n    #Select the second index\n        while (countb !=pricesQ):\n    #Compare the indexes\n            if prices[counta] >= prices[countb]:\n                discount.append(prices[counta]-prices[countb])\n                found =True\n                break\n            else: countb = countb+1\n        if found == False:\n            noDiscount.append(counta)\n        counta = counta + 1\n        \n    print (sum(discount))\n    discount = str(noDiscount)\n    print \"\".\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(raw_input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(raw_input());\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n","offset":823,"fileType":"python","requestStartTime":1517907642418}}
{"body": {"column":35,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    # try:\n    print \"\".join(map(str, doors)).\n    # except ValueError:\n    #    pass\n    #locked_doors = doors.count(1)\n    \n    #if locked_doors%2 == 0:\n    #    return locked_doors/2, locked_doors\n    #else: return int(math.floor(locked_doors/2)+1), locked_doors\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = [int(i) for i in raw_input().strip().split()][:n]\n    result = revisedRussianRoulette(doors)\n    #print \" \".join(map(str, result))\n\n","offset":151,"fileType":"python","requestStartTime":1517907695421}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef unlock(door):\n    if len(door) % 2 == 0:\n        return len(door)/2\n    else: return int(math.floor(len(door)/2)+1)\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    min_sum = 0\n    max_sum = doors.\n    sliced_doors = \"\".join(map(str, doors)).split(\"0\")\n    try:\n        locked_doors = [x for x in sliced_doors if x != \"\"]\n    except ValueError:\n        pass\n    for i in locked_doors:\n        min_sum = min_sum + unlock(i)\n    return min_sum\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = [int(i) for i in raw_input().strip().split()][:n]\n    result = revisedRussianRoulette(doors)\n    print result\n    #print \" \".join(map(str, result))\n\n","offset":262,"fileType":"python","requestStartTime":1517908593528}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = raw_input()\n    # check if the input string contains any isalnum character\n    isalnum1 = False\n    isalnum2 = False\n    for char in s :\n        if (char.isalnum()):\n            isalnum = True\n        if (char.)\n    print(isalnum)\n    \n    # check if the input string contains any isalpha character\n    isalpha = False\n    for char in s :\n        if (char.isalpha()):\n            isalpha = True\n    print(isalpha)\n    \n    # check if the input string contains any isdigit character\n    isdigit = False\n    for char in s :\n        if (char.isdigit()):\n            isdigit = True\n    print(isdigit)\n\n    # check if the input string contains any isupper character\n    isupper = False\n    for char in s :\n        if (char.isupper()):\n            isupper = True\n    print(isupper)\n\n    # check if the input string contains any islower character\n    islower = False\n    for char in s :\n        if (char.islower()):\n            islower = True\n    print(islower)\n\n\n","offset":247,"fileType":"python","requestStartTime":1517909115318}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = raw_input()\n    if s.\n\n\n","offset":58,"fileType":"python","requestStartTime":1517909679790}}
{"body": {"column":20,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ni = int(raw_input().)\n\n","offset":93,"fileType":"python","requestStartTime":1517909772624}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    count = sum([(len(el) + 1)/2 for el in doors if el != ''])\n    print count len(\"\".join(doors))\n    return count len(\"\".)\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = raw_input().strip().replace(' ', '').split('0')\n    result = revisedRussianRoulette(doors)\n    print result\n\n\n\n\n","offset":216,"fileType":"python","requestStartTime":1517909779699}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nnum_of_entries = int(raw_input())\n\nstamp_coll = set()\n\nfor i in number_of_entries:\n    stamp.\n\n","offset":166,"fileType":"python","requestStartTime":1517909845983}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nnum_of_entries = int(raw_input())\n\nstamp_coll = set()\n\nfor i in number_of_entries:\n    stamp_coll.\n\n","offset":171,"fileType":"python","requestStartTime":1517909849228}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = raw_input()\n    s1 = str(s)\n    print s.isalnum() \n    print s.\n    \n\n\n","offset":100,"fileType":"python","requestStartTime":1517909881578}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = raw_input()\n    s1 = str(s)\n    print s.isalnum() \n    print s.isalpha()\n    print s.\n    \n\n\n","offset":122,"fileType":"python","requestStartTime":1517909887579}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = raw_input()\n    s1 = str(s)\n    print s.isalnum() \n    print s.isalpha()\n    print s.digit()\n    print s.\n    \n\n\n","offset":142,"fileType":"python","requestStartTime":1517909906602}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    s = raw_input()\n    s1 = str(s)\n    print s.isalnum() \n    print s.isalpha()\n    print s.digit()\n    print s.islower()\n    print s.\n    \n\n\n","offset":164,"fileType":"python","requestStartTime":1517909914762}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\narr = []\narr_dic = []\narr_nam = []\n\nfor line in sys.stdin:\n    arr.append(line.rstrip())\n\narr_dic = arr[1:int(arr[0])+1]\narr_nam = arr[-(int(arr[0])):]\n\nprint arr_dic\nfor i in arr_dic:\n    print i.\n\nprint arr_nam\n\nls = ['a', 'b']\ndict([ls])\n\n","offset":281,"fileType":"python","requestStartTime":1517910117581}}
{"body": {"column":40,"line":15,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport random\n\ndef  die_game_fair_value(rolls):\n    for r in range(rolls):\n        total_rolls = random.randrange(1,7) + random.randrange(1,7)\n        if total_rolls == 12: return 1.5\n        elif total_rolls == 11: return 1.0\n        elif total_rolls == 10: return 0.5\n        elif total_rolls <= 7: return 0.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":380,"fileType":"python","requestStartTime":1517910141485}}
{"body": {"column":33,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\narr = []\narr_dic = []\narr_nam = []\ndic_dic = {}\n\nfor line in sys.stdin:\n    arr.append(line.rstrip())\n\narr_dic = arr[1:int(arr[0])+1]\narr_nam = arr[-(int(arr[0])):]\n\nprint arr_dic\nfor i in arr_dic:\n    dic_dic[i.split(\" \")[0]] = i.[]\n\nprint arr_nam\n\nls = ['a', 'b']\ndict([ls])\n\n","offset":315,"fileType":"python","requestStartTime":1517910258695}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Reverse a linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef Reverse(head):\n    prev = None\n    curr = head\n    while curr:\n        prev = Node(curr.data,prev)\n        curr = curr.\n\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":411,"fileType":"python","requestStartTime":1517910335083}}
{"body": {"column":8,"line":17,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    count=0;\n    ecount=0;\n    for i in range(len(doors)):\n        if(doors[i]==1):\n            if(doors[i+1]==1):\n                count=count+1;\n                doors[i]=0;\n                doors[i+1]=0;\n            else\n                ecount=ecount+1;\n    res=[]\n    res.\n    return count\n                \n                \nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = map(int, raw_input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":337,"fileType":"python","requestStartTime":1517910389516}}
{"body": {"column":8,"line":18,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    count=0;\n    ecount=0;\n    for i in range(len(doors)):\n        if(doors[i]==1):\n            if(doors[i+1]==1):\n                count=count+1;\n                doors[i]=0;\n                doors[i+1]=0;\n            else\n                ecount=ecount+1;\n    res=[]\n    res.insert(count)\n    res.\n    return count\n                \n                \nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = map(int, raw_input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":359,"fileType":"python","requestStartTime":1517910405120}}
{"body": {"column":33,"line":1,"wordToComplete":"","code":"\nfor _ in range(int(raw_input())):\n\n","offset":35,"fileType":"python","requestStartTime":1517910791661}}
{"body": {"column":42,"line":2,"wordToComplete":"","code":"\nfor _ in range(int(raw_input())):\n    px, py, qx, qy = map(int, raw_input().)\n\n","offset":78,"fileType":"python","requestStartTime":1517910821059}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    if n%2 != 0:\n        print \"Wierd\"\n    elif n >\n\n\n","offset":105,"fileType":"python","requestStartTime":1517911216386}}
{"body": {"column":11,"line":1,"wordToComplete":"","code":"\nprint \"\\n\".[str((int(raw_input()) + 1)) for _ in range(int(raw_input()))]\n\n","offset":13,"fileType":"python","requestStartTime":1517911358042}}
{"body": {"column":16,"line":16,"wordToComplete":"0.","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\na = []\na_i = 0\nfor a_i in xrange(n):\n    a_t = int(raw_input().strip())\n    a.append(a_t)\n    l = len(a)\n    if(l%2 ==1):\n        print a[(l-1)/2]\n    else:\n        print 0.\n\n\n","offset":232,"fileType":"python","requestStartTime":1517911367453}}
{"body": {"column":11,"line":1,"wordToComplete":"","code":"\nprint \"\\n\".\nT = int(raw_input().strip())\nfor a0 in xrange(T):\n    N = int(raw_input().strip())\n    print N*(N-1)/2\n\n","offset":13,"fileType":"python","requestStartTime":1517911494986}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport numpy\n\nn = int(raw_input().strip())\na = []\na_i = 0\nfor a_i in xrange(n):\n    a_t = int(raw_input().strip())\n    a.append(a_t)\n    l = len(a)\n    b = numpy.sort(a)\n    if(l%2 ==1):\n        print float(b[(l-1)/2])\n    else:\n        print 0.5*(b[l/2-1] + b[l/2])\n\n\n","offset":190,"fileType":"python","requestStartTime":1517911551698}}
{"body": {"column":6,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nn = int(raw_input().strip())\na = []\na_i = 0\nfor a_i in xrange(n):\n    a_t = int(raw_input().strip())\n    a.append(a_t)\n    l = len(a)\n    a.\n    if(l%2 ==1):\n        print float(b[(l-1)/2])\n    else:\n        print 0.5*(b[l/2-1] + b[l/2])\n\n\n","offset":169,"fileType":"python","requestStartTime":1517911606213}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    if n%2==0:\n        print \"Weird\"\n    else:\n        if n >\n\n\n","offset":115,"fileType":"python","requestStartTime":1517911962271}}
{"body": {"column":2,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    \ns.\n\n","offset":91,"fileType":"python","requestStartTime":1517912368887}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(arr, money):\n    # Complete this function\n    cost = arr.\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        money = int(raw_input().strip())\n        n = int(raw_input().strip())\n        arr = map(int, raw_input().strip().split(' '))\n        solve(arr, money)\n\n\n\n","offset":96,"fileType":"python","requestStartTime":1517912778303}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":136,"fileType":"python","requestStartTime":1517913776548}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":161,"fileType":"python","requestStartTime":1517913784484}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return self.\n        \n    def comparator(a, b):\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":228,"fileType":"python","requestStartTime":1517913903807}}
{"body": {"column":41,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.)\n        \n    def comparator(a, b):\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":249,"fileType":"python","requestStartTime":1517913913142}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.\n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":304,"fileType":"python","requestStartTime":1517913986696}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score > b.\n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":314,"fileType":"python","requestStartTime":1517913989896}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score > b.score:\n            return True\n        elif a.:\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":360,"fileType":"python","requestStartTime":1517914043542}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score > b.score:\n            return True\n        elif a.score == b.:\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":371,"fileType":"python","requestStartTime":1517914046942}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.\n        if a.score < b.score:\n            return True\n        elif a.score == b.score:\n            return a > b\n        else:\n            return False\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":304,"fileType":"python","requestStartTime":1517914196600}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score == b.\n        if a.score < b.score:\n            return True\n        elif a.score == b.score:\n            return a > b\n        else:\n            return False\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":315,"fileType":"python","requestStartTime":1517914199232}}
{"body": {"column":21,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score == b.score:\n            pass\n        else:\n            return a.\n        if a.score < b.score:\n            return True\n        elif a.score == b.score:\n            return a > b\n        else:\n            return False\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":374,"fileType":"python","requestStartTime":1517914208015}}
{"body": {"column":31,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score == b.score:\n            pass\n        else:\n            return a.score < b.\n        if a.score < b.score:\n            return True\n        elif a.score == b.score:\n            return a > b\n        else:\n            return False\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":384,"fileType":"python","requestStartTime":1517914211767}}
{"body": {"column":9,"line":2,"wordToComplete":"ca","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport ca\nif(__name__) == __main__:\n    \n\n","offset":81,"fileType":"python","requestStartTime":1517914301125}}
{"body": {"column":7,"line":5,"wordToComplete":"c","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport calendar\n\nif(__name__) == __main__:\nprint(c)\n    \n\n","offset":122,"fileType":"python","requestStartTime":1517914336686}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport calendar\n\nif(__name__) == __main__:\nprint(calendar.)\n    \n\n","offset":130,"fileType":"python","requestStartTime":1517914339118}}
{"body": {"column":28,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport calendar\n\nif(__name__) == __main__:\nprint(calendar.TextCalendar())\n    \n\n","offset":143,"fileType":"python","requestStartTime":1517914364218}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score == b.score:\n            if a.\n            return 1\n        \n        else:\n            return b.score - a.score\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":339,"fileType":"python","requestStartTime":1517914402097}}
{"body": {"column":26,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        return str(self.name) + str(self.score)\n        \n    def comparator(a, b):\n        if a.score == b.score:\n            if a.name > b.\n            return 1\n        \n        else:\n            return b.score - a.score\n           \n            \n        \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":348,"fileType":"python","requestStartTime":1517914407745}}
{"body": {"column":44,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport calendar\n\nif(__name__) == __main__:\nprint(calendar.TextCalendar(firstweekday=6).)\n    \n\n","offset":159,"fileType":"python","requestStartTime":1517914509106}}
{"body": {"column":8,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef mean(arr):\n    return sum(arr)/float(len(arr));\n\ndef stdev(arr,mean):\n    total = 0;\n    for i in arr:\n        total = total + ((i-mean)**2)\n    return (total/float(len(arr)))**0.5\n\ndef pearsonCorrel(n,mux,muy,sdx,sdy,arrx,arry):\n    total = 0;\n    for i in range(n):\n        total = total + (arrx[i]-mux)*(arry[i]-muy);\n    return total/(n*sdx*sdy)\n\ndef spearmanCorrel(n,arrx,arry,rankarrx,rankarry):\n    return 0;\n\ndef getRankedarray(arr):\n    arr.\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(raw_input());\narr1 = raw_input().split();\narr1num = [float(i) for i in arr1]\narr2 = raw_input().split();\narr2num = [float(i) for i in arr2]\n\nmuX = mean(arr1num);\nstdevX = stdev(arr1num,muX);\n\nmuY = mean(arr2num);\nstdevY = stdev(arr2num,muY);\n\n#print(pearsonCorrel(n,muX,muY,stdevX,stdevY,arr1num,arr2num));\n\n\n\n\n\n","offset":528,"fileType":"python","requestStartTime":1517915895011}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef mean(arr):\n    return sum(arr)/float(len(arr));\n\ndef stdev(arr,mean):\n    total = 0;\n    for i in arr:\n        total = total + ((i-mean)**2)\n    return (total/float(len(arr)))**0.5\n\ndef pearsonCorrel(n,mux,muy,sdx,sdy,arrx,arry):\n    total = 0;\n    for i in range(n):\n        total = total + (arrx[i]-mux)*(arry[i]-muy);\n    return total/(n*sdx*sdy)\n\ndef spearmanCorrel(n,arrx,arry,rankarrx,rankarry):\n    return 0;\n\ndef getRankedarray(arr):\n    arrsorted = arr.\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(raw_input());\narr1 = raw_input().split();\narr1num = [float(i) for i in arr1]\narr2 = raw_input().split();\narr2num = [float(i) for i in arr2]\n\nmuX = mean(arr1num);\nstdevX = stdev(arr1num,muX);\n\nmuY = mean(arr2num);\nstdevY = stdev(arr2num,muY);\n\n#print(pearsonCorrel(n,muX,muY,stdevX,stdevY,arr1num,arr2num));\n\n\n\n\n\n","offset":540,"fileType":"python","requestStartTime":1517915900953}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef mean(arr):\n    return sum(arr)/float(len(arr));\n\ndef stdev(arr,mean):\n    total = 0;\n    for i in arr:\n        total = total + ((i-mean)**2)\n    return (total/float(len(arr)))**0.5\n\ndef pearsonCorrel(n,mux,muy,sdx,sdy,arrx,arry):\n    total = 0;\n    for i in range(n):\n        total = total + (arrx[i]-mux)*(arry[i]-muy);\n    return total/(n*sdx*sdy)\n\ndef spearmanCorrel(n,arrx,arry,rankarrx,rankarry):\n    return 0;\n\ndef getRankedarray(arr):\n    arrsorted = sorted(arr)\n    return [arrsorted. for i in arr]\n        \n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(raw_input());\narr1 = raw_input().split();\narr1num = [float(i) for i in arr1]\narr2 = raw_input().split();\narr2num = [float(i) for i in arr2]\n\nmuX = mean(arr1num);\nstdevX = stdev(arr1num,muX);\n\nmuY = mean(arr2num);\nstdevY = stdev(arr2num,muY);\n\n#print(pearsonCorrel(n,muX,muY,stdevX,stdevY,arr1num,arr2num));\n\n\n\n\n\n","offset":570,"fileType":"python","requestStartTime":1517915999843}}
{"body": {"column":26,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef isPrime(n):\n    for i in range(2,math.)\n\ndef check(n,k):\n    for i in range(k+1,n/2):\n        if n%i == 0 and isPrime(i):\n            return False\n    return True\n\ndef generalisedHammingNumbers(n, k):\n    # Complete this function\n    \n\nif __name__ == \"__main__\":\n    n, k = raw_input().strip().split(' ')\n    n, k = [long(n), int(k)]\n    result = generalisedHammingNumbers(n, k)\n    print result\n\n\n","offset":71,"fileType":"python","requestStartTime":1517916341100}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef acidNaming(acid_name):\n    hydro = acid_name.startswith('hydro')\n    ic = acid_name.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        acid_name = raw_input().strip()\n        result = acidNaming(acid_name)\n        print result\n\n\n\n","offset":117,"fileType":"python","requestStartTime":1517916642917}}
{"body": {"column":11,"line":2,"wordToComplete":"","code":"\ndef count_substring(string, sub_string):\n    string.\n    return \nif __name__ == '__main__':\n    string = raw_input().strip()\n    sub_string = raw_input().strip()\n    \n    count = count_substring(string, sub_string)\n    print count\n","offset":54,"fileType":"python","requestStartTime":1517917172555}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    if not root.left and not root.right:\n        print str(root.)\n    elif root.left:\n        return preOrder(root.left)\n    else:\n        return preOrder(root.right)\n\n","offset":227,"fileType":"python","requestStartTime":1517917808476}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line = line.split(\" \")\n    line = line.\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":98,"fileType":"python","requestStartTime":1517918352539}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line = line.split(\" \")\n    line = \"-\".\n    print line\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":97,"fileType":"python","requestStartTime":1517918410702}}
{"body": {"column":28,"line":7,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    def Difference:\n        maximumDifference = 0\n        for element in self.\n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":175,"fileType":"python","requestStartTime":1517922444922}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef staircase(n):\n    for i in range(n):\n        print(\"\".)\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    staircase(n)\n\n\n","offset":87,"fileType":"python","requestStartTime":1517923118463}}
{"body": {"column":42,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef staircase(n):\n    for i in range(n):\n        print(\"\".join([' ']*(n-i-1)) + \"\".)\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    staircase(n)\n\n\n","offset":112,"fileType":"python","requestStartTime":1517923194485}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    if m != magazine.:\n        return False\n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":58,"fileType":"python","requestStartTime":1517923343374}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    return string.\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":38,"fileType":"python","requestStartTime":1517923339970}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"\ns=str(raw_input())\nprint (s.)\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":30,"fileType":"python","requestStartTime":1517923384159}}
{"body": {"column":18,"line":1,"wordToComplete":"","code":"\ns=str(raw_input().)\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":20,"fileType":"python","requestStartTime":1517923677665}}
{"body": {"column":10,"line":2,"wordToComplete":"","code":"\ns=str(raw_input().split())\nprint \"-\".\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":39,"fileType":"python","requestStartTime":1517923694513}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    while (arr) :\n        pop.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":108,"fileType":"python","requestStartTime":1517923758833}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    while (arr) :\n        arr.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":108,"fileType":"python","requestStartTime":1517923760544}}
{"body": {"column":4,"line":2,"wordToComplete":"","code":"\ns=str(raw_input())\ns=s.\nprint \"-\".join(s)\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":25,"fileType":"python","requestStartTime":1517923774352}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    r = [0,0,0]\n    while (arr) :\n        i = arr.pop()\n        if i > \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":149,"fileType":"python","requestStartTime":1517923788368}}
{"body": {"column":11,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    r = [0,0,0]\n    while (arr) :\n        i = arr.pop()\n        i >\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":145,"fileType":"python","requestStartTime":1517923797440}}
{"body": {"column":18,"line":10,"wordToComplete":"d","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef bstHelper(min, max, root):\n    return (root.d)\n\ndef checkBST(root):\n    \n\n","offset":197,"fileType":"python","requestStartTime":1517924040761}}
{"body": {"column":23,"line":10,"wordToComplete":"d","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef bstHelper(min, max, root):\n    return (root.left.d)\n\ndef checkBST(root):\n    \n\n","offset":202,"fileType":"python","requestStartTime":1517924047729}}
{"body": {"column":42,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef bstHelper(min, max, root):\n    return (root.left.data < min and root.)\n\ndef checkBST(root):\n    \n\n","offset":221,"fileType":"python","requestStartTime":1517924062523}}
{"body": {"column":48,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef bstHelper(min, max, root):\n    return (root.left.data < min and root.right.)\n\ndef checkBST(root):\n    \n\n","offset":227,"fileType":"python","requestStartTime":1517924063604}}
{"body": {"column":19,"line":1,"wordToComplete":"","code":"\ns=list(raw_input().\ns=\"-\".join(s)\nprint s\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":21,"fileType":"python","requestStartTime":1517924006800}}
{"body": {"column":4,"line":55,"wordToComplete":"","code":"\n#!/usr/bin/env python3\n\nimport sys\nfrom time import time\nimport math\n\n'''\nhttps://en.wikipedia.org/wiki/Digital_root\ndroot(n)=n-((n-1)//9)*9\nmdrs(a*b)=mdrs(a)*mdrs(b)\n'''\ndef droot(n):\n    return n - 9 * ((n - 1) // 9)\ndef mdrs_cache(n):\n    cache = [droot(i) for i in range(n)]\n    cache[0] = cache[1] = 0\n    #for i in range(2, 10):\n    #    cache[i] = i\n    to = 3\n    while to < n:\n        print('to=%d' % to, file = sys.stderr)\n        for a in range(2, to):\n            if a >= n:\n                break\n            for b in range(a, to):\n                u = a * b\n                if u >= n:\n                    break\n                v = cache[a] + cache[b]\n                if cache[u] < v:\n                    cache[u] = v\n                    #print('u=%d v=%d' % (u, v), file = sys.stderr)\n        to *= 2\n    return cache\ndef cache_sum(cache):\n    scache = []\n    sm = 0\n    for v in cache:\n        sm += v\n        scache.append(sm)\n    return scache    \ndef solve(n):\n    return 0\ntm = time()\nN = pow(10, 6) + 1\nmdrs_cache = mdrs_cache(N)\nprint('mdrs cache generated: %d' % len(mdrs_cache), file = sys.stderr)\nprint('mdrs cache: %s' % (mdrs_cache[:30],), file = sys.stderr)\ncache = cache_sum(mdrs_cache)\nprint('cache: %s' % (cache[:30],), file = sys.stderr)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(cache[n])\nsys.('time elapsed: %s' % (time() - tm,), file = sys.stderr)\n\n\n","offset":1350,"fileType":"python","requestStartTime":1517924074026}}
{"body": {"column":29,"line":14,"wordToComplete":"0.x/n, r)","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    # Complete this function\n    n = float(len(arr))\n    r = [0,0,0]\n    while (arr) :\n        i = arr.pop()\n        if i > 0 :r[0] += 1\n        elif i < 0 : r[1] += 1\n        else : r[2] += 1\n    print map(lambda x : '%0.x/n, r)\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":271,"fileType":"python","requestStartTime":1517924514728}}
{"body": {"column":4,"line":9,"wordToComplete":"","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninputString = raw_input()\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint 'Hello, World.'\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\nimport sys\nsys.\n\n","offset":312,"fileType":"python","requestStartTime":1517924650329}}
{"body": {"column":6,"line":6,"wordToComplete":"2.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\nc = 5\ne = 2.\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":102,"fileType":"python","requestStartTime":1517925082726}}
{"body": {"column":20,"line":19,"wordToComplete":"sys.stderr.('a=%d' % a, file = sys.stderr)","code":"\n#!/usr/bin/env python3\n\nimport sys\nfrom time import time\nimport math\n\n'''\nhttps://en.wikipedia.org/wiki/Digital_root\ndroot(n)=n-((n-1)//9)*9\nmdrs(a*b)=mdrs(a)*mdrs(b)\n'''\ndef droot(n):\n    return n - 9 * ((n - 1) // 9)\ndef mdrs_cache(n):\n    cache = [droot(i) for i in xrange(n)]\n    cache[0] = cache[1] = 0\n    r = int(pow(n, 0.5))\n    for a in xrange(2, r + 1):\n        #sys.stderr.('a=%d' % a, file = sys.stderr)\n        b_max = n // a\n        if b_max * a == n:\n            b_max -= 1\n        for b in range(a, b_max + 1):\n            u = a * b\n            v = cache[a] + cache[b]\n            if cache[u] < v:\n                cache[u] = v\n    return cache\ndef mdrs_cache_old(n):\n    cache = [droot(i) for i in xrange(n)]\n    cache[0] = cache[1] = 0\n    to = 3\n    while to < n:\n        sys.stderr.write('to=%d\\n' % to)\n        for a in xrange(2, to):\n            if a >= n:\n                break\n            for b in xrange(a, to):\n                u = a * b\n                if u >= n:\n                    break\n                v = cache[a] + cache[b]\n                if cache[u] < v:\n                    cache[u] = v\n                    #sys.stderr.write('u=%d v=%d\\n' % (u, v))\n        to *= max(2, to // 10)\n    return cache\ndef cache_sum(cache):\n    scache = []\n    sm = 0\n    for v in cache:\n        sm += v\n        scache.append(sm)\n    return scache    \ndef solve(n):\n    return 0\ntm = time()\nN = pow(10, 7) + 1\nmdrs_cache = mdrs_cache(N)\nsys.stderr.write('mdrs cache generated: %d\\n' % len(mdrs_cache))\nsys.stderr.write('mdrs cache: %s\\n' % (mdrs_cache[:30],))\ncache = cache_sum(mdrs_cache)\nsys.stderr.write('cache: %s\\n' % (cache[:30],))\nt = int(raw_input())\nfor _ in xrange(t):\n    n = int(input())\n    print(cache[n])\nsys.stderr.write('time elapsed: %s\\n' % (time() - tm,))\n\n\n","offset":386,"fileType":"python","requestStartTime":1517925132158}}
{"body": {"column":21,"line":8,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    if m != len(magazine):\n        return False\n    if n != len(ransom):\n        return False\n    counter = 0\n    ransom = list(set(ransom))\n    ransom = map(str.)\n    for word in ransom:\n        if word in magazine:\n            counter += 1\n    if counter == n:\n        return True\n    else:\n        return False\n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":199,"fileType":"python","requestStartTime":1517925510864}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    print doors.count(1)\n    print doors.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = map(int, raw_input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":134,"fileType":"python","requestStartTime":1517926624814}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef getMinimumCost(n, k, c):\n    if k>\n\nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":67,"fileType":"python","requestStartTime":1517926692397}}
{"body": {"column":6,"line":24,"wordToComplete":"a","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nimport math \n \n# method to print the divisors\ndef printDivisors(n) :\n     \n    # Note that this loop runs till square root\n    i = 1\n    while i <= math.sqrt(n) + 1 :\n         \n        if (n % i == 0) :\n             \n            # If divisors are equal, print only one\n            if (n / i == i) :\n                print i,\n            else :\n                # Otherwise print both\n                print i , n/i,\n        i = i + 1\n\nlist = []\nlist.a\nfor i in range(0,1000):\n    \n\ntestcase=input()\n\n\n\n","offset":522,"fileType":"python","requestStartTime":1517927016735}}
{"body": {"column":26,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nfrom collections import defaultdict\ndef getMinimumCost(n, k, c):\n    flowers = defaultdict()\n    for flow in range(n):\n        for pers in range(k):\n            print pers\n            flowers[flow]. {pers:1}\n    print \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":226,"fileType":"python","requestStartTime":1517927136685}}
{"body": {"column":20,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nfrom collections import defaultdict\ndef getMinimumCost(n, k, c):\n    people = defaultdict()\n    for per in range(k):\n        people[per].\n     \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":165,"fileType":"python","requestStartTime":1517927253797}}
{"body": {"column":21,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nfrom collections import defaultdict\ndef getMinimumCost(n, k, c):\n    people = defaultdict()\n    for per in range(k):\n        people[per] = c\n        \n    print min(people.)\n        \n     \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":199,"fileType":"python","requestStartTime":1517927328517}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nfrom collections import defaultdict\ndef getMinimumCost(n, k, c):\n    people = defaultdict()\n    for per in range(k): \n        for cost in c:\n            people[per].\n        \n    \n        \n     \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":193,"fileType":"python","requestStartTime":1517927389284}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nfrom collections import defaultdict\ndef getMinimumCost(n, k, c):\n    people = defaultdict()\n    for per in range(k):\n        people[per] = c\n    \n    print people.\n        \n    \n        \n     \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":191,"fileType":"python","requestStartTime":1517927464446}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n#from collections import defaultdict\n\ncosts = []\ndef getMinimumCost(n, k, c):\n    for per in k:\n        costs.\n     \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":138,"fileType":"python","requestStartTime":1517927633239}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n#from collections import defaultdict\n\ndef getMinimumCost(n, k, c):\n    costs = []\n\n    for per in range(k):\n        costs.extend(c)\n    \n    costs = sorted(costs)\n    purchases= []\n    for buy in range(n):\n        purchases.\n        \n    print costs\n     \n            \nn, k = raw_input().strip().split(' ')\nn, k = [int(n), int(k)]\nc = map(int, raw_input().strip().split(' '))\nminimumCost = getMinimumCost(n, k, c)\nprint(minimumCost)\n\n\n","offset":252,"fileType":"python","requestStartTime":1517927778531}}
{"body": {"column":29,"line":69,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\n        \nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n    def add_document(self,info):\n        documentlist.append(info)\n        for prop in info:\n            if not propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(info)\n                p.add_node(n)\n                propertydic[prop] = p\n            else:\n                if not propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(info)\n                    propertydic[prop].add_node(n)\n                else:\n                    propertydic[prop].nodedic[info[prop]].add_child(info)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        for prop in info:\n            if not propertydic.has_key(prop):\n                return []\n            else:\n                if not propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(documentlist):\n                        lst = propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        self.get_document(info,lst)\n                    else:\n                        childlist = propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i]:\n                                    if not childlist[j].has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i][pr]!=childlist[j][pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        self.\n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\n\nwhile line = raw_input():\n    command, document = line.split( )\n    if command == add:\n    elif command == get:\n    elif command == delete:\n    else:\n        print \"Command not allowed\"\n\n","offset":2634,"fileType":"python","requestStartTime":1517928023559}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nprint (a.)\n\n","offset":140,"fileType":"python","requestStartTime":1517928333236}}
{"body": {"column":26,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nprint (a.difference(b), a.)\n\n","offset":157,"fileType":"python","requestStartTime":1517928376871}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_list = [a.]\n\n","offset":145,"fileType":"python","requestStartTime":1517928411398}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_list = [a.difference(b)]\nnew_list.\n\n","offset":169,"fileType":"python","requestStartTime":1517928425572}}
{"body": {"column":18,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_list = [a.difference(b)]\nnew_list.append(b.)\n\n","offset":178,"fileType":"python","requestStartTime":1517928431721}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_set = {b.difference(a)}\nnew_set.\nnew_list.append(b.difference(a))\n\nprint (new_list)\n\n","offset":167,"fileType":"python","requestStartTime":1517928490321}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_set = {b.difference(a)}\nnew_set.add(a.)\nnew_list.append(b.difference(a))\n\nprint (new_list)\n\n","offset":173,"fileType":"python","requestStartTime":1517928492394}}
{"body": {"column":12,"line":3,"wordToComplete":"16.","code":"\nn = int(raw_input())\nt=0\nwhile t<=16.:\n    print n\n    t=t+1\n    n=t*t\n    \n\n\n","offset":39,"fileType":"python","requestStartTime":1517928518773}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_set = b.difference(a)\nnext_Set = a.\nfor i in new_set\n\n\nprint (new_set)\n\n","offset":170,"fileType":"python","requestStartTime":1517928631364}}
{"body": {"column":14,"line":6,"wordToComplete":"d","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_set = b.difference(a)\nnext_Set = a.d\nfor i in new_set\n\n\nprint (new_set)\n\n","offset":171,"fileType":"python","requestStartTime":1517928633037}}
{"body": {"column":37,"line":1,"wordToComplete":"","code":"\nFirstName, LastName = string(input().)\nif __name__ == '__main__':\n    first_name = raw_input()\n    last_name = raw_input()\n    print_full_name(first_name, last_name)\n","offset":39,"fileType":"python","requestStartTime":1517928712311}}
{"body": {"column":45,"line":1,"wordToComplete":"","code":"\nFirstName, LastName = string(input().strip().)\nif __name__ == '__main__':\n    first_name = raw_input()\n    last_name = raw_input()\n    print_full_name(first_name, last_name)\n","offset":47,"fileType":"python","requestStartTime":1517928720051}}
{"body": {"column":41,"line":5,"wordToComplete":"a","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_list = sorted(list(b.difference(a)).a +list(a.difference(b)))\n\nprint (new_list)\n\n","offset":172,"fileType":"python","requestStartTime":1517928747773}}
{"body": {"column":74,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\na,b = [set(raw_input().split()) for _ in range(4)][1::2]\n\nnew_list = sorted(list(b.difference(a)).apply(int) +list(a.difference(b)).)\n\nprint (new_list)\n\n","offset":205,"fileType":"python","requestStartTime":1517928763948}}
{"body": {"column":41,"line":55,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\n        \nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n    def add_document(self,info):\n        self.documentlist.append(info)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(info)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(info)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(info)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i]:\n                                    if not childlist[j].has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i][pr]!=childlist[j][pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        for prop in info:\n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\n\nwhile line = raw_input():\n    command, document = line.split( )\n    if command == add:\n    elif command == get:\n    elif command == delete:\n    else:\n        print \"Command not allowed\"\n\n","offset":1942,"fileType":"python","requestStartTime":1517928817833}}
{"body": {"column":21,"line":77,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\n        \nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n    def add_document(self,info):\n        self.documentlist.append(info)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(info)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(info)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(info)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i]:\n                                    if not childlist[j].has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i][pr]!=childlist[j][pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for prop in info:\n                self.\n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\n\nwhile line = raw_input():\n    command, document = line.split( )\n    if command == add:\n    elif command == get:\n    elif command == delete:\n    else:\n        print \"Command not allowed\"\n\n","offset":3018,"fileType":"python","requestStartTime":1517928884781}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929027411}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929027933}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929028748}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929029188}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929029690}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929029721}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929029753}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929029787}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929029932}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"import math\nclass Points(object):\n    def __init__(self, x, y, z):\n\n    def __sub__(self, no):\n\n    def dot(self, no):\n        no.\n    def cross(self, no):\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = map(float, raw_input().split())\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print \"%.2f\" % math.degrees(angle)\n","offset":131,"fileType":"python","requestStartTime":1517929030147}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self.)\nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n    def add_document(self,info):\n        self.documentlist.append(info)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(info)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(info)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(info)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i]:\n                                    if not childlist[j].has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i][pr]!=childlist[j][pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for prop in info:\n                self.propertydic[prop].nodedic[info[prop]].childlist\n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\n\nwhile line = raw_input():\n    command, document = line.split( )\n    if command == add:\n    elif command == get:\n    elif command == delete:\n    else:\n        print \"Command not allowed\"\n\n","offset":504,"fileType":"python","requestStartTime":1517929040471}}
{"body": {"column":44,"line":108,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self,num,info):\n        self.id = num\n        self.info = info\nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n        numid = 0\n    def add_document(self,info):\n        numid=numid+1\n        document = Doc(numid,info)\n        self.documentlist.append(document)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(info)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(info)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(info)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i]:\n                                    if not childlist[j].has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i][pr]!=childlist[j][pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for prop in info:\n                self.propertydic[prop].nodedic[info[prop]].childlist\n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\nmyS = myStorage()\nwhile line = raw_input()\n    command, document = line.split( )\n    if command == add:\n        myS.add_document(document)\n    elif command == get:\n        doc = myS.get_document(document,myS.)\n    elif command == delete:\n    else:\n        print \"Command not allowed\"\n\n","offset":3641,"fileType":"python","requestStartTime":1517929325903}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = raw_input().\nm = raw_input()\nprint (n,m)\n\n","offset":89,"fileType":"python","requestStartTime":1517929564988}}
{"body": {"column":23,"line":4,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge >\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":136,"fileType":"python","requestStartTime":1517930004850}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":157,"fileType":"python","requestStartTime":1517930010722}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.age = initialAge\n        else:\n            self.\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":205,"fileType":"python","requestStartTime":1517930025825}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn, m = raw_input().split()\nsc_ar = set(raw_input().split())\n\nA = set(raw_input().split())\nB = set(raw_input().split())\n\nlen(sc_ar.)\n\n\n","offset":203,"fileType":"python","requestStartTime":1517930069734}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print \"Age is not valid, setting age to 0.\"\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n    def yearPasses(self):\n        # Increment the age of the person in here      \n        self.\nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":476,"fileType":"python","requestStartTime":1517930099719}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print \"Age is not valid, setting age to 0.\"\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.\n    def yearPasses(self):\n        # Increment the age of the person in here      \n        self.age += 1\nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":397,"fileType":"python","requestStartTime":1517930169653}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print \"Age is not valid, setting age to 0.\"\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age < 13:\n            print \"You are young.\"\n        elif self.\n    def yearPasses(self):\n        # Increment the age of the person in here      \n        self.age += 1\nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":460,"fileType":"python","requestStartTime":1517930200548}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print \"Age is not valid, setting age to 0.\"\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age < 13:\n            print \"You are young.\"\n        elif self.age >\n    def yearPasses(self):\n        # Increment the age of the person in here      \n        self.age += 1\nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":465,"fileType":"python","requestStartTime":1517930205043}}
{"body": {"column":37,"line":13,"wordToComplete":"","code":"\nclass Person:\n    def __init__(self,initialAge):\n        # Add some more code to run some checks on initialAge\n        if initialAge > 0:\n            self.age = initialAge\n        else:\n            self.age = 0\n            print \"Age is not valid, setting age to 0.\"\n    def amIOld(self):\n        # Do some computations in here and print out the correct statement to the console\n        if self.age < 13:\n            print \"You are young.\"\n        elif self.age >= 13 and self.\n    def yearPasses(self):\n        # Increment the age of the person in here      \n        self.age += 1\nt = int(raw_input())\nfor i in range(0, t):\n    age = int(raw_input())         \n    p = Person(age)  \n    p.amIOld()\n    for j in range(0, 3):\n        p.yearPasses()        \n    p.amIOld()\n    print(\"\")\n              \n","offset":479,"fileType":"python","requestStartTime":1517930210316}}
{"body": {"column":36,"line":90,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self,num,info):\n        self.id = num\n        self.info = info\nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n        numid = 0\n    def add_document(self,info):\n        numid=numid+1\n        document = Doc(numid,info)\n        self.documentlist.append(document)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(document)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(document)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(document)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i].info:\n                                    if not childlist[j].info.has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i].info[pr]!=childlist[j].info[pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for i in range(0,len(deletelst)):\n                for prop in info:\n                l = len(self.propertydic[prop].nodedic[info[prop]].childlist)\n                    for j in range(0,l):\n                        if deletelst[i].id == self.propertydic[prop].nodedic[info[prop]].childlist[j].id:\n                            del self.propertydic[prop].nodedic[info[prop]].childlist[j]\n                            break\n                for n in range(0,len(documentlist)):\n                    if deletelst[i].\n\n                    \n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\nmyS = myStorage()\nwhile line = raw_input()\n    command, document = line.split( )\n    if command == add:\n        myS.add_document(document)\n    elif command == get:\n        lst = myS.get_document(document,myS.documentlist)\n        for i in range(0,len(lst)):\n            print lst[i].info\n    elif command == delete:\n        myS.delete_document(document)\n    else:\n        print \"Command not allowed\"\n\n","offset":3676,"fileType":"python","requestStartTime":1517930381771}}
{"body": {"column":47,"line":90,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self,num,info):\n        self.id = num\n        self.info = info\nclass myStorage:\n    def __init__(self):\n        propertydic = {}\n        documentlist = []\n        numid = 0\n    def add_document(self,info):\n        numid=numid+1\n        document = Doc(numid,info)\n        self.documentlist.append(document)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(document)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(document)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(document)\n    def get_document(self,info,lst):\n        if len(lst)==0\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i].info:\n                                    if not childlist[j].info.has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i].info[pr]!=childlist[j].info[pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for i in range(0,len(deletelst)):\n                for prop in info:\n                l = len(self.propertydic[prop].nodedic[info[prop]].childlist)\n                    for j in range(0,l):\n                        if deletelst[i].id == self.propertydic[prop].nodedic[info[prop]].childlist[j].id:\n                            del self.propertydic[prop].nodedic[info[prop]].childlist[j]\n                            break\n                for n in range(0,len(self.documentlist)):\n                    if deletelst[i].id == self.document\n\n                    \n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\n\nmyS = myStorage()\nwhile line = raw_input()\n    command, document = line.split( )\n    if command == add:\n        myS.add_document(document)\n    elif command == get:\n        lst = myS.get_document(document,myS.documentlist)\n        for i in range(0,len(lst)):\n            print lst[i].info\n    elif command == delete:\n        myS.delete_document(document)\n    else:\n        print \"Command not allowed\"\n\n","offset":3692,"fileType":"python","requestStartTime":1517930402600}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"import numpy\n\n\ndef arrays(arr):\n    # complete this function\n    # use numpy.array \n    print(numpy.)\n\n\n\narr = raw_input().strip().split(' ')\nresult = arrays(arr)\nprint(result)\n","offset":101,"fileType":"python","requestStartTime":1517930636029}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n    thisNode = head\n    while thisNode:\n        tmp = thisNode.next\n        thisNode.\n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":426,"fileType":"python","requestStartTime":1517930747529}}
{"body": {"column":13,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def _init_(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self,num,info):\n        self.id = num\n        self.info = info\nclass myStorage:\n    def __init__(self):\n        self.propertydic = {}\n        self.documentlist = []\n        self.numid = 0\n    def add_document(self,info):\n        self.numid=self.numid+1\n        document = Doc(numid,info)\n        self.documentlist.append(document)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(document)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(document)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(document)\n    def get_document(self,info,lst):\n        if len(lst)==0:\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i].info:\n                                    if not childlist[j].info.has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i].info[pr]!=childlist[j].info[pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for i in range(0,len(deletelst)):\n                for prop in info:\n                    l = len(self.propertydic[prop].nodedic[info[prop]].childlist)\n                    for j in range(0,l):\n                        if deletelst[i].id == self.propertydic[prop].nodedic[info[prop]].childlist[j].id:\n                            del self.propertydic[prop].nodedic[info[prop]].childlist[j]\n                            break\n                for n in range(0,len(self.documentlist)):\n                    if deletelst[i].id == self.documentlist[n].id:\n                        del self.documentlist[n]\n                        break\n                \n\n                    \n            \n            \n        \n                    \n                        \n                     \n                       \n                    \n            \n            \n    \n    \n        \n        \n\n\n\nimport sys\nmyS = myStorage()\nfor line in sys.stdin:\n    command, document = line.split( )\n    if command == \"add\":\n        myS.add_document(document)\n    elif command == \"get\":\n        lst = myS.get_document(document,myS.documentlist)\n        for i in range(0,len(lst)):\n            print lst[i].info\n    elif command == \"delete\":\n        myS.delete_document(document)\n    else:\n        print \"Command not allowed\"\n\n","offset":616,"fileType":"python","requestStartTime":1517930862703}}
{"body": {"column":18,"line":14,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n    payoff = 0\n    total_sum = 1+2+3+4+5+6\n    for i in range(rolls):\n        cum_sum = 0\n        count = 0.\n        for dice_val in [6,5,4,3,2,1]:\n            if dice_val>payoff:\n                cum_sum += dice_val\n                count += 1\n                continue\n            break\n        if count==0:\n            payoff = (total_sum-cum_sum)/(6.0-count)\n        elif count==6:\n            payoff = cum_sum/count\n        else:\n            payoff = cum_sum/count + (total_sum-cum_sum)/(6.0-count)\n    print payoff\n                \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":213,"fileType":"python","requestStartTime":1517931502201}}
{"body": {"column":19,"line":51,"wordToComplete":"","code":"\n# This template is based on the framework supplied for a similar challenge, in a Coursera Data Science course: https://www.coursera.org/course/datasci\n# And the code supplied here: https://github.com/uwescience/datasci_course_materials/blob/master/assignment3/wordcount.py\nimport json\nimport sys\nfrom collections import OrderedDict\nclass MapReduce:\n    def __init__(self):\n        self.intermediate = OrderedDict()\n        self.result = []\n\n    def emitIntermediate(self, key, value):\n        self.intermediate.setdefault(key, [])\n        self.intermediate[key].append(value)\n\n    def emit(self, value):\n        self.result.append(value) \n\n    def execute(self, data, mapper, reducer):\n        for line in data:\n            record = json.loads(line)\n            mapper(record)\n\n        for key in self.intermediate:\n            reducer(key, self.intermediate[key])\n\n        jenc = json.JSONEncoder()\n        for item in self.result:\n            print \"{\\\"key\\\":\\\"\"+item[0]+\"\\\",\\\"value\\\":\" + str(item[1]) + \"}\"\n\nmapReducer = MapReduce()\n\ndef mapper(record):\n    key = record[\"key\"]\n    value = record[\"value\"]\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the mapper logic to work\n    # At the end, you need to complete the emit intermediate step\n    #mapReducer.emitIntermediate(?, ?)\n\ndef reducer(key, list_of_values):\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the reducer logic to work\n    # At the end, you need to complete the emit step\n    pass\n    #mapReducer.emit((?, ?))\n\n\nif __name__ == '__main__':\n    inputData = []\n    counter = 0\n    n_r, n_s = sys.\n    for line in sys.stdin:\n        counter += 1\n        inputData.append(json.dumps({\"key\":counter,\"value\":line}))\n    print inputData\n    #mapReducer.execute(inputData, mapper, reducer)\n\n\n","offset":1628,"fileType":"python","requestStartTime":1517931529760}}
{"body": {"column":16,"line":10,"wordToComplete":"0.0","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n    payoff = 0.0\n    total_sum = 1+2+3+4+5+6\n    for i in range(rolls):\n        cum_sum = 0.0\n        count = 0.0\n        for dice_val in [6,5,4,3,2,1]:\n            if dice_val>payoff:\n                cum_sum += dice_val\n                count += 1\n                continue\n            break\n        if count==0:\n            payoff = (total_sum-cum_sum)/(6.0-count)\n        elif count==6:\n            payoff = cum_sum/count\n        else:\n            payoff = cum_sum/count + (total_sum-cum_sum)/(6.0-count)\n    print payoff\n                \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":121,"fileType":"python","requestStartTime":1517931529929}}
{"body": {"column":20,"line":98,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def __init__(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self,num,info):\n        self.id = num\n        self.info = info\nclass myStorage:\n    def __init__(self):\n        self.propertydic = {}\n        self.documentlist = []\n        self.numid = 0\n    def add_document(self,info):\n        self.numid=self.numid+1\n        document = Doc(self.numid,info)\n        self.documentlist.append(document)\n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                n = Node(prop,info[prop])\n                n.add_child(document)\n                p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    n = Node(prop,info[prop])\n                    n.add_child(document)\n                    self.propertydic[prop].add_node(n)\n                else:\n                    self.propertydic[prop].nodedic[info[prop]].add_child(document)\n    def get_document(self,info,lst):\n        if len(lst)==0:\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                    return []\n                else:\n                    if len(lst)==len(self.documentlist):\n                        lst = self.propertydic[prop].nodedic[info[prop]].childlist\n                        del info[prop]\n                        return self.get_document(info,lst)\n                    else:\n                        childlist = self.propertydic[prop].nodedic[info[prop]].childlist\n                        for i in range(0,len(lst)):\n                            find = 0\n                            for j in range(0,len(childlist)):\n                                diff = 0\n                                for pr in lst[i].info:\n                                    if not childlist[j].info.has_key(pr):\n                                        diff = 1\n                                        break\n                                    elif lst[i].info[pr]!=childlist[j].info[pr]:\n                                        diff = 1\n                                        break\n                                if diff ==0:\n                                    find = 1\n                            if find ==0:\n                                del lst[i]\n                        del info[prop]\n                        return self.get_document(info,lst)\n    def delete_document(self,info):\n        deletelst = self.get_document(self,info,self.documentlist)\n        if len(deletelst)!=0:\n            for i in range(0,len(deletelst)):\n                for prop in info:\n                    l = len(self.propertydic[prop].nodedic[info[prop]].childlist)\n                    for j in range(0,l):\n                        if deletelst[i].id == self.propertydic[prop].nodedic[info[prop]].childlist[j].id:\n                            del self.propertydic[prop].nodedic[info[prop]].childlist[j]\n                            break\n                for n in range(0,len(self.documentlist)):\n                    if deletelst[i].id == self.documentlist[n].id:\n                        del self.documentlist[n]\n                        break             \nimport sys\nimport json\nmyS = myStorage()\nfor line in sys.stdin:\n    command, d = line.split( )\n    document = json.\n    print document\n    if command == \"add\":\n        myS.add_document(document)\n    elif command == \"get\":\n        lst = myS.get_document(document,myS.documentlist)\n        for i in range(0,len(lst)):\n            print lst[i].info\n    elif command == \"delete\":\n        myS.delete_document(document)\n    else:\n        print \"Command not allowed\"\n\n","offset":3956,"fileType":"python","requestStartTime":1517931542365}}
{"body": {"column":27,"line":51,"wordToComplete":"","code":"\n# This template is based on the framework supplied for a similar challenge, in a Coursera Data Science course: https://www.coursera.org/course/datasci\n# And the code supplied here: https://github.com/uwescience/datasci_course_materials/blob/master/assignment3/wordcount.py\nimport json\nimport sys\nfrom collections import OrderedDict\nclass MapReduce:\n    def __init__(self):\n        self.intermediate = OrderedDict()\n        self.result = []\n\n    def emitIntermediate(self, key, value):\n        self.intermediate.setdefault(key, [])\n        self.intermediate[key].append(value)\n\n    def emit(self, value):\n        self.result.append(value) \n\n    def execute(self, data, mapper, reducer):\n        for line in data:\n            record = json.loads(line)\n            mapper(record)\n\n        for key in self.intermediate:\n            reducer(key, self.intermediate[key])\n\n        jenc = json.JSONEncoder()\n        for item in self.result:\n            print \"{\\\"key\\\":\\\"\"+item[0]+\"\\\",\\\"value\\\":\" + str(item[1]) + \"}\"\n\nmapReducer = MapReduce()\n\ndef mapper(record):\n    key = record[\"key\"]\n    value = record[\"value\"]\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the mapper logic to work\n    # At the end, you need to complete the emit intermediate step\n    #mapReducer.emitIntermediate(?, ?)\n\ndef reducer(key, list_of_values):\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the reducer logic to work\n    # At the end, you need to complete the emit step\n    pass\n    #mapReducer.emit((?, ?))\n\n\nif __name__ == '__main__':\n    inputData = []\n    counter = 0\n    n_r, n_s = raw_input().\n    for line in sys.stdin:\n        counter += 1\n        inputData.append(json.dumps({\"key\":counter,\"value\":line}))\n    print inputData\n    #mapReducer.execute(inputData, mapper, reducer)\n\n\n","offset":1636,"fileType":"python","requestStartTime":1517931547788}}
{"body": {"column":48,"line":51,"wordToComplete":"s","code":"\n# This template is based on the framework supplied for a similar challenge, in a Coursera Data Science course: https://www.coursera.org/course/datasci\n# And the code supplied here: https://github.com/uwescience/datasci_course_materials/blob/master/assignment3/wordcount.py\nimport json\nimport sys\nfrom collections import OrderedDict\nclass MapReduce:\n    def __init__(self):\n        self.intermediate = OrderedDict()\n        self.result = []\n\n    def emitIntermediate(self, key, value):\n        self.intermediate.setdefault(key, [])\n        self.intermediate[key].append(value)\n\n    def emit(self, value):\n        self.result.append(value) \n\n    def execute(self, data, mapper, reducer):\n        for line in data:\n            record = json.loads(line)\n            mapper(record)\n\n        for key in self.intermediate:\n            reducer(key, self.intermediate[key])\n\n        jenc = json.JSONEncoder()\n        for item in self.result:\n            print \"{\\\"key\\\":\\\"\"+item[0]+\"\\\",\\\"value\\\":\" + str(item[1]) + \"}\"\n\nmapReducer = MapReduce()\n\ndef mapper(record):\n    key = record[\"key\"]\n    value = record[\"value\"]\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the mapper logic to work\n    # At the end, you need to complete the emit intermediate step\n    #mapReducer.emitIntermediate(?, ?)\n\ndef reducer(key, list_of_values):\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the reducer logic to work\n    # At the end, you need to complete the emit step\n    pass\n    #mapReducer.emit((?, ?))\n\n\nif __name__ == '__main__':\n    inputData = []\n    counter = 0\n    n_r, n_s = map(int, raw_input().split(' ').s)\n    for line in sys.stdin:\n        counter += 1\n        inputData.append(json.dumps({\"key\":counter,\"value\":line}))\n    print inputData\n    #mapReducer.execute(inputData, mapper, reducer)\n\n\n","offset":1657,"fileType":"python","requestStartTime":1517931574333}}
{"body": {"column":36,"line":51,"wordToComplete":"s","code":"\n# This template is based on the framework supplied for a similar challenge, in a Coursera Data Science course: https://www.coursera.org/course/datasci\n# And the code supplied here: https://github.com/uwescience/datasci_course_materials/blob/master/assignment3/wordcount.py\nimport json\nimport sys\nfrom collections import OrderedDict\nclass MapReduce:\n    def __init__(self):\n        self.intermediate = OrderedDict()\n        self.result = []\n\n    def emitIntermediate(self, key, value):\n        self.intermediate.setdefault(key, [])\n        self.intermediate[key].append(value)\n\n    def emit(self, value):\n        self.result.append(value) \n\n    def execute(self, data, mapper, reducer):\n        for line in data:\n            record = json.loads(line)\n            mapper(record)\n\n        for key in self.intermediate:\n            reducer(key, self.intermediate[key])\n\n        jenc = json.JSONEncoder()\n        for item in self.result:\n            print \"{\\\"key\\\":\\\"\"+item[0]+\"\\\",\\\"value\\\":\" + str(item[1]) + \"}\"\n\nmapReducer = MapReduce()\n\ndef mapper(record):\n    key = record[\"key\"]\n    value = record[\"value\"]\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the mapper logic to work\n    # At the end, you need to complete the emit intermediate step\n    #mapReducer.emitIntermediate(?, ?)\n\ndef reducer(key, list_of_values):\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the reducer logic to work\n    # At the end, you need to complete the emit step\n    pass\n    #mapReducer.emit((?, ?))\n\n\nif __name__ == '__main__':\n    inputData = []\n    counter = 0\n    n_r, n_s = map(lambda x: int(x.s), raw_input().split(' '))\n    for line in sys.stdin:\n        counter += 1\n        inputData.append(json.dumps({\"key\":counter,\"value\":line}))\n    print inputData\n    #mapReducer.execute(inputData, mapper, reducer)\n\n\n","offset":1645,"fileType":"python","requestStartTime":1517931612655}}
{"body": {"column":55,"line":54,"wordToComplete":"","code":"\n# This template is based on the framework supplied for a similar challenge, in a Coursera Data Science course: https://www.coursera.org/course/datasci\n# And the code supplied here: https://github.com/uwescience/datasci_course_materials/blob/master/assignment3/wordcount.py\nimport json\nimport sys\nfrom collections import OrderedDict\nclass MapReduce:\n    def __init__(self):\n        self.intermediate = OrderedDict()\n        self.result = []\n\n    def emitIntermediate(self, key, value):\n        self.intermediate.setdefault(key, [])\n        self.intermediate[key].append(value)\n\n    def emit(self, value):\n        self.result.append(value) \n\n    def execute(self, data, mapper, reducer):\n        for line in data:\n            record = json.loads(line)\n            mapper(record)\n\n        for key in self.intermediate:\n            reducer(key, self.intermediate[key])\n\n        jenc = json.JSONEncoder()\n        for item in self.result:\n            print \"{\\\"key\\\":\\\"\"+item[0]+\"\\\",\\\"value\\\":\" + str(item[1]) + \"}\"\n\nmapReducer = MapReduce()\n\ndef mapper(record):\n    key = record[\"key\"]\n    value = record[\"value\"]\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the mapper logic to work\n    # At the end, you need to complete the emit intermediate step\n    #mapReducer.emitIntermediate(?, ?)\n\ndef reducer(key, list_of_values):\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the reducer logic to work\n    # At the end, you need to complete the emit step\n    pass\n    #mapReducer.emit((?, ?))\n\n\nif __name__ == '__main__':\n    inputData = []\n    counter = 0\n    n_r, n_s = map(lambda x: int(x.strip()), raw_input().split(' '))\n    for line in sys.stdin:\n        counter += 1\n        inputData.append(json.dumps({\"key\":int(counter.),\"value\":line}))\n    print inputData\n    #mapReducer.execute(inputData, mapper, reducer)\n\n\n","offset":1781,"fileType":"python","requestStartTime":1517931643488}}
{"body": {"column":69,"line":54,"wordToComplete":"s","code":"\n# This template is based on the framework supplied for a similar challenge, in a Coursera Data Science course: https://www.coursera.org/course/datasci\n# And the code supplied here: https://github.com/uwescience/datasci_course_materials/blob/master/assignment3/wordcount.py\nimport json\nimport sys\nfrom collections import OrderedDict\nclass MapReduce:\n    def __init__(self):\n        self.intermediate = OrderedDict()\n        self.result = []\n\n    def emitIntermediate(self, key, value):\n        self.intermediate.setdefault(key, [])\n        self.intermediate[key].append(value)\n\n    def emit(self, value):\n        self.result.append(value) \n\n    def execute(self, data, mapper, reducer):\n        for line in data:\n            record = json.loads(line)\n            mapper(record)\n\n        for key in self.intermediate:\n            reducer(key, self.intermediate[key])\n\n        jenc = json.JSONEncoder()\n        for item in self.result:\n            print \"{\\\"key\\\":\\\"\"+item[0]+\"\\\",\\\"value\\\":\" + str(item[1]) + \"}\"\n\nmapReducer = MapReduce()\n\ndef mapper(record):\n    key = record[\"key\"]\n    value = record[\"value\"]\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the mapper logic to work\n    # At the end, you need to complete the emit intermediate step\n    #mapReducer.emitIntermediate(?, ?)\n\ndef reducer(key, list_of_values):\n    # ADD THE REQUIRED LOGIC BELOW\n    # You may need to add some lines for the reducer logic to work\n    # At the end, you need to complete the emit step\n    pass\n    #mapReducer.emit((?, ?))\n\n\nif __name__ == '__main__':\n    inputData = []\n    counter = 0\n    n_r, n_s = map(lambda x: int(x.strip()), raw_input().split(' '))\n    for line in sys.stdin:\n        counter += 1\n        inputData.append(json.dumps({\"key\":counter,\"value\":int(line.s)}))\n    print inputData\n    #mapReducer.execute(inputData, mapper, reducer)\n\n\n","offset":1795,"fileType":"python","requestStartTime":1517931672546}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef beautifulBinaryString(b):\n    # Complete this function\n     s=b.\n        \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    b = raw_input().strip()\n    result = beautifulBinaryString(b)\n    print result\n\n\n","offset":97,"fileType":"python","requestStartTime":1517931790132}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef beautifulBinaryString(b):\n    # Complete this function\n        s=b.replace(\"010\",\"\")\n        print(b.) \n        \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    b = raw_input().strip()\n    result = beautifulBinaryString(b)\n    print result\n\n\n","offset":134,"fileType":"python","requestStartTime":1517931837297}}
{"body": {"column":27,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef beautifulBinaryString(b):\n    # Complete this function\n        s=b.replace(\"010\",\"\")\n        print(b.length()-s.) \n        \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    b = raw_input().strip()\n    result = beautifulBinaryString(b)\n    print result\n\n\n","offset":145,"fileType":"python","requestStartTime":1517931861162}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    for node in list:\n        if node.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":580,"fileType":"python","requestStartTime":1517933063787}}
{"body": {"column":17,"line":32,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    for node in list:\n        if node.val > x:\n            node.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":606,"fileType":"python","requestStartTime":1517933078846}}
{"body": {"column":18,"line":32,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    for node in list:\n        if node.val > x:\n            node.;\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":607,"fileType":"python","requestStartTime":1517933102206}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nfrom sklearn import datasets, linear_model\ndef P(A,B):\n    n = float(len(A))\n    muA = sum(A)/n\n    muB = sum(B)/n\n    diffA = map(lambda x: x - muA, A)\n    diffB = map(lambda x: x - muB, B)\n    stdA = math.sqrt((1/(n-1))* sum([d*d for d in diffA]))\n    stdB = math.sqrt((1/(n-1))* sum([d*d for d in diffB]))\n    return (sum([A[i]*B[i] for i in range(int(n))]) - n * muA * muB) / ((n-1) * stdA * stdB)\n    \nA = [15,12,8,8,7,7,7,6,5,3]\nB = [10,25,17,11,13,17,20,13,9,15]\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(np., diabetes_y_train)\nprint '%.3f' % (P(A,B))\n\n\n","offset":682,"fileType":"python","requestStartTime":1517933349007}}
{"body": {"column":25,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nfrom sklearn import datasets, linear_model\ndef P(A,B):\n    n = float(len(A))\n    muA = sum(A)/n\n    muB = sum(B)/n\n    diffA = map(lambda x: x - muA, A)\n    diffB = map(lambda x: x - muB, B)\n    stdA = math.sqrt((1/(n-1))* sum([d*d for d in diffA]))\n    stdB = math.sqrt((1/(n-1))* sum([d*d for d in diffB]))\n    return (sum([A[i]*B[i] for i in range(int(n))]) - n * muA * muB) / ((n-1) * stdA * stdB)\n    \nA = [15,12,8,8,7,7,7,6,5,3]\nB = [10,25,17,11,13,17,20,13,9,15]\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(np.array(A), np.)\nprint '%.3f' % (P(A,B))\n\n\n","offset":695,"fileType":"python","requestStartTime":1517933354614}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nfrom sklearn import datasets, linear_model\ndef P(A,B):\n    n = float(len(A))\n    muA = sum(A)/n\n    muB = sum(B)/n\n    diffA = map(lambda x: x - muA, A)\n    diffB = map(lambda x: x - muB, B)\n    stdA = math.sqrt((1/(n-1))* sum([d*d for d in diffA]))\n    stdB = math.sqrt((1/(n-1))* sum([d*d for d in diffB]))\n    return (sum([A[i]*B[i] for i in range(int(n))]) - n * muA * muB) / ((n-1) * stdA * stdB)\n    \nA = [15,12,8,8,7,7,7,6,5,3]\nB = [10,25,17,11,13,17,20,13,9,15]\n# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(np.array(A), np.array(B))\nprint '%.3f' % regr.\n\n\n","offset":725,"fileType":"python","requestStartTime":1517933392895}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    curr = list.\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":558,"fileType":"python","requestStartTime":1517933399423}}
{"body": {"column":14,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    curr = list.head\n    prev = None\n    \n    if curr > \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":598,"fileType":"python","requestStartTime":1517933415894}}
{"body": {"column":19,"line":34,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = list.head\n    prev = None\n    \n    while current:\n        if current.:\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":625,"fileType":"python","requestStartTime":1517933474139}}
{"body": {"column":21,"line":36,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = list.head\n    prev = None\n    \n    while current:\n        if current.getData() > x:\n            if prev:\n                prev.\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":682,"fileType":"python","requestStartTime":1517933500158}}
{"body": {"column":41,"line":36,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = list.head\n    prev = None\n    \n    while current:\n        if current.getData() > x:\n            if prev:\n                prev.setNextNode(current.)\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":702,"fileType":"python","requestStartTime":1517933506528}}
{"body": {"column":21,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = list.head\n    prev = None\n    \n    while current:\n        if current.getData() > x:\n            if prev:\n                prev.setNextNode(current.getNextNode())\n            else:\n                self.\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":756,"fileType":"python","requestStartTime":1517933516038}}
{"body": {"column":36,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = list.head\n    prev = None\n    \n    while current:\n        if current.getData() > x:\n            if prev:\n                prev.setNextNode(current.getNextNode())\n            else:\n                self.head = current.\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":771,"fileType":"python","requestStartTime":1517933520048}}
{"body": {"column":26,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = list.head\n    prev = None\n    \n    while current:\n        if current.getData() > x:\n            if prev:\n                prev.setNextNode(current.getNextNode())\n            else:\n                self.head = current.getNextNode()\n            return true\n        \n        prev = current\n        current = current.\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":867,"fileType":"python","requestStartTime":1517933539767}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  removeNodes(list, x):\n    \n    current = x.head\n    prev = None\n    \n    while current:\n        if current.getData() > x:\n            if prev:\n                prev.setNextNode(current.getNextNode())\n            else:\n                self.head = current.getNextNode()\n            return True\n        \n        prev = current\n        current = current.getNextNode()\n    \n    return False\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":558,"fileType":"python","requestStartTime":1517933602394}}
{"body": {"column":21,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    \n    current = list.val\n    prev = None\n    \n    while current:\n        if current > x:\n            if prev:\n                prev.setNextNode(current)\n            else:\n                list.head = current\n            return True\n        \n        prev = current\n        current = current.getNextNode()\n    \n    return False\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":730,"fileType":"python","requestStartTime":1517933752353}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    \n    current = list.val\n    prev = None\n    \n    while current:\n        if current > x:\n            if prev:\n                prev.setNextNode(current)\n            else:\n                list.val = current\n            return True\n        \n        prev = current\n        current.\n    \n    return False\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":816,"fileType":"python","requestStartTime":1517933794938}}
{"body": {"column":26,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    \n    current = list.val\n    prev = None\n    \n    while current:\n        if current > x:\n            if prev:\n                prev.setNextNode(current)\n            else:\n                list.val = current\n            return True\n        \n        prev = current\n        current = current.\n    \n    return False\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":826,"fileType":"python","requestStartTime":1517933797208}}
{"body": {"column":26,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    \n    current = list.val\n    prev = None\n    \n    while current:\n        if current > x:\n            if prev:\n                prev.setNextNode(current)\n            else:\n                list.val = current\n            return True\n        \n        prev = current\n        current = current.\n    \n    return False\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":826,"fileType":"python","requestStartTime":1517933827408}}
{"body": {"column":15,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    \n    current = list.val\n    prev = None\n    \n    while list.:\n        if current > x:\n            if prev:\n                prev.setNextNode(current)\n            else:\n                list.val = current\n            return True\n        \n        prev = current\n        current = list.next\n    \n    return False\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":600,"fileType":"python","requestStartTime":1517933874846}}
{"body": {"column":43,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nfrom sklearn import datasets, linear_model\nimport numpy as np\n\nA = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nB = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\n\ncoefficients = np.linalg.lstsq(np.array(A).,np.array(y))[0]\n\n\n","offset":272,"fileType":"python","requestStartTime":1517933950660}}
{"body": {"column":69,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nfrom sklearn import datasets, linear_model\nimport numpy as np\n\nA = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nB = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\n\ncoefficients = np.linalg.lstsq(np.array(A).reshape(-1,1),np.array(y).)[0]\n\n\n","offset":298,"fileType":"python","requestStartTime":1517933964997}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  mergeStrings(a, b):\n\n    newstring = ''\n    i = 0\n    for i in a:\n        newstring.\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a = raw_input()\n\n\n_b = raw_input()\n\nres = mergeStrings(_a, _b);\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":161,"fileType":"python","requestStartTime":1517934059259}}
{"body": {"column":19,"line":15,"wordToComplete":"a","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  mergeStrings(a, b):\n\n    newstring = ''\n    i = 0\n    for i in a:\n        newstring.append(a[i])\n        newstring.a\n        \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a = raw_input()\n\n\n_b = raw_input()\n\nres = mergeStrings(_a, _b);\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":193,"fileType":"python","requestStartTime":1517934070463}}
{"body": {"column":10,"line":11,"wordToComplete":"0.\"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math\nfrom sklearn import datasets, linear_model\nimport numpy as np\n\nA = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nB = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\n\ncoefficients = np.linalg.lstsq(np.array(A).reshape(-1,1),np.array(y).reshape(-1,1))[0]\n\nprint (\"0.\")\n\n\n","offset":327,"fileType":"python","requestStartTime":1517934121480}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 5:\n    \n    \n    return leap\nyear = int(raw_input())\nprint is_leap(year)\n","offset":87,"fileType":"python","requestStartTime":1517934825704}}
{"body": {"column":26,"line":7,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 5:\n        if year % 100:\n            if year % 400:\n    \n    \n    return leap\nyear = int(raw_input())\nprint is_leap(year)\n","offset":137,"fileType":"python","requestStartTime":1517934850695}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    \n    # Write your logic here\n    if year % 4 == 0:\n        leap = True\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n        else :\n            leap = False\n    else:         \n    \n    \n    return leap\nyear = int(raw_input())\nprint is_leap(year)\n","offset":250,"fileType":"python","requestStartTime":1517934939947}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input.))\n\n","offset":55,"fileType":"python","requestStartTime":1517935668012}}
{"body": {"column":29,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input().))\n\n","offset":57,"fileType":"python","requestStartTime":1517935672375}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input().split()))\narr=numpy.\n\n","offset":77,"fileType":"python","requestStartTime":1517935701398}}
{"body": {"column":43,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input().split()))\narr=numpy.array([ [ j for j in raw_input().]for i in range(n)])\n\n","offset":110,"fileType":"python","requestStartTime":1517935839795}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input().split()))\narr=numpy.array([ [ int(j) for j in raw_input().split()]for i in range(n)])\n\nprint arr.\n\n","offset":154,"fileType":"python","requestStartTime":1517935951327}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input().split()))\narr=numpy.array([ [ int(j) for j in raw_input().split()]for i in range(n)])\n\nprint numpy.\n\n","offset":156,"fileType":"python","requestStartTime":1517935961737}}
{"body": {"column":41,"line":64,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\n# stock order comparator\ndef stock_cmp(s1,s2):\n    if cmp(s1[1][2], s2[1][2]) != 0:\n        return cmp(s1[1][2], s2[1][2]) * -1\n    elif cmp(s1[1][1], s2[1][1]) != 0:\n        if s1[1][1] == None:\n            return 1\n        elif s2[1][1] == None:\n            return -1\n        else:\n            return cmp(s1[1][1], s2[1][1])\n    else:\n        return cmp(s1[0], s2[0])\n\ndef toNumeric(s):\n    try:\n        s = s.replace('$','')\n        s = s.replace(' ','')\n        if s[0] == '(' and s[-1] == ')':\n            s = s[1:-2]\n        return float(s)\n    except:\n        return None\n\ndef toInt(s):\n    try:\n        a = int(s)\n        if a == 1:\n            return 1\n        else:\n            return 0\n    except:\n        return 0\n    \n\nif __name__ == \"__main__\":\n    # line = raw_input(); # ticker, field, value\n    lines = sys.stdin.readlines()\n    lines = [1:] # skip ticker, field, value\n    stock = {}\n    for line in lines:\n        ticker,field,value = line.split(',')\n        ticker = ticker.strip()\n        if ticker not in stock.keys():\n            stock[ticker] = [None, None, 0]\n        if field.strip() == 'price':\n            stock[ticker][0] = toNumeric(value)\n        elif field.strip() == 'EPS':\n            stock[ticker][1] = toNumeric(value)\n        elif field.strip() == 'is_active':\n            stock[ticker][2] = toInt(value)\n    # finish reading the data\n    print \"ticker|price|EPS|P/E|is_active\"\n    # now sort the data in the dictionary\n    l = sorted(stock.iteritems(), cmp=stock_cmp)\n    for k, v in l:\n        if v[0] == None:\n            price = 'NaN'\n        else:\n            price = str(v[0]).rtrip('0').\n        \n    \n    \n\n","offset":1716,"fileType":"python","requestStartTime":1517936032161}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"import numpy\nimport numpy\n\nn,m=list(map(int,raw_input().split()))\narr=numpy.array([ [ int(j) for j in raw_input().split()]for i in range(n)])\n\nprint numpy.transpose(arr)\nprint arr.flatten()\n\n\n","offset":181,"fileType":"python","requestStartTime":1517936033663}}
{"body": {"column":11,"line":19,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n\n# Declare second integer, double, and String variables.\n\n# Read and save an integer, double, and String to your variables.\nnum = int(raw_input().strip())\ndNum = int(raw_input().strip())\nline = raw_input().strip()\n\n# Print the sum of both integer variables on a new line.\nprint i+num\n\n# Print the sum of the double variables on a new line.\nprint d+dNum\n\n# Concatenate and print the String variables on a new line\nprint {}{}.\n# The 's' variable above should be printed first.\n\n\n","offset":458,"fileType":"python","requestStartTime":1517936074079}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n\n# Declare second integer, double, and String variables.\n\n# Read and save an integer, double, and String to your variables.\nnum = int(raw_input().strip())\ndNum = int(raw_input().strip())\nline = raw_input().strip()\n\n# Print the sum of both integer variables on a new line.\nprint i+num\n\n# Print the sum of the double variables on a new line.\nprint d+dNum\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint s.\n\n","offset":505,"fileType":"python","requestStartTime":1517936145460}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy\narray_1 = numpy.array([[1,2,3],[0,0,0]])\narray_2 = numpy.array([[0,0,0],[7,8,9]])\nprint numpy.concatenate((array_1, array_2), axis = None)\nprint numpy.\n\n","offset":178,"fileType":"python","requestStartTime":1517936163160}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"import textwrap\ndef wrap(string, max_width):\n    import text.\n    return \nif __name__ == '__main__':\n    string, max_width = raw_input(), int(raw_input())\n    result = wrap(string, max_width)\n    print result\n","offset":62,"fileType":"python","requestStartTime":1517936420052}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"import textwrap\ndef wrap(string, max_width):\n    import text.wrap\n    \n    return textwrap.\nif __name__ == '__main__':\n    string, max_width = raw_input(), int(raw_input())\n    result = wrap(string, max_width)\n    print result\n","offset":92,"fileType":"python","requestStartTime":1517936450112}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n\n# Declare second integer, double, and String variables.\n\n# Read and save an integer, double, and String to your variables.\nnum = int(raw_input().strip())\ndNum = float(raw_input().strip())\nline = raw_input().strip()\n\n# Print the sum of both integer variables on a new line.\nprint i+num\n\n# Print the sum of the double variables on a new line.\nprint d+dNum\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\nprint \"{}{}\".\n\n","offset":512,"fileType":"python","requestStartTime":1517936802757}}
{"body": {"column":20,"line":30,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked lists\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\ndef MergeLists(headA, headB):\n    if headA == None:\n        return headB\n    if headB == None:\n        return headA\n    if headA == None and headB == None:\n        return None\n    \n    if headA.data <= headB.data:\n        first = headA\n        second = headB\n    else:\n        first = headB\n        second = headA\n        \n    while first and second:\n        print first.\n        if first.data <= second.data:\n            prev1 = first\n            first = first.next\n        else:\n            prev1.next = second\n            prev1 = second\n            second.next = first\n            second = second.next\n    \n    if second:\n        prev1.next = second\n        \n    return first\n\n","offset":659,"fileType":"python","requestStartTime":1517937683208}}
{"body": {"column":33,"line":30,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked lists\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\ndef MergeLists(headA, headB):\n    if headA == None:\n        return headB\n    if headB == None:\n        return headA\n    if headA == None and headB == None:\n        return None\n    \n    if headA.data <= headB.data:\n        first = headA\n        second = headB\n    else:\n        first = headB\n        second = headA\n        \n    while first and second:\n        print first.data, second.\n        if first.data <= second.data:\n            prev1 = first\n            first = first.next\n        else:\n            prev1.next = second\n            prev1 = second\n            second.next = first\n            second = second.next\n    \n    if second:\n        prev1.next = second\n        \n    return first\n\n","offset":672,"fileType":"python","requestStartTime":1517937688063}}
{"body": {"column":29,"line":22,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\na = []      \n\ndef temp(x,y,s,sizex,sizey):\n    if x>=sizex or y>=sizey:\n        return None\n    elif x==sizex-1 and y==sizey-1 :\n        a.append(s)\n    else:\n        temp(x,y+1,s+'H', sizex,sizey)\n        temp(x+1,y,s+'V',sizex,sizey)\n        \n        \n\ndef getSafePaths(journeys):\n    for i in range(0,len(journeys)):\n        [x,y,ind] = journeys.\n    print a\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    journeys_cnt = 0\n    journeys_cnt = int(raw_input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = raw_input()\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":419,"fileType":"python","requestStartTime":1517937893036}}
{"body": {"column":25,"line":2,"wordToComplete":"","code":"\nn = raw_input()\na, b, c, d = raw_input().\n\n","offset":43,"fileType":"python","requestStartTime":1517937944390}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfor test in range(std.)\n\n","offset":94,"fileType":"python","requestStartTime":1517937947949}}
{"body": {"column":24,"line":2,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfor test in range(stdin.)\n\n","offset":96,"fileType":"python","requestStartTime":1517937948681}}
{"body": {"column":14,"line":2,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ngames = stdin.\n\n","offset":86,"fileType":"python","requestStartTime":1517937966824}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\ngames = sys.\n\n","offset":95,"fileType":"python","requestStartTime":1517937974384}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\ngames = sys.stdin.\n\n","offset":101,"fileType":"python","requestStartTime":1517937977774}}
{"body": {"column":25,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\ngames = sys.stdin.read().\nprint games\n\n","offset":108,"fileType":"python","requestStartTime":1517937993145}}
{"body": {"column":28,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    l_acid_name = acid_name.lower()\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        acid_name = raw_input().strip()\n        result = acidNaming(acid_name)\n        print result\n\n\n\n","offset":113,"fileType":"python","requestStartTime":1517938055697}}
{"body": {"column":8,"line":12,"wordToComplete":"","code":"\nimport sys\n\n\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    #Write your code here\n    sys.\n\n","offset":209,"fileType":"python","requestStartTime":1517938103655}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\nimport sys\n\n\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    #Write your code here\n    sys.stdout.\n\n","offset":216,"fileType":"python","requestStartTime":1517938106498}}
{"body": {"column":30,"line":12,"wordToComplete":"","code":"\nimport sys\n\n\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    #Write your code here\n    sys.stdout.write(str(root.))\n\n","offset":231,"fileType":"python","requestStartTime":1517938111110}}
{"body": {"column":27,"line":35,"wordToComplete":"","code":"\n\"\"\"\n Merge two linked lists\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\ndef MergeLists(headA, headB):\n    if headA == None:\n        return headB\n    if headB == None:\n        return headA\n    if headA == None and headB == None:\n        return None\n    \n    if headA.data <= headB.data:\n        first = headA\n        second = headB\n    else:\n        first = headB\n        second = headA\n        \n    while first and second:\n        print first.data, second.data\n        if first.data <= second.data:\n            prev1 = first\n            first = first.next\n        else:\n            next2 = second.\n            prev1.next = second\n            prev1 = second\n            prev1.next = first\n            second = second.next\n    \n    if second:\n        prev1.next = second\n        \n    return first\n\n","offset":813,"fileType":"python","requestStartTime":1517938209299}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"\nimport sys\n\n\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # Write your code here\n    sys.stdout.write(str(root.data) + ' ')\n    if root.\n    top_view_helper(root, 0)\n    \n    \ndef top_view_helper(node, pos):\n    sys.stdout.write(str(root.data) + ' ')\n\n    \n    \n    \n    \n\n","offset":257,"fileType":"python","requestStartTime":1517938256558}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    \n    for c in s:\n        if c in '1':\n            root = root.\n   #Enter Your Code Here\n\n\n","offset":325,"fileType":"python","requestStartTime":1517938714227}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    \n    for c in s:\n        if c in '1':\n            root = root.right\n            if root.\n   #Enter Your Code Here\n\n\n","offset":351,"fileType":"python","requestStartTime":1517938731510}}
{"body": {"column":27,"line":16,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    \n    for c in s:\n        if c in '1':\n            root = root.right\n            if root.data != \"\\0\"\n                print root.\n   #Enter Your Code Here\n\n\n","offset":391,"fileType":"python","requestStartTime":1517938748157}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef super_reduced_string(s):\n    # This function is O(n) ---maybe?\n    stack = []\n    length = 0\n    for letter in s:\n        if !length:\n            stack.append(letter)\n            length++\n        else:\n            if s[-1] == letter:\n                s.pop()\n                length--\n            else:\n                s.\n    return length if length else \"Empty String\"\n    #use stack[-1] to peek\n\ns = raw_input().strip()\nresult = super_reduced_string(s)\nprint(result)\n\n\n","offset":352,"fileType":"python","requestStartTime":1517938791001}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    \n    for c in s:\n        if c in '1':\n            root = root.right\n            if root.data != \"\\0\"\n                print root.data\n        else:\n            root = root.\n   #Enter Your Code Here\n\n\n","offset":434,"fileType":"python","requestStartTime":1517938798415}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    \n    for c in s:\n        if c in '1':\n            root = root.right\n            if root.data != \"\\0\"\n                print root.data\n        else:\n            root = root.left\n            if root.\n   #Enter Your Code Here\n\n\n","offset":459,"fileType":"python","requestStartTime":1517938805420}}
{"body": {"column":25,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nN = int(raw_input())\n\ntimes = str(raw_input()).\n\n","offset":120,"fileType":"python","requestStartTime":1517938814770}}
{"body": {"column":27,"line":20,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    \n    for c in s:\n        if c in '1':\n            root = root.right\n            if root.data != \"\\0\":\n                print root.data\n        else:\n            root = root.left\n            if root.data != \"\\0\":\n                print root.\n   #Enter Your Code Here\n\n\n","offset":501,"fileType":"python","requestStartTime":1517938823597}}
{"body": {"column":9,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\nelements.\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":105,"fileType":"python","requestStartTime":1517938949194}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    elements.sort().\n    print(elements)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":116,"fileType":"python","requestStartTime":1517938992440}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    #Write your code here\n    preOrder(root.)\n\n\n","offset":207,"fileType":"python","requestStartTime":1517939065962}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    #Write your code here\n    print root.\n    preOrder(root.left)\n    preOrder(root.left)\n\n\n","offset":204,"fileType":"python","requestStartTime":1517939078343}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\narr = []\ndef preOrder(root):\n    #Write your code here\n    if root is not None:\n        arr.root.data\n        preOrder(root.left)\n        preOrder(root.right)\n\n\n","offset":235,"fileType":"python","requestStartTime":1517939180893}}
{"body": {"column":18,"line":2,"wordToComplete":"Hello.,\"","code":"\nif __name__ == '__main__':\n    print \"Hello.,\"\n\n\n\n","offset":47,"fileType":"python","requestStartTime":1517939198235}}
{"body": {"column":17,"line":2,"wordToComplete":"Hello.\"","code":"\nif __name__ == '__main__':\n    print \"Hello.\"\n\n\n\n","offset":46,"fileType":"python","requestStartTime":1517939198939}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef lca(root , v1 , v2):\n  #Enter your code here\n    if (v1 > root.)\n\n\n","offset":210,"fileType":"python","requestStartTime":1517939225327}}
{"body": {"column":8,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nN = int(raw_input())\n\ntimes = str(raw_input()).split(' ')\n\ndef number_complete(arr):\n    timespent = 0\n    complete = 0\n    for i in range(N):\n        if (int(arr[i]) - timespent) <= 0:\n            complete += 1\n        timespent +=1\n    return complete\n\nprint number_complete(times)\n\ndef move_next(arr):\n    arr.\n        \n    \n\n","offset":386,"fileType":"python","requestStartTime":1517939232921}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    \n    if n >\n\n\n","offset":69,"fileType":"python","requestStartTime":1517939252666}}
{"body": {"column":36,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef lca(root , v1 , v2):\n  #Enter your code here\n    if v1 > root.data and v2 > root.\n\n\n","offset":228,"fileType":"python","requestStartTime":1517939255620}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef lca(root , v1 , v2):\n  #Enter your code here\n    if v1 > root.data and v2 > root.data:\n        lca(root.)\n\n\n","offset":251,"fileType":"python","requestStartTime":1517939274855}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef lca(root , v1 , v2):\n  #Enter your code here\n    if v1 > root.data and v2 > root.data:\n        lca(root.right, v1,v2)\n    if v1 < root.\n\n\n","offset":282,"fileType":"python","requestStartTime":1517939308134}}
{"body": {"column":36,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef lca(root , v1 , v2):\n  #Enter your code here\n    if v1 > root.data and v2 > root.data:\n        lca(root.right, v1,v2)\n    if v1 < root.data and v2 < root.\n\n\n","offset":301,"fileType":"python","requestStartTime":1517939315632}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef lca(root , v1 , v2):\n  #Enter your code here\n    if v1 > root.data and v2 > root.data:\n        lca(root.right, v1,v2)\n    if v1 < root.data and v2 < root.data:\n        lca(root.)\n\n\n","offset":324,"fileType":"python","requestStartTime":1517939322690}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\narr = []\nhead = None\ndef preOrder(root):\n    #Write your code here\n    if head is None:\n        head = root\n    if root is not None:\n        arr.append(root.data)\n        preOrder(root.left)\n        preOrder(root.right)\n    if head == root: \n        print *arr.\n        \n\n","offset":404,"fileType":"python","requestStartTime":1517939374666}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nn,m = map(int, raw_input().split())\na,b = (np.)\n'''\nline = map(int, raw_input().split())\n\n\nheight, width = line[0], line[1]\na = map(int, raw_input().split())\nb = map(int, raw_input().split())\nprint list(numpy.add(a,b))\nprint list(numpy.subtract(a,b))\nprint list(numpy.multiply(a,b))\nprint list(numpy.divide(a,b))\nprint list(numpy.mod(a,b))\nprint list(numpy.power(a,b))\n\nimport numpy as np\nn, m = map(int, input().split())\na, b = (np.array([input().split() for _ in range(n)], dtype=int) for _ in range(2))\n#print(a+b, a-b, a*b, a//b, a%b, a**b, sep='\\n')\n'''\n\n","offset":73,"fileType":"python","requestStartTime":1517939626331}}
{"body": {"column":28,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy as np\nn,m = map(int, raw_input().split())\na,b = (np.array(raw_input().))\n'''\nline = map(int, raw_input().split())\n\n\nheight, width = line[0], line[1]\na = map(int, raw_input().split())\nb = map(int, raw_input().split())\nprint list(numpy.add(a,b))\nprint list(numpy.subtract(a,b))\nprint list(numpy.multiply(a,b))\nprint list(numpy.divide(a,b))\nprint list(numpy.mod(a,b))\nprint list(numpy.power(a,b))\n\nimport numpy as np\nn, m = map(int, input().split())\na, b = (np.array([input().split() for _ in range(n)], dtype=int) for _ in range(2))\n#print(a+b, a-b, a*b, a//b, a%b, a**b, sep='\\n')\n'''\n\n","offset":97,"fileType":"python","requestStartTime":1517939659682}}
{"body": {"column":36,"line":85,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n#Because of the limitation of time, not considering handling list\nimport sys\nimport json\nclass Node:\n    def __init__(self,prop,key):\n        self.prop = prop\n        self.key = key\n        self.childlist =[]\n    def add_child(self,child):\n        self.childlist.append(child)\n    def clear(self):\n        self.childlist.clear()\nclass Property:\n    def __init__(self,name):\n        self.name = name\n        self.nodedic = {}\n    def add_node(self,node):\n        self.nodedic[node.key]=node\nclass Doc:\n    def __init__(self,num,info,name):\n        self.id = num\n        self.info = info\n        self.name = name\nclass myStorage:\n    def __init__(self):\n        self.propertydic = {}\n        self.documentlist = []\n        self.numid = 0\n    def add_document(self,info,name):\n        #print info\n        self.numid=self.numid+1\n        document = Doc(self.numid,info,name)\n        self.documentlist.append(document)\n        self.add_help(info,document)\n    def add_help(self,info,document):\n        for prop in info:\n            #print type(info[prop])\n            if type(info[prop]) is dict:\n                self.add_help(info[prop],document)\n                continue\n            if not self.propertydic.has_key(prop):\n                p = Property(prop)\n                if type(info[prop]) is list:\n                    for it in info[prop]:\n                        n = Node(prop,it)\n                        n.add_child(document)\n                        p.add_node(n)\n                else:\n                    n = Node(prop,info[prop])\n                    n.add_child(document)\n                    p.add_node(n)\n                self.propertydic[prop] = p\n            else:\n                if type(info[prop]) is list:\n                    for it in info[prop]:\n                        if not self.propertydic[prop].nodedic.has_key(it):\n                            n = Node(prop,it)\n                            n.add_child(document)\n                            self.propertydic[prop].add_node(n)\n                        else:\n                            self.propertydic[prop].nodedic[it].add_child(document)\n                else:\n                    if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                        n = Node(prop,info[prop])\n                        n.add_child(document)\n                        self.propertydic[prop].add_node(n)\n                    else:\n                        self.propertydic[prop].nodedic[info[prop]].add_child(document)\n        \n    def get_document(self,info,lst):\n        if len(lst)==0:\n            return []\n        if len(info)==0 and len(lst)!=0:\n            return lst     \n        for prop in info:\n            if type(info[prop]) is dict:\n                return self.get_document(info[prop],lst)\n            if not self.propertydic.has_key(prop):\n                return []\n            else:\n                if type(info[prop]) is list:\n                    if len(info[prop])==0:\n                        del info[prop]\n                        return self.\n                        continue            \n                    for num in info[prop][:]:\n                        if not self.propertydic[prop].nodedic.has_key(num):\n                            return []\n                        else:\n                            if len(lst)==len(self.documentlist):\n                                lst = list(self.propertydic[prop].nodedic[num].childlist)\n                                info[prop].remove(num)\n                                lst = self.get_document(info,lst)\n                                return lst\n                            else:\n                                childlist = list(self.propertydic[prop].nodedic[num].childlist)\n                                for it in lst[:]:\n                                    find = 0\n                                    for j in range(0,len(childlist)):\n                                        diff = self.check_property(it.info,childlist[j].info)\n                                        if diff ==0:\n                                            find = 1\n                                    if find ==0:\n                                        lst.remove(it)\n                                del num\n                                return self.get_document(info,lst)\n                \n                else:\n                    if not self.propertydic[prop].nodedic.has_key(info[prop]):\n                        return []\n                    else:\n                        if len(lst)==len(self.documentlist):\n                            lst = list(self.propertydic[prop].nodedic[info[prop]].childlist)\n                            del info[prop]\n                            lst = self.get_document(info,lst)\n                            return lst\n                        else:\n                            childlist = list(self.propertydic[prop].nodedic[info[prop]].childlist)\n                            for it in lst[:]:\n                                find = 0\n                                for j in range(0,len(childlist)):\n                                    diff = self.check_property(it.info,childlist[j].info)\n                                    if diff ==0:\n                                        find = 1\n                                if find ==0:\n                                    lst.remove(it)\n                            del info[prop]\n                            return self.get_document(info,lst)\n    def check_property(self,it1,it2):\n        diff = 0\n        for pr in it1:         \n            if type(it1[pr]) is dict:\n                diff = self.check_property(it1[pr],it2[pr])\n            else:\n                if not it2.has_key(pr):\n                    diff = 1\n                    break\n                elif type(it1[pr]) is list:\n                    for ls in it1[pr]:\n                        has = 0\n                        for ls2 in it2[pr]:\n                            if ls2==ls:\n                                has = 1\n                                break\n                        if has ==0:\n                            diff =1\n                            break\n                elif it1[pr]!=it2[pr]:\n                    diff = 1\n                    break\n        return diff         \n                      \n            \n    def delete_document(self,info):\n        deletelst = self.get_document(info,self.documentlist)\n        if len(deletelst)!=0:\n            for i in range(0,len(deletelst)):\n                for prop in info:\n                    l = len(self.propertydic[prop].nodedic[info[prop]].childlist)\n                    for j in range(0,l):\n                        if deletelst[i].id == self.propertydic[prop].nodedic[info[prop]].childlist[j].id:\n                            del self.propertydic[prop].nodedic[info[prop]].childlist[j]\n                            break\n                for n in range(0,len(self.documentlist)):\n                    if deletelst[i].id == self.documentlist[n].id:\n                        del self.documentlist[n]\n                        break             \nmyS = myStorage()\nfor line in sys.stdin:\n    #print line\n    command, d = line.split(' ',1)\n    document = json.loads(d)\n    if command == \"add\":\n        myS.add_document(document,d)\n    elif command == \"get\":\n        lst = myS.get_document(document,myS.documentlist)\n        #print \"start\"\n        for it in lst:\n            print it.name,\n    elif command == \"delete\":\n        myS.delete_document(document)\n    else:\n        print \"Command not allowed\"\n\n","offset":3090,"fileType":"python","requestStartTime":1517939738283}}
{"body": {"column":9,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nN = int(raw_input())\n\ntimes = str(raw_input()).split(' ')\n\nlist = []\nfor i in range(N):\n    list.\n\nstart = 0\n\ndef number_complete(arr):\n    timespent = 0\n    complete = 0\n    for i in range(N):\n        if (int(arr[i]) - timespent) <= 0:\n            complete += 1\n        timespent +=1\n    return complete\n\nprint number_complete(times)\n\ndef move_next(arr):\n    arr.append(arr[0])\n    start +=1\n    if(start >= N):\n        start = 0\n    return arr[1:]\n\nmax = 0\npos = 0\nfor i in range(N):\n    comp = number_complete(times)\n    if(comp > max):\n        max = comp\n        pos = start\n    move_next(times)\n\nprint pos\n    \n        \n    \n\n","offset":170,"fileType":"python","requestStartTime":1517939747273}}
{"body": {"column":37,"line":132,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# Somehow my code cannot read this: OPQ, EPS, (2.3). But it worked out fine in my own computer\n\nimport sys\n\n# stock order comparator\ndef stock_cmp(s1,s2):\n    if cmp(s1[1][2], s2[1][2]) != 0:\n        return cmp(s1[1][2], s2[1][2]) * -1\n    # compare p/e\n    if s1[1][1] == 0 or s1[1][1] == None or s1[1][0] == None:\n        pbe1 = None\n    else:\n        pbe1 = s1[1][0] / s1[1][1]\n    #\n    if s2[1][1] == 0 or s2[1][1] == None or s2[1][0] == None:\n        pbe2 = None\n    else:\n        pbe2 = s2[1][0] / s2[1][1]\n    if cmp(pbe1, pbe2) != 0:\n        if pbe1 == None:\n            return 1\n        elif pbe2 == None:\n            return -1\n        else:\n            return cmp(pbe1, pbe2)\n    # compare tick\n    return cmp(s1[0], s2[0])\n\ndef toNumeric(s):\n    try:\n        s = s.replace('$','')\n        s = s.replace(' ','')\n        if s[0] == \"(\" and s[-1] == \")\":\n            # s = s[1:-1]\n            return float(s[1:-1]) * -1.0\n        return float(s)\n    except:\n        return None\n\ndef toInt(s):\n    try:\n        a = int(s)\n        if a == 1:\n            return 1\n        else:\n            return 0\n    except:\n        return 0    \n\nif __name__ == \"__main__\":\n    # line = raw_input(); # ticker, field, value\n    lines = sys.stdin.readlines()\n    lines = lines[1:] # skip ticker, field, value\n    stock = {}\n    for line in lines:\n        ticker,field,value = line.split(',')\n        ticker = ticker.strip()\n        if ticker not in stock.keys():\n            stock[ticker] = [None, None, 0]\n        if field.strip() == 'price':\n            stock[ticker][0] = toNumeric(value)\n        elif field.strip() == 'EPS':\n            stock[ticker][1] = toNumeric(value)\n        elif field.strip() == 'is_active':\n            stock[ticker][2] = toInt(value)\n    # finish reading the data\n    print \"ticker|price|EPS|P/E|is_active\"\n    # now sort the data in the dictionary\n    l = sorted(stock.iteritems(), cmp=stock_cmp)\n    mp = []\n    meps = []\n    mpbe = []\n    for k, v in l:\n        sys.stdout.write(k)\n        sys.stdout.write('|')\n        # \n        if v[0] == None:\n            sys.stdout.write('NaN')\n            price = None\n        else:\n            price = str(v[0]).rstrip('0').rstrip('.')\n            try:\n                price = int(price)\n                sys.stdout.write('%d' % price)\n            except:\n                price = float(price)\n                sys.stdout.write('%6f' % price)\n        sys.stdout.write('|')\n        #\n        if v[1] == None:\n            sys.stdout.write('NaN')\n            eps = None\n        else:\n            eps = str(v[1]).rstrip('0').rstrip('.')\n            try:\n                eps = int(eps)\n                sys.stdout.write('%d' % eps)\n            except:\n                eps = float(eps)\n                sys.stdout.write('%6f' % eps)\n        sys.stdout.write('|')\n        # \n        if v[0] == None or v[1] == None or v[1] == 0.0:\n            sys.stdout.write('NaN')\n            pbare = None\n        else:\n            pbare = str(v[0]/v[1]).rstrip('0').rstrip('.')\n            try:\n                pbare = int(pbare)\n                sys.stdout.write('%d' % pbare)\n            except:\n                pbare = float(pbare)\n                sys.stdout.write('%6f' % pbare)\n        sys.stdout.write('|')\n        # \n        sys.stdout.write('%d' % v[2])\n        sys.stdout.write('\\n')\n        # now append useful data for median\n        if v[2] == 1:\n            if price != None:\n                mp.append(float(price))\n            if eps != None:\n                meps.append(float(eps))\n            if pbare != None:\n                mpbe.append(float(pbare))\n    # now the final line\n    sys.stdout.write('median')\n    sys.stdout.write('|')\n    if len(price):\n        sys.stdout.write('%6f' % () .)\n    else:\n        sys.stdout.write('NaN')\n    \n                \n      \n        \n        \n    \n    \n\n","offset":3818,"fileType":"python","requestStartTime":1517939800774}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfor line in sys.\n\n","offset":88,"fileType":"python","requestStartTime":1517940068648}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nN = int(raw_input())\n\ntimes = str(raw_input()).split(' ')\n\nlist = []\nfor i in range(N):\n    list.append(str(i) +','+ times[i])\n\ndef number_complete(arr):\n    timespent = 0\n    complete = 0\n    for i in range(N):\n        id, time = arr[i].\n        if (int(arr[i][1]) - timespent) <= 0:\n            complete += 1\n        timespent +=1\n    return complete\n\nprint number_complete(list)\n\ndef move_next(arr):\n    arr.append(arr[0])\n    start +=1\n    if(start >= N):\n        start = 0\n    return arr[1:]\n             \n\nmax = 0\npos = 0\n                \nfor i in range(N):\n    comp = number_complete(times)\n    if(comp > max):\n        max = comp\n        pos = start\n    move_next(times)\n\nprint pos\n    \n        \n    \n\n","offset":311,"fileType":"python","requestStartTime":1517940112099}}
{"body": {"column":27,"line":35,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nN = int(raw_input())\n\ntimes = str(raw_input()).split(' ')\n\nlist = []\nfor i in range(N):\n    list.append(str(i) +','+ times[i])\n\ndef number_complete(arr):\n    timespent = 0\n    complete = 0\n    for i in range(N):\n        id, time = arr[i].split(',')\n        if (int(time) - timespent) <= 0:\n            complete += 1\n        timespent +=1\n    return complete\n\n#print number_complete(list)\n\ndef move_next(arr):\n    arr.append(arr[0])\n    return arr[1:]\n             \n\nmax = 0\npos = 0\n                \nfor i in range(N):\n    comp = number_complete(times)\n    if(comp > max):\n        max = comp\n        pos,time = list[0].\n    list = move_next(times)\n\nprint pos\n    \n        \n    \n\n","offset":691,"fileType":"python","requestStartTime":1517940220183}}
{"body": {"column":6,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport numpy as np \nx = [15,12,8,8,7,7,7,6,5,3]\ny = [10,25,17,11,13,17,20,13,9,15]\nnumpy.\n\n\n","offset":161,"fileType":"python","requestStartTime":1517940231558}}
{"body": {"column":13,"line":16,"wordToComplete":"3.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef var_manipulation():\n    #Start your code below (tip: Make sure to indent your code)\n    var0 = 3.\n    \n    \n    \n    ## Do not change the conditional statements below\n    if var0 == 3.27 or var1 == 5:\n        if var2 == True and var3 == 7:\n            result = float(var0 * var3)\n            print \"Here is the result! %0.2f\" % result\n        else:\n            print \"error in second if statement\"\n    else:\n        print \"error in first if statement\"\n\n\nif __name__ == \"__main__\":\n    res = var_manipulation();\n","offset":575,"fileType":"python","requestStartTime":1517940307732}}
{"body": {"column":26,"line":6,"wordToComplete":"This function is O(.","code":"\n#!/bin/python\n\nimport sys\n\ndef twoCharaters(s):\n    # This function is O(.\n\nif __name__ == \"__main__\":\n    l = int(raw_input().strip())\n    s = raw_input().strip()\n    result = twoCharaters(s)\n    print result\n\n\n","offset":76,"fileType":"python","requestStartTime":1517940367472}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    #Write your code here\n    if root. is not None:\n        print(root.data + '')\n        preOrder(root.left)\n        preOrder(root.right)\npreOrder(root)\nprint reduce(lambda x, y: str(x) + ' ' + str(y), arr)\n        \n\n","offset":201,"fileType":"python","requestStartTime":1517940412460}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    node = list.\n    if node == None:\n        return None\n    while node:\n        if node.val < x:\n            list.next = list.next.next\n        node = node.next\n    return list\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":552,"fileType":"python","requestStartTime":1517940442243}}
{"body": {"column":14,"line":16,"wordToComplete":"3.2","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef var_manipulation():\n    #Start your code below (tip: Make sure to indent your code)\n    var0 = 3.2\n    \n    \n    \n    ## Do not change the conditional statements below\n    if var0 == 3.27 or var1 == 5:\n        if var2 == True and var3 == 7:\n            result = float(var0 * var3)\n            print \"Here is the result! %0.2f\" % result\n        else:\n            print \"error in second if statement\"\n    else:\n        print \"error in first if statement\"\n\n\nif __name__ == \"__main__\":\n    res = var_manipulation();\n","offset":576,"fileType":"python","requestStartTime":1517940465800}}
{"body": {"column":11,"line":5,"wordToComplete":"1.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\n\nfor i in 1.\n\n","offset":171,"fileType":"python","requestStartTime":1517940494451}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\n\nfor i in 1..\n\n","offset":172,"fileType":"python","requestStartTime":1517940494593}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport numpy as np \nx = [15,12,8,8,7,7,7,6,5,3]\ny = [10,25,17,11,13,17,20,13,9,15]\nnumpy.dot(x,x)\nnumpy.\n\n\n","offset":176,"fileType":"python","requestStartTime":1517940509243}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport numpy as np \nx = [15,12,8,8,7,7,7,6,5,3]\ny = [10,25,17,11,13,17,20,13,9,15]\nnumpy.dot(x,x)\nnumpy.\n\n\n","offset":176,"fileType":"python","requestStartTime":1517940511533}}
{"body": {"column":7,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\nXY = []\nXsq = []\nYsq = []\n\nfor i in range(0, 10):\n    XY.\n\n","offset":216,"fileType":"python","requestStartTime":1517940604784}}
{"body": {"column":8,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\nXY = []\nXsq = []\nYsq = []\n\nfor i in range(0, 10):\n    XY.append(phys[0] * hist[0])\n    Xsq.\n\n","offset":250,"fileType":"python","requestStartTime":1517940624553}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nphys = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]\nhist = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]\nXY = []\nXsq = []\nYsq = []\n\nfor i in range(0, 10):\n    XY.append(phys[0] * hist[0])\n    Xsq.append(phys[0] * phys[0])\n    Ysq.\n\n","offset":284,"fileType":"python","requestStartTime":1517940648329}}
{"body": {"column":43,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSortedList(names):\n    names.sort()\n    print(names)\n    number_map = {}\n    return_list = []\n    for name in names:\n        name_split = name.split(' ')\n        if(name_split[0] not in number_map.)\n        print(name_split)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    names_cnt = 0\n    names_cnt = int(raw_input())\n    names_i = 0\n    names = []\n    while names_i < names_cnt:\n        try:\n            names_item = raw_input()\n        except:\n            names_item = None\n        names.append(names_item)\n        names_i += 1\n\n\n    res = getSortedList(names);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":275,"fileType":"python","requestStartTime":1517940675995}}
{"body": {"column":10,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport numpy as np \nx = [15,12,8,8,7,7,7,6,5,3]\ny = [10,25,17,11,13,17,20,13,9,15]\nr = numpy.dot(1/numpy.dot(x,x), \n\n\n\n\n","offset":165,"fileType":"python","requestStartTime":1517940685923}}
{"body": {"column":37,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport numpy as np \nx = [15,12,8,8,7,7,7,6,5,3]\ny = [10,25,17,11,13,17,20,13,9,15]\nr = numpy.dot(1/numpy.dot(x,x),numpy. \n\n\n\n\n","offset":192,"fileType":"python","requestStartTime":1517940692870}}
{"body": {"column":43,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSortedList(names):\n    names.sort()\n    print(names)\n    number_map = {}\n    return_list = []\n    for name in names:\n        name_split = name.split(' ')\n        if(name_split[0] not in number_map.keys()):\n            number_map.keys[name_split[0]] = [name_split[1]]\n        else:\n            number_map.keys[name_split[0]].\n        print(name_split)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    names_cnt = 0\n    names_cnt = int(raw_input())\n    names_i = 0\n    names = []\n    while names_i < names_cnt:\n        try:\n            names_item = raw_input()\n        except:\n            names_item = None\n        names.append(names_item)\n        names_i += 1\n\n\n    res = getSortedList(names);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":402,"fileType":"python","requestStartTime":1517940714498}}
{"body": {"column":19,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    node = list\n    if node == None:\n        return None\n    while node:\n        print node.\n        if node.val > x:\n            list.next = list.next.next\n        node = node.next\n    return list\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":628,"fileType":"python","requestStartTime":1517940793756}}
{"body": {"column":10,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    node = list\n    if node == None:\n        return None\n    while node:\n        f. node.val\n        if node.val > x:\n            list.next = list.next.next\n        node = node.next\n    return list\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":619,"fileType":"python","requestStartTime":1517940821385}}
{"body": {"column":57,"line":12,"wordToComplete":"and as soon as you see an already-seen point, you stop.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Ok, so this is just a graph problem. You've got N points, \n# and you need to see how many distinct subgraphs there are.\n\n# So you build the graphs, and you start walking - starting from every point you haven't seen\n# and as soon as you see an already-seen point, you stop.\n\ndef friendCircles(friends):\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    friends_cnt = 0\n    friends_cnt = int(raw_input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = raw_input()\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":345,"fileType":"python","requestStartTime":1517940856769}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    #Write your code here\n    if not root:\n        print root.\n\n","offset":226,"fileType":"python","requestStartTime":1517940956154}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    #Write your code here\n    if not root.:\n        print root.dat\n\n","offset":206,"fileType":"python","requestStartTime":1517940969188}}
{"body": {"column":4,"line":1,"wordToComplete":"449.","code":"\n449.\n515.68\n\n","offset":6,"fileType":"python","requestStartTime":1517941025571}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    #Write your code here\n    if not root.left:\n        print root.data,\n    if not root.right:\n        print root.data,\n    postOrder(root.)\n\n","offset":304,"fileType":"python","requestStartTime":1517941042595}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\";\n    pointer = 0;\n    length = len(s);\n    while pointer < length:\n        if s.\n        pointer++\n\n\n","offset":380,"fileType":"python","requestStartTime":1517941055832}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        if root.\n        if s[pointer] = 0:\n            \n        pointer++\n\n\n","offset":393,"fileType":"python","requestStartTime":1517941134971}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        \n        if s[pointer] = 0:\n        \n        if n.\n        pointer++\n\n\n","offset":435,"fileType":"python","requestStartTime":1517941160949}}
{"body": {"column":32,"line":20,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        \n        if s[pointer] = 0:\n        \n        if n.left == None and n.\n        pointer++\n\n\n","offset":454,"fileType":"python","requestStartTime":1517941176508}}
{"body": {"column":19,"line":21,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        \n        if s[pointer] = 0:\n        \n        if n.left == None and n.right == None:\n            output.\n        pointer++\n\n\n","offset":488,"fileType":"python","requestStartTime":1517941182668}}
{"body": {"column":24,"line":21,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        \n        if s[pointer] = 0:\n        \n        if n.left == None and n.right == None:\n            output += n.\n        pointer++\n\n\n","offset":493,"fileType":"python","requestStartTime":1517941190063}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        \n        if s[pointer] = 0:\n            n = n.\n        \n        if n.left == None and n.right == None:\n            output += n.data\n            n = root\n        pointer++\n\n\n","offset":431,"fileType":"python","requestStartTime":1517941224128}}
{"body": {"column":18,"line":21,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        \n        if s[pointer] == 0:\n            n = n.left\n        elif s[pointer] == 1:\n            n = n.\n        \n        if n.left == None and n.right == None:\n            output += n.data\n            n = root\n        pointer++\n\n\n","offset":485,"fileType":"python","requestStartTime":1517941239268}}
{"body": {"column":8,"line":2,"wordToComplete":"","code":"\ns = raw_input()\nprint s.\n\n","offset":26,"fileType":"python","requestStartTime":1517941243183}}
{"body": {"column":21,"line":46,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSortedList(names):\n    names.sort()\n    print(names)\n    number_map = {}\n    return_list = []\n    numeric_small = ['I','II','III','IV','V','VI','VII','VIII','IX','X']\n    numeric_large = ['XX','XXX','XL','L']\n    string_to_num = {}\n    idx = 1\n    for num in numeric_small:\n        string_to_num[num] = idx\n        idx += 1\n        \n    for num in numeric_large:\n        for num2 in numeric_small:\n            string_to_num[num+num2] = idx\n            idx += 1\n            \n    print(string_to_num)\n    \n    for name in names:\n        name_split = name.split(' ')\n        if(name_split[0] not in number_map.keys()):\n            number_map[name_split[0]] = [name_split[1]]\n        else:\n            number_map[name_split[0]].append(name_split[1])\n        \n        return_list.append(name_split[0])\n        \n    new_list = []\n    for name in return_list:\n        vals = number_map[name]\n        sorted_vals = []\n        for val in vals:\n            sorted_vals.append(string_to_num[val])\n        sorted_vals.sort()\n        sorted_vals.reverse()\n        for sorted_val in sorted_vals:\n            new_list.\n        \n        \n  \n    print(return_list)\n    print(number_map)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    names_cnt = 0\n    names_cnt = int(raw_input())\n    names_i = 0\n    names = []\n    while names_i < names_cnt:\n        try:\n            names_item = raw_input()\n        except:\n            names_item = None\n        names.append(names_item)\n        names_i += 1\n\n\n    res = getSortedList(names);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":1181,"fileType":"python","requestStartTime":1517941290846}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        if s[pointer] == 0:\n            n = n.left\n            if n.left == None and n.right == None:\n                output += n.\n        elif s[pointer] == 1:\n            n = n.right\n            output += n.data\n            n = root\n        \n            \n        pointer += 1\n    print(output)\n\n\n","offset":507,"fileType":"python","requestStartTime":1517941397416}}
{"body": {"column":19,"line":23,"wordToComplete":"100.","code":"#!/bin/python\n\nimport sys\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef variables():\n    #Start your code below (tip: Make sure to indent your code)\n    \n     var1 = 'Penguin'\n        print(var1)\n        var2 = 6\n        print(var2)\n        var3 = False\n        print(var3)\n        var4 = None\n        print(var4)\n        var5 = 100.\nif __name__ == \"__main__\":\n    res = variables();\n    \n\n","offset":728,"fileType":"python","requestStartTime":1517941398028}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n   #Enter Your Code Here\n    output = \"\"\n    pointer = 0\n    length = len(s)\n    n = root\n    while pointer < length:\n        if s[pointer] == 0:\n            n = n.left\n            if n.left == None and n.right == None:\n                print(n.)\n                output += n.data\n                n = root\n        elif s[pointer] == 1:\n            n = n.right\n            output += n.data\n            n = root\n        pointer += 1\n    print(output)\n\n\n","offset":503,"fileType":"python","requestStartTime":1517941418525}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    #Write your code here\n    inOrder(root)\n    inOrder(root.)\n\n\n","offset":223,"fileType":"python","requestStartTime":1517941415052}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    #Write your code here\n    inOrder(root.)\n    inOrder(root.right)\n\n\n","offset":205,"fileType":"python","requestStartTime":1517941419058}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    #Write your code here\n    inOrder(root.left)\n    print root.\n    inOrder(root.right)\n\n\n","offset":226,"fileType":"python","requestStartTime":1517941427400}}
{"body": {"column":13,"line":17,"wordToComplete":"3.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef var_manipulation():\n    #Start your code below (tip: Make sure to indent your code)\n    \n    var0 = 3.\n    \n    \n    \n    ## Do not change the conditional statements below\n    if var0 == 3.27 or var1 == 5:\n        if var2 == True and var3 == 7:\n            result = float(var0 * var3)\n            print \"Here is the result! %0.2f\" % result\n        else:\n            print \"error in second if statement\"\n    else:\n        print \"error in first if statement\"\n\n\nif __name__ == \"__main__\":\n    res = var_manipulation();\n","offset":580,"fileType":"python","requestStartTime":1517941671291}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"\ns = raw_input()\na=list(s)\nfor i in a:\n    if i.\n\n","offset":49,"fileType":"python","requestStartTime":1517941838470}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n# Ok, so this is just a graph problem. You've got N points, \n# and you need to see how many distinct subgraphs there are.\n\n# So you build the graphs, and you start walking - starting from every point you haven't seen,\n# and adding the points you see to the \"seen\" bucket\n# and as soon as you see an already-seen point, you stop.\n\ndef friendCircles(friends):\n    var checked = []\n    \n    for index in range(len(friends)):\n        checked.\n\n       \n        \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    friends_cnt = 0\n    friends_cnt = int(raw_input())\n    friends_i = 0\n    friends = []\n    while friends_i < friends_cnt:\n        try:\n            friends_item = raw_input()\n        except:\n            friends_item = None\n        friends.append(friends_item)\n        friends_i += 1\n\n\n    res = friendCircles(friends);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":509,"fileType":"python","requestStartTime":1517941878076}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef twoCharaters(s):\n    chars = set(s)\n    for c in chars:\n        s.\n\nif __name__ == \"__main__\":\n    l = int(raw_input().strip())\n    s = raw_input().strip()\n    result = twoCharaters(s)\n    print result\n\n\n","offset":99,"fileType":"python","requestStartTime":1517942138182}}
{"body": {"column":27,"line":3,"wordToComplete":"","code":"\ns = raw_input()\na=list(s)\nprint (for any i in s if i.\n\n","offset":55,"fileType":"python","requestStartTime":1517942198813}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    for letter in a.\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":81,"fileType":"python","requestStartTime":1517942199154}}
{"body": {"column":29,"line":5,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    for letter in a.split():\n        if letter in a_table.\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":119,"fileType":"python","requestStartTime":1517942237392}}
{"body": {"column":30,"line":36,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef removeNodes(list, x):\n    if list:\n        if x == 0:\n            list = list.next\n        else:\n            previous = None\n            current = list\n            current_x = 0\n            while (current_x > x) and (current.next is not None):\n                previous = current\n                current = current.next\n                current_x += 1\n            previous.next = current.next\n    return list\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\n\n_x = int(raw_input());\n\nres = removeNodes(_list, _x);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":722,"fileType":"python","requestStartTime":1517942256670}}
{"body": {"column":11,"line":5,"wordToComplete":"Ra","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    if n % 2 == 1:\n        print(\"Weird\")\n    elif Ra\n\n\n","offset":107,"fileType":"python","requestStartTime":1517942284598}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys, copy\n\ndef twoCharaters(s):\n    chars = set(s)\n    mx = len(s)\n    for i in range(1,len(s)):\n        if s[i] == s[i-1]:\n            s2 = copy.\n            \n        \n\nif __name__ == \"__main__\":\n    l = int(raw_input().strip())\n    s = raw_input().strip()\n    result = twoCharaters(s)\n    print result\n\n\n","offset":170,"fileType":"python","requestStartTime":1517942359245}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    t=[]\n    for idx,d in enumerate(doors):\n        if idx==0:\n            if d==1: a=0\n            continue\n        if d and doors[idx-1]==0:  a=idx\n        elif doors[idx-1] and d==0: t.append((a,idx))\n    if doors[-1]: t.\n    m=sum([(i[1]-i[0])//2+(i[1]-i[0])%2 for i in t])        \n    return [m,sum(doors)]\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = map(int, raw_input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":317,"fileType":"python","requestStartTime":1517942358019}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys, copy\n\ndef twoCharaters(s):\n    chars = set(s)\n    mx = len(s)\n    for i in range(1,len(s)):\n        if s[i] == s[i-1]:\n            s2 = copy.deepcopy(s)\n            s2.\n            \n        \n\nif __name__ == \"__main__\":\n    l = int(raw_input().strip())\n    s = raw_input().strip()\n    result = twoCharaters(s)\n    print result\n\n\n","offset":197,"fileType":"python","requestStartTime":1517942363969}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    for letter in a.split():\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in b.split():\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = a.\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":367,"fileType":"python","requestStartTime":1517942366176}}
{"body": {"column":28,"line":14,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    for letter in a.split():\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in b.split():\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = a.split() + b.\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":379,"fileType":"python","requestStartTime":1517942369888}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\ndef check_binary_search_tree_(root):\n    if root.\n\n\n","offset":188,"fileType":"python","requestStartTime":1517942432710}}
{"body": {"column":25,"line":9,"wordToComplete":"d","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\ndef check_binary_search_tree_(root):\n    if root.left > root.d\n\n\n","offset":201,"fileType":"python","requestStartTime":1517942434925}}
{"body": {"column":37,"line":9,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.\n\n\n","offset":213,"fileType":"python","requestStartTime":1517942437749}}
{"body": {"column":51,"line":9,"wordToComplete":"d","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.d\n\n\n","offset":227,"fileType":"python","requestStartTime":1517942441981}}
{"body": {"column":29,"line":16,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    for letter in a.split():\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in b.split():\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = set(a.split() + b.split())\n    for letter in letters:\n        if letter in a_table.\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":448,"fileType":"python","requestStartTime":1517942467179}}
{"body": {"column":39,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.)\n        \n\n\n","offset":302,"fileType":"python","requestStartTime":1517942471788}}
{"body": {"column":39,"line":13,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.)\n        \n\n\n","offset":347,"fileType":"python","requestStartTime":1517942475724}}
{"body": {"column":29,"line":20,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    for letter in a.split():\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in b.split():\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = set(a.split() + b.split())\n    for letter in letters:\n        if letter in a_table.keys():\n            a_count = a_table[letter]\n        else:\n            a_count = 0\n        if letter in b_table.\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":561,"fileType":"python","requestStartTime":1517942493718}}
{"body": {"column":15,"line":19,"wordToComplete":"80.0","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef grade_avrg():\n    \n\n    \n    #Assign 5 letter grades (80, 77, 88, 95, and 68) a variable below\n\n    var1 = 80.0\n    var2 = 77\n    var3 = 88\n    var4 = 95\n    var5 = 69\n    \n  \n    #Create two variables 'avg' and 'letterGrade'\n    #For this assignment you have to calculate and store the average grade value in the variable\n    #'avg' for the condtional statements below to work properly.\n    \n    avg = (var1 + var2 + var3 + var4 + var5) / 5\n    letterGrade = avg \n                                              \n \n  \n    #The below conditional statements will determine what letterGrade to assign \n    #the classes grade average ( variable: avg ).  The classes letter grade will be assigned to\n    #the ( variable: letterGrade ).  You must declare a variable named 'avg' and 'letterGrade'\n    #for the below conditional statements to work properly\n    if (avg <= 100 and avg > 90) :\n        letterGrade = 'A'\n    elif (avg <= 90 and avg >= 80) :\n        letterGrade = 'B'\n    elif (avg < 80 and avg >= 70) :\n        letterGrade = 'C'\n    elif (avg < 70 and avg >= 60) :\n        letterGrade = 'D'\n    elif (avg < 60 and avg >= 0) :\n        letterGrade = 'F'\n    else:\n        letterGrade = \"The value compared is not a number equal or between 0 and 100\"\n    \n    return \"Average grade is: %0.1f, which is a %s\" % (avg, letterGrade)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = grade_avrg();\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":588,"fileType":"python","requestStartTime":1517942499999}}
{"body": {"column":15,"line":20,"wordToComplete":"77.0","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef grade_avrg():\n    \n\n    \n    #Assign 5 letter grades (80, 77, 88, 95, and 68) a variable below\n\n    var1 = 80.0\n    var2 = 77.0\n    var3 = 88\n    var4 = 95\n    var5 = 69\n    \n  \n    #Create two variables 'avg' and 'letterGrade'\n    #For this assignment you have to calculate and store the average grade value in the variable\n    #'avg' for the condtional statements below to work properly.\n    \n    avg = (var1 + var2 + var3 + var4 + var5) / 5\n    letterGrade = avg \n                                              \n \n  \n    #The below conditional statements will determine what letterGrade to assign \n    #the classes grade average ( variable: avg ).  The classes letter grade will be assigned to\n    #the ( variable: letterGrade ).  You must declare a variable named 'avg' and 'letterGrade'\n    #for the below conditional statements to work properly\n    if (avg <= 100 and avg > 90) :\n        letterGrade = 'A'\n    elif (avg <= 90 and avg >= 80) :\n        letterGrade = 'B'\n    elif (avg < 80 and avg >= 70) :\n        letterGrade = 'C'\n    elif (avg < 70 and avg >= 60) :\n        letterGrade = 'D'\n    elif (avg < 60 and avg >= 0) :\n        letterGrade = 'F'\n    else:\n        letterGrade = \"The value compared is not a number equal or between 0 and 100\"\n    \n    return \"Average grade is: %0.1f, which is a %s\" % (avg, letterGrade)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = grade_avrg();\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":604,"fileType":"python","requestStartTime":1517942502438}}
{"body": {"column":15,"line":21,"wordToComplete":"88.0","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef grade_avrg():\n    \n\n    \n    #Assign 5 letter grades (80, 77, 88, 95, and 68) a variable below\n\n    var1 = 80.0\n    var2 = 77.0\n    var3 = 88.0\n    var4 = 95\n    var5 = 69\n    \n  \n    #Create two variables 'avg' and 'letterGrade'\n    #For this assignment you have to calculate and store the average grade value in the variable\n    #'avg' for the condtional statements below to work properly.\n    \n    avg = (var1 + var2 + var3 + var4 + var5) / 5\n    letterGrade = avg \n                                              \n \n  \n    #The below conditional statements will determine what letterGrade to assign \n    #the classes grade average ( variable: avg ).  The classes letter grade will be assigned to\n    #the ( variable: letterGrade ).  You must declare a variable named 'avg' and 'letterGrade'\n    #for the below conditional statements to work properly\n    if (avg <= 100 and avg > 90) :\n        letterGrade = 'A'\n    elif (avg <= 90 and avg >= 80) :\n        letterGrade = 'B'\n    elif (avg < 80 and avg >= 70) :\n        letterGrade = 'C'\n    elif (avg < 70 and avg >= 60) :\n        letterGrade = 'D'\n    elif (avg < 60 and avg >= 0) :\n        letterGrade = 'F'\n    else:\n        letterGrade = \"The value compared is not a number equal or between 0 and 100\"\n    \n    return \"Average grade is: %0.1f, which is a %s\" % (avg, letterGrade)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = grade_avrg();\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":620,"fileType":"python","requestStartTime":1517942505286}}
{"body": {"column":15,"line":22,"wordToComplete":"95.0","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef grade_avrg():\n    \n\n    \n    #Assign 5 letter grades (80, 77, 88, 95, and 68) a variable below\n\n    var1 = 80.0\n    var2 = 77.0\n    var3 = 88.0\n    var4 = 95.0\n    var5 = 69\n    \n  \n    #Create two variables 'avg' and 'letterGrade'\n    #For this assignment you have to calculate and store the average grade value in the variable\n    #'avg' for the condtional statements below to work properly.\n    \n    avg = (var1 + var2 + var3 + var4 + var5) / 5\n    letterGrade = avg \n                                              \n \n  \n    #The below conditional statements will determine what letterGrade to assign \n    #the classes grade average ( variable: avg ).  The classes letter grade will be assigned to\n    #the ( variable: letterGrade ).  You must declare a variable named 'avg' and 'letterGrade'\n    #for the below conditional statements to work properly\n    if (avg <= 100 and avg > 90) :\n        letterGrade = 'A'\n    elif (avg <= 90 and avg >= 80) :\n        letterGrade = 'B'\n    elif (avg < 80 and avg >= 70) :\n        letterGrade = 'C'\n    elif (avg < 70 and avg >= 60) :\n        letterGrade = 'D'\n    elif (avg < 60 and avg >= 0) :\n        letterGrade = 'F'\n    else:\n        letterGrade = \"The value compared is not a number equal or between 0 and 100\"\n    \n    return \"Average grade is: %0.1f, which is a %s\" % (avg, letterGrade)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = grade_avrg();\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":636,"fileType":"python","requestStartTime":1517942507695}}
{"body": {"column":15,"line":23,"wordToComplete":"69.0","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef grade_avrg():\n    \n\n    \n    #Assign 5 letter grades (80, 77, 88, 95, and 68) a variable below\n\n    var1 = 80.0\n    var2 = 77.0\n    var3 = 88.0\n    var4 = 95.0\n    var5 = 69.0\n    \n  \n    #Create two variables 'avg' and 'letterGrade'\n    #For this assignment you have to calculate and store the average grade value in the variable\n    #'avg' for the condtional statements below to work properly.\n    \n    avg = (var1 + var2 + var3 + var4 + var5) / 5\n    letterGrade = avg \n                                              \n \n  \n    #The below conditional statements will determine what letterGrade to assign \n    #the classes grade average ( variable: avg ).  The classes letter grade will be assigned to\n    #the ( variable: letterGrade ).  You must declare a variable named 'avg' and 'letterGrade'\n    #for the below conditional statements to work properly\n    if (avg <= 100 and avg > 90) :\n        letterGrade = 'A'\n    elif (avg <= 90 and avg >= 80) :\n        letterGrade = 'B'\n    elif (avg < 80 and avg >= 70) :\n        letterGrade = 'C'\n    elif (avg < 70 and avg >= 60) :\n        letterGrade = 'D'\n    elif (avg < 60 and avg >= 0) :\n        letterGrade = 'F'\n    else:\n        letterGrade = \"The value compared is not a number equal or between 0 and 100\"\n    \n    return \"Average grade is: %0.1f, which is a %s\" % (avg, letterGrade)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = grade_avrg();\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":652,"fileType":"python","requestStartTime":1517942509662}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef twoArrays(k, A, B):\n    # Complete this function\n    A=sorted(A)[::-1]\n    for i in range(len(A)):\n        if not A[i]+B[i]>\nif __name__ == \"__main__\":\n    q = int(raw_input().strip())\n    for a0 in xrange(q):\n        n, k = raw_input().strip().split(' ')\n        n, k = [int(n), int(k)]\n        A = map(int, raw_input().strip().split(' '))\n        B = map(int, raw_input().strip().split(' '))\n        result = twoArrays(k, A, B)\n        print result\n\n\n\n","offset":157,"fileType":"python","requestStartTime":1517942697581}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    ans = 0\n    print(a.)\n    for letter in a.split():\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in b.split():\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = set(a.split() + b.split())\n    for letter in letters:\n        if letter in a_table.keys():\n            a_count = a_table[letter]\n        else:\n            a_count = 0\n        if letter in b_table.keys():\n            b_count = b_table[letter]\n        else:\n            b_count = 0\n        ans += abs(a_count-b_count)\n    return ans\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":85,"fileType":"python","requestStartTime":1517942719669}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    ans = 0\n    print(a.split())\n    print(b.)\n    for letter in a.split():\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in b.split():\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = set(a.split() + b.split())\n    for letter in letters:\n        if letter in a_table.keys():\n            a_count = a_table[letter]\n        else:\n            a_count = 0\n        if letter in b_table.keys():\n            b_count = b_table[letter]\n        else:\n            b_count = 0\n        ans += abs(a_count-b_count)\n    return ans\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":106,"fileType":"python","requestStartTime":1517942725060}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef twoArrays(k, A, B):\n    # Complete this function\n    sort.(A)[::-1]\n    print y\n    sorted(B)\n    print B\n    for i in range(len(A)):\n        if not A[i]+B[i]>=k:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\nif __name__ == \"__main__\":\n    q = int(raw_input().strip())\n    for a0 in xrange(q):\n        n, k = raw_input().strip().split(' ')\n        n, k = [int(n), int(k)]\n        A = map(int, raw_input().strip().split(' '))\n        B = map(int, raw_input().strip().split(' '))\n        result = twoArrays(k, A, B)\n        print result\n\n\n\n","offset":91,"fileType":"python","requestStartTime":1517942865812}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef twoArrays(k, A, B):\n    # Complete this function\n    A.sort()[::-1]\n    print y\n    sorted(B)\n    print B\n    for i in range(len(A)):\n        if not A[i]+B[i]>=k:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\nif __name__ == \"__main__\":\n    q = int(raw_input().strip())\n    for a0 in xrange(q):\n        n, k = raw_input().strip().split(' ')\n        n, k = [int(n), int(k)]\n        A = map(int, raw_input().strip().split(' '))\n        B = map(int, raw_input().strip().split(' '))\n        result = twoArrays(k, A, B)\n        print result\n\n\n\n","offset":88,"fileType":"python","requestStartTime":1517942874012}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef twoArrays(k, A, B):\n    # Complete this function\n    A.sort()[::-1]\n    #print y\n    B.\n    print B\n    for i in range(len(A)):\n        if not A[i]+B[i]>=k:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\nif __name__ == \"__main__\":\n    q = int(raw_input().strip())\n    for a0 in xrange(q):\n        n, k = raw_input().strip().split(' ')\n        n, k = [int(n), int(k)]\n        A = map(int, raw_input().strip().split(' '))\n        B = map(int, raw_input().strip().split(' '))\n        result = twoArrays(k, A, B)\n        print result\n\n\n\n","offset":120,"fileType":"python","requestStartTime":1517942887269}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    ans = 0\n    for letter in list(a):\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in list(b):\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = a_table.\n    for letter in letters:\n        print(letter)\n        if letter in a_table.keys():\n            a_count = a_table[letter]\n        else:\n            a_count = 0\n        if letter in b_table.keys():\n            b_count = b_table[letter]\n        else:\n            b_count = 0\n        ans += abs(a_count-b_count)\n    return ans\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":381,"fileType":"python","requestStartTime":1517942951060}}
{"body": {"column":39,"line":15,"wordToComplete":"","code":"\ndef number_needed(a, b):\n    a_table = {}\n    b_table = {}\n    ans = 0\n    for letter in list(a):\n        if letter in a_table.keys():\n            a_table[letter] += 1\n        else:\n            a_table[letter] = 0\n    for letter in list(b):\n        if letter in b_table.keys():\n            b_table[letter] += 1\n        else:\n            b_table[letter] = 0\n    letters = a_table.keys() + b_table.\n    for letter in letters:\n        print(letter)\n        if letter in a_table.keys():\n            a_count = a_table[letter]\n        else:\n            a_count = 0\n        if letter in b_table.keys():\n            b_count = b_table[letter]\n        else:\n            b_count = 0\n        ans += abs(a_count-b_count)\n    return ans\n\na = raw_input().strip()\nb = raw_input().strip()\n\nprint number_needed(a, b)\n\n\n","offset":398,"fileType":"python","requestStartTime":1517942955981}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    a = int(raw_input())\n    b = int(raw_input())\n    s = a+b\n    d = a - b\n    p = a*b\n    print \"{}\".\n\n\n","offset":132,"fileType":"python","requestStartTime":1517943322505}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    num.\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":103,"fileType":"python","requestStartTime":1517943595525}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    num.sort()\n    while len(num) >\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":130,"fileType":"python","requestStartTime":1517943608155}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    if len(num) == 1:\n        return 0\n    \n    num.sort()\n    cost = 0\n    while len(num) > 1:\n        lc = num[0] + num[1]\n        cost += lc\n        num.\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":251,"fileType":"python","requestStartTime":1517943657230}}
{"body": {"column":12,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    if len(num) == 1:\n        return 0\n    \n    num.sort()\n    cost = 0\n    while len(num) > 1:\n        lc = num[0] + num[1]\n        cost += lc\n        num = num[2:]\n        num.\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":273,"fileType":"python","requestStartTime":1517943684349}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    if len(num) == 1:\n        return 0\n    \n    num.sort()\n    cost = 0\n    while len(num) > 1:\n        lc = num[0] + num[1]\n        cost += lc\n        num = num[2:]\n        num.append(lc)\n        num.\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":296,"fileType":"python","requestStartTime":1517943690267}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\ndef encryption(s):\n    # Complete this function\n    rows=math.\n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    result = encryption(s)\n    print result\n\n\n","offset":102,"fileType":"python","requestStartTime":1517943739946}}
{"body": {"column":25,"line":7,"wordToComplete":"0.","code":"\n#!/bin/python\n\nimport sys\nimport math\ndef encryption(s):\n    # Complete this function\n    rows=math.floor(s**0.)\n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    result = encryption(s)\n    print result\n\n\n","offset":113,"fileType":"python","requestStartTime":1517943758093}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\ndef encryption(s):\n    # Complete this function\n    rows=math.floor(s**0.5)\n    columns=math.\n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    result = encryption(s)\n    print result\n\n\n","offset":133,"fileType":"python","requestStartTime":1517943767746}}
{"body": {"column":27,"line":8,"wordToComplete":"0.","code":"\n#!/bin/python\n\nimport sys\nimport math\ndef encryption(s):\n    # Complete this function\n    rows=math.floor(s**0.5)\n    columns=math.ceil(s**0.)\n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    result = encryption(s)\n    print result\n\n\n","offset":143,"fileType":"python","requestStartTime":1517943777345}}
{"body": {"column":37,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef rollingString(s, operations):\n    for operation in operations:\n        i, j, direction = operations.\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    operations_cnt = 0\n    operations_cnt = int(raw_input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = raw_input()\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = rollingString(s, operations);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":175,"fileType":"python","requestStartTime":1517943960686}}
{"body": {"column":43,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef rollingString(s, operations):\n    for operation in operations:\n        i, j, direction = operations.strip.\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    operations_cnt = 0\n    operations_cnt = int(raw_input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = raw_input()\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = rollingString(s, operations);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":181,"fileType":"python","requestStartTime":1517943962523}}
{"body": {"column":45,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef rollingString(s, operations):\n    for operation in operations:\n        i, j, direction = operations.strip().\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    operations_cnt = 0\n    operations_cnt = int(raw_input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = raw_input()\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = rollingString(s, operations);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":183,"fileType":"python","requestStartTime":1517943964297}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\ndef encryption(s):\n    # Complete this function\n    rows=math.floor(len(s)**0.5)\n    columns=math.ceil(len(s)**0.5)\n    for i in range(rows):\n        string=\"\"\n        for j in range(i,len(s),columns):\n            string+=s[j]\n        list2.\n        \n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    result = encryption(s)\n    print result\n\n\n","offset":281,"fileType":"python","requestStartTime":1517943990459}}
{"body": {"column":15,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\ndef encryption(s):\n    # Complete this function\n    list2=[]\n    rows=math.floor(len(s)**0.5)\n    columns=math.ceil(len(s)**0.5)\n    for i in range(rows):\n        string=\"\"\n        for j in range(i,len(s),columns):\n            string+=s[j]\n        list2.append(string)\n    return \" \".    \n\nif __name__ == \"__main__\":\n    s = raw_input().strip()\n    result = encryption(s)\n    print result\n\n\n","offset":324,"fileType":"python","requestStartTime":1517944014154}}
{"body": {"column":29,"line":4,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    available = {}\n    for word in magazine:\n        if word in available.\n        \n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":111,"fileType":"python","requestStartTime":1517944069459}}
{"body": {"column":26,"line":9,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    counts = {}\n    for word in magazine:\n        if word in counts.keys():\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    for word in ransom:\n        if word in counts.\n        \n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":236,"fileType":"python","requestStartTime":1517944125851}}
{"body": {"column":35,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef rollingString(s, operations):\n    import string\n    for operation in operations:\n        i, j, direction = operation.strip().split()\n        i = int(i)\n        j = int(j)\n        print direction\n        for k in range(i, j + 1):\n            if direction == 'L':\n                s = s[:k] + string.(ord(s[k]) - ord('A') - 1) + s[k + 1:]\n            else:\n                s = s[:k] + chr(ord(s[k]) - ord('A') + 1) + s[k + 1:]\n        print s\n    return s\n        \n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    operations_cnt = 0\n    operations_cnt = int(raw_input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = raw_input()\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = rollingString(s, operations);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":372,"fileType":"python","requestStartTime":1517944376387}}
{"body": {"column":35,"line":19,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef rollingString(s, operations):\n    import string\n    for operation in operations:\n        i, j, direction = operation.strip().split()\n        i = int(i)\n        j = int(j)\n        print direction\n        for k in range(i, j + 1):\n            if direction == 'L':\n                s = s[:k] + string.ascii_lowercase[ord(s[k]) - ord('A') - 1] + s[k + 1:]\n            else:\n                s = s[:k] + string.ord(s[k]) - ord('A') + 1) + s[k + 1:]\n        print s\n    return s\n        \n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    operations_cnt = 0\n    operations_cnt = int(raw_input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = raw_input()\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = rollingString(s, operations);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":479,"fileType":"python","requestStartTime":1517944394510}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    total_num = len(num)\n    \n    num.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":133,"fileType":"python","requestStartTime":1517944605525}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    total_num = len(num)\n    \n    num.sort()\n    min_sum = 0\n    for i in range(total_num):\n        if i >\n        min_sum = min_sum + num[0] + num[1]\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":201,"fileType":"python","requestStartTime":1517944708800}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    total_num = len(num)\n    \n    num.sort()\n    min_sum = 0\n    while (len(num) > )\n        min_sum = min_sum + num[0] + num[1]\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":178,"fileType":"python","requestStartTime":1517944742033}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nm=raw_input()\nM=raw_input()\nn=raw_input()\nN=raw_input()\nmlista=m.\nsetM=set([M])\nsetN=set([N])\nprint(m)\nprint(M)\nprint(n)\nprint(N)\nprint(setM.difference(setN))\n\n\n","offset":137,"fileType":"python","requestStartTime":1517944941493}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef reductionCost(num):\n    total_num = len(num)\n    \n    num.\n    print num\n    min_sum = 0\n    new_num = num\n    while (total_num >= 2):\n        min_sum = min_sum + num[0] + num[1]\n        #new_num[0] = num[0] + num[1] \n        #new_num[1:] = num[2:]\n        #num = new_num\n        temp = num[0]\n        del(num[0])\n        num[0] = temp + num[0]\n        total_num = total_num - 1\n        \n    return min_sum\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num_cnt = 0\n    num_cnt = int(raw_input())\n    num_i = 0\n    num = []\n    while num_i < num_cnt:\n        num_item = int(raw_input());\n        num.append(num_item)\n        num_i += 1\n\n\n    res = reductionCost(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":133,"fileType":"python","requestStartTime":1517945312165}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    count=0\n    \n    while count<position :\n        count=count+1\n        current=current.\n  \n  \n  \n  \n  \n  \n\n\n","offset":408,"fileType":"python","requestStartTime":1517945320659}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    if val < root.\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":769,"fileType":"python","requestStartTime":1517945405282}}
{"body": {"column":15,"line":26,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    if val < root.value:\n        if val.\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":791,"fileType":"python","requestStartTime":1517945434610}}
{"body": {"column":5,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\ns=len(arr)-1\nfor i in range(0,len(arr)):\n    if(i<len(arr)-i-1):\n        temp=arr[i]\n        arr[i]=arr[len(arr)-i-1]\n        arr[len(arr)-i-1]=temp\nd=''.\n    \n\n\n\n","offset":257,"fileType":"python","requestStartTime":1517945443852}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    if val < root.value:\n        if root.\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":792,"fileType":"python","requestStartTime":1517945445035}}
{"body": {"column":28,"line":27,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    if val < root.value:\n        if root.right != None:\n            isPresent (root.,val)\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":835,"fileType":"python","requestStartTime":1517945467210}}
{"body": {"column":14,"line":30,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    if val < root.value:\n        if root.right != None:\n            return isPresent (root.right,val)\n        else:\n            return 0\n    elif val > root.value:\n        if root.left != None:\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":902,"fileType":"python","requestStartTime":1517945529410}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":177,"fileType":"python","requestStartTime":1517945629698}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        slef.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":204,"fileType":"python","requestStartTime":1517945633858}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":204,"fileType":"python","requestStartTime":1517945635249}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.left.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":209,"fileType":"python","requestStartTime":1517945635977}}
{"body": {"column":8,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.left.in_order_traversal(lst)\n    lst.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":241,"fileType":"python","requestStartTime":1517945646761}}
{"body": {"column":21,"line":12,"wordToComplete":"d","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.left.in_order_traversal(lst)\n    lst.append(self.d)\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":254,"fileType":"python","requestStartTime":1517945649347}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.left.in_order_traversal(lst)\n    lst.append(self.data)\n    if self.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":271,"fileType":"python","requestStartTime":1517945651801}}
{"body": {"column":12,"line":14,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.left.in_order_traversal(lst)\n    lst.append(self.data)\n    if self.right != None:\n        sel.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":298,"fileType":"python","requestStartTime":1517945658073}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n  def __init__(self, data):\n      self.data = data\n      self.left = None\n      self.right = None\n\"\"\"\n\ndef in_order(root, lst):\n    if self.left != None:\n        self.left.in_order_traversal(lst)\n    lst.append(self.data)\n    if self.right != None:\n        self.right.\n\n\ndef check_binary_search_tree_(root):\n    if root.left > root.data or root.right < root.data:\n        return False\n    else:\n        check_binary_search_tree_(root.left)\n        check_binary_search_tree_(root.right)\n    return True\n        \n\n\n","offset":305,"fileType":"python","requestStartTime":1517945660384}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef jimOrders(orders):\n    # Complete this function\n    final=[]\n    time=[]\n    dic={}\n    for i in range(n):\n        time.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    orders = []\n    for orders_i in xrange(n):\n        orders_temp = map(int,raw_input().strip().split(' '))\n        orders.append(orders_temp)\n    result = jimOrders(orders)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":153,"fileType":"python","requestStartTime":1517945665969}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef jimOrders(orders):\n    # Complete this function\n    final=[]\n    time=[]\n    dic={}\n    for i in range(n):\n        time.append(sum(orders[i]))\n    for i in range(n):\n        if time[i] in dic.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    orders = []\n    for orders_i in xrange(n):\n        orders_temp = map(int,raw_input().strip().split(' '))\n        orders.append(orders_temp)\n    result = jimOrders(orders)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":225,"fileType":"python","requestStartTime":1517945723099}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef jimOrders(orders):\n    # Complete this function\n    final=[]\n    time=[]\n    dic={}\n    for i in range(n):\n        time.append(sum(orders[i]))\n    for i in range(n):\n        if time[i] in dic.keys():\n            time[i].\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    orders = []\n    for orders_i in xrange(n):\n        orders_temp = map(int,raw_input().strip().split(' '))\n        orders.append(orders_temp)\n    result = jimOrders(orders)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":253,"fileType":"python","requestStartTime":1517945735800}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    res= {}\n    for i in range(l, r):\n        if i % 2 == 0:\n            i=i+1\n        else:\n            res.\n      \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":203,"fileType":"python","requestStartTime":1517945797716}}
{"body": {"column":12,"line":19,"wordToComplete":"100.","code":"#!/bin/python\n\nimport sys\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef variables():\n    #Start your code below (tip: Make sure to indent your code)\n\n    a = 'penquin'\n    b = 6\n    c = False\n    d = None\n    e = 100.\nif __name__ == \"__main__\":\n    res = variables();\n    \n\n","offset":612,"fileType":"python","requestStartTime":1517945863994}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef jimOrders(orders):\n    # Complete this function\n    final=[]\n    time=[]\n    dic={}\n    for i in range(n):\n        time.append(sum(orders[i]))\n    for i in range(n):\n        if time[i] in dic.keys():\n            time[i].append(i+1)\n        else:\n            time[i]=[i+1]\n    getKeys=dic.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    orders = []\n    for orders_i in xrange(n):\n        orders_temp = map(int,raw_input().strip().split(' '))\n        orders.append(orders_temp)\n    result = jimOrders(orders)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":321,"fileType":"python","requestStartTime":1517945869886}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef jimOrders(orders):\n    # Complete this function\n    final=[]\n    time=[]\n    dic={}\n    for i in range(n):\n        time.append(sum(orders[i]))\n    for i in range(n):\n        if time[i] in dic.keys():\n            time[i].append(i+1)\n        else:\n            time[i]=[i+1]\n    getKeys=dic.keys().\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    orders = []\n    for orders_i in xrange(n):\n        orders_temp = map(int,raw_input().strip().split(' '))\n        orders.append(orders_temp)\n    result = jimOrders(orders)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":328,"fileType":"python","requestStartTime":1517945874063}}
{"body": {"column":181,"line":20,"wordToComplete":"keeps tracks of number of palidromes. Start with len of string so it can reduce the number of paldrones that it has to find.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n    \ndef stringPalindrome(string):                           #return whether a string is a palindrome\n    end = len(string) - 1                               #end keeps track of end or set\n    length = len(string)                                #length of string\n        \n    for start in range(length/2):                       #Only half range for the start(i) since end and start meet in the middle\n        if string[start] != string[end]:                #check if start and end match while moving to the middle\n            return False                                #if start and end do not match then there is not palindrome\n        end-=1                                          #set end to previous value in array(string)\n    return True                                         #if it did not find an unmatch return True\n\ndef countPalindromes(s):                                #Count number of palindromes in subarray\n    possible = len(s)                                   #keeps tracks of number of palidromes. Start with len of string so it can reduce the number of paldrones that it has to find.\n    start = 0\n    end = len(s)\n    current = end\n    \n    for i in range(end):\n        for j in range(i + 1, end):\n            if stringPalindrome(s[i:j + 1]):\n                possible += 1\n            \n    return possible\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    res = countPalindromes(s);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":1179,"fileType":"python","requestStartTime":1517945965428}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while count<position and current:\n        count=count+1\n        previous=current\n        current=current.next\n    \n    previous.\n        \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":485,"fileType":"python","requestStartTime":1517945979686}}
{"body": {"column":26,"line":24,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while count<position and current:\n        count=count+1\n        previous=current\n        current=current.next\n    \n    previous.next=current.\n        \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":498,"fileType":"python","requestStartTime":1517945985918}}
{"body": {"column":15,"line":8,"wordToComplete":"Hint.","code":"import os\nimport sys\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint.\n\n","offset":190,"fileType":"python","requestStartTime":1517946047914}}
{"body": {"column":13,"line":17,"wordToComplete":"3.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef var_manipulation():\n    #Start your code below (tip: Make sure to indent your code)\n    \n    var0 = 3.\n    \n    \n    ## Do not change the conditional statements below\n    if var0 == 3.27 or var1 == 5:\n        if var2 == True and var3 == 7:\n            result = float(var0 * var3)\n            print \"Here is the result! %0.2f\" % result\n        else:\n            print \"error in second if statement\"\n    else:\n        print \"error in first if statement\"\n\n\nif __name__ == \"__main__\":\n    res = var_manipulation();\n","offset":580,"fileType":"python","requestStartTime":1517946054969}}
{"body": {"column":17,"line":27,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while count<position and current:\n        count=count+1\n        previous=current\n        current=current.next\n    \n    if previous is not None:\n        previous.next=current.next\n    else:\n        previous.\n        \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":563,"fileType":"python","requestStartTime":1517946069418}}
{"body": {"column":27,"line":27,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while count<position and current:\n        count=count+1\n        previous=current\n        current=current.next\n    \n    if previous is not None:\n        previous.next=current.next\n    else:\n        previous.next=head.\n        \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":573,"fileType":"python","requestStartTime":1517946082491}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  balanced( a_str):\n    if len(a_str) % 2 != 0:\n        return False;\n    open = (\"(\",\"[\",\"{\")\n    close = (\")\",\"]\",\"}\")\n    \n    map = {open[0]:close[0],\n          open[1]:close[1],\n          open[2]:close[2],}\n    for bracket in a_str:\n        if bracket in  open:\n            close_queue.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a_str = raw_input()\n\nres = balanced(_a_str);\nf.write(str(int(res)) + \"\\n\")\n\nf.close()\n\n","offset":366,"fileType":"python","requestStartTime":1517946094407}}
{"body": {"column":12,"line":18,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef jimOrders(orders):\n    # Complete this function\n    final=[]\n    time=[]\n    dic={}\n    for i in range(n):\n        time.append(sum(orders[i]))\n    for i in range(n):\n        if time[i] in dic.keys():\n            time[i].append(i+1)\n        else:\n            time[i]=[i+1]\n    getKeys=dic.keys()\n    getKeys.\n    for i in getKeys:\n        final+=dic[i]\n    return final\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    orders = []\n    for orders_i in xrange(n):\n        orders_temp = map(int,raw_input().strip().split(' '))\n        orders.append(orders_temp)\n    result = jimOrders(orders)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":340,"fileType":"python","requestStartTime":1517946098733}}
{"body": {"column":57,"line":8,"wordToComplete":"Hint: Each object has its own length and width.","code":"import os\nimport sys\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n\n","offset":232,"fileType":"python","requestStartTime":1517946114210}}
{"body": {"column":28,"line":25,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  balanced( a_str):\n    if len(a_str) % 2 != 0:\n        return False;\n    open = (\"(\",\"[\",\"{\")\n    close = (\")\",\"]\",\"}\")\n    \n    map = {open[0]:close[0],\n          open[1]:close[1],\n          open[2]:close[2],}\n    for bracket in a_str:\n        if bracket in  open:\n            close_queue.append(map[bracket])\n        elif bracket in close:\n            if not close_queue:\n                return False\n            if close_queue[-1] == bracket:\n                close_queue.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a_str = raw_input()\n\nres = balanced(_a_str);\nf.write(str(int(res)) + \"\\n\")\n\nf.close()\n\n","offset":550,"fileType":"python","requestStartTime":1517946162430}}
{"body": {"column":13,"line":28,"wordToComplete":"81.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef grade_avrg():\n    \n\n    \n    #Assign 5 letter grades (80, 77, 88, 95, and 68) a variable below\n\n    \n    \n    \n  \n    #Create two variables 'avg' and 'letterGrade'\n    #For this assignment you have to calculate and store the average grade value in the variable\n    #'avg' for the condtional statements below to work properly.\n    \n  \n    avg = 81.\n    \n    \n    \n  \n    #The below conditional statements will determine what letterGrade to assign \n    #the classes grade average ( variable: avg ).  The classes letter grade will be assigned to\n    #the ( variable: letterGrade ).  You must declare a variable named 'avg' and 'letterGrade'\n    #for the below conditional statements to work properly\n    if (avg <= 100 and avg > 90) :\n        letterGrade = 'A'\n    elif (avg <= 90 and avg >= 80) :\n        letterGrade = 'B'\n    elif (avg < 80 and avg >= 70) :\n        letterGrade = 'C'\n    elif (avg < 70 and avg >= 60) :\n        letterGrade = 'D'\n    elif (avg < 60 and avg >= 0) :\n        letterGrade = 'F'\n    else:\n        letterGrade = \"The value compared is not a number equal or between 0 and 100\"\n    \n    return \"Average grade is: %0.1f, which is a %s\" % (avg, letterGrade)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    res = grade_avrg();\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":824,"fileType":"python","requestStartTime":1517946244707}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None:\n        if previous is not None:\n            previous.next=current.next\n        else:\n            head.\n        \n        \n    return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":487,"fileType":"python","requestStartTime":1517946293050}}
{"body": {"column":30,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None:\n        if previous is not None:\n            previous.next=current.next\n        else:\n            head.next=current.\n        \n        \n    return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":500,"fileType":"python","requestStartTime":1517946298587}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None:\n        if previous is not None:\n            previous.next=current.next\n        else:\n            head.next=current.next\n    previous=current\n    current=current.\n        \n    return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":546,"fileType":"python","requestStartTime":1517946348860}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nstring_in = raw_input()\nprint string_in.\n\n","offset":114,"fileType":"python","requestStartTime":1517946383512}}
{"body": {"column":39,"line":26,"wordToComplete":"","code":"import math\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Circle():\n    \n    def __init__(self, radius):\n        self.radius = radius\n        \n    def getArea(self):\n        return float(3.14159265 * radius * radius)\n    \nclass Rectangle():\n    \n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        \n    def getArea(self):\n        return float(self.width * self.height)\n    \nclass Square():\n    \n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        \n    def getArea():\n        return float(self.width * self.)\n\n\n\nif __name__ == '__main__':\n    radius = float(raw_input())\n    c1 = Circle(radius)\n    print c1.getArea()\n    \n    dims = raw_input().split(\" \")\n    width = float(dims[0])\n    height = float(dims[1])\n    r1 = Rectangle(width, height)\n    print r1.getArea()\n    \n    radius = float(raw_input())\n    c2 = Circle(radius)\n    print c2.getArea()\n    \n    width = float(raw_input())\n    s1 = Square(width)\n    print s1.getArea()\n    \n    dims = raw_input().split(\" \")\n    width = float(dims[0])\n    height = float(dims[1])\n    r2 = Rectangle(width, height)\n    print r2.getArea()\n","offset":639,"fileType":"python","requestStartTime":1517946433250}}
{"body": {"column":6,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nstring_in = raw_input()\nstrings = string_in.split(',')\nfor a in strings:\n    a.\n\n","offset":153,"fileType":"python","requestStartTime":1517946433961}}
{"body": {"column":62,"line":6,"wordToComplete":"This is an initializtion function for a class in Python.","code":"import os\nimport sys\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use\n\n","offset":143,"fileType":"python","requestStartTime":1517946467367}}
{"body": {"column":41,"line":2,"wordToComplete":"This is the class definition in Python.","code":"import os\nimport sys\n# This is the class definition in Python.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use\n\n","offset":63,"fileType":"python","requestStartTime":1517946503399}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nstr_in = raw_input()\n\nstr_unq = []\nfor a in str_in.split(','):\n    str_unq.a.lower()\n \n\n","offset":149,"fileType":"python","requestStartTime":1517946507749}}
{"body": {"column":33,"line":3,"wordToComplete":"This is how you define objects.","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use\n\n","offset":98,"fileType":"python","requestStartTime":1517946522998}}
{"body": {"column":73,"line":15,"wordToComplete":"We are able to create class functions for use outside of the class.","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n\n","offset":528,"fileType":"python","requestStartTime":1517946536608}}
{"body": {"column":49,"line":16,"wordToComplete":"This is normally to modify class variables.","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n\n","offset":578,"fileType":"python","requestStartTime":1517946546798}}
{"body": {"column":69,"line":17,"wordToComplete":"Create two functions below to calculate the perimeter and area.","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n\n","offset":648,"fileType":"python","requestStartTime":1517946569006}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef doesCircleExist(commands):\n    output = []\n    \n    for command in commands:\n        moves = {'G':0,\n                 'R':0,\n                 'L':0}\n        \n        for move in command:\n            moves[move] += 1\n            \n        if moves['G'] == 0:\n            output.append('YES')\n        else:\n            output.\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    commands_cnt = 0\n    commands_cnt = int(raw_input())\n    commands_i = 0\n    commands = []\n    while commands_i < commands_cnt:\n        try:\n            commands_item = raw_input()\n        except:\n            commands_item = None\n        commands.append(commands_item)\n        commands_i += 1\n\n\n    res = doesCircleExist(commands);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":398,"fileType":"python","requestStartTime":1517946612060}}
{"body": {"column":116,"line":10,"wordToComplete":"Not clear if I should ignore spaces, if STDIN is \"goodbye, goodbye\", program above considers these seperate words.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nstr_in = raw_input()\n\nstr_unq = []\nfor a in str_in.split(','):\n    str_unq.append(a.lower())\nprint len(set(str_unq))\n# Not clear if I should ignore spaces, if STDIN is \"goodbye, goodbye\", program above considers these seperate words.\n\n","offset":307,"fileType":"python","requestStartTime":1517946662830}}
{"body": {"column":13,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None and count < position :\n        previous=current\n        current=current.next\n        count=count+1\n    previous.\n    return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":495,"fileType":"python","requestStartTime":1517946679007}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None and count < position :\n        previous=current\n        current=current.next\n        count=count+1\n    previous.next=current.\n    return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":508,"fileType":"python","requestStartTime":1517946686789}}
{"body": {"column":92,"line":31,"wordToComplete":"Oh, uh, hi - human code reviewer. I tend to take notes of my thoughts as I go in comments.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Ok, so I was right - it was taking too long to dig through `words`\n# and splitting it up by length fixed 9/10\n\n# But why is test #5 still timing out? What pathological input are they givin' me?\n\n# Aha, okay, found something that makes it stumble locally:\n# words = [ \"\".join(random.sample(\"abc\"*20, random.randrange(1, 60))) for i in range(0,50000) ]\n# longestChain(words) - deeeefinitely taking forever and a day.\n\n# Okay, so \"x in HUGE_LIST\" is probably god-awful - what if I use the words as keys? \n# Should be speedy, hash-based lookup, right? Let's submit this code, so I don't have to backtrack\n# if I don't get it done in time.\n\n# Well, the tests actually seem to run a little slower now - although it's hard to tell\n# through the browser - and it still didn't fix #5. I don't like this as much, anyway. \n# Going back to the collect-by-length method.\n\n# I wonder if I'm approaching this the wrong way - maybe I should be trying to build words *up*\n# instead of subtracting characters from the longest words?\n# OH WAIT\n# I'm doing a lot of repetitive work here. Any word that's already in a chain doesn't need to be \n# the starting point - I can eliminate a lot of repetitive lookups by memoizing these words!\n\n# Can't believe I wasted so much time without realizing I could do that.\n\n# Oh, uh, hi - human code reviewer. I tend to take notes of my thoughts as I go in comments.\n\n# Ugly global\nmemo = {}\n\ndef longestChain(words):\n  if len(words) < 2:\n    return 0\n\n  words_by_length = byLength(words)\n\n  return max( [ getMaxChainLength(word, words_by_length) for word in words ] )\n\n\ndef getMaxChainLength(word, words_by_length):\n  if memo.get(word, None) is not None:\n    return memo[word]\n\n  if len(word) - 1 not in words_by_length:\n    return 1\n\n  nextLinks = getNextLinks(word, words_by_length)\n  if word == \"\" or len(nextLinks) == 0:\n    return 1\n\n  result = 1 + max([ getMaxChainLength(subword, words_by_length) for subword in nextLinks ])\n  memo[word] = result\n\n  return result\n\ndef getNextLinks(word, words_by_length):\n  return [ subword for subword in subwords(word) if subword in words_by_length[len(subword)] ]\n\n\ndef subwords(word):\n    if (len(word) < 2):\n        return []\n    return [ word[0:i] + word[i+1:] for i in range(0, len(word)) ]\n\n\ndef byLength(words):\n  words_by_length = {}\n  for word in words:\n    if len(word) not in words_by_length:\n      words_by_length[len(word)] = set()\n\n    words_by_length[len(word)].add(word)\n\n  return words_by_length\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    words_cnt = 0\n    words_cnt = int(raw_input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = raw_input()\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":1424,"fileType":"python","requestStartTime":1517946820068}}
{"body": {"column":28,"line":11,"wordToComplete":"https://jsonmock.'","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    \n    URL = 'https://jsonmock.'\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":159,"fileType":"python","requestStartTime":1517946874831}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nraw_input().\n\n","offset":85,"fileType":"python","requestStartTime":1517946873979}}
{"body": {"column":59,"line":18,"wordToComplete":"Do not include parameters in the function definition.","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":708,"fileType":"python","requestStartTime":1517946952910}}
{"body": {"column":65,"line":19,"wordToComplete":"We are able to utilize the self keyword in class functions.","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":774,"fileType":"python","requestStartTime":1517946966035}}
{"body": {"column":23,"line":27,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef add_char(character):\n    if character == 'z':\n        return 'a'\n    else:\n        return chr(ord(character) + 1)\n    \ndef subs_char(character):\n    if character == 'a':\n        return 'z'\n    else:\n        return chr(ord(character) - 1)\n\ndef roll_now(s, start, end, left_or_right):\n    if (left_or_right == 'L'):\n        # Roll left\n        while (start > end):\n            s[start] = subs_char(s[start])\n            start = start + 1\n    else:\n        # Roll right\n        while (start > )\ndef rollingString(s, operations):\n    print s \n    print operations\n    \n    total_operations = len(operations)\n    \n    for operation in operations:\n        start_index = operation[0]\n        end_index = opertaion[1]\n        left_or_right = opertaion[2]\n        \n        s = roll_now(s, start_index, end_index, left_or_right)\n        \n    return s\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        s = raw_input()\n    except:\n        s = None\n\n    operations_cnt = 0\n    operations_cnt = int(raw_input())\n    operations_i = 0\n    operations = []\n    while operations_i < operations_cnt:\n        try:\n            operations_item = raw_input()\n        except:\n            operations_item = None\n        operations.append(operations_item)\n        operations_i += 1\n\n\n    res = rollingString(s, operations);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":564,"fileType":"python","requestStartTime":1517946973435}}
{"body": {"column":47,"line":10,"wordToComplete":"100.","code":"\n#!/bin/python\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(raw_input().strip())\n    tip_percent = int(raw_input().strip())\n    tax_percent = int(raw_input().strip())\n    \n    totalCost=fix(meal_cost*(1+tip_percent/100.))\n    The total meal cost is totalCost dollars.\n\n","offset":237,"fileType":"python","requestStartTime":1517946984144}}
{"body": {"column":64,"line":10,"wordToComplete":"100.","code":"\n#!/bin/python\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(raw_input().strip())\n    tip_percent = int(raw_input().strip())\n    tax_percent = int(raw_input().strip())\n    \n    totalCost=fix(meal_cost*(1+tip_percent/100.+tax_percent/100.))\n    The total meal cost is totalCost dollars.\n\n","offset":254,"fileType":"python","requestStartTime":1517946993012}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":459,"fileType":"python","requestStartTime":1517947008187}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.width = width\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":486,"fileType":"python","requestStartTime":1517947019607}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.width = width\n        self.length = length\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.\n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":904,"fileType":"python","requestStartTime":1517947038537}}
{"body": {"column":32,"line":25,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.width = width\n        self.length = length\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.length*self.\n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":916,"fileType":"python","requestStartTime":1517947044335}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    \n    URL = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + '&page=1'\n    print URL\n    data = json. urllib2.urlopen(URL).read()\n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":252,"fileType":"python","requestStartTime":1517947055351}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":795,"fileType":"python","requestStartTime":1517947092133}}
{"body": {"column":23,"line":28,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.width = width\n        self.length = length\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.length*self.width\n    # Function name: getPerimeter\n    def getPerimeter():\n        return 2*(self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":1003,"fileType":"python","requestStartTime":1517947067502}}
{"body": {"column":35,"line":28,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.width = width\n        self.length = length\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.length*self.width\n    # Function name: getPerimeter\n    def getPerimeter():\n        return 2*(self.length+self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint(rec.getArea())\nprint(rec.getPerimeter())\n","offset":1015,"fileType":"python","requestStartTime":1517947071148}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.val == val:\n            return 1\n        if root.\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":844,"fileType":"python","requestStartTime":1517947112421}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.val == val:\n            return 1\n        if root.val > val:\n            dfs(root.)\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":876,"fileType":"python","requestStartTime":1517947124437}}
{"body": {"column":21,"line":32,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.val == val:\n            return 1\n        if root.val > val:\n            dfs(root.left,val)\n        else:\n            dfs(root.)\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":921,"fileType":"python","requestStartTime":1517947163797}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  melon_count(boxes, melons):\n    max = 0;\n    i =0\n    while i<boxes.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_boxes_cnt = 0\n_boxes_cnt = int(raw_input())\n_boxes_i=0\n_boxes = []\nwhile _boxes_i < _boxes_cnt:\n    _boxes_item = int(raw_input());\n    _boxes.append(_boxes_item)\n    _boxes_i+=1\n    \n\n\n_melons_cnt = 0\n_melons_cnt = int(raw_input())\n_melons_i=0\n_melons = []\nwhile _melons_i < _melons_cnt:\n    _melons_item = int(raw_input());\n    _melons.append(_melons_item)\n    _melons_i+=1\n    \n\nres = melon_count(_boxes, _melons);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":145,"fileType":"python","requestStartTime":1517947131226}}
{"body": {"column":35,"line":29,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.val == val:\n            return 1\n        if root.val > val and root.:\n            dfs(root.left,val)\n        else:\n            dfs(root.right,val)\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":863,"fileType":"python","requestStartTime":1517947171620}}
{"body": {"column":18,"line":31,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.val == val:\n            return 1\n        if root.val > val and root.left != None:\n            dfs(root.left,val)\n        elif root.:\n            dfs(root.right,val)\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":926,"fileType":"python","requestStartTime":1517947186268}}
{"body": {"column":37,"line":31,"wordToComplete":"","code":"#!/usr/bin/env python\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\ndef _insert_node_into_binarysearchtree(node, data):\n    if node == None:\n        node = BSTreeNode(data)\n    else:\n        if (data <= node.value):\n            node.left = _insert_node_into_binarysearchtree(node.left, data);\n        else:\n            node.right = _insert_node_into_binarysearchtree(node.right, data);\n    return node\n\"\"\"\nclass BSTreeNode:\n    def __init__(self, node_value):\n        self.value = node_value\n        self.left = self.right = None\n\"\"\"\n\ndef isPresent (root,val):\n    # write your code here\n    # return 1 or 0 depending on whether the element is present in the tree or not\n    \n    def dfs(root,val):\n        if root.val == val:\n            return 1\n        if root.val > val and root.left != None:\n            dfs(root.left,val)\n        elif root.val < val and root.:\n            dfs(root.right,val)\n_a = None\n_a_size = input()\n_a_i=0\n\nwhile _a_i < _a_size:\n    _a_item = input()\n    _a = _insert_node_into_binarysearchtree(_a, _a_item)\n    _a_i += 1\n\n_b = input()\n\n_result = isPresent (_a , _b );\nprint _result\n","offset":945,"fileType":"python","requestStartTime":1517947192787}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None and count < position :\n        previous=current\n        current=current.next\n        count=count+1\n        \n    if previous is None:\n        previous.\n        return head\n    else:    \n        previous.next=current.next\n        return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":533,"fileType":"python","requestStartTime":1517947165627}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None and count < position :\n        previous=current\n        current=current.next\n        count=count+1\n        \n    if previous is None:\n        previous.next=head.\n        return head\n    else:    \n        previous.next=current.next\n        return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":543,"fileType":"python","requestStartTime":1517947170410}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nint_in = raw_input().split(\",\")\n\nfor a in int_in:\n    a.\n\n","offset":129,"fileType":"python","requestStartTime":1517947265646}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Delete Node at a given position in a linked list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Delete(head, position):\n    current=head\n    previous=None\n    count=0\n    \n    while current is not None and count < position :\n        previous=current\n        current=current.next\n        count=count+1\n        \n    if previous is None:\n        return head.\n    else:    \n        previous.next=current.next\n        return head    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":536,"fileType":"python","requestStartTime":1517947272576}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    \n    URL = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + '&page=1'\n    titles = []\n    print URL\n    data = json.loads(urllib2.urlopen(URL).read())\n    for movie in data['data']:\n        titles.\n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":349,"fileType":"python","requestStartTime":1517947275932}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nctr = arr.\nstring = \"\"\nwhile ctr >= 0:\n    string += arr[ctr] + \" \"\n    ctr -= 1\nprint string\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\n\n\n","offset":38,"fileType":"python","requestStartTime":1517947420452}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    for i in range(l, r+1)\n        if i%2==1:\n            odds.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":157,"fileType":"python","requestStartTime":1517947486919}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":459,"fileType":"python","requestStartTime":1517947506842}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self .\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":489,"fileType":"python","requestStartTime":1517947513846}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    \n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":488,"fileType":"python","requestStartTime":1517947514901}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return slef.\n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":904,"fileType":"python","requestStartTime":1517947539004}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.\n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":904,"fileType":"python","requestStartTime":1517947540459}}
{"body": {"column":32,"line":25,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.length*self.\n    # Function name: getPerimeter\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":916,"fileType":"python","requestStartTime":1517947545047}}
{"body": {"column":23,"line":28,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.length*self.width\n    # Function name: getPerimeter\n    def getPerimeter():\n        return 2*(self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":1003,"fileType":"python","requestStartTime":1517947561091}}
{"body": {"column":35,"line":28,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    # Do not include parameters in the function definition.\n    # We are able to utilize the self keyword in class functions.\n    \n    # Function name: getArea\n    def getArea():\n        return self.length*self.width\n    # Function name: getPerimeter\n    def getPerimeter():\n        return 2*(self.length+self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\nprint rec.getArea()\nprint rec.getPerimeter()\n","offset":1015,"fileType":"python","requestStartTime":1517947564689}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  melon_count(boxes, melons):\n    max = 0;\n    start=0\n    \n    while start< len(melons):\n        i=start\n        j=0\n        count =0\n        while i < len(melons) and j < len(boxes):\n            if boxes[j] >= melons[i] and j < len(boxes):\n                j = j+1\n                i = i+1\n                count = count + 1\n            else\n                j = j+1\n        if count > \n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_boxes_cnt = 0\n_boxes_cnt = int(raw_input())\n_boxes_i=0\n_boxes = []\nwhile _boxes_i < _boxes_cnt:\n    _boxes_item = int(raw_input());\n    _boxes.append(_boxes_item)\n    _boxes_i+=1\n    \n\n\n_melons_cnt = 0\n_melons_cnt = int(raw_input())\n_melons_i=0\n_melons = []\nwhile _melons_i < _melons_cnt:\n    _melons_item = int(raw_input());\n    _melons.append(_melons_item)\n    _melons_i+=1\n    \n\nres = melon_count(_boxes, _melons);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":459,"fileType":"python","requestStartTime":1517947715320}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\nimport subprocess\n\ndef my_print(str):\n    #Start your code below (tip: Make sure to indent your code)\n    \n    subprocess.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        str = raw_input()\n    except:\n        str = None\n\n    res = my_print(str);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":594,"fileType":"python","requestStartTime":1517947740862}}
{"body": {"column":39,"line":17,"wordToComplete":"duckduckgo.\"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\nimport subprocess\n\ndef my_print(str):\n    #Start your code below (tip: Make sure to indent your code)\n    \n    subprocess.call(\"ping\",\"duckduckgo.\")\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        str = raw_input()\n    except:\n        str = None\n\n    res = my_print(str);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":618,"fileType":"python","requestStartTime":1517947799922}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    \n    # Function name: getPerimeter(self)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":459,"fileType":"python","requestStartTime":1517947803469}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    \n    # Function name: getPerimeter(self)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":488,"fileType":"python","requestStartTime":1517947808283}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return slef.\n    \n    # Function name: getPerimeter(self)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":788,"fileType":"python","requestStartTime":1517947822624}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.\n    \n    # Function name: getPerimeter(self)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":788,"fileType":"python","requestStartTime":1517947824150}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.\n    \n    # Function name: getPerimeter(self)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":800,"fileType":"python","requestStartTime":1517947829004}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return self.\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":899,"fileType":"python","requestStartTime":1517947842181}}
{"body": {"column":23,"line":27,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return 2*(self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":902,"fileType":"python","requestStartTime":1517947848033}}
{"body": {"column":35,"line":27,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        self.length = length\n        self.width = width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    # Function name: getArea(self)\n    def getArea(self):\n        return self.length*self.width\n    \n    # Function name: getPerimeter(self)\n    def getPerimeter(self):\n        return 2*(self.length+self.)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nrec = newRectangle(int(raw_input()), int(raw_input()))\n\nprint rec.length\nprint rec.width\nprint rec.getPerimeter()\nprint rec.getArea()\n","offset":914,"fileType":"python","requestStartTime":1517947851256}}
{"body": {"column":7,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\nimport subprocess\n\ndef my_print(str):\n    #Start your code below (tip: Make sure to indent your code)\n    \n    os.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        str = raw_input()\n    except:\n        str = None\n\n    res = my_print(str);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":586,"fileType":"python","requestStartTime":1517947858809}}
{"body": {"column":38,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nif __name__ == '__main__':\n    n = int(raw_input())\n    num_list = map(int, raw_input().split(\" \"))\n    happy_list = map(int, raw_input().)\n\n","offset":280,"fileType":"python","requestStartTime":1517948096541}}
{"body": {"column":36,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nif __name__ == '__main__':\n    n = int(raw_input())\n    num_list = map(int, raw_input().split(\" \"))\n    happy_list = map(int, raw_input().split(\" \"))\n    sad_list = map(int, raw_input().)\n\n","offset":328,"fileType":"python","requestStartTime":1517948107998}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, m = raw_input().split()\narr = raw_input.\n\nhappiness = 0\n\n\n","offset":115,"fileType":"python","requestStartTime":1517948310836}}
{"body": {"column":23,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, m = raw_input().split()\narr = int(raw_input()).\n\nprint arr\n\nhappiness = 0\n\n\n","offset":122,"fileType":"python","requestStartTime":1517948385654}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, m = raw_input().split()\narr = raw_input.\n\nprint arr\n\nhappiness = 0\n\n\n","offset":115,"fileType":"python","requestStartTime":1517948404436}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef bigSorting(arr):\n    # Complete this function\n    new_arr = [arr[0]]\n    for a in arr[1:]:\n        a.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in xrange(n):\n        arr_t = str(raw_input().strip())\n        arr.append(arr_t)\n    result = bigSorting(arr)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":134,"fileType":"python","requestStartTime":1517948460094}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, m = raw_input().split()\narr = raw_input().\n\nprint arr\n\nhappiness = 0\n\n\n","offset":117,"fileType":"python","requestStartTime":1517948464213}}
{"body": {"column":25,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nn, m = raw_input().split()\narr = map(int, raw_input().split())\nA = map(int, raw_input().)\n\nprint arr\n\nhappiness = 0\n\n\n","offset":160,"fileType":"python","requestStartTime":1517948558425}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    arr = arr.\n\nif __name__ == \"__main__\":\n    arr = map(int, raw_input().strip().split(' '))\n    miniMaxSum(arr)\n\n\n","offset":93,"fileType":"python","requestStartTime":1517948649372}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    arr = arr.\n\nif __name__ == \"__main__\":\n    arr = map(int, raw_input().strip().split(' '))\n    miniMaxSum(arr)\n\n\n","offset":93,"fileType":"python","requestStartTime":1517948655022}}
{"body": {"column":33,"line":30,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom __future__ import division\n\nimport math\n\ninputs = raw_input()\n\nscores = map(float, inputs.split(' '))\n\ndef sample_mean(xs):\n    N = len(xs)\n    if N == 0:\n        raise Exception(\"Need at least 1 point for sample mean\")\n    total = sum(xs)\n    return total / N\n\ndef sample_std_dev(xs):\n    \n    N = len(xs)\n    if N <= 1:\n        raise Exception(\"Need at least 2 points for sample standard deviation\")\n        \n    mean = sample_mean(xs)\n    var = 0\n    \n    for x in xs:\n        var += (x - mean) * (x - mean)\n        \n    return math.sqrt(var) / math.\n\n","offset":631,"fileType":"python","requestStartTime":1517948680827}}
{"body": {"column":71,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    print (\"{0}sum(arr) - max(arr)\" + \"  \" + \"{1}sum(arr) - min(arr)\").\n\nif __name__ == \"__main__\":\n    arr = map(int, raw_input().strip().split(' '))\n    miniMaxSum(arr)\n\n\n","offset":150,"fileType":"python","requestStartTime":1517948930718}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef main():\n    n = input()\n    \n    \n    strings = []\n    for i in range(n):\n        strings.\n\n\n\nif __name__ == \"__main__\":\n    main()\n\n","offset":168,"fileType":"python","requestStartTime":1517949070167}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef main():\n    n = input()\n    \n    \n    strings = []\n    for i in range(n):\n        strings.\n\n\n\nif __name__ == \"__main__\":\n    main()\n\n","offset":168,"fileType":"python","requestStartTime":1517949070452}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\ndef main():\n    n = input()\n    \n    \n    strings = []\n    for i in range(n):\n        strings.append(raw_input())\n    \n    q = input()\n    \n    for j in range(q):\n        query = raw_input()\n        strings.\n\n\n\nif __name__ == \"__main__\":\n    main()\n\n","offset":281,"fileType":"python","requestStartTime":1517949261140}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef preOrder(root):\n    try:\n        sys.stdout.write(root.)\n    except:\n        return\n    preOrder(root.left)\n    preOrder(root.right)\n\n\n","offset":203,"fileType":"python","requestStartTime":1517949373495}}
{"body": {"column":29,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nif __name__ == '__main__':\n    n = map(int, raw_input().)[0]\ncountry = set()\nfor i in range(0,n):\n    country.add(raw_input())\nprint len(country)\n\n","offset":128,"fileType":"python","requestStartTime":1517949397393}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(raw_input())\ns = set()\nfor i in range(n):\n    s.\n    \n\n","offset":129,"fileType":"python","requestStartTime":1517949422759}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(raw_input())\ns = set()\nfor i in range(n):\n    s.\n    \n\n","offset":129,"fileType":"python","requestStartTime":1517949428246}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef preOrder(root):\n    try:\n        root.\n    except:\n        return\n    preOrder(root.left)\n    preOrder(root.right)\n\ndef traverseTree(root):\n    \n\n","offset":186,"fileType":"python","requestStartTime":1517949478857}}
{"body": {"column":31,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    current=head\n    if head is None:\n        return\n    else:\n        while current is not None:\n            for i in arr:\n                arr[i]=current.\n       \n\n\n  \n  \n  \n  \n\n\n","offset":453,"fileType":"python","requestStartTime":1517949518740}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    current=head\n    if head is None:\n        return\n    else:\n        while current is not None:\n                arr[i]=current.data\n                i=i+1\n                current=current.\n                \n       \n\n\n  \n  \n  \n  \n\n\n","offset":486,"fileType":"python","requestStartTime":1517949559776}}
{"body": {"column":27,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef preOrder(root):\n    try:\n        return [root.data].\n    except:\n        return\n    preOrder(root.left)\n    preOrder(root.right)\n\ndef traverseTree(root):\n    \n\n","offset":200,"fileType":"python","requestStartTime":1517949571662}}
{"body": {"column":69,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef preOrder(root):\n    try:\n        return [root.data].extend(preOrder(root.left), preOrder(root.))\n    except:\n        return\n    \n    preOrder(root.right)\n\ndef traverseTree(root):\n    \n\n","offset":242,"fileType":"python","requestStartTime":1517949586141}}
{"body": {"column":53,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef preOrder(root):\n    try:\n        return [root.data].extend(preOrder(root.left). preOrder(root.right))\n    except:\n        return\n\ndef traverseTree(root):\n    \n\n","offset":226,"fileType":"python","requestStartTime":1517949596637}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n    current=head\n    arr=[]\n    if head is None:\n        return\n    else:\n        while current is not None:\n                arr.current.data\n                i=i+1\n                current=current.next\n                \n       \n\n\n  \n  \n  \n  \n\n\n","offset":427,"fileType":"python","requestStartTime":1517949671696}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    print doors.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = map(int, raw_input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":109,"fileType":"python","requestStartTime":1517949717005}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef preOrder(root):\n    try:\n        sys.\n    except:\n        return\n    preOrder(root.left)\n    preOrder(root.right)\n\n\n","offset":196,"fileType":"python","requestStartTime":1517949720802}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef preOrder(root):\n    try:\n        sys.stdout.\n    except:\n        return\n    preOrder(root.left)\n    preOrder(root.right)\n\n\n","offset":203,"fileType":"python","requestStartTime":1517949723514}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef preOrder(root):\n    try:\n        sys.stdout.write(root.)\n    except:\n        return\n    preOrder(root.left)\n    preOrder(root.right)\n\n\n","offset":214,"fileType":"python","requestStartTime":1517949728186}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef checkIPs(ip_array):\n    \n\ndef isIPv4(ip):\n    items = ip.\n    \n    \n    \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    ip_array_cnt = 0\n    ip_array_cnt = int(raw_input())\n    ip_array_i = 0\n    ip_array = []\n    while ip_array_i < ip_array_cnt:\n        try:\n            ip_array_item = raw_input()\n        except:\n            ip_array_item = None\n        ip_array.append(ip_array_item)\n        ip_array_i += 1\n\n\n    res = checkIPs(ip_array);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":132,"fileType":"python","requestStartTime":1517949764676}}
{"body": {"column":42,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    a = (1 if a0 > b0 else 0) + (1 if a1 > b1 else 0) + (1 if a2 > b2 else 0)\n    b = (1 if b0 > b1 else 0) + (1 if b1 >)\n            \n    return a,b\n    \n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":213,"fileType":"python","requestStartTime":1517949781858}}
{"body": {"column":66,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    a = (1 if a0 > b0 else 0) + (1 if a1 > b1 else 0) + (1 if a2 > b2 else 0)\n    b = (1 if b0 > b1 else 0) + (1 if b1 > a1 else 0) + (1 if b2 >)\n            \n    return a,b\n    \n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":237,"fileType":"python","requestStartTime":1517949788818}}
{"body": {"column":9,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef books_collections(book):\n    #Start your code below (tip: Make sure to indent your code)\n    book.\n        \n    #if the input string “book” equals “calculus” return “I have my Calculus book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “history” return “I have my History book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “circuits” return \"I have my Circuits book.\" */\n      return 'I have my %s book.' % book\n    \n    #for everything else return \" I don't have that book.\" */\n      return 'I have my %s book.' % book\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        book = raw_input()\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":560,"fileType":"python","requestStartTime":1517949799054}}
{"body": {"column":9,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef books_collections(book):\n    #Start your code below (tip: Make sure to indent your code)\n    book.\n        \n    #if the input string “book” equals “calculus” return “I have my Calculus book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “history” return “I have my History book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “circuits” return \"I have my Circuits book.\" */\n      return 'I have my %s book.' % book\n    \n    #for everything else return \" I don't have that book.\" */\n      return 'I have my %s book.' % book\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        book = raw_input()\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":560,"fileType":"python","requestStartTime":1517949810964}}
{"body": {"column":11,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef books_collections(book):\n    #Start your code below (tip: Make sure to indent your code)\n      book.        \n        \n    #if the input string “book” equals “calculus” return “I have my Calculus book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “history” return “I have my History book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “circuits” return \"I have my Circuits book.\" */\n      return 'I have my %s book.' % book\n    \n    #for everything else return \" I don't have that book.\" */\n      return 'I have my %s book.' % book\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        book = raw_input()\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":562,"fileType":"python","requestStartTime":1517949856219}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef books_collections(book):\n    if:\n        book.\n        \n    #if the input string “book” equals “calculus” return “I have my Calculus book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “history” return “I have my History book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “circuits” return \"I have my Circuits book.\" */\n      return 'I have my %s book.' % book\n    \n    #for everything else return \" I don't have that book.\" */\n      return 'I have my %s book.' % book\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        book = raw_input()\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":508,"fileType":"python","requestStartTime":1517949875289}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    return root.\n\n\n","offset":180,"fileType":"python","requestStartTime":1517949908550}}
{"body": {"column":26,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        postOrder = [root.]\n    \n\n\n\n","offset":199,"fileType":"python","requestStartTime":1517949947029}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.\n    \n\n\n\n","offset":217,"fileType":"python","requestStartTime":1517949962204}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder.)\n    \n\n\n\n","offset":234,"fileType":"python","requestStartTime":1517949968500}}
{"body": {"column":14,"line":10,"wordToComplete":"leaves","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder.data)\n        lead\n    \n\n\n\n","offset":216,"fileType":"python","requestStartTime":1517949978883}}
{"body": {"column":37,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.))\n        lead\n    \n\n\n\n","offset":239,"fileType":"python","requestStartTime":1517949982235}}
{"body": {"column":82,"line":15,"wordToComplete":"2.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  count_rocks(ribbon_length, rocks):\n    matlen = len(rocks)\n    mat = [[0 for x in range(matlen)] for y in range(matlen)]\n    i=0\n    j=0\n    for point in rocks:\n        for another in rocks:\n            mat[i][j] = ((point[0]-another[0])^2 + (point[1]-another[1])^2)**(1/2.)\n            j = j+1\n        i = i+1\n    i=0\n    len=0\n    ans=1\n    while len <= ribbon_length:\n        min = 10000000\n        while i < matlen:\n            j=i+1\n            while j < matlen:\n                if min> mat[i][j]:\n                    min = mat[i][j]\n                j = j+1\n            i = i+1\n            len = len + min\n            ans= ans+1\n            \n     return ans       \n        \n                \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_ribbon_length = float(raw_input());\n\n\n_rocks_rows = 0\n_rocks_cols = 0\n_rocks_rows = int(raw_input())\n_rocks_cols = int(raw_input())\n\n_rocks = []\nfor _rocks_i in xrange(_rocks_rows):\n    _rocks_temp = map(float,raw_input().strip().split(' '))\n    _rocks.append(_rocks_temp)\n\nres = count_rocks(_ribbon_length, _rocks)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":349,"fileType":"python","requestStartTime":1517949996342}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.left))\n        leaves.\n    \n\n\n\n","offset":261,"fileType":"python","requestStartTime":1517949995719}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.left))\n        leaves.extend(postOrder.)\n    \n\n\n\n","offset":278,"fileType":"python","requestStartTime":1517950000055}}
{"body": {"column":37,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.left))\n        leaves.extend(postOrder(root.))\n    \n\n\n\n","offset":283,"fileType":"python","requestStartTime":1517950002111}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef bigSorting(arr):\n    # Complete this function\n    i=0\n    while i <len(arr):\n        for a in xrange(0,len(arr)-1):\n            if arr[a] < arr[a+1]:\n                pass\n            else:\n                arr.\n            \n        \n        i+=1\n    new_arr = [arr[0]]\n    for a in arr[1:]:\n        for b in new_arr:\n            if a\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in xrange(n):\n        arr_t = str(raw_input().strip())\n        arr.append(arr_t)\n    result = bigSorting(arr)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":242,"fileType":"python","requestStartTime":1517950005097}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    collectNodes(root).\n\ndef collectNodes(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.left))\n        leaves.extend(postOrder(root.right))\n        \n        return leaves\n    except:\n        return []\n    \n\n\n\n","offset":187,"fileType":"python","requestStartTime":1517950053390}}
{"body": {"column":8,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    ' '.collectNodes(root).reverse()\n\ndef collectNodes(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.left))\n        leaves.extend(postOrder(root.right))\n        \n        return leaves\n    except:\n        return []\n    \n\n\n\n","offset":172,"fileType":"python","requestStartTime":1517950058262}}
{"body": {"column":5,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef books_collections(book):\n    #Start your code below (tip: Make sure to indent your code)\nbook.\n        \n    #if the input string “book” equals “calculus” return “I have my Calculus book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “history” return “I have my History book.” */\n      return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “circuits” return \"I have my Circuits book.\" */\n      return 'I have my %s book.' % book\n    \n    #for everything else return \" I don't have that book.\" */\n      return 'I have my %s book.' % book\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        book = raw_input()\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":556,"fileType":"python","requestStartTime":1517950122532}}
{"body": {"column":11,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    leaves = collectLeaves(root)\n    leaves.\n    print ' '.join()\n\ndef collectLeaves(root):\n    try:\n        leaves = [root.data]\n        leaves.extend(postOrder(root.left))\n        leaves.extend(postOrder(root.right))\n        \n        return leaves\n    except AttributeError:\n        return []\n    \n\n\n\n","offset":208,"fileType":"python","requestStartTime":1517950137550}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    leaves = collectLeaves(root)\n    leaves.reverse()\n    print ' '.join(leaves)\n\ndef collectLeaves(root):\n    try:\n        leaves = []\n        leaves.extend(collectLeaves(root.left))\n        leaves.extend(collectLeaves(root.right))\n        leaves.\n        return leaves\n    except AttributeError:\n        return []\n    \n\n\n\n","offset":412,"fileType":"python","requestStartTime":1517950398637}}
{"body": {"column":32,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    leaves = collectLeaves(root)\n    leaves.reverse()\n    print ' '.join(leaves)\n\ndef collectLeaves(root):\n    try:\n        leaves = []\n        leaves.extend(collectLeaves(root.left))\n        leaves.extend(collectLeaves(root.right))\n        leaves.extend([str(root.)])\n        return leaves\n    except AttributeError:\n        return []\n    \n\n\n\n","offset":429,"fileType":"python","requestStartTime":1517950404661}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport.\n\ndef inOrder(root):\n    if root:\n        print(S)\n\n\n","offset":150,"fileType":"python","requestStartTime":1517950690192}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef inOrder(root):\n    if root:\n        sys.\n\n\n","offset":199,"fileType":"python","requestStartTime":1517950700505}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef inOrder(root):\n    if root:\n        sys.stdout.\n\n\n","offset":206,"fileType":"python","requestStartTime":1517950704978}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef inOrder(root):\n    if root:\n        sys.stdout.write(root.)\n\n\n","offset":217,"fileType":"python","requestStartTime":1517950712546}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef inOrder(root):\n    if root:\n        inOrder(root.)\n        sys.stdout.write(str(root.data) + ' ')\n        \n\n\n","offset":208,"fileType":"python","requestStartTime":1517950758320}}
{"body": {"column":15,"line":2,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nprint training.\n\n","offset":87,"fileType":"python","requestStartTime":1517951160533}}
{"body": {"column":15,"line":49,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    print root.\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1302,"fileType":"python","requestStartTime":1517951182763}}
{"body": {"column":15,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef gridChallenge(grid_str):\n    # Complete this function\n    grid = []\n    for s in grid_str:\n        grid.append([ord(c) for c in s])\n        \n    # Force rows condition\n    for i in range(len(grid)):\n        j = 0\n        while j < len(grid)-1:\n            if grid[i][j] > grid[i][j+1]:\n                tmp = grid[i][j]\n                grid[i][j] = grid[i][j+1]\n                grid[i][j+1] = tmp\n                \n                # Reset index\n                j = 0\n            else:\n                j += 1\n    \n    # Check if columns condition is satisfied\n    \n    # Convert back to string\n    column_strs = []\n    for i in range(len(grid)):\n        column.\n    \n    \n    for i in range(len(grid)-1):\n        for j in range(len(grid)):\n            if grid[i][j] > grid[i+1][j]:\n                return 'NO'\n    \n    return 'YES'\n\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for tt in range(t):\n        n = int(raw_input().strip())\n        grid = []\n        grid_i = 0\n        for grid_i in xrange(n):\n            grid_t = str(raw_input().strip())\n            grid.append(grid_t)\n        result = gridChallenge(grid)\n        print result\n\n\n","offset":691,"fileType":"python","requestStartTime":1517951206953}}
{"body": {"column":20,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef gridChallenge(grid_str):\n    # Complete this function\n    grid = []\n    for s in grid_str:\n        grid.append([ord(c) for c in s])\n        \n    # Force rows condition\n    for i in range(len(grid)):\n        j = 0\n        while j < len(grid)-1:\n            if grid[i][j] > grid[i][j+1]:\n                tmp = grid[i][j]\n                grid[i][j] = grid[i][j+1]\n                grid[i][j+1] = tmp\n                \n                # Reset index\n                j = 0\n            else:\n                j += 1\n    \n    # Check if columns condition is satisfied\n    \n    # Convert back to string\n    column_strs = []\n    for i in range(len(grid)):\n        column_strs.\n    \n    \n    for i in range(len(grid)-1):\n        for j in range(len(grid)):\n            if grid[i][j] > grid[i+1][j]:\n                return 'NO'\n    \n    return 'YES'\n\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for tt in range(t):\n        n = int(raw_input().strip())\n        grid = []\n        grid_i = 0\n        for grid_i in xrange(n):\n            grid_t = str(raw_input().strip())\n            grid.append(grid_t)\n        result = gridChallenge(grid)\n        print result\n\n\n","offset":696,"fileType":"python","requestStartTime":1517951210529}}
{"body": {"column":55,"line":13,"wordToComplete":"","code":"import math\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real;\n        self.imaginary = imaginary;\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary - no.imaginary);\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary);\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary,self.real*no.imaginary+no.real*self.imaginary);\n    def __div__(self, no):\n        try: \n            return self.__mul__(complex(no.real, -1*no. )).__mul__(complex(1.0/(no.mod().real)**2, 0))\n        except ZeroDivisionError as e:\n            print e\n            return None\n    def mod(self):\n        return complex(pow(self.real**2+self.imag**2, 0.5), 0)\n    def __str__(self, precision=2):\n        return str((\"%.\"+\"%df\"%precision)%float(self.real))+('+' if self.imag>=0 else '-')+str((\"%.\"+\"%df\"%precision)%float(abs(self.imag)))+'i'\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\n\n\nif __name__ == '__main__':\n    c = map(float, raw_input().split())\n    d = map(float, raw_input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print '\\n'.join(map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]))\n","offset":574,"fileType":"python","requestStartTime":1517951225218}}
{"body": {"column":29,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef gridChallenge(grid_str):\n    # Complete this function\n    grid = []\n    for s in grid_str:\n        grid.append([ord(c) for c in s])\n        \n    # Force rows condition\n    for i in range(len(grid)):\n        j = 0\n        while j < len(grid)-1:\n            if grid[i][j] > grid[i][j+1]:\n                tmp = grid[i][j]\n                grid[i][j] = grid[i][j+1]\n                grid[i][j+1] = tmp\n                \n                # Reset index\n                j = 0\n            else:\n                j += 1\n    \n    # Check if columns condition is satisfied\n    \n    # Convert back to string\n    column_strs = []\n    for i in range(len(grid)):\n        column_strs.append('.')\n    \n    \n    for i in range(len(grid)-1):\n        for j in range(len(grid)):\n            if grid[i][j] > grid[i+1][j]:\n                return 'NO'\n    \n    return 'YES'\n\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for tt in range(t):\n        n = int(raw_input().strip())\n        grid = []\n        grid_i = 0\n        for grid_i in xrange(n):\n            grid_t = str(raw_input().strip())\n            grid.append(grid_t)\n        result = gridChallenge(grid)\n        print result\n\n\n","offset":705,"fileType":"python","requestStartTime":1517951228861}}
{"body": {"column":30,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef gridChallenge(grid_str):\n    # Complete this function\n    grid = []\n    for s in grid_str:\n        grid.append([ord(c) for c in s])\n        \n    # Force rows condition\n    for i in range(len(grid)):\n        j = 0\n        while j < len(grid)-1:\n            if grid[i][j] > grid[i][j+1]:\n                tmp = grid[i][j]\n                grid[i][j] = grid[i][j+1]\n                grid[i][j+1] = tmp\n                \n                # Reset index\n                j = 0\n            else:\n                j += 1\n    \n    # Check if columns condition is satisfied\n    \n    # Convert back to string\n    column_strs = []\n    for i in range(len(grid)):\n        column_strs.append(''.)\n    \n    \n    for i in range(len(grid)-1):\n        for j in range(len(grid)):\n            if grid[i][j] > grid[i+1][j]:\n                return 'NO'\n    \n    return 'YES'\n\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for tt in range(t):\n        n = int(raw_input().strip())\n        grid = []\n        grid_i = 0\n        for grid_i in xrange(n):\n            grid_t = str(raw_input().strip())\n            grid.append(grid_t)\n        result = gridChallenge(grid)\n        print result\n\n\n","offset":706,"fileType":"python","requestStartTime":1517951230570}}
{"body": {"column":9,"line":49,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    root.\n        \n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1296,"fileType":"python","requestStartTime":1517951249594}}
{"body": {"column":34,"line":50,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    if root:\n        left_height = height(root.)\n        \n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1334,"fileType":"python","requestStartTime":1517951288594}}
{"body": {"column":56,"line":13,"wordToComplete":"","code":"import math\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real;\n        self.imaginary = imaginary;\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary - no.imaginary);\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary);\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary,self.real*no.imaginary+no.real*self.imaginary);\n    def __div__(self, no):\n        try: \n            return self.__mul__(complex(no.real, -1* no.)).__mul__(complex(1.0/(no.mod().real)**2, 0))\n        except ZeroDivisionError as e:\n            print e\n            return None\n    def mod(self):\n        return complex(pow(self.real**2+self.imaginary**2, 0.5), 0)\n    def __str__(self, precision=2):\n        return str((\"%.\"+\"%df\"%precision)%float(self.real))+('+' if self.imaginary >=0 else '-')+str((\"%.\"+\"%df\"%precision)%float(abs(self.imag)))+'i'\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\n\n\nif __name__ == '__main__':\n    c = map(float, raw_input().split())\n    d = map(float, raw_input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print '\\n'.join(map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]))\n","offset":575,"fileType":"python","requestStartTime":1517951301833}}
{"body": {"column":26,"line":52,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    if root:\n        left_height = height(root.left)\n        right_height = height(root.right)\n        if right_height > \n        \n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1408,"fileType":"python","requestStartTime":1517951307283}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\nimport sys\n\ndef topView(root):\n    sys.\n\n\n","offset":181,"fileType":"python","requestStartTime":1517951584931}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\nimport sys\n\ndef topView(root):\n    sys.stdout.\n\n\n","offset":188,"fileType":"python","requestStartTime":1517951591219}}
{"body": {"column":30,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\nimport sys\n\ndef topView(root):\n    sys.stdout.write(str(root.))\n\n\n","offset":203,"fileType":"python","requestStartTime":1517951597394}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\nimport sys\n\ndef topView(root):\n    sys.stdout.write(str(root.data) + ' ')\n    if root.\n    \n\n\n","offset":228,"fileType":"python","requestStartTime":1517951611114}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\nimport sys\n\ndef topView(root):\n    sys.stdout.write(str(root.data) + ' ')\n    if root.right:\n        topView(root.)\n    \n\n\n","offset":256,"fileType":"python","requestStartTime":1517951622154}}
{"body": {"column":21,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef bubbleSorting(arr):\n    # Complete this function\n    i=0\n    while i < len(arr):\n        for a in xrange(0,len(arr)-1):\n            if int(arr[a]) > int(arr[a+1]):\n                arr[a], arr[a+1] = arr[a+1], arr[a]\n        i+=1\n    return arr\n\ndef bigSorting(arr):\n    # Complete this function\n    left = int(arr[0])\n    left_arr = []\n    for a in arr:\n        if int(a) < left:\n            left_arr.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in xrange(n):\n        arr_t = str(raw_input().strip())\n        arr.append(arr_t)\n    result = bigSorting(arr)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":434,"fileType":"python","requestStartTime":1517951700396}}
{"body": {"column":23,"line":23,"wordToComplete":"a","code":"\n#!/bin/python\n\nimport sys\n\ndef bubbleSorting(arr):\n    # Complete this function\n    i=0\n    while i < len(arr):\n        for a in xrange(0,len(arr)-1):\n            if int(arr[a]) > int(arr[a+1]):\n                arr[a], arr[a+1] = arr[a+1], arr[a]\n        i+=1\n    return arr\n\ndef bigSorting(arr):\n    # Complete this function\n    left = int(arr[0])\n    left_arr = []\n    for a in arr:\n        if int(a) < left:\n            left_arr.append(a)\n        else:\n            right_arr.a\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = []\n    arr_i = 0\n    for arr_i in xrange(n):\n        arr_t = str(raw_input().strip())\n        arr.append(arr_t)\n    result = bigSorting(arr)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":481,"fileType":"python","requestStartTime":1517951707511}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef degreeOfArray(arr):\n    degree = 0\n    for i in arr:\n        arr.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    arr_cnt = 0\n    arr_cnt = int(raw_input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        arr_item = int(raw_input());\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = degreeOfArray(arr);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":140,"fileType":"python","requestStartTime":1517951715820}}
{"body": {"column":25,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef degreeOfArray(arr):\n    degree = 0\n    for i in arr:\n        if arr.count(i) >\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    arr_cnt = 0\n    arr_cnt = int(raw_input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        arr_item = int(raw_input());\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = degreeOfArray(arr);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":153,"fileType":"python","requestStartTime":1517951724226}}
{"body": {"column":25,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef degreeOfArray(arr):\n    degree = 0\n    for i in arr:\n        if arr.count(i) > degree:\n            degree = arr.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    arr_cnt = 0\n    arr_cnt = int(raw_input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        arr_item = int(raw_input());\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = degreeOfArray(arr);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":187,"fileType":"python","requestStartTime":1517951732733}}
{"body": {"column":37,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    \n    URL = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + '&page=1'\n    titles = []\n    print URL\n    data = json.loads(urllib2.urlopen(URL).read())\n    for movie in data['data']:\n        titles.append(movie['Title'].('ascii', 'ignore'))\n    \n    print titles\n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":371,"fileType":"python","requestStartTime":1517951984215}}
{"body": {"column":15,"line":22,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport colllection\ndef countPairs(numbers, k):\n    \"\"\"\n    \n    numbers = list(set((numbers)))\n    count =0\n    n=len(numbers)\n    for i in range(n):\n        for j in range(i,n):\n            if numbers[i] - numbers[j] ==k or numbers[j] - numbers[i] ==k :\n                count+=1\n    return count\n    \"\"\"\n    \n    count =0 \n    c= Counter.\n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    numbers_cnt = 0\n    numbers_cnt = int(raw_input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(raw_input());\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(raw_input());\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":409,"fileType":"python","requestStartTime":1517952211718}}
{"body": {"column":18,"line":22,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport colllection\ndef countPairs(numbers, k):\n    \"\"\"\n    \n    numbers = list(set((numbers)))\n    count =0\n    n=len(numbers)\n    for i in range(n):\n        for j in range(i,n):\n            if numbers[i] - numbers[j] ==k or numbers[j] - numbers[i] ==k :\n                count+=1\n    return count\n    \"\"\"\n    \n    count =0 \n    c= collection.\n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    numbers_cnt = 0\n    numbers_cnt = int(raw_input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(raw_input());\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(raw_input());\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":412,"fileType":"python","requestStartTime":1517952216609}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport colllection\ndef countPairs(numbers, k):\n    \"\"\"\n    \n    numbers = list(set((numbers)))\n    count =0\n    n=len(numbers)\n    for i in range(n):\n        for j in range(i,n):\n            if numbers[i] - numbers[j] ==k or numbers[j] - numbers[i] ==k :\n                count+=1\n    return count\n    \"\"\"\n    \n    count =0 \n    c= collection.Counter(numbers)\n    for i in c:\n        if k>\n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    numbers_cnt = 0\n    numbers_cnt = int(raw_input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(raw_input());\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    k = int(raw_input());\n\n    res = countPairs(numbers, k);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":458,"fileType":"python","requestStartTime":1517952239121}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef degreeOfArray(arr):\n    def countDegree(subarr):\n        degree = 0\n        for i in subarr:\n            if subarr.count(i) > degree:\n                degree = arr.count(i)\n    max_degree = countDegree(subarr)\n    i = 0\n    j = len(arr)\n    len_arr = []\n    while i!=j:\n        degree = countDegree(arr[i:j])\n        if degree==max_degree:\n            len_arr.\n        \n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    arr_cnt = 0\n    arr_cnt = int(raw_input())\n    arr_i = 0\n    arr = []\n    while arr_i < arr_cnt:\n        arr_item = int(raw_input());\n        arr.append(arr_item)\n        arr_i += 1\n\n\n    res = degreeOfArray(arr);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":434,"fileType":"python","requestStartTime":1517952340414}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    URL = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr\n    print URL\n    # I am unfamiliar with urllib2 so I googled the urllib2 documentation for this below\n    response = urllib2.urlopen(URL)\n    html = response.read()\n    json_response = json.\n    \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":394,"fileType":"python","requestStartTime":1517952415377}}
{"body": {"column":30,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    URL = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr+\"&page=\"+1\n\n    # I am unfamiliar with urllib2 so I googled the urllib2 documentation for this below\n    response = urllib2.urlopen(URL)\n    html = response.read()\n    json_response = json.loads(html)\n    print json_response\n    for page in json_response.\n    \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":458,"fileType":"python","requestStartTime":1517952575146}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"import math\nfrom math import pow\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = real;\n        self.imaginary = imaginary;\n    def __add__(self, no):\n        return Complex(self.real + no.real, self.imaginary + no.imaginary);\n    def __sub__(self, no):\n        return Complex(self.real - no.real, self.imaginary - no.imaginary);\n    def __mul__(self, no):\n        return Complex(self.real*no.real - self.imaginary*no.imaginary,self.real*no.imaginary+no.real*self.imaginary);\n    def __div__(self, no):\n        x = float(no.real ** 2 + no.imaginary ** 2)\n        y = self.Complex(no.real, -no.imaginary)\n        try:\n            real = y.real / x\n            imaginary = y.imaginary / x\n            return Complex(real, imaginary)\n        except ZeroDivisionError as e:\n            print e\n            return None\n    def mod(self):\n        return complex(pow(self.real**2+self.imaginary**2, 0.5), 0)\n    def __str__(self, precision=2):\n        return str((\"%.\"+\"%df\"%precision)%float(self.real))+('+' if self.imaginary >=0 else '-')+str((\"%.\"+\"%df\"%precision)%float(abs(self.imag)))+'i'\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n\n\n\nif __name__ == '__main__':\n    c = map(float, raw_input().split())\n    d = map(float, raw_input().split())\n    x = Complex(*c)\n    y = Complex(*d)\n    print '\\n'.join(map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]))\n","offset":608,"fileType":"python","requestStartTime":1517952590690}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef revisedRussianRoulette(doors):\n    # Complete this function\n    min = 0\n    max = 0\n    \n    min = 3\n    max = doorlist.count('1')\n        \n    return [min, max];\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    doors = map(int, raw_input().strip().split(' '))\n    result = revisedRussianRoulette(doors)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":153,"fileType":"python","requestStartTime":1517952705065}}
{"body": {"column":33,"line":10,"wordToComplete":"https://jsonmock.'","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    q_string = 'https://jsonmock.'\n    req = urllib2.Request('https://jsonmock.hackerrank.com/api/movies/search/?Title=spiderman')\n    response = urllib2.urlopen(req)\n    the_page = response.read()\n    d = json.loads(the_page)\n    print d['total_pages']\n    print len(d['data'])\n    #print d['data'][0]['Title']\n    titles = []\n    #store all Titles to an array\n    for i in range(1, len(d['data'])):\n        titles.append(d['data'][i]['Title'])\n    print titles\n    #sort\n    return sorted(titles)\n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":159,"fileType":"python","requestStartTime":1517952801922}}
{"body": {"column":41,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\n\ndef  getMovieTitles(substr):\n    \n    movie_list = []\n    \n    URL = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+substr+\"&page=\"+str(1)\n\n    # I am unfamiliar with urllib2 so I googled the urllib2 documentation for this below\n    response = urllib2.urlopen(URL)\n    html = response.read()\n    json_response = json.loads(html)\n    for movie in json_response['data']:\n        movie_list.append(movie['Title'].)\n     \n    print movie_list\n    return movie_list.sort()\n    \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getMovieTitles(_substr)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":520,"fileType":"python","requestStartTime":1517952820920}}
{"body": {"column":31,"line":8,"wordToComplete":"non-metal acid.\"","code":"\n#!/bin/python\n\nimport sys\n\ndef acidNaming(acid_name):\n    # Complete this function\n    if acid_name in \"hydro\":\n        return \"non-metal acid.\"\n    return names\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        acid_name = raw_input().strip()\n        result = acidNaming(acid_name)\n        print result\n\n\n\n","offset":145,"fileType":"python","requestStartTime":1517953509823}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for data in datafeed:\n        data.\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":229,"fileType":"python","requestStartTime":1517953554623}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for data in datafeed:\n        if(data.)\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":232,"fileType":"python","requestStartTime":1517953568986}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for data in datafeed:\n        if(data.split(';')[1] != \"START\"):\n            data.    \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":276,"fileType":"python","requestStartTime":1517953614533}}
{"body": {"column":28,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].\n        if(datafeed[i].split(';')[1] != \"START\"):\n            {datafeed[i].split(';')[0],     \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":253,"fileType":"python","requestStartTime":1517953711886}}
{"body": {"column":44,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            {\"Name\":datum[0],\"ID\":{datum[1].     \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":341,"fileType":"python","requestStartTime":1517953837017}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.{\"name\":datum[0],\"ID\":{datum[1].split(','),\n                                   \"line_num\": i}     \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":321,"fileType":"python","requestStartTime":1517953908567}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"#!/bin/python\n\n#!/bin/python\ndef quick_sort(ar):\n    low=[];\n    equal=[];\n    high=[];\n    \n    if len(ar) > 1:\n        pivot = ar[0];\n        for x in range(0, len(ar)):\n            if ar[x] < pivot:\n                low.append(ar[x]);\n            elif ar[x] == pivot:\n                equal.\n            elif ar[x] > pivot:\n                high.append(ar[x]);\n        print(ar);\n        return quick_sort(low)+pivot+quick_sort(high);\n    else:\n        return ar;\n    \n\nm = input()\nar = [int(i) for i in raw_input().strip().split()]\nquick_sort(ar)\n\n\nm = input()\nar = [int(i) for i in raw_input().strip().split()]\nquick_sort(ar)\n","offset":293,"fileType":"python","requestStartTime":1517953975039}}
{"body": {"column":28,"line":29,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef degreeOfArray(arr):\n    def countDegree(subarr):\n        degree = 0\n        for i in subarr:\n            if subarr.count(i) > degree:\n                degree = subarr.count(i)\n        return degree\n    max_degree = countDegree(arr)\n    i = 0\n    j = len(arr)\n    len_arr = len(arr)\n    #len_arr = []\n    degree=1\n    while degree!=0:\n        degree = countDegree(arr[i:j])\n        if degree==max_degree:\n            if len(arr[i:j])<len_arr:\n                len_arr = len(arr[i:j])\n                #check left\n                if arr[i:j].\n        \n        \n        \n        \n        degree = countDegree(arr[i:j])\n        if degree==max_degree:\n            if len(arr[i:j])<len_arr:\n                len_arr = len(arr[i:j])\n            #len_arr.append(len(arr[i:j]))\n            i+=1\n        else:\n            i-=1\n            j-=1\n    return len_arr\n    \n        \n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_size = int(raw_input())\n\n    arr = []\n    for _ in xrange(arr_size):\n        arr_item = int(raw_input())\n        arr.append(arr_item)\n\n    res = degreeOfArray(arr)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":651,"fileType":"python","requestStartTime":1517954177452}}
{"body": {"column":42,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]] = [].\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    for i in range(len(job_fin_vec)):\n        \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":444,"fileType":"python","requestStartTime":1517954526657}}
{"body": {"column":37,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]].\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    for i in range(len(job_fin_vec)):\n        \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":439,"fileType":"python","requestStartTime":1517954536776}}
{"body": {"column":28,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\nN, M = map(int, raw_input().)\n\n","offset":55,"fileType":"python","requestStartTime":1517954668248}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve01(aa,ab,zx):\n    print zx\n    print aa\n    print ab\n    return 0\n\n\ng = int(raw_input().strip())\nfor a0 in xrange(g):\n    n,m,x = raw_input().strip().split(' ')\n    n,m,x = [int(n),int(m),int(x)]\n    a = map(int, raw_input().strip().split(' '))\n    b = map(int, raw_input().strip().split(' '))\n    # your code goes here\n    res=solve01(a.,b,x)\n    print res\n\n\n","offset":376,"fileType":"python","requestStartTime":1517954667846}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nN, M = map(int, raw_input().split())\nA = numpy.\n\n","offset":74,"fileType":"python","requestStartTime":1517954681092}}
{"body": {"column":42,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {\"Z\":[2,3]}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]] = [].\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    for i in range(len(job_fin_vec)):\n        return i        \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":453,"fileType":"python","requestStartTime":1517954682081}}
{"body": {"column":38,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nN, M = map(int, raw_input().split())\nA = numpy.array([map(int, raw_input().)])\n\n","offset":102,"fileType":"python","requestStartTime":1517954690563}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy\nN, M = map(int, raw_input().split())\nA = numpy.array([map(int, raw_input().split()) for _ in xrange(N)])\nprint numpy.\n\n","offset":144,"fileType":"python","requestStartTime":1517954709342}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"import numpy\nimport numpy\nN, M = map(int, raw_input().split())\nA = numpy.array([map(int, raw_input().split()) for _ in xrange(N)])\nprint numpy.mean(A, axis = 1)\nprint numpy.\n\n","offset":174,"fileType":"python","requestStartTime":1517954720679}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"import numpy\nimport numpy\nN, M = map(int, raw_input().split())\nA = numpy.array([map(int, raw_input().split()) for _ in xrange(N)])\nprint numpy.mean(A, axis = 1)\nprint numpy.var(A, axis = 0)\nprint numpy.\n\n","offset":203,"fileType":"python","requestStartTime":1517954735375}}
{"body": {"column":6,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve01(aa,ab,zx):\n    print zx\n    print aa\n    aa.reverse()\n    print aa\n    print ab\n    return 0\n\n\ng = int(raw_input().strip())\nfor a0 in xrange(g):\n    n,m,x = raw_input().strip().split(' ')\n    n,m,x = [int(n),int(m),int(x)]\n    a = map(int, raw_input().strip().split(' '))\n    b = map(int, raw_input().strip().split(' '))\n    # your code goes here\n    a.\n    res=solve01(a,b,x)\n    print res\n\n\n","offset":394,"fileType":"python","requestStartTime":1517954778800}}
{"body": {"column":6,"line":22,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve01(aa,ab,zx):\n    print zx\n    print aa\n    aa.reverse()\n    print aa\n    print ab\n    return 0\n\n\ng = int(raw_input().strip())\nfor a0 in xrange(g):\n    n,m,x = raw_input().strip().split(' ')\n    n,m,x = [int(n),int(m),int(x)]\n    a = map(int, raw_input().strip().split(' '))\n    b = map(int, raw_input().strip().split(' '))\n    # your code goes here\n    a.reverse()\n    b.\n    res=solve01(a,b,x)\n    print res\n\n\n","offset":410,"fileType":"python","requestStartTime":1517954787663}}
{"body": {"column":37,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = {\"Z\":[2,3]}\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]].(\"CAT\")\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    #for i in range(len(job_fin_vec)):\n     \n    for i in job_start_dict:\n        return job_start_dict[i]\n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":448,"fileType":"python","requestStartTime":1517954830958}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":199,"fileType":"python","requestStartTime":1517954880776}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.count(max_elem)\n        elements.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":232,"fileType":"python","requestStartTime":1517954892124}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.count(max_elem)\n        while element.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":237,"fileType":"python","requestStartTime":1517954927964}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.count(max_elem)\n        while elements.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":238,"fileType":"python","requestStartTime":1517954928600}}
{"body": {"column":21,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.count(max_elem)\n        while elements.count(max_elem)!=0:\n            elements.\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":279,"fileType":"python","requestStartTime":1517954944369}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    def removeAll(elem):\n        while elements.\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.count(max_elem)\n        while elements.count(max_elem)!=0:\n            elements.remove(max_elem)\n        max_plus1 = max_elem+1\n        max_minus1 = max_elem-1\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":144,"fileType":"python","requestStartTime":1517955017353}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef maxPoints(elements):\n    def removeAll(elem):\n        while elements.count(elem)!=0:\n            elements.\n    points = 0\n    while len(elements)!=0:\n        max_elem = max(elements)\n        points += elements.count(max_elem)\n        while elements.count(max_elem)!=0:\n            elements.remove(max_elem)\n        max_plus1 = max_elem+1\n        max_minus1 = max_elem-1\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    elements_cnt = 0\n    elements_cnt = int(raw_input())\n    elements_i = 0\n    elements = []\n    while elements_i < elements_cnt:\n        elements_item = int(raw_input());\n        elements.append(elements_item)\n        elements_i += 1\n\n\n    res = maxPoints(elements);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":181,"fileType":"python","requestStartTime":1517955028054}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef subwords(word, subD, cnt, maxcnt, completed):\n    if completed.\n    if word not in subD:\n        return 0\n\n    cnt += 1\n    maxcnt[0] = cnt\n    for i in xrange(len(word)):\n        sub_word = word[:i] + word[i+1:]\n        subwords(sub_word, subD,  cnt, maxcnt)\n\n    return maxcnt[0]\n        \ndef longestChain(words):\n    # Convert list of words to a set\n    subD = set(words)\n    \n    # maxV will store max chain count\n    maxV = 0\n\n    completed = {}\n    # Iterate through each word\n    for word in words:\n        # get chain count for the word\n        chain_cnt = subwords(word, subD,  0, [0], completed)\n        print word, chain_cnt\n        \n        # choose maximum between previous maxV and chain count for the current word\n        maxV = max(maxV, chain_cnt)\n    return maxV\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    words_cnt = 0\n    words_cnt = int(raw_input())\n    words_i = 0\n    words = []\n    while words_i < words_cnt:\n        try:\n            words_item = raw_input()\n        except:\n            words_item = None\n        words.append(words_item)\n        words_i += 1\n\n\n    res = longestChain(words);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":137,"fileType":"python","requestStartTime":1517955048150}}
{"body": {"column":25,"line":2,"wordToComplete":"","code":"import numpy\nimport numpy\nP = map(int, raw_input().)\n\n","offset":52,"fileType":"python","requestStartTime":1517955818003}}
{"body": {"column":6,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\nP = map(float, raw_input().split())\nnumpy.\n\n","offset":69,"fileType":"python","requestStartTime":1517955834838}}
{"body": {"column":71,"line":34,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nfrom collections import defaultdict\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = defaultdict(list)\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]].append(i)\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    higest_id = -1\n    highest_name = \"\"\n    suspect_vec = []\n    for i in range(len(job_fin_vec)):\n        #Update higest_id\n        if(job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1] >= higest_id):\n            higest_id = job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1]\n            highest_name = job_fin_vec[i]['name']\n        \n        #Check id > highest_id\n        if(job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1] < highest_id):\n            #Check if it began before previous highest ended\n            if(job_start_dict[job_fin_vec[i]['name']][0] < job_fin_vec.):\n                \n                \n    \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":1147,"fileType":"python","requestStartTime":1517955892354}}
{"body": {"column":28,"line":35,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nfrom collections import defaultdict\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = defaultdict(list)\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]].append(i)\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    higest_id = -1\n    highest_name = \"\"\n    suspect_vec = []\n    for i in range(len(job_fin_vec)):\n        #Update higest_id\n        if(job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1] >= higest_id):\n            highest_id = job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1]\n            highest_name = job_fin_vec[i]['name']\n        \n        #Check id > highest_id\n        if(job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1] < highest_id):\n            #Check if it began before previous highest ended\n            if(job_start_dict[job_fin_vec[i]['name']][0] < job_fin_vec.find(highest_name)['line_num']):\n                suspect_vec.                \n                \n    \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":1209,"fileType":"python","requestStartTime":1517956016611}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\ncube = lambda x: # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    flist = []\n    for i in range(n):\n        if n = 0:\n            flist.\nif __name__ == '__main__':\n    n = int(raw_input())\n    print map(cube, fibonacci(n))\n","offset":185,"fileType":"python","requestStartTime":1517956235993}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef calculateScore(text, prefix, suffix):\n    def calculatePrefixScore(sub, prefix):\n        # Returns the prefix_score of a given substring\n        if prefix.\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        text = raw_input()\n    except:\n        text = None\n\n    try:\n        prefix = raw_input()\n    except:\n        prefix = None\n\n    try:\n        suffix = raw_input()\n    except:\n        suffix = None\n\n    res = calculateScore(text, prefix, suffix);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":230,"fileType":"python","requestStartTime":1517956576205}}
{"body": {"column":17,"line":27,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nfrom collections import defaultdict\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = defaultdict(list)\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1].split(','), \"line_num\": i})\n        else:\n            job_start_dict[datum[0]].append(i)\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    higest_id = -1\n    highest_name = \"\"\n    suspect_vec = []\n    test_vec = []\n    for i in range(len(job_fin_vec)):\n        test_vec. job_fin_vec[i]['name']\n        #Update higest_id\n        if(job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1] >= higest_id):\n            highest_id = job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1]\n            highest_name = job_fin_vec[i]['name']\n        \n        #Check id > highest_id\n        return\n        if(job_fin_vec[i]['ID'][len(job_fin_vec[i]['ID']) - 1] < highest_id):\n            #Check if it began before previous highest ended\n            if(job_start_dict[job_fin_vec[i]['name']][0] < job_fin_vec.find(highest_name)['line_num']):\n                suspect_vec.append(job_start_dict[job_fin_vec[i]['name']][0] + \";\" + job_fin_vec[i][\"name\"] + \"SHORTENED_JOB\")\n     \n    return suspect_vec    \n                \n    \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":702,"fileType":"python","requestStartTime":1517956584577}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    def getArea(self):\n        return this.\n    \n    # Function name: getPerimeter(self)\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(raw_input()), int(raw_input()))\n\n    print rec.length\n    print rec.width\n    print rec.getPerimeter()\n    print rec.getArea()\n","offset":753,"fileType":"python","requestStartTime":1517956740944}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"import os\nimport sys\n# This is the class definition in Python. \n# This is how you define objects.\nclass Rectangle(object):\n    length = 0\n    width = 0\n    \n    # This is an initializtion function for a class in Python.\n    # \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        # Fill in this function to define a new object\n        # Hint: Each object has its own length and width.\n        # Use the self keyword to initialize the length and width\n        \n    # We are able to create class functions for use outside of the class.\n    # This is normally to modify class variables.\n    # Create two functions below to calculate the perimeter and area.\n    \n    def getArea(self):\n        return self.length*self.width\n    \n    def getPerimeter(self):\n        return self.\ndef newRectangle(length, width):\n    rectangle = Rectangle(length, width)\n    return rectangle\n\nif __name__ == \"__main__\":\n    rec = newRectangle(int(raw_input()), int(raw_input()))\n\n    print rec.length\n    print rec.width\n    print rec.getPerimeter()\n    print rec.getArea()\n","offset":824,"fileType":"python","requestStartTime":1517956874976}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nfrom collections import defaultdict\n\ndef findViolations(datafeed):\n    job_fin_vec = []\n    job_start_dict = defaultdict(list)\n    \n    #Read in data into data structures\n    for i in range(len(datafeed)):\n        datum = datafeed[i].split(';')\n        retun datafeed[i+1].\n        if(datum[1] != \"START\"):\n            job_fin_vec.append({\"name\":datum[0],\"ID\": datum[1], \"line_num\": i})\n        else:\n            job_start_dict[datum[0]].append(i)\n\n    #Iterate through job_fin_vec to find potential shortened jobs\n    higest_id = -1\n    highest_name = \"\"\n    suspect_vec = []\n    test_vec = []\n    for i in range(len(job_fin_vec)):\n        #Update higest_id\n        return job_fin_vec[i+1]['ID']\n        if(job_fin_vec[i]['ID'][0] >= higest_id):\n            highest_id = job_fin_vec[i]['ID'][0]\n            highest_name = job_fin_vec[i]['name']\n        \n        #Check id > highest_id\n        if(job_fin_vec[i]['ID'][0] < highest_id):\n            return job_fin_vec[i]['name']\n            #Check if it began before previous highest ended\n            if(job_start_dict[job_fin_vec[i]['name']][0] < job_fin_vec.find(highest_name)['line_num']):\n                suspect_vec.append(job_start_dict[job_fin_vec[i]['name']][0] + \";\" + job_fin_vec[i][\"name\"] + \";\" + \"SHORTENED_JOB\")\n     \n               \n    \n       \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    datafeed_cnt = 0\n    datafeed_cnt = int(raw_input())\n    datafeed_i = 0\n    datafeed = []\n    while datafeed_i < datafeed_cnt:\n        try:\n            datafeed_item = raw_input()\n        except:\n            datafeed_item = None\n        datafeed.append(datafeed_item)\n        datafeed_i += 1\n\n\n    res = findViolations(datafeed);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":343,"fileType":"python","requestStartTime":1517957187257}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef calculateScore(text, prefix, suffix):\n    def calculatePrefixScore(sub, prefix):\n        # Returns the prefix_score of a given substring\n        index = prefix.\n    substrings = [text[i:j+1] for i in xrange(len(text)) for j in xrange(i, len(text))]\n    prefix_score = calculatePrefixScore(substrings[0], prefix)\n    suffix_score = calculatePrefixScore(suffix, substrings[0])\n    score = prefix_score + suffix_score\n    maxSubstringScore = (substrings[0], score)\n    for sub in substrings[1:]:\n        prefix_score = calculatePrefixScore(sub, prefix)\n        suffix_score = calculatePrefixScore(suffix, sub)\n        score = prefix_score + suffix_score\n        if score > maxSubstringScore[1]:\n            maxSubstringScore = (sub, score)\n        elif score == maxSubstringScore[1] and sub < maxSubstringScore[0]:\n            maxSubstringScore = (sub, score)\n    print maxSubstringScore[0], maxSubstringScore[1]\n    return maxSubstringScore[0]\n        \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        text = raw_input()\n    except:\n        text = None\n\n    try:\n        prefix = raw_input()\n    except:\n        prefix = None\n\n    try:\n        suffix = raw_input()\n    except:\n        suffix = None\n\n    res = calculateScore(text, prefix, suffix);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":235,"fileType":"python","requestStartTime":1517958017791}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef factorial(n):\n    while n > \n    \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    result = factorial(n)\n    print result\n\n\n","offset":61,"fileType":"python","requestStartTime":1517958021962}}
{"body": {"column":6,"line":39,"wordToComplete":"","code":"\n# read the string filename\nfilename = raw_input()\n\ndef parse_string(s):\n    \n    start_ind = s.find('GET')+4\n    if (s[start_ind:].find('200') != -1):\n        #Parse GIF\n        if(s.find(\"GIF\") != -1):\n            end_ind = s.find('GIF')+3\n        #Parse gif\n        elif(s.find('gif') != -1):\n            end_ind = s.find('gif')+3\n        else:\n            end_ind = 0\n            \n        substring = s[start_ind:end_ind]\n        gif_file = substring.rfind('/')+1\n        \n        return substring[gif_file:]\n    \n    return None\n    \nwith open(filename) as f:\n    lines = f.readlines()\n    y = list(map(parse_string, lines))\n    #Remove empty strings\n    y = filter(None, y)\n    #Remove duplicates and sort\n    y = sorted(list(set(y)))\n    \n    new_file_name = 'gifs_' + filename\n    with open(new_file_name, \"w\") as w:\n        for item in y:\n            print item\n            w.write(item + \"\\n\")\n            w.close()\n            \n    f.    \n\n","offset":946,"fileType":"python","requestStartTime":1517958593705}}
{"body": {"column":20,"line":2,"wordToComplete":"","code":"import textwrap\ndef wrap(string, max_width):\n    return textwrap.\nif __name__ == '__main__':\n    string, max_width = raw_input(), int(raw_input())\n    result = wrap(string, max_width)\n    print result\n","offset":66,"fileType":"python","requestStartTime":1517958830211}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef factorial(n):\n    while n > \n        return n * (n - 1)\n    \n    \n    \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    result = factorial(n)\n    print result\n\n\n","offset":61,"fileType":"python","requestStartTime":1517958934320}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nN, M = map(int,raw_input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in xrange(1,N,2): \n    print \"-\" + \".\"#Enter Code Here\nprint #Enter Code Here\nfor i in xrange(N-2,-1,-2): \n    print #Enter Code Here\n\n\n","offset":162,"fileType":"python","requestStartTime":1517959025323}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"\nN, M = map(int,raw_input().split()) # More than 6 lines of code will result in 0 score. Blank lines are not counted.\nfor i in xrange(1,N,2): \n    print \"-\" + \".\" + \"|\" + \".\"#Enter Code Here\nprint #Enter Code Here\nfor i in xrange(N-2,-1,-2): \n    print #Enter Code Here\n\n\n","offset":174,"fileType":"python","requestStartTime":1517959037576}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef factorial(n):\n    while n > 0:\n        \n        if n >\n        num = n - 1\n        \n        return \n        \n        \n        \n    \n    \n    \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    result = factorial(n)\n    print result\n\n\n","offset":87,"fileType":"python","requestStartTime":1517959385126}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef factorial(n):\n    while n > 0:\n        og = n\n        if n > \n        num = n - 1\n        \n        return \n        \n        \n        \n    \n    \n    \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    result = factorial(n)\n    print result\n\n\n","offset":94,"fileType":"python","requestStartTime":1517959413378}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        else:\n        op[i] = expression[i]\n        if len(char) > 2:\n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":382,"fileType":"python","requestStartTime":1517959518226}}
{"body": {"column":17,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.\n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n        op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":179,"fileType":"python","requestStartTime":1517960065637}}
{"body": {"column":6,"line":13,"wordToComplete":"a.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport math\n\ndef countUneatenLeaves(n, a):\n    \"\"\"\n    # Memory Error\n    leavesEaten = set()\n    a.\n    for jump in a:\n        i = jump\n        while i <= n:\n            leavesEaten.add(i)\n            i += jump\n    return n - len(leavesEaten)\n    \"\"\"\n    \"\"\"\n    # Timeout\n    uneatenLeaves = 0\n    for i in xrange(1, n + 1):\n        divisible = False\n        for jump in a:\n            if i % jump == 0:\n                divisible = True\n                break\n        if not divisible:\n            uneatenLeaves += 1\n    return uneatenLeaves\n    \"\"\"\n    # Attempt at using gcd\n    uneatenLeaves = 0\n    a = set(a)\n    for i in xrange(1, n + 1):\n        if math.gcd()\n    \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    n = int(raw_input());\n\n    a_cnt = 0\n    a_cnt = int(raw_input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        a_item = int(raw_input());\n        a.append(a_item)\n        a_i += 1\n\n\n    res = countUneatenLeaves(n, a);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":170,"fileType":"python","requestStartTime":1517960120108}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":241,"fileType":"python","requestStartTime":1517960151309}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":300,"fileType":"python","requestStartTime":1517960177940}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.iterms.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":307,"fileType":"python","requestStartTime":1517960179789}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":306,"fileType":"python","requestStartTime":1517960182045}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":366,"fileType":"python","requestStartTime":1517960206941}}
{"body": {"column":30,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":372,"fileType":"python","requestStartTime":1517960212117}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":426,"fileType":"python","requestStartTime":1517960227644}}
{"body": {"column":39,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(slef.)]\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":441,"fileType":"python","requestStartTime":1517960238781}}
{"body": {"column":39,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.)]\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":441,"fileType":"python","requestStartTime":1517960240773}}
{"body": {"column":28,"line":22,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\n\n\ndef  postfix_to_infix( expression):\n    class stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.)\n            \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           char[i] = expression[i]; \n        \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":504,"fileType":"python","requestStartTime":1517960261862}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef Wallet(bills, numberOfBills):\n    # Write your code here.\n    c=np.bills * numberOfBills\n    return c\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bills_size = int(raw_input())\n\n    bills = []\n    for _ in xrange(bills_size):\n        bills_item = int(raw_input())\n        bills.append(bills_item)\n\n    numberOfBills_size = int(raw_input())\n\n    numberOfBills = []\n    for _ in xrange(numberOfBills_size):\n        numberOfBills_item = int(raw_input())\n        numberOfBills.append(numberOfBills_item)\n\n    res = Wallet(bills, numberOfBills)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":181,"fileType":"python","requestStartTime":1517960272242}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef Wallet(bills, numberOfBills):\n    # Write your code here.\n    c=np.bills * np.numberOfBills\n    return c\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bills_size = int(raw_input())\n\n    bills = []\n    for _ in xrange(bills_size):\n        bills_item = int(raw_input())\n        bills.append(bills_item)\n\n    numberOfBills_size = int(raw_input())\n\n    numberOfBills = []\n    for _ in xrange(numberOfBills_size):\n        numberOfBills_item = int(raw_input())\n        numberOfBills.append(numberOfBills_item)\n\n    res = Wallet(bills, numberOfBills)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":192,"fileType":"python","requestStartTime":1517960275028}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef Wallet(bills, numberOfBills):\n    # Write your code here.\n    c= np.(bills,numberOfBills)\n    return c\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bills_size = int(raw_input())\n\n    bills = []\n    for _ in xrange(bills_size):\n        bills_item = int(raw_input())\n        bills.append(bills_item)\n\n    numberOfBills_size = int(raw_input())\n\n    numberOfBills = []\n    for _ in xrange(numberOfBills_size):\n        numberOfBills_item = int(raw_input())\n        numberOfBills.append(numberOfBills_item)\n\n    res = Wallet(bills, numberOfBills)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":182,"fileType":"python","requestStartTime":1517960554424}}
{"body": {"column":19,"line":27,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\nclass stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.items)\n\ndef  postfix_to_infix( expression):\n    mystack = stack()\n    \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           mystack.= expression[i]; \n        else:\n         op[i] = expression[i]\n        if len(char) >= 2:\n            h = char[len(char)]\n            char[len(char)]= op[len(op)]\n            char[len(char)+1]=h\n        \n            \n            \n            \n   \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":719,"fileType":"python","requestStartTime":1517960572510}}
{"body": {"column":19,"line":29,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\nclass stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.items)\n\ndef  postfix_to_infix( expression):\n    mystack = stack()\n    \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           mystack.push(expression[i]) \n        else:\n           mystack.\n            \n            \n            \n   \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":773,"fileType":"python","requestStartTime":1517960625248}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\ndef factorial(n):\n    num = 1\n    while n > \n    \n        \n        \n        \n    \n    \n    \n    \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    result = factorial(n)\n    print result\n\n\n","offset":74,"fileType":"python","requestStartTime":1517960630554}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\nclass stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.items)\n\ndef  postfix_to_infix( expression):\n    mystack = stack()\n    \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           mystack.push(expression[i]) \n        else:\n           op[i] = expression[i]\n        if len(char) >= 2:\n            mystack.\n        \n            \n            \n            \n   \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":834,"fileType":"python","requestStartTime":1517960641439}}
{"body": {"column":20,"line":32,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\nclass stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.items)\n\ndef  postfix_to_infix( expression):\n    mystack = stack()\n    \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           mystack.push(expression[i]) \n        else:\n           op[i] = expression[i]\n        if len(char) >= 2:\n            mystack.pop()\n            mystack.\n        \n            \n            \n            \n   \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":860,"fileType":"python","requestStartTime":1517960659886}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\nclass stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.items)\n\ndef  postfix_to_infix( expression):\n    mystack = stack()\n    \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           mystack.push(expression[i]) \n        else:\n           op[i] = expression[i]\n        if len(char) >= 2:\n            h=mystack.pop()\n            l=mystack.pop()\n            mystack.\n           \n            \n        \n            \n            \n            \n   \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":890,"fileType":"python","requestStartTime":1517960715312}}
{"body": {"column":20,"line":34,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport re\n\n# Complete the function below.\nclass stack:\n        def __init__(self):\n            self.items = []\n        def isEmpty(self):\n            return self.items == []\n        def push(self,iterm):\n            self.items.append(item)\n        def pop(self):\n            return self.items.pop()\n        def peek(self):\n            return self.items[len(self.iterms)-1]\n        def size(self):\n            return len(self.items)\n\ndef  postfix_to_infix( expression):\n    mystack = stack()\n    \n    \n    for i in range(len(expression)):\n        if expression[i] != \"+\" | expression[i] != \"-\" | expression[i] != \"*\" | expression[i] != \"/\" | expression[i] != \"^\":\n           mystack.push(expression[i]) \n        else:\n           op[i] = expression[i]\n        if len(char) >= 2:\n            h=mystack.pop()\n            l=mystack.pop()\n            mystack.push(h)\n            mystack.\n           \n            \n        \n            \n            \n            \n   \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n\n_expression = raw_input()\n\nres = postfix_to_infix(_expression);\n\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":918,"fileType":"python","requestStartTime":1517960724440}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    def Difference:\n        maximumDifference = 0\n        for element in self.__elements:\n            self.\n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":204,"fileType":"python","requestStartTime":1517960881129}}
{"body": {"column":39,"line":8,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    def Difference:\n        maximumDifference = 0\n        for e in self.__elements:\n            if self.elements[e] > self.\n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":220,"fileType":"python","requestStartTime":1517960899172}}
{"body": {"column":41,"line":9,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    def Difference:\n        maximumDifference = 0\n        for e in self.__elements:\n            if self.elements[e+1] > self.elements[e]:\n                maximumDifference = self.\n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":276,"fileType":"python","requestStartTime":1517960935085}}
{"body": {"column":62,"line":9,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    def Difference:\n        maximumDifference = 0\n        for e in self.__elements:\n            if self.elements[e+1] > self.elements[e]:\n                maximumDifference = self.elements[e+1] - self.\n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":297,"fileType":"python","requestStartTime":1517960944256}}
{"body": {"column":22,"line":19,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef minArea(x, y, k):\n    print(x)\n    print(y)\n    print(k)\n\n    minx = min(x)\n    maxx = max(x)\n    miny = min(y)\n    maxy = max(y)\n    length = abs(maxx - minx) + 2\n    height = abs(maxy - miny) + 2\n    print(\"length = \".) length\n    print height\n    area = max(length, height)^2\n    print area\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    x_cnt = 0\n    x_cnt = int(raw_input())\n    x_i = 0\n    x = []\n    while x_i < x_cnt:\n        x_item = int(raw_input());\n        x.append(x_item)\n        x_i += 1\n\n\n    y_cnt = 0\n    y_cnt = int(raw_input())\n    y_i = 0\n    y = []\n    while y_i < y_cnt:\n        y_item = int(raw_input());\n        y.append(y_item)\n        y_i += 1\n\n\n    k = int(raw_input());\n\n    res = minArea(x, y, k);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":295,"fileType":"python","requestStartTime":1517960949795}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef minArea(x, y, k):\n    print(x)\n    print(y)\n    print(k)\n\n    minx = min(x)\n    maxx = max(x)\n    miny = min(y)\n    maxy = max(y)\n    length = abs(maxx - minx) + 2\n    height = abs(maxy - miny) + 2\n    print(\"length = {}\"format(length)\n    print(\"heigth = {}\".\") height\n    area = max(length, height)^2\n    print area\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    x_cnt = 0\n    x_cnt = int(raw_input())\n    x_i = 0\n    x = []\n    while x_i < x_cnt:\n        x_item = int(raw_input());\n        x.append(x_item)\n        x_i += 1\n\n\n    y_cnt = 0\n    y_cnt = int(raw_input())\n    y_i = 0\n    y = []\n    while y_i < y_cnt:\n        y_item = int(raw_input());\n        y.append(y_item)\n        y_i += 1\n\n\n    k = int(raw_input());\n\n    res = minArea(x, y, k);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":335,"fileType":"python","requestStartTime":1517960971597}}
{"body": {"column":61,"line":11,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    def Difference:\n        maximumDifference = 0\n        for e in self.__elements:\n            if self.__elements[e+1] > self.__elements[e]:\n                maximumDifference = self.__elements[e+1] - self.__elements[e]\n            else:\n                maximumDifference = self.__elements[e] -self.\n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":396,"fileType":"python","requestStartTime":1517960998900}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef minArea(x, y, k):\n    print(x)\n    print(y)\n    print(k)\n\n    minx = min(x)\n    maxx = max(x)\n    miny = min(y)\n    maxy = max(y)\n    length = abs(maxx - minx) + 2\n    height = abs(maxy - miny) + 2\n    print(\"length = {}\".format(length))\n    print(\"heigth = {}\".format(height))\n    area = max(length, height)^2\n    print(\"area = {}\".format(area))\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    x_cnt = 0\n    x_cnt = int(raw_input())\n    x_i = 0\n    x = []\n    while x_i < x_cnt:\n        x_item = int(raw_input());\n        x.append(x_item)\n        x_i += 1\n\n\n    y_cnt = 0\n    y_cnt = int(raw_input())\n    y_i = 0\n    y = []\n    while y_i < y_cnt:\n        y_item = int(raw_input());\n        y.append(y_item)\n        y_i += 1\n\n\n    k = int(raw_input());\n\n    res = minArea(x, y, k);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":297,"fileType":"python","requestStartTime":1517961014146}}
{"body": {"column":37,"line":10,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        for e in self.__elements:\n\n            maximumDifference = self.\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":229,"fileType":"python","requestStartTime":1517961526297}}
{"body": {"column":58,"line":10,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        for e in self.__elements:\n\n            maximumDifference = self.__elements(e) - self.\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":250,"fileType":"python","requestStartTime":1517961535207}}
{"body": {"column":26,"line":8,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        for l in len(self.)\n        for e in self.__elements:\n            maximumDifference = self.__elements[e] - self.__elements[e+1]\n            if maximumDifference < 0:\n                maximumDifference *= -1\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":183,"fileType":"python","requestStartTime":1517961663380}}
{"body": {"column":32,"line":8,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        for l in range(len(self.:\n            for e in self.__elements:\n                maximumDifference = self.__elements[e] - self.__elements[e+1]\n                if maximumDifference < 0:\n                    maximumDifference *= -1\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":189,"fileType":"python","requestStartTime":1517961753838}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        temp = 0\n        for l in range(self.)\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":202,"fileType":"python","requestStartTime":1517961886895}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        temp = 0\n        for l in range(self.__elements):\n            temp = self.\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":239,"fileType":"python","requestStartTime":1517961911515}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        temp = 0\n        for l in range(self.__elements):\n            temp = self.\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":239,"fileType":"python","requestStartTime":1517961912630}}
{"body": {"column":45,"line":10,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n    maximumDifference = 0\n\n    def computeDifference(self):\n        temp = 0\n        for l in range(self.__elements):\n            temp = self.__elements[l] - self.\n        return maximumDifference\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":260,"fileType":"python","requestStartTime":1517961948950}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.\n\n","offset":126,"fileType":"python","requestStartTime":1517961977159}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.\n\n","offset":153,"fileType":"python","requestStartTime":1517961980789}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.\n\n","offset":180,"fileType":"python","requestStartTime":1517961984261}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = []\n        self.\n\n","offset":203,"fileType":"python","requestStartTime":1517961987430}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.\n\n","offset":294,"fileType":"python","requestStartTime":1517962072310}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.\n    \n    \n    \n    \n    \n    \n\n","offset":368,"fileType":"python","requestStartTime":1517962126637}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nfor line in sys.\n\n","offset":112,"fileType":"python","requestStartTime":1517962131627}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":529,"fileType":"python","requestStartTime":1517962196929}}
{"body": {"column":27,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nfor line in sys.stdin:\n    operation, data = line.\n\n","offset":146,"fileType":"python","requestStartTime":1517962218626}}
{"body": {"column":26,"line":2,"wordToComplete":"","code":"\nnama = input()\nprint(\"Hai \" + nama + \"...\")     \n\n","offset":43,"fileType":"python","requestStartTime":1517964766149}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.\n\n","offset":174,"fileType":"python","requestStartTime":1517962235803}}
{"body": {"column":59,"line":17,"wordToComplete":"0.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = strl(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j])] for j in range(0.)\n\n","offset":446,"fileType":"python","requestStartTime":1517962465090}}
{"body": {"column":38,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = strl(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j])] for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].\n                else:\n             \n            idx += 1\n\n","offset":557,"fileType":"python","requestStartTime":1517962522802}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = strl(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j])] for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".\n\n","offset":738,"fileType":"python","requestStartTime":1517962588300}}
{"body": {"column":39,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = strl(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j])] for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".join(listhash.)\n\n","offset":752,"fileType":"python","requestStartTime":1517962599211}}
{"body": {"column":21,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nnumFolders = numShare + numConf\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = lineList[1]\n    folderObject = CowFolder()\n    folderCows = lineList[2]\n    \n    for j in range(int(folderCows)):\n        folderObject.\n    \n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":737,"fileType":"python","requestStartTime":1517962792003}}
{"body": {"column":26,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nnumFolders = numShare + numConf\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = lineList[1]\n    folderObject = CowFolder()\n    folderCows = lineList[2]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.\n    \n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":742,"fileType":"python","requestStartTime":1517962801755}}
{"body": {"column":25,"line":28,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = str(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j]) for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".join(listhash.values()),\n            elif strl not in listmap:\n                print \"{}\",\n            else:\n                print \"\".\n        else:\n            if strl in listmap:\n                for idx in listmap[strl]:\n                    listhash[idx] = \"\"\n\n","offset":869,"fileType":"python","requestStartTime":1517962979485}}
{"body": {"column":19,"line":55,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nnumFolders = numShare + numConf\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[child].\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1386,"fileType":"python","requestStartTime":1517963034384}}
{"body": {"column":19,"line":55,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        #self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nnumFolders = numShare + numConf\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folder[parent].folders[child].\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1387,"fileType":"python","requestStartTime":1517963055503}}
{"body": {"column":28,"line":55,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        #self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nnumFolders = numShare + numConf\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folder[parent].children.folders[child].\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1396,"fileType":"python","requestStartTime":1517963063920}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nip = input().\n\n","offset":41,"fileType":"python","requestStartTime":1517963087780}}
{"body": {"column":21,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nip = input().strip().\n\n","offset":49,"fileType":"python","requestStartTime":1517963091095}}
{"body": {"column":19,"line":56,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nnumFolders = numShare + numConf\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folder[parent].children.append(folders[child])\n    folders[child].\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1437,"fileType":"python","requestStartTime":1517963097165}}
{"body": {"column":3,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\n\nip = input().strip().split(' ')\nnp.\n\n","offset":69,"fileType":"python","requestStartTime":1517963104043}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"import numpy\nimport numpy as np\n\nip = input().strip().split(' ')\nnp.array(ip).\n\n","offset":79,"fileType":"python","requestStartTime":1517963112137}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = []\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folders.\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folder[parent].children.append(folders[child])\n    folders[child].parent = folder[parent]\n\n\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":599,"fileType":"python","requestStartTime":1517963183880}}
{"body": {"column":37,"line":59,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folder[parent].children.append(folders[child])\n    folders[child].parent = folder[parent]\n\nfor folderId, folderObject in folder.\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1477,"fileType":"python","requestStartTime":1517963241199}}
{"body": {"column":38,"line":59,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folder[parent].children.append(folders[child])\n    folders[child].parent = folder[parent]\n\nfor folderId, folderObject in folders.\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1478,"fileType":"python","requestStartTime":1517963242534}}
{"body": {"column":20,"line":60,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if folderObject.\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1513,"fileType":"python","requestStartTime":1517963259774}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":276,"fileType":"python","requestStartTime":1517963335586}}
{"body": {"column":17,"line":45,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1050,"fileType":"python","requestStartTime":1517963349397}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":298,"fileType":"python","requestStartTime":1517963397934}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":303,"fileType":"python","requestStartTime":1517963400342}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":339,"fileType":"python","requestStartTime":1517963414943}}
{"body": {"column":15,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":364,"fileType":"python","requestStartTime":1517963418781}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":403,"fileType":"python","requestStartTime":1517963428812}}
{"body": {"column":39,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\n\n\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":452,"fileType":"python","requestStartTime":1517963450019}}
{"body": {"column":26,"line":77,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\nleaves = []\ntraverse(root, leaves, set())\n\nfor leaf in leaves:\n    uncools = cows - leaf.\n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1915,"fileType":"python","requestStartTime":1517963522654}}
{"body": {"column":37,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\njsmap = {}\njshash = {}\n\ndef helper(jsobj, pos, idx):\n    for key in jsobj:\n        if key not in pos:\n            pos[key] = {}\n        if isinstance(jsobj[key], dict):\n            helper(jsobj[key], pos[key], idx)\n        else:\n            if jsobj[key] in pos[key]:\n                pos[key][jsobj[key]].\n\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = str(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j]) for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".join(listhash.values()),\n            elif strl not in listmap:\n                print \"{}\",\n            else:\n                print \"\".join([listhash[i] for i in listmap[str(l)]]),\n        else:\n            if strl in listmap:\n                for idx in listmap[strl]:\n                    listhash[idx] = \"\"\n    else:\n        if operation == \"add\":\n            jsmap[idx] = data\n            idx += 1\n        elif operation == \"get\":\n            \n        else:\n            \n        \n\n","offset":437,"fileType":"python","requestStartTime":1517963554061}}
{"body": {"column":12,"line":80,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\nleaves = []\ntraverse(root, leaves, set())\nres = set()\n\nfor leaf in leaves:\n    uncools = cows - leaf.cows\n    for uncool in uncools:\n        res.\n        \n\n\n    \n    \n    \n    \n    \n    \n\n","offset":1971,"fileType":"python","requestStartTime":1517963571447}}
{"body": {"column":27,"line":2,"wordToComplete":"","code":"\nn = int(raw_input())\narr = map(int, raw_input().)\n\n","offset":50,"fileType":"python","requestStartTime":1517963714013}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    a = map(int, raw_input().split())\n    \n    #max \n    m = None\n    r = None \n    for i in range(n):\n        for i == 0: #initially\n           m = a[i]\n        #Is it bigger than max\n        if a[i] > m:\n        #Assign the runner up\n            r = m \n        #Reassign the max\n            m = a[i]\n        #Is it bigger than the max\n        if m > \n\n\n","offset":406,"fileType":"python","requestStartTime":1517963740192}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    a = map(int, raw_input().split())\n    \n    #max \n    m = None\n    r = None \n    for i in range(n):\n        for i == 0: #initially\n           m = a[i]\n        #Is it bigger than max\n        if a[i] > m:\n        #Assign the runner up\n            r = m \n        #Reassign the max\n            m = a[i]\n        #Is it bigger than the max\n        if m > a[i] > \n\n\n","offset":413,"fileType":"python","requestStartTime":1517963745829}}
{"body": {"column":23,"line":88,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\nleaves = []\ntraverse(root, leaves, set())\nres = set()\n\nfor leaf in leaves:\n    uncools = cows - leaf.cows\n    for uncool in uncools:\n        res.add(uncool)\n\noutput = \"\"\nfor cowId in sorted(list(res)):\n    output += str(cowId) + \" \"\n\n#print(output[:-1])\nfor folderId, folderObject in folders.iteritems():\n    print(folderObject.\n        \n\n\n    \n    \n    \n    \n    \n    \n\n","offset":2154,"fileType":"python","requestStartTime":1517963783899}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    print(folder.)\n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\nleaves = []\ntraverse(root, leaves, set())\nres = set()\n\nfor leaf in leaves:\n    uncools = cows - leaf.cows\n    for uncool in uncools:\n        res.add(uncool)\n\noutput = \"\"\nfor cowId in sorted(list(res)):\n    output += str(cowId) + \" \"\n\nprint(output[:-1])\n\n        \n\n\n    \n    \n    \n    \n    \n    \n\n","offset":279,"fileType":"python","requestStartTime":1517963893769}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    print(folder.share)\n    print(folder.)\n    print(parentCows)\n    \n    if folder.share:\n        folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\nleaves = []\ntraverse(root, leaves, set())\nres = set()\n\nfor leaf in leaves:\n    uncools = cows - leaf.cows\n    for uncool in uncools:\n        res.add(uncool)\n\noutput = \"\"\nfor cowId in sorted(list(res)):\n    output += str(cowId) + \" \"\n\nprint(output[:-1])\n\n        \n\n\n    \n    \n    \n    \n    \n    \n\n","offset":303,"fileType":"python","requestStartTime":1517963908456}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    \n    if folder.share:\n        folder.folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = raw_input()\ncows = set()\nfor i in range(int(numCows)):\n    cows.add(i)\n\nfolderInput = raw_input()\nfolderList = folderInput.split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    line = raw_input()\n    lineList = line.split(\" \")\n    folderName = int(lineList[0])\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = lineList[1]\n    \n    for j in range(int(folderCows)):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    line = raw_input()\n    lineList = line.split(\" \")\n    parent = int(lineList[0])\n    child = int(lineList[1])\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\nfor folderId, folderObject in folders.iteritems():\n    if not folderObject.parent:\n        root = folderObject\n\n\nleaves = []\ntraverse(root, leaves, set())\nres = set()\n\nfor leaf in leaves:\n    uncools = cows - leaf.cows\n    for uncool in uncools:\n        res.add(uncool)\n\noutput = \"\"\nfor cowId in sorted(list(res)):\n    output += str(cowId) + \" \"\n\nprint(output[:-1])\n\n        \n\n\n    \n    \n    \n    \n    \n    \n\n","offset":303,"fileType":"python","requestStartTime":1517963935856}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\nn = int(raw_input())\nraw_arr = raw_input().\narr = map(lambda x: int(x) >= 0, raw_input().split())\nif all(arr):\n    if any(arr):\n        print(True)\n    else:\n        print(False)\nelse:\n    print(False)\n\n","offset":45,"fileType":"python","requestStartTime":1517964046540}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n\n    def computeDifference(self):\n        self.__elements = sorted(self.__elements)\n        sel.maximumDifference = self.__elements[-1] - self.__elements[0]\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":193,"fileType":"python","requestStartTime":1517964268449}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"class Difference:\n    def __init__(self, a):\n        self.__elements = a\n\n\t# Add your code here\n\n    def computeDifference(self):\n        self.__elements = sorted(self.__elements)\n        self.maximumDifference = self.__elements[-1] - self.__elements[0]\n            \n# End of Difference class\n\n_ = raw_input()\na = [int(e) for e in raw_input().split(' ')]\n\nd = Difference(a)\nd.computeDifference()\n\nprint d.maximumDifference\n","offset":194,"fileType":"python","requestStartTime":1517964269094}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\ndef minion_game(s):\n    # your code goes here\n    import string\n    stuart = {} ## consonants\n    kevin = {}  ## vowels\n    slen = len(s)\n    vowels = set(['A','E','I','O','U'])\n    consonants = set(string.ascii_)\nif __name__ == '__main__':\n    s = raw_input()\n    minion_game(s)\n","offset":208,"fileType":"python","requestStartTime":1517964330852}}
{"body": {"column":28,"line":8,"wordToComplete":"","code":"\ndef minion_game(s):\n    # your code goes here\n    import string\n    stuart = {} ## consonants\n    kevin = {}  ## vowels\n    slen = len(s)\n    vowels = set(['A','E','I','O','U'])\n    consonants = set(string.)\nif __name__ == '__main__':\n    s = raw_input()\n    minion_game(s)\n","offset":208,"fileType":"python","requestStartTime":1517964339788}}
{"body": {"column":45,"line":8,"wordToComplete":"","code":"\ndef minion_game(s):\n    # your code goes here\n    import string\n    stuart = {} ## consonants\n    kevin = {}  ## vowels\n    slen = len(s)\n    vowels = set(['A','E','I','O','U'])\n    consonants = set(string.ascii_uppercase).\nif __name__ == '__main__':\n    s = raw_input()\n    minion_game(s)\n","offset":225,"fileType":"python","requestStartTime":1517964345982}}
{"body": {"column":32,"line":2,"wordToComplete":"","code":"\ns = raw_input()\nprint(sorted(s, key=lambda x: x.))\n\n","offset":50,"fileType":"python","requestStartTime":1517964565128}}
{"body": {"column":32,"line":2,"wordToComplete":"","code":"\ns = raw_input()\nprint(sorted(s, key=lambda x: x.))\n\n","offset":50,"fileType":"python","requestStartTime":1517964611100}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"\ns = raw_input()\nprint(\"\">sorted(s, key=lambda x: x.islower()))\n\n","offset":27,"fileType":"python","requestStartTime":1517964628573}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"\ns = raw_input()\nprint(\"\".sorted(s, key=lambda x: x.islower()))\n\n","offset":27,"fileType":"python","requestStartTime":1517964629492}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef matrixRotation(matrix, m, n):\n    # Complete this function\n    #print matrix,'\\n',r\n    new_matrix = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            if j<i:\n                temp.\n            \n            if i<m/2:\n\n            else:\n                \n                \n                \n    \n\nif __name__ == \"__main__\":\n    m, n, r = raw_input().strip().split(' ')\n    m, n, r = [int(m), int(n), int(r)]\n    matrix = []\n    for matrix_i in xrange(m):\n        matrix_temp = map(int,raw_input().strip().split(' '))\n        matrix.append(matrix_temp)\n    matrixRotation(matrix, m, n)\n\n\n","offset":246,"fileType":"python","requestStartTime":1517964632155}}
{"body": {"column":14,"line":7,"wordToComplete":"","code":"from __future__ import print_function\nfrom __future__ import print_function\nif __name__ == '__main__':\n    n = int(raw_input())\n    x = ''\n\n    for i in range(1, n+1):\n        x = x.\n    \n    print(x)\n\n","offset":183,"fileType":"python","requestStartTime":1517964789772}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\ns = raw_input()\ndef sort_order(s) {\n    if (s.)\n}\nprint(\"\".join(sorted(s, key=lambda x: x.islower(), reverse=True)))\n\n","offset":48,"fileType":"python","requestStartTime":1517964912906}}
{"body": {"column":17,"line":4,"wordToComplete":"","code":"\ns = raw_input()\ndef sort_order(s) {\n    if (s.isalpha()):\n        return s.\n}\nprint(\"\".join(sorted(s, key=lambda x: x.islower(), reverse=True)))\n\n","offset":77,"fileType":"python","requestStartTime":1517964954786}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"\ndef minion_game(s):\n    # your code goes here\n    import string\n    stuart = {} ## consonants\n    kevin = {}  ## vowels\n    slen = len(s)\n    vowels = set(['A','E','I','O','U'])\n    consonants = set(string.ascii_uppercase)\n    consonants.difference_update(vowels)\n    for i in xrange(slen):\n        for j in xrange(i, slen):\n            if s[i] in vowels: ## Kevin\n                #print s[i:j + 1]\n                if s[i:j + 1] in kevin:\n                    kevin[s[i:j + 1]] += 1\n                else:\n                    kevin[s[i:j + 1]] = 1\n            else: ## Stuart\n                #print s[i:j + 1]\n                if s[i:j + 1] in stuart:\n                    stuart[s[i:j + 1]] += 1\n                else:\n                    stuart[s[i:j + 1]] = 1\n    kscore = kevin.\nif __name__ == '__main__':\n    s = raw_input()\n    minion_game(s)\n","offset":779,"fileType":"python","requestStartTime":1517965075437}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\ndef minion_game(s):\n    # your code goes here\n    import string\n    stuart = {} ## consonants\n    kevin = {}  ## vowels\n    slen = len(s)\n    vowels = set(['A','E','I','O','U'])\n    consonants = set(string.ascii_uppercase)\n    consonants.difference_update(vowels)\n    for i in xrange(slen):\n        for j in xrange(i, slen):\n            if s[i] in vowels: ## Kevin\n                #print s[i:j + 1]\n                if s[i:j + 1] in kevin:\n                    kevin[s[i:j + 1]] += 1\n                else:\n                    kevin[s[i:j + 1]] = 1\n            else: ## Stuart\n                #print s[i:j + 1]\n                if s[i:j + 1] in stuart:\n                    stuart[s[i:j + 1]] += 1\n                else:\n                    stuart[s[i:j + 1]] = 1\n    kscore = sum(kevin.values())\n    sscore = sum(stuart.)\nif __name__ == '__main__':\n    s = raw_input()\n    minion_game(s)\n","offset":817,"fileType":"python","requestStartTime":1517965095543}}
{"body": {"column":8,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nclass CowFolder:\n    def __init__(self):\n        self.children = []\n        self.parent = None\n        self.cows = set()\n        self.share = True\n\ndef traverse(folder, leaves, parentCows):\n    \n    if folder.share:\n        folder.cows = folder.cows.union(parentCows)\n    if not folder.children:\n        leaves.append(folder)\n    for child in folder.children:\n        traverse(child, leaves, folder.cows)\n\n# add all cows\nnumCows = int(raw_input())\nif not numCows:\n    print(\"\")\n    sys.\ncows = set()\nfor i in range(numCows):\n    cows.add(i)\n\nfolderList = raw_input().split(\" \")\nnumShare = int(folderList[0])\nnumConf = int(folderList[1])\nfolders = {}\n\n# read share folders\nfor i in range(numShare):\n    lineList = raw_input().split(\" \")\n    folderName = lineList[0]\n    \n    folderObject = CowFolder()\n    folderCows = int(lineList[1])\n    \n    for j in range(folderCows):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read confidential folders\nfor i in range(numConf):\n    lineList = raw_input().split(\" \")\n    folderName = lineList[0]\n    \n    folderObject = CowFolder()\n    folderObject.share = False \n    folderCows = int(lineList[1])\n    \n    for j in range(folderCows):\n        folderObject.cows.add(int(lineList[2+j]))\n    \n    folders[folderName] = folderObject\n    \n# read parent-child relations\nnumRelations = int(raw_input())\nfor i in range(numRelations):\n    lineList = raw_input().split(\" \")\n    parent = lineList[0]\n    child = lineList[1]\n    folders[parent].children.append(folders[child])\n    folders[child].parent = folders[parent]\n\n# find the root folder to start traversing\nfor folderObject in folders.values():\n    if not folderObject.parent:\n        root = folderObject\n\n# traverse the folders and find the leaves \nleaves = []\ntraverse(root, leaves, set())\nres = set()\n\n# find uncool cows \nfor leaf in leaves:\n    uncools = cows - leaf.cows\n    for uncool in uncools:\n        res.add(uncool)\n\noutput = \"\"\nfor cowId in sorted(list(res)):\n    output += str(cowId) + \" \"\n\n# get rid of the space if there's some output \nif output:\n    output = output[:-1]\n\nprint(output)\n\n        \n\n\n    \n    \n    \n    \n    \n    \n\n","offset":570,"fileType":"python","requestStartTime":1517965097655}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\ndef swap_case(s):\n    uppers = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lowers = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    x=''\n    for c in s:\n        if c is in uppers:\n            x+=c.\n        elif c is in lowers:\n        else:\n    \n    return\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":178,"fileType":"python","requestStartTime":1517965237373}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\ndef swap_case(s):\n    uppers = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    lowers = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    x=''\n    for c in s:\n        if c is in uppers:\n            x+=c.toLower()\n        elif c is in lowers:\n            x+=c.\n        else:\n    \n    return\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":234,"fileType":"python","requestStartTime":1517965246732}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line.\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":64,"fileType":"python","requestStartTime":1517965347076}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = s.\n\ndef sort_order(s):\n    return not s.isalpha()\n    \ns = sorted(s, key=sort_order)\nprint(s)\ns = \n\n","offset":29,"fileType":"python","requestStartTime":1517965520165}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.)\n\ndef sort_order(s):\n    return not s.isalpha()\n    \ns = sorted(s, key=sort_order)\nprint(s)\ns = \n\n","offset":38,"fileType":"python","requestStartTime":1517965540084}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, s)\nupper = filter(str.)\n\ndef sort_order(s):\n    return not s.isalpha()\n    \ns = sorted(s, key=sort_order)\nprint(s)\ns = \n\n","offset":67,"fileType":"python","requestStartTime":1517965546642}}
{"body": {"column":25,"line":4,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, s)\nupper = filter(str.upper.)\n\ndef sort_order(s):\n    return not s.isalpha()\n    \ns = sorted(s, key=sort_order)\nprint(s)\ns = \n\n","offset":73,"fileType":"python","requestStartTime":1517965548453}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\njsmap = {}\njshash = {}\n\ndef add_helper(jsobj, pos, idx):\n    for key in jsobj:\n        if key not in pos:\n            pos[key] = {}\n        if isinstance(jsobj[key], dict):\n            add_helper(jsobj[key], pos[key], idx)\n        else:\n            if jsobj[key] in pos[key]:\n                pos[key][jsobj[key]].append(idx)\n            else:\n                pos[key][jsobj[key]] = [idx]\n\ndef get_helper(jsobj, jshash, rst):\n    for key in jsobj:\n        if key not in pos:\n            rst.\n        \n    \n    \n    \n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = str(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j]) for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".join(listhash.values()),\n            elif strl not in listmap:\n                print \"{}\",\n            else:\n                print \"\".join([listhash[i] for i in listmap[str(l)]]),\n        else:\n            if strl in listmap:\n                for idx in listmap[strl]:\n                    listhash[idx] = \"\"\n    else:\n        if operation == \"add\":\n            jsmap[idx] = data\n            add_helper(jsobj,jshash,idx)\n            idx += 1\n        elif operation == \"get\":\n            rst = []\n            get_helper(jsobj, jshash, rst)   \n        else:\n            \n        \n\n","offset":622,"fileType":"python","requestStartTime":1517965593007}}
{"body": {"column":37,"line":3,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, filter(str.))\nupper = filter(str.upper, s)\n\nodd = filter(lambda x: int(x) % 2 == 1, s)\neven = filter(lambda x: int(x) % 2 == 0, s)\nprint(lower + upper + odd + even)\n\n","offset":56,"fileType":"python","requestStartTime":1517965635120}}
{"body": {"column":37,"line":4,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, filter(str.isalpha, s))\nupper = filter(str.upper, filter(str.s)\n\nodd = filter(lambda x: int(x) % 2 == 1, s)\neven = filter(lambda x: int(x) % 2 == 0, s)\nprint(lower + upper + odd + even)\n\n","offset":106,"fileType":"python","requestStartTime":1517965644580}}
{"body": {"column":51,"line":6,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, filter(str.isalpha, s))\nupper = filter(str.upper, filter(strisalpha, s))\n\nodd = filter(lambda x: int(x) % 2 == 1, filter(str.s)\neven = filter(lambda x: int(x) % 2 == 0, s)\nprint(lower + upper + odd + even)\n\n","offset":170,"fileType":"python","requestStartTime":1517965658444}}
{"body": {"column":52,"line":7,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, filter(str.isalpha, s))\nupper = filter(str.upper, filter(strisalpha, s))\n\nodd = filter(lambda x: int(x) % 2 == 1, filter(str.isdigit, s))\neven = filter(lambda x: int(x) % 2 == 0, filter(str.s)\nprint(lower + upper + odd + even)\n\n","offset":235,"fileType":"python","requestStartTime":1517965675100}}
{"body": {"column":37,"line":4,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = filter(str.lower, filter(str.isalpha, s))\nupper = filter(str.upper, filter(str.isalpha, s))\n\nodd = filter(lambda x: int(x) % 2 == 1, filter(str.isdigit, s))\neven = filter(lambda x: int(x) % 2 == 0, filter(str.isdigit, s))\nprint(lower + upper + odd + even)\n\n","offset":106,"fileType":"python","requestStartTime":1517965690934}}
{"body": {"column":20,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    string = string.\n    \n    \n    return \n\n\nif __name__ == '__main__':\n    string = raw_input()\n    capitalized_string = capitalize(string)\n    print capitalized_string\n","offset":46,"fileType":"python","requestStartTime":1517965777382}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    string = string.split(' ')\n    for word in string:\n        word[0].\n    \n    \n    return \n\n\nif __name__ == '__main__':\n    string = raw_input()\n    capitalized_string = capitalize(string)\n    print capitalized_string\n","offset":97,"fileType":"python","requestStartTime":1517965815418}}
{"body": {"column":23,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    string = string.split(' ')\n    for word in string:\n        word = word[0].\n        word[0].upper()\n        \n    \n    \n    return \n\n\nif __name__ == '__main__':\n    string = raw_input()\n    capitalized_string = capitalize(string)\n    print capitalized_string\n","offset":104,"fileType":"python","requestStartTime":1517965835624}}
{"body": {"column":42,"line":4,"wordToComplete":"","code":"\ndef capitalize(string):\n    string = string.split(' ')\n    for word in string:\n        word = word[0].upper() + word[1,].\n        word[0].upper()\n        \n    \n    \n    return \n\n\nif __name__ == '__main__':\n    string = raw_input()\n    capitalized_string = capitalize(string)\n    print capitalized_string\n","offset":123,"fileType":"python","requestStartTime":1517965842713}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    if a0 >\n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":104,"fileType":"python","requestStartTime":1517965906530}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    Ascore = 0\n    Bscore = 0\n    if a0 > b0:\n        Ascore = Ascore + 1\n    if b0 > \n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":179,"fileType":"python","requestStartTime":1517965963743}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    Ascore = 0\n    Bscore = 0\n    if a0 > b0:\n        Ascore = Ascore + 1\n    elif b0 > a0:\n        Bscore = Bscore + 1\n    else\n    \n    if a1 > \n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":239,"fileType":"python","requestStartTime":1517965991854}}
{"body": {"column":18,"line":42,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\njsmap = {}\njshash = {}\n\ndef add_helper(jsobj, pos, idx):\n    for key in jsobj:\n        if key not in pos:\n            pos[key] = {}\n        if isinstance(jsobj[key], dict):\n            add_helper(jsobj[key], pos[key], idx)\n        else:\n            if jsobj[key] in pos[key]:\n                pos[key][jsobj[key]].append(idx)\n            else:\n                pos[key][jsobj[key]] = [idx]\n\ndef get_helper(jsobj, jshash, rst):\n    for key in jsobj:\n        if key not in pos:\n            rst.append([])\n            return\n        if isinstance(jsobj[key], dict):\n            temp = list(pos[key][jsobj[key]])\n            for i,k in enumerate(pos[key][jsobj[key]]):\n                if jsmap[k] == \"\":\n                    del temp[i]\n                rst.append(temp)\n            else:\n                rst.append([])\n                return\n            \ndef intersect(lists):\n    if len(lists) == 1:\n        return lists[0]\n    list1 = lists.\n\nfor line in sys.stdin:\n    operation, data = line.split(' ')\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = str(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j]) for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".join(listhash.values()),\n            elif strl not in listmap:\n                print \"{}\",\n            else:\n                print \"\".join([listhash[i] for i in listmap[str(l)]]),\n        else:\n            if strl in listmap:\n                for idx in listmap[strl]:\n                    listhash[idx] = \"\"\n    else:\n        if operation == \"add\":\n            jsmap[idx] = data\n            add_helper(jsobj,jshash,idx)\n            idx += 1\n        elif operation == \"get\":\n            rst = []\n            get_helper(jsobj, jshash, rst)   \n            if len(rst) == 0:\n                print \"\".join([jsmap[i] for i in jsmap]),\n            else:\n                for l in rst:\n                    if len(l) == 0:\n                        print \"{}\",\n                    rst = \n                    print\n        else:\n            \n        \n\n","offset":1068,"fileType":"python","requestStartTime":1517966001543}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    Ascore = 0\n    Bscore = 0\n    if a0 > b0:\n        Ascore = Ascore + 1\n    elif b0 > a0:\n        Bscore = Bscore + 1\n    else:\n    \n    if a1 > b1:\n        Ascore = Ascore + 1\n    elif b1 > a1:\n        Bscore = Bscore + 1\n    else:\n    \n    if a2 > \n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":345,"fileType":"python","requestStartTime":1517966029329}}
{"body": {"column":14,"line":23,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    # Complete this function\n    Ascore = 0\n    Bscore = 0\n    if a0 > b0:\n        Ascore = Ascore + 1\n    elif b0 > a0:\n        Bscore = Bscore + 1\n    else:\n    \n    if a1 > b1:\n        Ascore = Ascore + 1\n    elif b1 > a1:\n        Bscore = Bscore + 1\n    else:\n    \n    if a2 > b2:\n        Ascore = Ascore + 1\n    elif b2 > \n\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":391,"fileType":"python","requestStartTime":1517966040066}}
{"body": {"column":65,"line":4,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = sorted(filter(str.islower, filter(str.isalpha, s)))\nupper = str(sorted(filter(str.isupper, filter(str.isalpha, s)))).\nodd = str(filter(lambda x: int(x) % 2 == 1, filter(str.isdigit, s)))\neven = str(filter(lambda x: int(x) % 2 == 0, filter(str.isdigit, s)))\n\n\n\n","offset":144,"fileType":"python","requestStartTime":1517966086466}}
{"body": {"column":65,"line":3,"wordToComplete":"","code":"\ns = raw_input()\n\nlower = str(sorted(filter(str.islower, filter(str.isalpha, s)))).\nupper = str(sorted(filter(str.isupper, filter(str.isalpha, s)))).strip('[,]')\nodd = str(filter(lambda x: int(x) % 2 == 1, filter(str.isdigit, s)))\neven = str(filter(lambda x: int(x) % 2 == 0, filter(str.isdigit, s)))\n\n\n\n","offset":84,"fileType":"python","requestStartTime":1517966100866}}
{"body": {"column":17,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\nprint max(bin(n).)\n\n\n        \n    \n\n    \n\n\n\n\n\n","offset":76,"fileType":"python","requestStartTime":1517966380532}}
{"body": {"column":29,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\nprint max(bin(n).strip('0b').)\n\n\n        \n    \n\n    \n\n\n\n\n\n","offset":88,"fileType":"python","requestStartTime":1517966389359}}
{"body": {"column":41,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\nprint max(bin(n).strip('0b').split('0')).\n\n\n        \n    \n\n    \n\n\n\n\n\n","offset":100,"fileType":"python","requestStartTime":1517966404679}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    ll = []\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            ll.\n            \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":172,"fileType":"python","requestStartTime":1517966500298}}
{"body": {"column":12,"line":1,"wordToComplete":"","code":"\nmy_list=sys.\n\n\tmy_list=inp.split()\n\tsize_list=len(my_list)-1\n\ti,j=size_list,size_list\n\tvisited=[]\n\tcount = 0\n\tans=2017\n\tval=0\n\twhile (i>=0 and j>=0):\n\n\t\tif my_list[i]=='>' and i not in visited:\n\t\t\tans=ans+1\n\t\tif my_list[i]=='<' and i not in visited:\n\t\t\tans=ans-1\n\n\n\t\tif my_list[i]=='*' and i not in visited:\n\t\t\tcount += 1\n\t\t\tj-=2\n\t\t\t\t\t\t\n\t\t\tvisited.append(i)\n\t\t\twhile (my_list[j]=='*' and j not in visited):\n\t\t\t\t\tcount += 1\n\t\t\t\t\t#val=my_list[j]\n\t\t\t\t\t#print j,i\n\t\t\t\t\tvisited.append(j)\n\t\t\t\t\tj-=2\n\t\t\tval=my_list[j]\n\t\t\tvisited.append(j)\n\t\t\tprint val\n\t\t\tif val=='>':\n\t\t\t\tans=ans+(2**count)\n\t\t\t\tcount=0\n\t\t\t\tprint 'ans',ans,i\n\t\t\t\tj=i\n\n\t\t\tif val=='<':\n\t\t\t\tans=ans-(2**count)\n\t\t\t\tcount=0\n\t\t\t\tj=i\n\n\n\t\t\n\t\t#print ans\n\t\ti-=1\n\t\tj-=1\n\treturn ans\t\n\n","offset":14,"fileType":"python","requestStartTime":1517966503926}}
{"body": {"column":45,"line":64,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\njsmap = {}\njshash = {}\n\ndef add_helper(jsobj, pos, idx):\n    for key in jsobj:\n        if key not in pos:\n            pos[key] = {}\n        if isinstance(jsobj[key], dict):\n            add_helper(jsobj[key], pos[key], idx)\n        else:\n            if jsobj[key] in pos[key]:\n                pos[key][jsobj[key]].append(idx)\n            else:\n                pos[key][jsobj[key]] = [idx]\n\ndef get_helper(jsobj, pos, rst):\n    for key in jsobj:\n        if key not in pos:\n            rst.append([])\n            return\n        if isinstance(jsobj[key], dict):\n            get_helper(jsobj[key], pos[key], rst)\n        else:\n            if jsobj[key] in pos[key]:\n                temp = list(pos[key][jsobj[key]])\n                for i,k in enumerate(pos[key][jsobj[key]]):\n                    if jsmap[k] == \"\":\n                        del temp[i]\n                    rst.append(temp)\n                else:\n                    rst.append([])\n                    return\n            \ndef intersect(lists):\n    if len(lists) == 1:\n        return lists[0]\n    list1 = lists.pop()\n    rst = []\n    while lists:\n        list2 = lists.pop()\n        i = 0\n        j = 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] == list2[j]:\n                rst.append(list1[i])\n                i += 1\n                j += 1\n            elif list1[i] < list2[j]:\n                i += 1\n            else:\n                j += 1\n        return rst       \n                                    \n\nfor line in sys.stdin:\n    operation, data = line.split(' ')[0], \"\".\n    jsobj = json.loads(data)\n    if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n        l = jsobj['list']\n        strl = str(l)\n        if operation == \"add\":\n            listhash[idx] = data\n            for subarray in [str(l[i:j]) for j in range(0, len(l)+1) for i in range(0,j)]:\n                if subarray in listmap:\n                    listmap[subarray].append(idx)\n                else:\n                    listmap[subarray] = [idx]\n            idx += 1\n        elif operation == \"get\":\n            if not l:\n                print \"\".join(listhash.values()),\n            elif strl not in listmap:\n                print \"{}\",\n            else:\n                print \"\".join([listhash[i] for i in listmap[str(l)]]),\n        else:\n            if strl in listmap:\n                for idx in listmap[strl]:\n                    listhash[idx] = \"\"\n    else:\n        if operation == \"add\":\n            jsmap[idx] = data\n            add_helper(jsobj,jshash,idx)\n            idx += 1\n        elif operation == \"get\":\n            rst = []\n            get_helper(jsobj, jshash, rst)   \n            if len(rst) == 0:\n                print \"\".join([jsmap[i] for i in jsmap]),\n            else:\n                for l in rst:\n                    if len(l) == 0:\n                        print \"{}\",\n                    rst = intersect(rst)\n                    print \"\".join([jsmap[i] for i in rst]),\n        #else:\n            \n        \n\n","offset":1695,"fileType":"python","requestStartTime":1517966686543}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef zombieCluster(zombies):\n    n = len(zombies)\n    visited = [[0 for x in xrange(n)] for y in xrange(n)]\n    count = 0\n    for i in xrange(n):\n        for j in xrange(n):\n            if zombies[i][j] == \"1\" and visited[i][j] == 0:\n                exhaust_island(zombies,i,j,visited)\n                count += 1\n    return count\n\ndef get_neighbors(M,i,j):\n    n = len(M)\n    neighbors = [(i+1,j),(i-1,j),(i,j+1),(i,j-1)]\n    result = []\n    for (n_i,n_j) in neighbors:\n        if n_i >\n            result.append((n_i,n_j))\n    return result\n\ndef exhaust_island(M,i,j,visited):\n    if visited[i][j] == 1:\n        return\n    visited[i][j] = 1\n    neighbors = get_neighbors(M,i,j)\n    for (n_i,n_j) in neighbors:\n        exhaust_island(M,n_i,n_j,visited)\n    \n    \n    \n\n\n\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    zombies_cnt = 0\n    zombies_cnt = int(raw_input())\n    zombies_i = 0\n    zombies = []\n    while zombies_i < zombies_cnt:\n        try:\n            zombies_item = raw_input()\n        except:\n            zombies_item = None\n        zombies.append(zombies_item)\n        zombies_i += 1\n\n\n    res = zombieCluster(zombies);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":556,"fileType":"python","requestStartTime":1517967147830}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef diagonalDifference(a):\n    MD_vals = []\n    for i in range(0,len(a[0])):\n        this_MD_val = a[i][i]\n        MD_vals.\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    a = []\n    for a_i in xrange(n):\n        a_temp = map(int,raw_input().strip().split(' '))\n        a.append(a_temp)\n    result = diagonalDifference(a)\n    print result\n\n\n","offset":152,"fileType":"python","requestStartTime":1517967326358}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef diagonalDifference(a):\n    MD_vals = []\n    AD_vals = []\n    for i in range(0,len(a[0])):\n        this_MD_val = a[i][i]\n        MD_vals.append(this_MD_val)\n        this_AD_val = a[i][len(a[0])-1-i]\n        AD_vals.\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    a = []\n    for a_i in xrange(n):\n        a_temp = map(int,raw_input().strip().split(' '))\n        a.append(a_temp)\n    result = diagonalDifference(a)\n    print result\n\n\n","offset":247,"fileType":"python","requestStartTime":1517967366349}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef merge(list1, list2):\n    sorted = []\n    while list1 and list2:\n        if list1[0] <= list2[0]:\n            sorted.append(list1.pop(0))\n        else:\n            sorted.append(list2.pop(0))\n    if list1:\n        for i in list1:\n            sorted.append(i)\n    elif list2:\n        for i in list2:\n            sorted.\n\ndef merge_sort(names):\n    if len(names) == 1:\n        return names\n    else:\n        mid = len(names)/2\n        return merge(merge_sort(names[0:mid]), merge_sort(names[mid:]))\n\ndef getSortedList(names):\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    names_cnt = 0\n    names_cnt = int(raw_input())\n    names_i = 0\n    names = []\n    while names_i < names_cnt:\n        try:\n            names_item = raw_input()\n        except:\n            names_item = None\n        names.append(names_item)\n        names_i += 1\n\n\n    res = getSortedList(names);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":392,"fileType":"python","requestStartTime":1517967493029}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        print arr[i]\n        if arr[i] > 0:\n            print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    pos_pct = pos_count.\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":525,"fileType":"python","requestStartTime":1517968018058}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    queries.\n\n","offset":130,"fileType":"python","requestStartTime":1517968120369}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    queries.append(line.)\n\n","offset":142,"fileType":"python","requestStartTime":1517968123401}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    queries.append([line..split(\" \")])\n\nprint queries\n\n","offset":143,"fileType":"python","requestStartTime":1517968167043}}
{"body": {"column":12,"line":24,"wordToComplete":"3.","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    print('num_vals=' + str(num_vals))\n    print(3.)\n    pos_pct = pos_count/num_vals\n    neg_pct = neg_count/num_vals\n    zero_pct = zero_count/num_vals\n    print(pos_count)\n    print(neg_count)\n    print(zero_count)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":556,"fileType":"python","requestStartTime":1517968229052}}
{"body": {"column":12,"line":24,"wordToComplete":"3.","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    print('num_vals=' + str(num_vals))\n    print(3./6)\n    pos_pct = pos_count/num_vals\n    neg_pct = neg_count/num_vals\n    zero_pct = zero_count/num_vals\n    print(pos_count)\n    print(neg_count)\n    print(zero_count)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":556,"fileType":"python","requestStartTime":1517968247371}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    queries.append([line.replace('\\n','').split(\" \")])\n\npQueries=[]\nfor each in enumeratequeries[1:]:\n    pQueries.[int(x) for x in each]\n    \nprint pQueries\n\n","offset":233,"fileType":"python","requestStartTime":1517968263516}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    pos_pct = pos_count./num_vals\n    neg_pct = neg_count/num_vals\n    zero_pct = zero_count/num_vals\n    print(pos_count)\n    print(neg_count)\n    print(zero_count)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":529,"fileType":"python","requestStartTime":1517968264020}}
{"body": {"column":24,"line":24,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    pos_pct = pos_count./num_vals\n    neg_pct = neg_count./num_vals\n    zero_pct = zero_count/num_vals\n    print(pos_count)\n    print(neg_count)\n    print(zero_count)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":563,"fileType":"python","requestStartTime":1517968265172}}
{"body": {"column":26,"line":25,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    pos_pct = pos_count./num_vals\n    neg_pct = neg_count./num_vals\n    zero_pct = zero_count./num_vals\n    print(pos_count)\n    print(neg_count)\n    print(zero_count)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":599,"fileType":"python","requestStartTime":1517968267363}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    queries.append([line.replace('\\n','').split(\" \")])\n\npQueries=[]\nfor each in queries[1:]:\n    for num in each:\n        num=int(num)\n    pQueries.\n    \nprint pQueries\n\n","offset":266,"fileType":"python","requestStartTime":1517968344521}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    print(3/6)\n    print(3./)\n    #pos_pct = pos_count./num_vals\n    #neg_pct = neg_count./num_vals\n    #zero_pct = zero_count./num_vals\n    print(pos_pct)\n    print(neg_pct)\n    print(zero_pct)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":533,"fileType":"python","requestStartTime":1517968380368}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    print line.\nprint queries\n\n","offset":133,"fileType":"python","requestStartTime":1517968449365}}
{"body": {"column":32,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    print line.replace('\\n','').\nprint queries\n\n","offset":150,"fileType":"python","requestStartTime":1517968459389}}
{"body": {"column":25,"line":26,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    print(3/6)\n    print(3./6)\n    print(type(3))\n    pos_pct = pos_count ./num_vals\n    #neg_pct = neg_count./num_vals\n    #zero_pct = zero_count./num_vals\n    print(pos_pct)\n    print(neg_pct)\n    print(zero_pct)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":580,"fileType":"python","requestStartTime":1517968459437}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    temp= line.replace('\\n','').split(\" \")\n    queries.\n    \nprint queries\n\n","offset":173,"fileType":"python","requestStartTime":1517968499021}}
{"body": {"column":17,"line":27,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport numpy as np\n\ndef plusMinus(arr):\n    #print(arr)\n    #print(arr[0])\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for i in range(0,len(arr)):\n        #print arr[i]\n        if arr[i] > 0:\n            #print('is positive')\n            pos_count = pos_count + 1\n        elif arr[i] < 0:\n            #print('is negative')\n            neg_count = neg_count + 1\n        elif arr[i] == 0:\n            #print('is zero')\n            zero_count = zero_count + 1\n    num_vals = len(arr)\n    #pos_pct = pos_count / num_vals\n    #neg_pct = neg_count./num_vals\n    #zero_pct = zero_count./num_vals\n    pos_pct = np.\n    print(pos_pct)\n    print(neg_pct)\n    print(zero_pct)\n    #print(pos_count/len(arr))\n    #print(neg_count/len(arr))\n    #print(zero_count/len(arr))\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    plusMinus(arr)\n\n\n","offset":649,"fileType":"python","requestStartTime":1517968545433}}
{"body": {"column":8,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    arr.\n    sum1 = sum([i for i in arr if i < max(arr)])\n    sum2 = sum([i for i in arr if i > min(arr)])\n    print sum1, sum2\n    \nif __name__ == \"__main__\":\n    arr = map(int, raw_input().strip().split(' '))\n    miniMaxSum(arr)\n\n\n","offset":87,"fileType":"python","requestStartTime":1517968784228}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef miniMaxSum(arr):\n    # Complete this function\n    arr.sort()\n    max_sum = sum(arr[1:])\n    arr.\n    sum1 = sum([i for i in arr if i < max(arr)])\n    sum2 = sum([i for i in arr if i > min(arr)])\n    print sum1, sum2\n    \nif __name__ == \"__main__\":\n    arr = map(int, raw_input().strip().split(' '))\n    miniMaxSum(arr)\n\n\n","offset":129,"fileType":"python","requestStartTime":1517968804961}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass Heap:\n    def __init__(self):\n        self.\n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":91,"fileType":"python","requestStartTime":1517969117571}}
{"body": {"column":6,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    max_height = max(ar)\n    a.\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":121,"fileType":"python","requestStartTime":1517969157770}}
{"body": {"column":7,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    max_height = max(ar)\n    ar.\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":122,"fileType":"python","requestStartTime":1517969159063}}
{"body": {"column":17,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    max_height = max(ar)\n    ar.sort()\n    max_ind = ar.\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":146,"fileType":"python","requestStartTime":1517969167412}}
{"body": {"column":25,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    temp= line.replace('\\n','').split(\" \")\n    queries.append([int(x) for x in temp])\n    \nlastAnswer=0\nnumseq=queries[0][0]\nsequences=[numseq]\nprint numseq\nprint len(sequences)\nfor x in sequences:\n    x = []\n\nfor q in queries[1:]:\n    if q[0] == 1:\n        index = (q[1] ^ lastAnswer) % (numseq)\n        sequences[index].\n    \n\n","offset":440,"fileType":"python","requestStartTime":1517969182073}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    temp= line.replace('\\n','').split(\" \")\n    queries.append([int(x) for x in temp])\n    \nlastAnswer=0\nnumseq=queries[0][0]\nsequences=[]\nfor i in range(numseq):\n    sequences.\nprint numseq\nprint len(sequences)\nfor x in sequences:\n    x = []\n\nfor q in queries[1:]:\n    if q[0] == 1:\n        index = (q[1] ^ lastAnswer) % (numseq)\n        sequences[index].append(q[2])\n    \n\n","offset":294,"fileType":"python","requestStartTime":1517969242864}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nqueries=[]\nfor line in sys.stdin:\n    temp= line.replace('\\n','').split(\" \")\n    queries.append([int(x) for x in temp])\n    \nlastAnswer=0\nnumseq=queries[0][0]\nsequences=[]\nfor i in range(numseq):\n    x=[]\n    sequences.\nprint numseq\nprint len(sequences)\nfor x in sequences:\n    x = []\n\nfor q in queries[1:]:\n    if q[0] == 1:\n        index = (q[1] ^ lastAnswer) % (numseq)\n        sequences[index].append(q[2])\n    \n\n","offset":303,"fileType":"python","requestStartTime":1517969249168}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":90,"fileType":"python","requestStartTime":1517969310480}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        return s\n    else:\n        hour = s.\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":150,"fileType":"python","requestStartTime":1517969334286}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        print s.\n    else:\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        print ret\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":122,"fileType":"python","requestStartTime":1517969420362}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass Heap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.\n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":161,"fileType":"python","requestStartTime":1517969424240}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        print s.rstrip('AM')\n    else:\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        print ret.\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":276,"fileType":"python","requestStartTime":1517969424412}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(item)\n        \n    def pop(self):\n        heapq.\n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":221,"fileType":"python","requestStartTime":1517969462660}}
{"body": {"column":32,"line":19,"wordToComplete":"from example: ( H(1, \"A\"), .","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  #headings is a list of Heading(hlevel, text)\n  #to_html takes in node\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), .\n  for heading in headings:\n        \n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":508,"fileType":"python","requestStartTime":1517969766958}}
{"body": {"column":33,"line":19,"wordToComplete":"from example: ( H(1, \"A\"), ..","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  #headings is a list of Heading(hlevel, text)\n  #to_html takes in node\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), ..\n  for heading in headings:\n        \n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":509,"fileType":"python","requestStartTime":1517969767105}}
{"body": {"column":34,"line":19,"wordToComplete":"from example: ( H(1, \"A\"), ...","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  #headings is a list of Heading(hlevel, text)\n  #to_html takes in node\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), ...\n  for heading in headings:\n        \n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":510,"fileType":"python","requestStartTime":1517969767236}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        if s.\n        ret = s.rstrip('AM')\n    else:\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        ret = ret.rstrip('PM')\n    return ret\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":119,"fileType":"python","requestStartTime":1517969780640}}
{"body": {"column":44,"line":19,"wordToComplete":"from example: ( H(1, \"A\"), H(2,\"\"), H(3....)","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  #headings is a list of Heading(hlevel, text)\n  #to_html takes in node\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), H(2,\"\"), H(3....)\n  for heading in headings:\n        \n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":520,"fileType":"python","requestStartTime":1517969780351}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        if s.startswith('12'):\n            others = s[2:]\n            ret = '00'+others\n            ret = ret.\n        else:\n            ret = s.rstrip('AM')\n    else:\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        ret = ret.rstrip('PM')\n    return ret\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":216,"fileType":"python","requestStartTime":1517969830750}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        if s.startswith('12'):\n            others = s[2:]\n            ret = '00'+others\n            ret = ret.\n        else:\n            ret = s.rstrip('AM')\n    else:\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        ret = ret.rstrip('PM')\n    return ret\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":216,"fileType":"python","requestStartTime":1517969832335}}
{"body": {"column":25,"line":28,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, item)\n        \n    def pop(self):\n        return heapq.heappop(heap)\n    \nclass MaxHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(heap)\n    \n    def pop(self, item):\n        while True:\n            val = -heapq.\n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":536,"fileType":"python","requestStartTime":1517969840819}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        if s.startswith('12'):\n            others = s[2:]\n            ret = '00'+others\n            ret = ret.rstrip('AM')\n        else:\n            ret = s.rstrip('AM')\n    else:\n        if s.\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        ret = ret.rstrip('PM')\n    return ret\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":299,"fileType":"python","requestStartTime":1517969856231}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if s.endswith('AM'):\n        if s.startswith('12'):\n            others = s[2:]\n            ret = '00'+others\n            ret = ret.rstrip('AM')\n        else:\n            ret = s.rstrip('AM')\n    else:\n        if s.startswith('12'):\n            ret = ret.\n        hour = s[:2]\n        others = s[2:]\n        new_hour = str(int(hour)+12)\n        ret = new_hour + others\n        ret = ret.rstrip('PM')\n    return ret\n    \ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":339,"fileType":"python","requestStartTime":1517969864106}}
{"body": {"column":24,"line":31,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, item)\n        \n    def pop(self):\n        return heapq.heappop(heap)\n    \nclass MaxHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                removed.\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":623,"fileType":"python","requestStartTime":1517969876705}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\ns = int(raw_input().strip())\nfor a0 in xrange(s):\n    n = int(raw_input().strip())\n\ndef count(n):\n    count = 0\n    if n-3 == 0:\n        count += 1\n    if n-2 == 0:\n        count += 1\n    if n-1 == 0:\n        count += 1\n    \n    if n-3 > 0:\n        count += count(n-3)\n    if n-2 >\n        \n    \n    for i in xrange(3):\n        if n == :\n            count += count(n-3)\n        if n > 2:\n            count += count(n-2)\n        if n\n            \n\n","offset":283,"fileType":"python","requestStartTime":1517969885582}}
{"body": {"column":35,"line":24,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, item)\n        \n    def pop(self):\n        return heapq.heappop(heap)\n    \nclass MaxHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        self\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":460,"fileType":"python","requestStartTime":1517969943582}}
{"body": {"column":28,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(heap, item)\n        \n    def pop(self):\n        return heapq.heappop(heap)\n    \nclass MaxHeap:\n    def __init__(self, heap_type):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        self\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":389,"fileType":"python","requestStartTime":1517969948481}}
{"body": {"column":39,"line":36,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport sys\n\nidx = 0\nlisthash = {}\nlistmap = {}\n\njsmap = {}\njshash = {}\n\ndef add_helper(jsobj, pos, idx):\n    for key in jsobj:\n        if key not in pos:\n            pos[key] = {}\n        if isinstance(jsobj[key], dict):\n            add_helper(jsobj[key], pos[key], idx)\n        else:\n            if jsobj[key] in pos[key]:\n                pos[key][jsobj[key]].append(idx)\n            else:\n                pos[key][jsobj[key]] = [idx]\n\ndef get_helper(jsobj, pos, rst):\n    for key in jsobj:\n        if key not in pos:\n            rst.append([])\n            return\n        if isinstance(jsobj[key], dict):\n            get_helper(jsobj[key], pos[key], rst)\n        else:\n            if jsobj[key] in pos[key]:\n                for i,k in enumerate(pos[key][jsobj[key]]):\n                    if jsmap[k] == \"\":\n                        pos[key][jsobj[key][i] = -1\n                pos[key][jsobj[key][i].\n                \n                rst.append(temp)\n            else:\n                rst.append([])\n                return\n                 \n            \ndef intersect(lists):\n    if len(lists) == 1:\n        return lists[0]\n    list1 = lists.pop()\n    while lists:\n        rst = []\n        list2 = lists.pop()\n        i = 0\n        j = 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] == list2[j]:\n                rst.append(list1[i])\n                i += 1\n                j += 1\n            elif list1[i] < list2[j]:\n                i += 1\n            else:\n                j += 1\n        list1 = list(rst)\n    return rst       \n                                    \n\nfor line in sys.stdin:\n    if line:\n        operation, data = line.split(' ')[0], \" \".join(line.split(' ')[1:])\n        jsobj = json.loads(data)\n        if \"type\" in jsobj and jsobj[\"type\"] == \"list\":\n            l = jsobj['list']\n            strl = str(l)\n            if operation == \"add\":\n                listhash[idx] = data\n                for subarray in [str(l[i:j]) for j in range(0, len(l)+1) for i in range(0,j)]:\n                    if subarray in listmap:\n                        listmap[subarray].append(idx)\n                    else:\n                        listmap[subarray] = [idx]\n                idx += 1\n            elif operation == \"get\":\n                if not l:\n                    print \"\".join(listhash.values()),\n                elif strl not in listmap:\n                    print \"{}\",\n                else:\n                    print \"\".join([listhash[i] for i in listmap[strl]]),\n            else:\n                if not jsobj:\n                    for idx in listhash:\n                        listhash[idx] = \"\"\n                if strl in listmap:\n                    for idx in listmap[strl]:\n                        listhash[idx] = \"\"\n        else:\n            if operation == \"add\":\n                jsmap[idx] = data\n                add_helper(jsobj,jshash,idx)\n                idx += 1\n            elif operation == \"get\":\n                rst = []\n                get_helper(jsobj, jshash, rst)   \n                if len(rst) == 0:\n                    print \"\".join([jsmap[i] for i in jsmap]),\n                else:\n                    for l in rst:\n                        if len(l) == 0:\n                            print \"{}\",\n                    rst2 = intersect(rst)\n                    print \"\".join([jsmap[i] for i in rst2]),\n            else:\n                rst = []\n                get_helper(jsobj, jshash, rst)\n                if len(rst) == 0:\n                    for k in jshash:\n                        jsmap[k] = \"\"\n                else:\n                    rst2 = intersect(rst)\n                    for k in rst2:\n                        jsmap[k] = \"\"\n                   \n            \n        \n\n","offset":983,"fileType":"python","requestStartTime":1517969955157}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        self\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":167,"fileType":"python","requestStartTime":1517969959940}}
{"body": {"column":34,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        self\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":241,"fileType":"python","requestStartTime":1517969964722}}
{"body": {"column":13,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        self.\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":704,"fileType":"python","requestStartTime":1517969980974}}
{"body": {"column":18,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        self.heap.\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":709,"fileType":"python","requestStartTime":1517969985452}}
{"body": {"column":14,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n                \n        heapq. self.heap\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":705,"fileType":"python","requestStartTime":1517969997074}}
{"body": {"column":14,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(item)\n        \n        heapq.\n        heapq.merge(self.heap\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":697,"fileType":"python","requestStartTime":1517970063098}}
{"body": {"column":18,"line":36,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":730,"fileType":"python","requestStartTime":1517970159932}}
{"body": {"column":15,"line":15,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    while(head.)\n  \n  \n  \n  \n\n\n","offset":292,"fileType":"python","requestStartTime":1517970163712}}
{"body": {"column":32,"line":36,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.elem)\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":744,"fileType":"python","requestStartTime":1517970176341}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    while(head is not None):\n        print head.\n  \n  \n  \n  \n\n\n","offset":325,"fileType":"python","requestStartTime":1517970180254}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Print elements of a linked list on console\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n \n\"\"\"\ndef print_list(head):\n    while(head is not None):\n        print head.data\n        head=head.\n  \n  \n  \n  \n\n\n","offset":348,"fileType":"python","requestStartTime":1517970185222}}
{"body": {"column":13,"line":6,"wordToComplete":"s","code":"\n#!/bin/python\n\nimport sys\n\ndef hackerlandRadioTransmitters(x, k):\n    print x.s\n    print k\n    # Complete this function\n\nif __name__ == \"__main__\":\n    n, k = raw_input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    x = map(int, raw_input().strip().split(' '))\n    result = hackerlandRadioTransmitters(x, k)\n    print result\n\n\n","offset":81,"fileType":"python","requestStartTime":1517970201565}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    while(head.)\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":360,"fileType":"python","requestStartTime":1517970259415}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    while(head.next is not None):\n        head=head.\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":397,"fileType":"python","requestStartTime":1517970265424}}
{"body": {"column":9,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    temp=head\n    while(temp.next is not None):\n        temp=temp.next\n    temp.\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":425,"fileType":"python","requestStartTime":1517970281520}}
{"body": {"column":24,"line":51,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.)\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    \n    for i in range(d):\n        pass\n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1111,"fileType":"python","requestStartTime":1517970343321}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the end of a linked list \n head pointer input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n \n return back the head of the linked list in the below method\n\"\"\"\n\ndef Insert(head, data):\n    if head is None:\n        head.\n    temp=head\n    while(temp.next is not None):\n        temp=temp.next\n    temp.next=data\n    return head\n\n  \n  \n  \n  \n  \n  \n\n\n","offset":379,"fileType":"python","requestStartTime":1517970366255}}
{"body": {"column":29,"line":26,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\"))\n    1 -> 2 -> 3x2\n      -> 2 -> 3\n  # N(H(1,\"\"),[N(2),N(2)])\n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  for heading in headings:\n    previousWeight = heading.\n    while \n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":763,"fileType":"python","requestStartTime":1517970363118}}
{"body": {"column":15,"line":27,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\"))\n  #  1 -> 2 -> 3x2\n  #    -> 2 -> 3\n  # N(H(1,\"\"),[N(2),N(2)])\n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  for heading in headings:\n    if heading.\n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":772,"fileType":"python","requestStartTime":1517970434496}}
{"body": {"column":29,"line":27,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\"))\n  #  1 -> 2 -> 3x2\n  #    -> 2 -> 3\n  # N(H(1,\"\"),[N(2),N(2)])\n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  for heading in headings:\n    currentWeight = heading.,\n    if \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":786,"fileType":"python","requestStartTime":1517970443519}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    newNode=Node(data,None)\n    \n    if(head is None):\n        return newNode\n    \n    newNode.\n \n\n\n\n\n","offset":437,"fileType":"python","requestStartTime":1517970505857}}
{"body": {"column":17,"line":66,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = expenditure[0]\n    isleft = True\n    for i in range(d):\n        if len(left) == len(right):\n            left.\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1440,"fileType":"python","requestStartTime":1517970540559}}
{"body": {"column":17,"line":68,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = expenditure[0]\n    isleft = True\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n        elif len(left) < len(right):\n            left.\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1514,"fileType":"python","requestStartTime":1517970598818}}
{"body": {"column":33,"line":29,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: ( H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\"))\n  #  1 -> 2 -> 3x2\n  #    -> 2 -> 3\n  # N(H(1,\"\"),[N(2),N(2)])\n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  for heading in headings:\n    tempNodeList = []\n    currentWeight = heading.weight\n    if currentWeight == previous.\n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":847,"fileType":"python","requestStartTime":1517970590277}}
{"body": {"column":26,"line":67,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \n\ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n        else:\n            right.add(expenditure[i])\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1478,"fileType":"python","requestStartTime":1517970718090}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef hackerlandRadioTransmitters(x, k):\n    print sorted(x)\n    num_transmitters = 0\n    distances_btwn_houses = []\n    \n    for i in xrange(0, len(x)):\n        disances_btwn_houses.\n            \n    \n    #print k\n    return num_transmitters\n\nif __name__ == \"__main__\":\n    n, k = raw_input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    x = map(int, raw_input().strip().split(' '))\n    result = hackerlandRadioTransmitters(x, k)\n    print result\n\n\n","offset":210,"fileType":"python","requestStartTime":1517970829098}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    int counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.\n    \n    temp=head\n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":572,"fileType":"python","requestStartTime":1517970846076}}
{"body": {"column":20,"line":58,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return left.\n    elif len(left) < len(right):\n        left.add(expenditure[i])\n        left_or_right.add('L')\n    else:\n        right.add(expenditure[i])\n        left_or_right.add('R') \n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        \n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1277,"fileType":"python","requestStartTime":1517970888996}}
{"body": {"column":37,"line":58,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.\n    elif len(left) < len(right):\n        left.add(expenditure[i])\n        left_or_right.add('L')\n    else:\n        right.add(expenditure[i])\n        left_or_right.add('R') \n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        \n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1294,"fileType":"python","requestStartTime":1517970917429}}
{"body": {"column":50,"line":58,"wordToComplete":"2.","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.\n    elif len(left) < len(right):\n        left.add(expenditure[i])\n        left_or_right.add('L')\n    else:\n        right.add(expenditure[i])\n        left_or_right.add('R') \n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        \n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1307,"fileType":"python","requestStartTime":1517970923804}}
{"body": {"column":20,"line":60,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return left.\n    else:\n        right.add(expenditure[i])\n        left_or_right.add('R') \n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        \n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1362,"fileType":"python","requestStartTime":1517970938221}}
{"body": {"column":20,"line":62,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        \n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1401,"fileType":"python","requestStartTime":1517970957140}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef hackerlandRadioTransmitters(x, k):\n    sorted(x)\n    num_transmitters = 0\n    distances_btwn_houses = []\n    \n    for i in xrange(1, len(x)):\n        distances_btwn_houses.append(x[i] - x[i-1])\n        \n    return math.sum(distances_btwn_houses) / float(2)\n    \n    #print distances_btwn_houses\n    #return num_transmitters\n\nif __name__ == \"__main__\":\n    n, k = raw_input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    x = map(int, raw_input().strip().split(' '))\n    result = hackerlandRadioTransmitters(x, k)\n    print result\n\n\n","offset":252,"fileType":"python","requestStartTime":1517970988653}}
{"body": {"column":18,"line":30,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    int counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":701,"fileType":"python","requestStartTime":1517971041412}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    int counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.next\n        \n    newNode.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":727,"fileType":"python","requestStartTime":1517971050395}}
{"body": {"column":22,"line":32,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    int counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.next\n        \n    newNode.next=temp.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":737,"fileType":"python","requestStartTime":1517971052779}}
{"body": {"column":9,"line":33,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    int counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.next\n        \n    newNode.next=temp.next\n    temp.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":751,"fileType":"python","requestStartTime":1517971054666}}
{"body": {"column":22,"line":33,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    int counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.next\n        \n    newNode.next=temp.next\n    temp.next=newNode.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":764,"fileType":"python","requestStartTime":1517971057330}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.next\n    \n    if temp.\n    \n    newNode.next=temp.next\n    temp.next=newNode.next\n    return head\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":719,"fileType":"python","requestStartTime":1517971112579}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position)):\n        counter=counter+1\n        temp=temp.next\n    \n    if temp.next is None:\n        temp.\n    \n    newNode.next=temp.next\n    temp.next=newNode.next\n    return head\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":746,"fileType":"python","requestStartTime":1517971129027}}
{"body": {"column":17,"line":103,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n        if left_or_right[d] == 'L':\n            left.\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":2484,"fileType":"python","requestStartTime":1517971148448}}
{"body": {"column":40,"line":28,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position) and temp.):\n        counter=counter+1\n        temp=temp.next\n    \n    if temp.next is not None:\n        newNode.next=temp.next\n    temp.next=newNode.next\n    return head\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":660,"fileType":"python","requestStartTime":1517971155217}}
{"body": {"column":18,"line":105,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        elif len(left) < len(right):\n            left.add(expenditure[i])\n            left_or_right.add('L')\n        else:\n            right.add(expenditure[i])\n            left_or_right.add('R')\n            \n        if left_or_right[dth] == 'L':\n            left.pop(expenditure[dth])\n        else:\n            right.\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":2540,"fileType":"python","requestStartTime":1517971178661}}
{"body": {"column":30,"line":48,"wordToComplete":"","code":"\nimport json\nimport sys\nfrom collections import OrderedDict\n\nstorage_service = []\n\n\ndef compare(input_json, storage_json):\n\n    if type(input_json) is list:\n        if type(storage_json) != list:\n            return False\n\n        global_cmp = []\n        for a in input_json:\n            partial_cmp = []\n            for b in storage_json:\n                partial_cmp.append(compare(a, b))\n            global_cmp.append(any(partial_cmp)) \n        return all(global_cmp)\n\n\n    if (type(input_json) is OrderedDict):\n        if (type(storage_json) != OrderedDict):\n                return False\n        for dict_key,dict_value in input_json.items():\n                if dict_key not in storage_json:\n                    return False\n                if not (compare(dict_value,storage_json[dict_key])):\n                    return False\n\n        return True\n\n\n    return (input_json == storage_json) and (type(input_json) is type(storage_json))\n\n    return False\n\n\ndef add_to_storage(command):\n    storage_service.append(json.loads(command, object_pairs_hook=OrderedDict))\n    return \n\n\ndef get_from_storage(command):\n    input_record = json.loads(command, object_pairs_hook=OrderedDict)\n\n    for storage_record in cop.storage_service:\n        if compare(input_record, storage_record):\n            yield storage_record\n\n\ndef delete_from_storage(command):\n    input_record = json.loads(command, object_pairs_hook=OrderedDict)\n    \n    indices = []\n    for i, storage_record in enumerate(storage_service):\n        if compare(input_record, storage_record):\n            indices.append(i)\n    \n\n\n#example = {'app_url': '', 'models': [{'perms': {'add': True, 'change': True, 'delete': True}, 'add_url': '/admin/cms/news/add/', 'admin_url': '/admin/cms/news/', 'name': ''}], 'has_module_perms': True, 'name': u'CMS'}\n#print list(find('admin_url', example))\n\nwhile True:\n    try:\n\n        line  = raw_input()\n        if \"add\" in line:\n            command = str.lstrip(line.split(\"add\")[1])\n            add_to_storage(command)\n            #print storage_service\n\n        elif \"get\" in line:\n            command = str.lstrip(line.split(\"get\")[1])\n            for record in get_from_storage(command):\n                print  json.dumps(record, separators=(',', ':'))\n            \n        elif \"delete\" in line:\n            command = str.lstrip(line.split(\"delete\")[1])\n            delete_from_storage(command)\n\n    except EOFError:\n        break\n\n\n\n","offset":1212,"fileType":"python","requestStartTime":1517971209229}}
{"body": {"column":27,"line":27,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n  while headings:\n        heading = headings.\n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":909,"fileType":"python","requestStartTime":1517971215425}}
{"body": {"column":36,"line":24,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        return newNode\n    \n    if position is 0:\n        print \"POSITION 0\", newNode.\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position) and temp.next is not None):\n        counter=counter+1\n        temp=temp.next\n    \n    if temp.next is not None:\n        newNode.next=temp.next\n    temp.next=newNode.next\n    return head\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":588,"fileType":"python","requestStartTime":1517971283935}}
{"body": {"column":33,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        print \"no head\", newNode.\n        return newNode\n    \n    if position is 0:\n        print \"POSITION 0\", newNode.data\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    while(counter < (position) and temp.next is not None):\n        counter=counter+1\n        temp=temp.next\n    \n    if temp.next is not None:\n        newNode.next=temp.next\n    temp.next=newNode.next\n    return head\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":535,"fileType":"python","requestStartTime":1517971292318}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n        if left_or_right[dth] == 'L':\n            left.pop(expenditure[dth])\n        else:\n            right.pop(expenditure[dth])\n            \n        dth += 1\n        \n    print count\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":355,"fileType":"python","requestStartTime":1517971336643}}
{"body": {"column":31,"line":26,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n  node = Node(Heading(headings., \"\"), [Node(headings[0], [])])\n    \n    while headings:\n        heading = headings.pop()\n        \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":895,"fileType":"python","requestStartTime":1517971336970}}
{"body": {"column":38,"line":44,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n        if left_or_right[dth] == 'L':\n            left.pop(expenditure[dth])\n        else:\n            right.pop(expenditure[dth])\n            \n        dth += 1\n        \n    print count\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":934,"fileType":"python","requestStartTime":1517971352788}}
{"body": {"column":25,"line":26,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n  lastHeading = headings.\n  node = Node(Heading(headings.pop(), \"\"), [Node(headings[0], [])])\n    \n    while headings:\n        heading = headings.pop()\n        \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":889,"fileType":"python","requestStartTime":1517971351134}}
{"body": {"column":34,"line":27,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n  lastHeading = headings.pop()\n  node = Node(Heading(lastHeading., \"\"), [Node(headings[0], [])])\n    \n    while headings:\n        heading = headings.pop()\n        \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":929,"fileType":"python","requestStartTime":1517971357238}}
{"body": {"column":23,"line":26,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    heading = headings.\n    firstNode = Node(headings.pop(), [])\n    \n    while headings:\n        heading = headings.pop()\n        \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":887,"fileType":"python","requestStartTime":1517971432878}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    lastHeading = headings.pop()\n    firstNode = Node(lastHeading, [])\n    lastHeading.\n    while headings:\n        heading = headings.pop()\n        \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":951,"fileType":"python","requestStartTime":1517971454930}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    lastHeading = headings.pop()\n    firstNode = Node(lastHeading, [])\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currHeading.\n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1052,"fileType":"python","requestStartTime":1517971479024}}
{"body": {"column":36,"line":106,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport json\n\n\nproperty_dict = {}\ndocument_dict = {}\ndocId = 0\n\ndef add_document_list_helper(document, currDocId, property_dict):\n    for item in document:\n        found = False\n        for item_dict in property_dict:\n            if(item in item_dict):\n                item_dict[item].append(currDocId)\n                found = True\n        if(not found):\n            property_dict.append({item: [currDocId]})\n            \ndef adder_helper(document, currDocId, property_dict):\n    if(document in property_dict):\n        property_dict[document].append(currDocId)\n    else:\n        property_dict[document] = [currDocId]\n\ndef add_document(document, currDocId, property_dict):\n    #track document properties\n    \n    for key in document:\n        if(key in property_dict):\n            if(isinstance(document[key], list)):\n                add_document_list_helper(document[key], currDocId, property_dict[key])\n            elif(isinstance(document[key], dict)):\n                add_document(document[key], currDocId, property_dict[key])\n            else:\n                adder_helper(document[key], currDocId, property_dict[key])\n        else:\n            if(isinstance(document[key], list)):\n                property_dict[key] = []\n                add_document_list_helper(document[key], currDocId, property_dict[key])\n            elif(isinstance(document[key], dict)):\n                property_dict[key] = {}\n                add_document(document[key], currDocId, property_dict[key])\n            else:\n                property_dict[key] = {document[key]: [currDocId]}\n\ndef compare_list_helper(query, foundSet, property_dict, first):\n    for item in query:\n        found = False\n        for item_dict in property_dict:\n            if(item in item_dict):\n                found = True\n                if(first):\n                    first = False\n                    foundSet = set(item_dict[item])\n                else:\n                    foundSet = set.intersection(foundSet, item_dict[item])\n        if(not found):\n            return (False, [])\n    return (first, foundSet)\n                \ndef compare_query(query, foundSet, property_dict, first):\n    for key in query:\n        if(key in property_dict):\n            if(isinstance(query[key], list)):\n                first, foundSet = compare_list_helper(query[key], foundSet, property_dict[key], first)\n            elif(isinstance(query[key], dict)):\n                first, foundSet = compare_query(query[key], foundSet, property_dict[key], first)\n            else:\n                if(first):\n                    first = False\n                    foundSet = set(property_dict[key][query[key]])\n                else:\n                    foundSet = set.intersection(foundSet, property_dict[key][query[key]])\n        else:\n            return (False, [])\n           \n    return (first, foundSet)\n         \ndef delete_id(id, document, property_dict):\n    \n\nfor line in sys.stdin:\n    line = line.split(\" \", 1)\n    \n    if(line[0] == 'add'):\n        #add document contents\n        document = json.loads(line[1])\n        document_dict[docId] = line[1]\n        add_document(document, docId, property_dict)\n        docId += 1\n    elif(line[0] == 'get'):\n        query = json.loads(line[1])\n        if(len(query) == 0):\n            for key in document_dict:\n                print document_dict[key],\n        else:\n            trash, matches = compare_query(query, set(), property_dict, True)\n            for i in matches:\n                print document_dict[i],\n    elif(line[0] == 'delete'):\n        query = json.loads(line[1])\n        if(len(query) != 0):\n            trash, matches = compare_query(query, set(), property_dict, True)\n            for key in matches:\n                delete_id(key, json.document_dict[key])\n                del document_dict[key]\n                \n    else:\n        print \"invalid command\"\n    \n\n\n","offset":3822,"fileType":"python","requestStartTime":1517971603481}}
{"body": {"column":15,"line":84,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n    print left.\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n        if left_or_right[dth] == 'L':\n            left.pop(expenditure[dth])\n        else:\n            right.pop(expenditure[dth])\n            \n        dth += 1\n        \n    return count\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1969,"fileType":"python","requestStartTime":1517971547357}}
{"body": {"column":16,"line":85,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = -heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n    print left.heap\n    print right.\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n        if left_or_right[dth] == 'L':\n            left.pop(expenditure[dth])\n        else:\n            right.pop(expenditure[dth])\n            \n        dth += 1\n        \n    return count\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":1990,"fileType":"python","requestStartTime":1517971555262}}
{"body": {"column":40,"line":31,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    lastHeading = headings.pop()\n    tempChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currHeadingWeight = currHeading.\n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1081,"fileType":"python","requestStartTime":1517971549016}}
{"body": {"column":29,"line":33,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    lastHeading = headings.pop()\n    tempChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currWeight = currHeading.weight\n        if(currWeight == previousWeight):\n            tempChildrenList.\n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1152,"fileType":"python","requestStartTime":1517971582294}}
{"body": {"column":18,"line":34,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        print \"no head\", newNode.data\n        return newNode\n    \n    if position is 0:\n        print \"POSITION 0\", newNode.data\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    prev=head\n    while(temp is not None and counter < position):\n        counter=counter+1\n        prev=temp\n        temp=temp.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":827,"fileType":"python","requestStartTime":1517971607842}}
{"body": {"column":9,"line":36,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        print \"no head\", newNode.data\n        return newNode\n    \n    if position is 0:\n        print \"POSITION 0\", newNode.data\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    prev=head\n    while(temp is not None and counter < position):\n        counter=counter+1\n        prev=temp\n        temp=temp.next\n        \n    prev.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":850,"fileType":"python","requestStartTime":1517971616712}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at a specific position in a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n#This is a \"method-only\" submission.\n#You only need to complete this method.\ndef InsertNth(head, data, position):\n    newNode=Node(data,None)\n\n    counter=0\n    if head is None:\n        print \"no head\", newNode.data\n        return newNode\n    \n    if position is 0:\n        print \"POSITION 0\", newNode.data\n        newNode.next=head\n        return newNode\n    \n    temp=head\n    prev=head\n    while(temp is not None and counter < position):\n        counter=counter+1\n        prev=temp\n        temp=temp.next\n        \n    prev.next=newNode\n    newNode.\n    \n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n","offset":875,"fileType":"python","requestStartTime":1517971623529}}
{"body": {"column":20,"line":43,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        \n    def pop(self):\n        return heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while True:\n            val = heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n    \nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def push(self, item):\n        heapq.heappush(self.heap, -item)\n        \n    def pop(self):\n        return -heapq.heappop(self.heap)\n    \n    def pop(self, item):\n        removed = []\n        while heapq.:\n            val = -heapq.heappop(self.heap)\n            if val == item:\n                break\n            else:\n                removed.append(-val)\n        \n        for elem in removed:\n            heapq.heappush(self.heap, elem)\n            \n    def __len__(self):\n        return len(self.heap)\n                \ndef median(left, right):\n    if len(left) == len(right):\n        return (-left.heap[0] + right.heap[0]) / 2.0\n    elif len(left) < len(right):\n        return right.heap[0]\n    else:\n        return -left.heap[0]\n        \ndef activityNotifications(expenditure, d):\n    # Complete this function\n    left = MaxHeap()\n    right = MinHeap()\n    \n    count = 0\n    \n    dth = 0\n    left_or_right = []\n    for i in range(d):\n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n    N = len(expenditure)\n    for i in range(d, N):\n        med = median(left, right)\n        cur = expenditure[i]\n        \n        if cur >= med * 2:\n            count += 1\n        \n        if len(left) == len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        elif len(left) < len(right):\n            left.push(expenditure[i])\n            left_or_right.append('L')\n        else:\n            right.push(expenditure[i])\n            left_or_right.append('R')\n            \n        if left_or_right[dth] == 'L':\n            left.pop(expenditure[dth])\n        else:\n            right.pop(expenditure[dth])\n            \n        dth += 1\n        \n    return count\n\n            \n    \n\n        \n\nif __name__ == \"__main__\":\n    n, d = raw_input().strip().split(' ')\n    n, d = [int(n), int(d)]\n    expenditure = map(int, raw_input().strip().split(' '))\n    result = activityNotifications(expenditure, d)\n    print result\n\n\n","offset":896,"fileType":"python","requestStartTime":1517971788876}}
{"body": {"column":19,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef catAndMouse(x, y, z):\n    if abs(x - z) >\n\nif __name__ == \"__main__\":\n    q = int(raw_input().strip())\n    for a0 in xrange(q):\n        x, y, z = raw_input().strip().split(' ')\n        x, y, z = [int(x), int(y), int(z)]\n        result = catAndMouse(x, y, z)\n        print \" \".join(map(str, result))\n\n\n\n\n\n","offset":74,"fileType":"python","requestStartTime":1517972156340}}
{"body": {"column":22,"line":12,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef consecutive(num):\n    counter = 0\n    i = 1\n    while((i*(i+1))/2<num):\n        this = (num*1. - (i*(i+1))/2)/(i + 1)\n        if (this == int(this)):\n            counter += 1\n        i += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num = long(raw_input());\n\n    res = consecutive(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":169,"fileType":"python","requestStartTime":1517972423217}}
{"body": {"column":23,"line":12,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef consecutive(num):\n    counter = 0\n    i = 1\n    while((i*(i+1))/2<num):\n        casted_num = 1.\n        this = (num*1.0 - (i*(i+1))/2)/(i + 1)\n        if (this == int(this)):\n            counter += 1\n        i += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num = long(raw_input());\n\n    res = consecutive(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":170,"fileType":"python","requestStartTime":1517972441675}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    previousWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        if (currWeight < previousWeight):\n            heading.\n        \n    lastHeading = headings.pop()\n    finalChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currWeight = currHeading.weight\n        while(currWeight <= previousWeight):\n            if(currWeight == previousWeight):\n                #can't use append cause need to append to left\n                finalChildrenList = [Node(currHeading,[])] + finalChildrenList\n            else:\n                finalChildrenList = [Node(currHeading, finalChildrenList)]\n        #this list has all children that will become one of the children\n        finalChildrenList\n            \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1029,"fileType":"python","requestStartTime":1517972454772}}
{"body": {"column":18,"line":33,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    previousWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else currWeight:\n            stack.\n        \n    lastHeading = headings.pop()\n    finalChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currWeight = currHeading.weight\n        while(currWeight <= previousWeight):\n            if(currWeight == previousWeight):\n                #can't use append cause need to append to left\n                finalChildrenList = [Node(currHeading,[])] + finalChildrenList\n            else:\n                finalChildrenList = [Node(currHeading, finalChildrenList)]\n        #this list has all children that will become one of the children\n        finalChildrenList\n            \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1087,"fileType":"python","requestStartTime":1517972540655}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef consecutive(num):\n    counter = 0\n    i = 1\n    while((i*(i+1))/2<num>):\n        casted_num = 1.0*num #then later check if this is actually an integer\n        this = (casted_num - (i*(i+1))/2)/(i + 1)\n        actually_an_integer = this == int(this)\n        if (actually_an_integer):\n            counter += 1\n        i += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num = long(raw_input());\n\n    res = consecutive(num);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":145,"fileType":"python","requestStartTime":1517972556867}}
{"body": {"column":36,"line":35,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    previousWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight):\n                poppedHeading = stack.pop()\n                currWeight = popped.\n        \n    lastHeading = headings.pop()\n    finalChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currWeight = currHeading.weight\n        while(currWeight <= previousWeight):\n            if(currWeight == previousWeight):\n                #can't use append cause need to append to left\n                finalChildrenList = [Node(currHeading,[])] + finalChildrenList\n            else:\n                finalChildrenList = [Node(currHeading, finalChildrenList)]\n        #this list has all children that will become one of the children\n        finalChildrenList\n            \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1170,"fileType":"python","requestStartTime":1517972693932}}
{"body": {"column":33,"line":36,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    tempChildrenList = []\n    previousWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                tempChildrenList.\n                previousWeight = poppedHeading.weight\n        \n    lastHeading = headings.pop()\n    finalChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currWeight = currHeading.weight\n        while(currWeight <= previousWeight):\n            if(currWeight == previousWeight):\n                #can't use append cause need to append to left\n                finalChildrenList = [Node(currHeading,[])] + finalChildrenList\n            else:\n                finalChildrenList = [Node(currHeading, finalChildrenList)]\n        #this list has all children that will become one of the children\n        finalChildrenList\n            \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1210,"fileType":"python","requestStartTime":1517972795797}}
{"body": {"column":52,"line":37,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    previousWeight = 0\n    for heading in headings:\n        tempList1 = []\n        currWeight = heading.weight\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            tempList2 = []\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                tempList1.append(Node(poppedHeading.))\n                previousWeight = poppedHeading.weight\n        \n    lastHeading = headings.pop()\n    finalChildrenList = [Node(lastHeading, [])]\n    previousWeight = lastHeading.weight\n    while headings:\n        currHeading = headings.pop()\n        currWeight = currHeading.weight\n        while(currWeight <= previousWeight):\n            if(currWeight == previousWeight):\n                #can't use append cause need to append to left\n                finalChildrenList = [Node(currHeading,[])] + finalChildrenList\n            else:\n                finalChildrenList = [Node(currHeading, finalChildrenList)]\n        #this list has all children that will become one of the children\n        finalChildrenList\n            \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1253,"fileType":"python","requestStartTime":1517972945412}}
{"body": {"column":8,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    (\"\".)\n    return\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":28,"fileType":"python","requestStartTime":1517973038502}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    (\"\".join(map(str.)))\n    return\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":41,"fileType":"python","requestStartTime":1517973060522}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    return s.\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":33,"fileType":"python","requestStartTime":1517973063042}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):\n    print(s.)\n    return\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":32,"fileType":"python","requestStartTime":1517973163340}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\ndef swap_case(s):\n    while(i <= len(s)):\n        if(i == UPPER(i))\n            .\n    \n    return \nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":83,"fileType":"python","requestStartTime":1517973166262}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\ndef swap_case(s):\n    while(i <= len(s)):\n        if(i == i.)\n            \n    \n    return \nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":62,"fileType":"python","requestStartTime":1517973170970}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\ndef swap_case(s):  \n    return s.\nif __name__ == '__main__':\n    s = raw_input()\n    result = swap_case(s)\n    print result\n","offset":35,"fileType":"python","requestStartTime":1517973232201}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    ar.\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":97,"fileType":"python","requestStartTime":1517973276070}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    ar.sort()\n    print ar.\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":117,"fileType":"python","requestStartTime":1517973294582}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    splittedLine = line.\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":79,"fileType":"python","requestStartTime":1517973327401}}
{"body": {"column":51,"line":37,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    tempList1 = []\n    tempList2 = []\n    previousWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if previousWeight == poppedHeading.\n                tempList1.append(Node(poppedHeading,[]))\n                previousWeight = poppedHeading.weight\n                \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1240,"fileType":"python","requestStartTime":1517973327613}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    splittedLine = line.split(\" \")\n    joinedLine = join.\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":112,"fileType":"python","requestStartTime":1517973375281}}
{"body": {"column":30,"line":40,"wordToComplete":"","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order?\n    stack = []\n    tempList1 = []\n    tempList2 = []\n    previousWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    tempList2.append(Node(poppedHeading,[]))\n                else:\n                    tempList1.\n                previousWeight = poppedHeading.weight\n                \n    \n  answerNode = Node(Heading(0, \"\"), [Node(headings[0], [])])\n  previousWeight = 0\n  tempNodeList = []\n  for heading in headings:\n    currentWeight = heading.weight\n    if currentWeight == previous.weight:\n        \n    previousWeight = heading.weight\n  return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1362,"fileType":"python","requestStartTime":1517973360225}}
{"body": {"column":21,"line":4,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    splittedLine = line.split(\" \")\n    joinedLine = \"-\".\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":111,"fileType":"python","requestStartTime":1517973383865}}
{"body": {"column":71,"line":2,"wordToComplete":"You just delved into python.\"","code":"\ndef print_full_name(a, b):\n    print \"Hello \" + a + \" \" + b + \"! \" + \"You just delved into python.\"\n    \nif __name__ == '__main__':\n    first_name = raw_input()\n    last_name = raw_input()\n    print_full_name(first_name, last_name)\n","offset":100,"fileType":"python","requestStartTime":1517973527742}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef Comparison_Num(num1, num2, numtest):\n    # Write your code here.\n if(numtest>)\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    num1 = int(raw_input())\n\n    num2 = int(raw_input())\n\n    numtest = int(raw_input())\n\n    res = Comparison_Num(num1, num2, numtest)\n\n    f.write(str(int(res)) + \"\\n\")\n\n    f.close()\n\n","offset":191,"fileType":"python","requestStartTime":1517973536300}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef Comparison_Num(num1, num2, numtest):\n    # Write your code here.\n if(numtest>num1 && numtest>)\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    num1 = int(raw_input())\n\n    num2 = int(raw_input())\n\n    numtest = int(raw_input())\n\n    res = Comparison_Num(num1, num2, numtest)\n\n    f.write(str(int(res)) + \"\\n\")\n\n    f.close()\n\n","offset":207,"fileType":"python","requestStartTime":1517973540977}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.\n\n\n","offset":178,"fileType":"python","requestStartTime":1517973631372}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.data\n    preOrder(root.)\n\n\n","offset":201,"fileType":"python","requestStartTime":1517973642563}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.data\n    preOrder(root.left)\n    preOrder(root.)\n\n\n","offset":225,"fileType":"python","requestStartTime":1517973646901}}
{"body": {"column":17,"line":2,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    a = magazine.\n    \n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":54,"fileType":"python","requestStartTime":1517973657998}}
{"body": {"column":15,"line":3,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    a = magazine.split(' ')\n    b = ransom.\n    \n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":80,"fileType":"python","requestStartTime":1517973672149}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nresult = []\ndef preOrder(root):\n    if root is not None:\n        result.root.data\n        preOrder(root.left)\n        preOrder(root.right)\n\n\n","offset":215,"fileType":"python","requestStartTime":1517973760912}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = []\n\ndef traverseTree(root):\n    if root is not None:\n        result.\n\ndef preOrder(root):\n    traverseTree(root)\n\n\n","offset":221,"fileType":"python","requestStartTime":1517973840040}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = []\n\ndef traverseTree(root):\n    if root is not None:\n        result.append(root.)\n\ndef preOrder(root):\n    traverseTree(root)\n\n\n","offset":233,"fileType":"python","requestStartTime":1517973841520}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = []\n\ndef traverseTree(root):\n    if root is not None:\n        result.append(root.data)\n    traverseTree(root.)\n\ndef preOrder(root):\n    traverseTree(root)\n\n\n","offset":261,"fileType":"python","requestStartTime":1517973848799}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = []\n\ndef traverseTree(root):\n    if root is not None:\n        result.append(root.data)\n    traverseTree(root.)\n\ndef preOrder(root):\n    traverseTree(root)\n\n\n","offset":261,"fileType":"python","requestStartTime":1517973849832}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = []\n\ndef traverseTree(root):\n    if root is not None:\n        result.append(root.data)\n    traverseTree(root.left)\n    traverseTree(root.)\n\ndef preOrder(root):\n    traverseTree(root)\n\n\n","offset":289,"fileType":"python","requestStartTime":1517973853976}}
{"body": {"column":20,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    for i in range(len(prices) - 1):\n        if nums[i] >\n    print ans\n    print res\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(raw_input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(raw_input());\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n","offset":142,"fileType":"python","requestStartTime":1517973972795}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    for i in range(len(prices) - 1):\n        if nums[i] >.\n    print ans\n    print res\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(raw_input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(raw_input());\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n","offset":143,"fileType":"python","requestStartTime":1517973973556}}
{"body": {"column":26,"line":43,"wordToComplete":"need to pop the rest.","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest.\n    while stack:\n        poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1548,"fileType":"python","requestStartTime":1517973964149}}
{"body": {"column":27,"line":43,"wordToComplete":"need to pop the rest..","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest..\n    while stack:\n        poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1549,"fileType":"python","requestStartTime":1517973964324}}
{"body": {"column":41,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = \"\"\n\ndef traverseTree(root):\n    if root is not None:\n        if len(result) > 0:\n            result = result + \" \" + root.\n    traverseTree(root.left)\n    traverseTree(root.right)\n\ndef preOrder(root):\n    traverseTree(root)\n    for r in result:\n        print r\n\n\n","offset":275,"fileType":"python","requestStartTime":1517973982456}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\nresult = \"\"\n\ndef traverseTree(root):\n    if root is not None:\n        if len(result) > 0:\n            result = result + \" \" + root.data\n        else:\n            result = root.\n    traverseTree(root.left)\n    traverseTree(root.right)\n\ndef preOrder(root):\n    traverseTree(root)\n    for r in result:\n        print r\n\n\n","offset":320,"fileType":"python","requestStartTime":1517973988671}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    ans = 0\n    res = []\n    for i in range(len(prices) - 1):\n        if nums[i] >= nums[i + 1]:\n            ans += nums[i] - nums[i + 1]\n            res.\n    print ans\n    print res\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(raw_input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(raw_input());\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n","offset":239,"fileType":"python","requestStartTime":1517974009920}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line = line.\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":71,"fileType":"python","requestStartTime":1517974077178}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"\ndef ransom_note(magazine, ransom):\n    a = magazine.split(' ')\n    b = ransom.split(' ')\n    seta = {}\n    cnt=0\n    for i in a:\n        if i in seta:\n            seta[i] += 1\n        else:\n            seta[i] = 1\n    for x in b:\n        if x in seta:\n            seta[x]-=1\n        if seta[x]>   \n\n\nm, n = map(int, raw_input().strip().split(' '))\nmagazine = raw_input().strip().split(' ')\nransom = raw_input().strip().split(' ')\nanswer = ransom_note(magazine, ransom)\nif(answer):\n    print \"Yes\"\nelse:\n    print \"No\"\n    \n\n\n","offset":296,"fileType":"python","requestStartTime":1517974081829}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\ndef split_and_join(line):\n    # write your code here\n    line = line.split(\" \")\n    line = line.\nif __name__ == '__main__':\n    line = raw_input()\n    result = split_and_join(line)\n    print result\n","offset":98,"fileType":"python","requestStartTime":1517974086046}}
{"body": {"column":65,"line":41,"wordToComplete":"ok now i see the problem with this apporach.","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    #ok now i see the problem with this apporach.\n                    upperList.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest.. \n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1463,"fileType":"python","requestStartTime":1517974088386}}
{"body": {"column":66,"line":41,"wordToComplete":"ok now i see the problem with this apporach..","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    #ok now i see the problem with this apporach..\n                    upperList.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest.. \n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1464,"fileType":"python","requestStartTime":1517974088528}}
{"body": {"column":105,"line":41,"wordToComplete":"ok now i see the problem with this apporach.. i need as many temp lists as \"levels\".","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    #ok now i see the problem with this apporach.. i need as many temp lists as \"levels\".\n                    upperList.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest.. \n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1503,"fileType":"python","requestStartTime":1517974096471}}
{"body": {"column":106,"line":41,"wordToComplete":"ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"..","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    #ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"..\n                    upperList.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest.. \n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1504,"fileType":"python","requestStartTime":1517974096658}}
{"body": {"column":107,"line":41,"wordToComplete":"ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"...","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        bottomList = []\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            while (currWeight < previousWeight):\n                poppedHeading = stack.pop()\n                if (previousWeight == poppedHeading.weight)\n                    bottomList.append(Node(poppedHeading,[]))\n                else:\n                    #ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"...\n                    upperList.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n    #need to pop the rest.. \n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    return Node(Heading(0, \"\"), [Node(headings[0], [])])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1505,"fileType":"python","requestStartTime":1517974096850}}
{"body": {"column":16,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\n\n\n# Complete the function below.\n\ndef finalPrice(prices):\n    ans = 0\n    res = []\n    for i in range(len(prices) - 1):\n        if prices[i] >= prices[i + 1]:\n            ans += prices[i] - prices[i + 1]\n        else:\n            res.\n    print ans\n    print res\n\n\n\nif __name__ == \"__main__\":\n    prices_cnt = 0\n    prices_cnt = int(raw_input())\n    prices_i = 0\n    prices = []\n    while prices_i < prices_cnt:\n        prices_item = int(raw_input());\n        prices.append(prices_item)\n        prices_i += 1\n\n\n    res = finalPrice(prices);\n    \n\n","offset":261,"fileType":"python","requestStartTime":1517974144480}}
{"body": {"column":11,"line":10,"wordToComplete":"","code":"\nimport sys\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    if root is not None:\n        sy.root.data\n        preOrder(root.left)\n        preOrder(root.right)\n\n\n","offset":210,"fileType":"python","requestStartTime":1517974165515}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\nimport sys\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    if root is not None:\n        sys.root.data\n        preOrder(root.left)\n        preOrder(root.right)\n\n\n","offset":211,"fileType":"python","requestStartTime":1517974166763}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\nimport sys\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    if root is not None:\n        sys.stdout.root.data\n        preOrder(root.left)\n        preOrder(root.right)\n\n\n","offset":218,"fileType":"python","requestStartTime":1517974178210}}
{"body": {"column":61,"line":55,"wordToComplete":"returns the int value for the rgb string or value error.\"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef isValid(colorString):\n    if(colorString[0] is not '#'):\n        return False\n    if (len(colorString) is not 4) :\n        if (len(colorString) is not 7):\n            return False\n    for i in range(1,len(colorString)):\n        int_value = ord(colorString[i])\n        if((int_value >= ord('0') and int_value <= ord('9')) or (int_value >= ord('A') and int_value <= ord('Z')) or (int_value >= ord('a') and int_value <= ord('z'))):\n            continue\n        else:\n            return False\n    return True\n\ndef getBitValue(bit_index, index,colorString):\n    int_bitval = ord(colorString[index])\n    if(int_bitval >= ord('0') and int_bitval <= ord('9')):\n        return (int_bitval-ord('0'))*(pow(16,bit_index))\n    elif((int_bitval >= ord('A') and int_bitval <= ord('Z'))):\n        return (int_bitval-ord('A')+10)*(pow(16,bit_index))\n    else:\n        return (int_bitval-ord('a')+10)*(pow(16,bit_index))\n    return total\n    \ndef convertHexToInt(colorString):\n    total = 0\n    for i in range(0,len(colorString),2):\n        total += getBitValue(i+1,i,colorString)\n        total += getBitValue(i,i+1,colorString)\n    return total\n\ndef expandString(colorString):\n    new_string = \"\"\n    for i in range(len(colorString)):\n        new_string += colorString[i] + colorString[i]\n    return new_string\n\ndef getIntfromRGB(colorString):\n    if(len(colorString) == 3):\n        colorString = expandString(colorString)\n    return convertHexToInt(colorString)\n\"\"\"\n* colorString: the string to be converted\n* @return: integer value of the rbg string\n*\n\"\"\"\ndef css_string_to_color(colorString):\n    \"returns the int value for the rgb string or value error.\"\n    if(not isValid(colorString)):\n        raise ValueError(\"String format should be #rgb or #rrggbb\")\n    return getIntfromRGB(colorString[1:])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _colorString = raw_input()\nexcept:\n    _colorString = None\n\ntry:    \n    res = css_string_to_color(_colorString);\nexcept:\n    res = 'Error'\n    \nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":1715,"fileType":"python","requestStartTime":1517974651665}}
{"body": {"column":140,"line":26,"wordToComplete":"so i could've traveresed to make dict of dicts of index? much easier to add indexes into lists, then later on build the nodes from there.","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front - nope nvm\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n  #so i could've traveresed to make dict of dicts of index? much easier to add indexes into lists, then later on build the nodes from there.\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        upperChildrenList\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            bottomList = []\n            poppedHeading = stack.pop()\n            while (previousWeight == poppedHeading.weight):\n                bottomList.append(Node(poppedHeading,[]))\n            else:\n                #ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"... hmm what do i do\n                upperChildrenList.append(Node(poppedHeading, bottomList))\n            previousWeight = poppedHeading.weight\n            \n    #need to pop the rest.. this is wrong\n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    #ah it has to be 0, [1,[] ,1,[] ,1,[]] since it's not guaranteed there's only one h1\n    return Node(Heading(0, \"\"), [Node(headings[0], finalChildrenList)])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1048,"fileType":"python","requestStartTime":1517974711155}}
{"body": {"column":141,"line":26,"wordToComplete":"so i could've traveresed to make dict of dicts of index? much easier to add indexes into lists, then later on build the nodes from there..","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front - nope nvm\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n  #so i could've traveresed to make dict of dicts of index? much easier to add indexes into lists, then later on build the nodes from there..\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        upperChildrenList\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            bottomList = []\n            poppedHeading = stack.pop()\n            while (previousWeight == poppedHeading.weight):\n                bottomList.append(Node(poppedHeading,[]))\n            else:\n                #ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"... hmm what do i do\n                upperChildrenList.append(Node(poppedHeading, bottomList))\n            previousWeight = poppedHeading.weight\n            \n    #need to pop the rest.. this is wrong\n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    #ah it has to be 0, [1,[] ,1,[] ,1,[]] since it's not guaranteed there's only one h1\n    return Node(Heading(0, \"\"), [Node(headings[0], finalChildrenList)])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1049,"fileType":"python","requestStartTime":1517974711453}}
{"body": {"column":142,"line":26,"wordToComplete":"so i could've traveresed to make dict of dicts of index? much easier to add indexes into lists, then later on build the nodes from there...","code":"\nimport sys\n\nclass Heading:\n  def __init__(self, weight, text):\n    self.weight = weight\n    self.text = text\n\nclass Node:\n  def __init__(self, heading, children):\n    self.heading = heading\n    self.children = children\n\ndef to_outline(headings):\n  \"\"\"Converts a list of input headings into nested nodes\"\"\"\n  # headings is a list of Heading(hlevel, text)\n  # to_html takes in node\n  # children is a list of nodes\n  # Implement this function. Sample code below builds an \n  # outline of only the first heading\n  # from example: [ H(1, \"A\"), H(2,\"\"), H(3,\"\"), H(3,\"\"), H(2,\"\"), H(3,\")]\n  #  (1,\"\"), [((2,\"\"),[((3,\"\"),[]),((3,\"\"),[])]), ((2,\"\"),[((3,\"\"),[])])]\n    # N(H(1,\"\"),[N(H(2),[]),N(2)])\n  #might be better to build from bottom up\n  #meaning put it into stack, build up and pop until reach front - nope nvm\n  #or can i map it: key val 1, 2, 3 but need to retain order? gah couldve done this with index\n  #so i could've traveresed to make dict of dicts of index? much easier to add indexes into lists, then later on build the nodes from there...\n    stack = []\n    finalChildrenList = []\n    previousWeight = 0\n    currWeight = 0\n    for heading in headings:\n        currWeight = heading.weight\n        upperChildrenList\n        if (currWeight >= previousWeight):\n            stack.append(heading)\n        else:\n            bottomList = []\n            poppedHeading = stack.pop()\n            while (previousWeight == poppedHeading.weight):\n                bottomList.append(Node(poppedHeading,[]))\n            else:\n                #ok now i see the problem with this apporach.. i need as many temp lists as \"levels\"... hmm what do i do\n                upperChildrenList.append(Node(poppedHeading, bottomList))\n            previousWeight = poppedHeading.weight\n            \n    #need to pop the rest.. this is wrong\n    while stack:\n        bottomList = []\n        poppedHeading = stack.pop()\n        if (previousWeight == poppedHeading.weight)\n            bottomList.append(Node(poppedHeading,[]))\n        else:\n            tempList1.append(Node(poppedHeading, bottomList))\n                previousWeight = poppedHeading.weight\n                \n    #ah it has to be 0, [1,[] ,1,[] ,1,[]] since it's not guaranteed there's only one h1\n    return Node(Heading(0, \"\"), [Node(headings[0], finalChildrenList)])\n\ndef parse(record):\n  \"\"\"Parses a line of input. \n  This implementation is correct for all predefined test cases.\"\"\"\n  (hlevel, text) = record.split(\" \", 1)\n  return Heading(int(hlevel[1:]), text.strip())\n\ndef to_html(node):\n  \"\"\"Converts a node to HTML. \n  This implementation is correct for all predefined test cases.\"\"\"\n  child_html = \"<ol>\" + \"\\n\".join(\n    [\"<li>\" + to_html(child) + \"</li>\" for child in node.children]\n  ) + \"</ol>\" if node.children else \"\"\n\n  return (node.heading.text and node.heading.text + \"\\n\") + child_html\n\nheadings = [parse(line) for line in sys.stdin.readlines()]\noutline = to_outline(headings)\nhtml = to_html(outline)\nprint html\n\n\n","offset":1050,"fileType":"python","requestStartTime":1517974711639}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    list = [N]\n    list.\n    \n    \n\n\n","offset":78,"fileType":"python","requestStartTime":1517974819346}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    list = [N]\n    list.insert(2,3)\n    print(list)\n    list.\n    \n    \n\n\n","offset":115,"fileType":"python","requestStartTime":1517974837596}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    list = [N]\n    list.insert(2,3)\n    print(list)\n    list.remove(2)\n    list.\n    \n    \n    \n\n\n","offset":134,"fileType":"python","requestStartTime":1517974869023}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    list = [N]\n    list.insert(2,3)\n    print(list)\n    list.remove(2)\n    list.append(4)\n    list.\n    \n    \n    \n\n\n","offset":153,"fileType":"python","requestStartTime":1517974877154}}
{"body": {"column":9,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    list = [N]\n    list.insert(2,3)\n    print(list)\n    list.remove(2)\n    list.append(4)\n    list.sort\n    print(list)\n    list.\n    \n    \n    \n\n\n","offset":183,"fileType":"python","requestStartTime":1517974889749}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    list = [N]\n    list.insert(2,3)\n    print(list)\n    list.remove(2)\n    list.append(4)\n    list.sort\n    print(list)\n    list.pop\n    list.\n    \n    \n    \n\n\n","offset":196,"fileType":"python","requestStartTime":1517974893549}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    print(N)\n    list = []\n    list.insert(0,5)\n    list.\n    print(list)\n    list.remove(2)\n    list.append(4)\n    list.sort\n    print(list)\n    list.pop\n    list.reverse\n    print(list)\n    \n    \n    \n\n\n","offset":111,"fileType":"python","requestStartTime":1517974958379}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    print(N)\n    list = []\n    list.insert(0,5)\n    list.insert(1,10)\n    list.\n    print(list)\n    list.remove(2)\n    list.append(4)\n    list.sort\n    print(list)\n    list.pop\n    list.reverse\n    print(list)\n    \n    \n    \n\n\n","offset":133,"fileType":"python","requestStartTime":1517974965758}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    print(N)\n    list = []\n    list.insert(0,5)\n    list.insert(1,10)\n    list.insert(0,6)\n    print(list)\n    list.remove(6)\n    list.append(9)\n    list.\n    list.sort\n    print(list)\n    list.pop\n    list.reverse\n    print(list)\n    \n    \n    \n\n\n","offset":208,"fileType":"python","requestStartTime":1517974980327}}
{"body": {"column":54,"line":35,"wordToComplete":"and returns the appropriate int value accordingly.\"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef isValid(colorString):\n    if(colorString[0] is not '#'):\n        return False\n    if (len(colorString) is not 4) :\n        if (len(colorString) is not 7):\n            return False\n    for i in range(1,len(colorString)):\n        int_value = ord(colorString[i])\n        if( \n            (int_value >= ord('0') and int_value <= ord('9')) or\n            (int_value >= ord('A') and int_value <= ord('Z')) or\n            (int_value >= ord('a') and int_value <= ord('z'))\n          ):\n            continue\n        else:\n            return False\n    return True\n\n\"\"\"\n* bit_index: index of the bit in power of 16\n* index: index to get char from string\n* colorString: the string to be converted\n* @return: integer value of the single hex character\n*\n\"\"\"\ndef getBitValue(bit_index, index, colorString):\n    \"checks the range of the int value of hex character \\\\\n    and returns the appropriate int value accordingly.\"\n    int_bitval = ord(colorString[index])\n    if(int_bitval >= ord('0') and int_bitval <= ord('9')):\n        return (int_bitval-ord('0'))*(pow(16,bit_index))\n    elif((int_bitval >= ord('A') and int_bitval <= ord('Z'))):\n        return (int_bitval-ord('A')+10)*(pow(16,bit_index))\n    else:\n        return (int_bitval-ord('a')+10)*(pow(16,bit_index))\n    return total\n\n\"\"\"\n* colorString: the string to be converted\n* @return: integer value of the rbg string\n*\n\"\"\"\ndef convertHexToInt(colorString):\n    \"converts index by index to return the int value.\"\n    total = 0\n    for i in range(0,len(colorString),2):\n        #since the digits are reversed if we move red to lowest bits\n        #blue to higest bit position, we switch the indices for power to 16.\n        total += getBitValue(i+1,i,colorString)\n        total += getBitValue(i,i+1,colorString)\n    return total\n\n\"\"\"\n* colorString: the string to be converted\n* @return: the string expanded to long form\n*\n\"\"\"\ndef expandString(colorString):\n    \"the string is expanded after doubling each index value.\"\n    new_string = \"\"\n    for i in range(len(colorString)):\n        new_string += colorString[i] + colorString[i]\n    return new_string\n\n\"\"\"\n* colorString: the string to be converted\n* @return: integer value of the rbg string\n*\n\"\"\"\ndef getIntfromRGB(colorString):\n    \"helper function. returns the int value for hex code\"\n    #expand the string if in short form\n    if(len(colorString) == 3):\n        colorString = expandString(colorString)\n    return convertHexToInt(colorString)\n\n\"\"\"\n* colorString: the string to be converted\n* @return: integer value of the rbg string\n*\n\"\"\"\ndef css_string_to_color(colorString):\n    \"returns the int value for the rgb string or value error.\"\n    if(not isValid(colorString)):\n        raise ValueError(\"String format should be #rgb or #rrggbb\")\n    return getIntfromRGB(colorString[1:])\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _colorString = raw_input()\nexcept:\n    _colorString = None\n\ntry:    \n    res = css_string_to_color(_colorString);\nexcept:\n    res = 'Error'\n    \nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":980,"fileType":"python","requestStartTime":1517975622040}}
{"body": {"column":27,"line":12,"wordToComplete":"","code":"\n#!/bin/python\nfrom collections import OrderedDict\nimport sys\n25\n100, 50, 40, 20\n0  ,  1 , 2, 3\ns     e    e  e \ndef getPosition(scores, a):\n    start = 0\n    mid = len(scores)/2\n    end = len(scores) -1\n    while ((end - start) >  ):\n        if a >= scores[mid]:\n            end = mid\n            mid = (end - start) / 2\n        else:\n            start = mid\n        mid = start + (end - start) / 2 + 1\n    \n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    scores = list(OrderedDict.fromkeys(scores))\n    ret = list()\n    for a in alice:\n        ret.append(getPosition(scores, a))\n    return ret\n        \nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    scores = map(int, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    alice = map(int, raw_input().strip().split(' '))\n    result = climbingLeaderboard(scores, alice)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":232,"fileType":"python","requestStartTime":1517975716615}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"\n#!/bin/python\nfrom collections import OrderedDict\nimport sys\n25\n100, 50, 40, 20\n0  ,  1 , 2, 3\ns     e    e  e \ndef getPosition(scores, a):\n    start = 0\n    mid = len(scores)/2\n    end = len(scores) -1\n    while ((end - start) > 1 ):\n        if a >= scores[mid]:\n            end = mid\n        else:\n            start = mid\n        mid = start + (end - start) / 2\n    \n    if a >\n    \n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    scores = list(OrderedDict.fromkeys(scores))\n    ret = list()\n    for a in alice:\n        ret.append(getPosition(scores, a))\n    return ret\n        \nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    scores = map(int, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    alice = map(int, raw_input().strip().split(' '))\n    result = climbingLeaderboard(scores, alice)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":381,"fileType":"python","requestStartTime":1517975756988}}
{"body": {"column":25,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\nimport queue\n\nmoves = [[1, 2],\n         [2, 1],\n         [2, -1],\n         [1, -2],\n         [-1, -2],\n         [-2, -1],\n         [-2, 1],\n         [-1, 2]]\n\ndef valid(rows, cols, start_row, start_col):\n    return start_row >= 0 and start_col >= 0 and \\\n           start_row < rows and start_col < cols\n    \ndef find_minimum_number_of_moves(rows, cols, start_row, start_col, end_row, end_col):\n    if not valid(rows, cols, start_row, start_col):\n        return -1\n    \n    choices = queue.Queue()\n    choices.put((start_row, start_col))\n    choices.put(None)\n    \n    while not choices.empty():\n        choice = choices.\n        for move in moves:\n        \n\n    while choices:\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rows = int(raw_input())\n\n    cols = int(raw_input())\n\n    start_row = int(raw_input())\n\n    start_col = int(raw_input())\n\n    end_row = int(raw_input())\n\n    end_col = int(raw_input())\n\n    res = find_minimum_number_of_moves(rows, cols, start_row, start_col, end_row, end_col)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":730,"fileType":"python","requestStartTime":1517975911058}}
{"body": {"column":19,"line":12,"wordToComplete":"","code":"\n#!/bin/python\nfrom collections import OrderedDict\nimport sys\nimport math\n100, 50\n0    1\ndef getPosition(scores, a):\n    print \"working on %d\" % (a)\n    start = 0\n    end = len(scores) -1\n    while (start <= end):\n        mid = math.ceilfloat()\n        if a == scores[mid]:\n            return mid+1\n        if a >= scores[mid]:\n            end = mid\n        else:\n            start = mid\n    print \"start %d end %d mid %d\" % (start, end, mid)\n    if a >= scores[start]:\n        return start + 1\n    if a < scores[end]:\n        return end + 1\n    return start\n    \n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    scores = list(OrderedDict.fromkeys(scores))\n    print scores\n    ret = list()\n    for a in alice:\n        ret.append(getPosition(scores, a))\n    return ret\n        \nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    scores = map(int, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    alice = map(int, raw_input().strip().split(' '))\n    result = climbingLeaderboard(scores, alice)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":234,"fileType":"python","requestStartTime":1517976277913}}
{"body": {"column":58,"line":71,"wordToComplete":"in any case, I would have done similar moves for bishop.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n#Find the type \"Knight\" or \"Bishop\"\nmove = str(raw_input())\n\n# Get the length of Number \ntele_number = int(raw_input())\n\n# Get eligible list of numbers  \nnumbers = map(int, raw_input().split())\n\n# Get the dimensions of the rectangular grid\nrows = int(raw_input())\ncolumns = int(raw_input())\n\n# Get the grid numbers and make numpy matrix \ninput_rows = []\nfor i in range(rows):\n    input_rows.append(raw_input().split())\n\nimport numpy as np\n\nx = np.matrix(input_rows)\n\n\nA = list(np.array(x).ravel())\nineligible_chars = []\nfor i in A:\n    if i not in str_numbers:\n        ineligible_chars.append(i)\n\nineligible_pos = []\nfor i in ineligible_chars:\n    start_matrix = np.where(x == i)\n\n    ineligible_pos.append([j[0] for j in start_matrix])\n\nvalid_numbers_str = map(str,np.array(numbers))\n\ndef knightList(x,y,int1,int2):\n\n    return [(x+int1,y+int2),(x-int1,y+int2),(x+int1,y-int2),\n            (x-int1,y-int2),(x+int2,y+int1),(x-int2,y+int1),\n            (x+int2,y-int1),(x-int2,y-int1)]\n\n\neligible_pos = []\n\nfor i in str_numbers:\n\n    start_matrix = np.where(x == i)\n    eligible_pos.append((start_matrix[0][0],start_matrix[1][0]))\n\n\ndef knight_moves (start_x, start_y, tele_number, grid):\n    i = tele_number\n\n    while i > 5:\n        possible_moves_list = knightList(start_x, start_y, 2, 1)\n\n        to_move = list(set(possible_moves_list).intersection(set(eligible_pos)))\n\n        for j in to_move:\n             knight_moves(j[0], j[1], i-1, grid)\n\n\n        i = i - 1\n        \n        \n# even though I am stuck in recursive relation I think that's the way.I think while was the wrong way and wasted my time.\n# in any case, I would have done similar moves for bishop.\n\n","offset":1740,"fileType":"python","requestStartTime":1517976351714}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef triangle(a, b, c):\n    if (a > 0 and b >)\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    a = int(raw_input());\n\n    b = int(raw_input());\n\n    c = int(raw_input());\n\n    res = triangle(a, b, c);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":115,"fileType":"python","requestStartTime":1517976594300}}
{"body": {"column":10,"line":20,"wordToComplete":"","code":"\n#!/bin/python\nfrom collections import OrderedDict\nimport sys\nimport math\n100, 50\n0    1\ndef getPosition(scores, a):\n    print \"working on %d\" % (a)\n    start = 0\n    end = len(scores) -1\n    while (start < end):\n        mid = (start + end)/2 +1\n        if a == scores[mid]:\n            return mid+1\n        if a >= scores[mid]:\n            end = mid - 1\n        else:\n            start = mid\n    print \"start %d end %d mid %d\" % (start, end, mid)\n    if a >\n    \n\ndef climbingLeaderboard(scores, alice):\n    # Complete this function\n    scores = list(OrderedDict.fromkeys(scores))\n    print scores\n    ret = list()\n    for a in alice:\n        ret.append(getPosition(scores, a))\n    return ret\n        \nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    scores = map(int, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    alice = map(int, raw_input().strip().split(' '))\n    result = climbingLeaderboard(scores, alice)\n    print \"\\n\".join(map(str, result))\n\n\n\n\n","offset":459,"fileType":"python","requestStartTime":1517976726050}}
{"body": {"column":20,"line":40,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\nimport queue\n\nmoves = [[1, 2],\n         [2, 1],\n         [2, -1],\n         [1, -2],\n         [-1, -2],\n         [-2, -1],\n         [-2, 1],\n         [-1, 2]]\n\ndef valid(rows, cols, start_row, start_col):\n    return start_row >= 0 and start_col >= 0 and \\\n           start_row < rows and start_col < cols\n    \ndef find_minimum_number_of_moves(rows, cols, start_row, start_col, end_row, end_col):\n    if not valid(rows, cols, start_row, start_col):\n        return -1\n    \n    count = 1\n    choices = queue.Queue()\n    choices.put((start_row, start_col))\n    choices.put(None)\n    \n    while not choices.empty():\n        choice = choices.get()\n        if choice[0] == end_row and choice[1] == end_col:\n            return count\n            \n        if choice is None:\n            count += 1\n            choices.\n        else:\n            for move in moves:\n                newPosition = [choice[0] + move[0], choice[1] + move[1]]\n                if valid(rows, cols, newPosition[0], newPosition[1])\n                    choices.put((newPosition[0], newPosition[1]))\n            \n    return -1\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rows = int(raw_input())\n\n    cols = int(raw_input())\n\n    start_row = int(raw_input())\n\n    start_col = int(raw_input())\n\n    end_row = int(raw_input())\n\n    end_col = int(raw_input())\n\n    res = find_minimum_number_of_moves(rows, cols, start_row, start_col, end_row, end_col)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":916,"fileType":"python","requestStartTime":1517976851541}}
{"body": {"column":11,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef delta_encode(array):\n    a = zip array[1:] array\n    b = []\n    for i in a:\n        b .\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    array_cnt = 0\n    array_cnt = int(raw_input())\n    array_i = 0\n    array = []\n    while array_i < array_cnt:\n        array_item = int(raw_input());\n        array.append(array_item)\n        array_i += 1\n\n\n    res = delta_encode(array);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":162,"fileType":"python","requestStartTime":1517976951906}}
{"body": {"column":11,"line":12,"wordToComplete":"a","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef delta_encode(array):\n    a = zip array[1:] array\n    b = []\n    for i in a:\n        b.a\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    array_cnt = 0\n    array_cnt = int(raw_input())\n    array_i = 0\n    array = []\n    while array_i < array_cnt:\n        array_item = int(raw_input());\n        array.append(array_item)\n        array_i += 1\n\n\n    res = delta_encode(array);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":162,"fileType":"python","requestStartTime":1517976952367}}
{"body": {"column":27,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef delta_encode(array):\n    a = zip(array[1:], array)\n    b = [array[0]]\n    for i in a:\n        b.append(i[0]-i[1])\n    for j in b:\n        if (j < -127 or j >)\n        print(j)\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    array_cnt = 0\n    array_cnt = int(raw_input())\n    array_i = 0\n    array = []\n    while array_i < array_cnt:\n        array_item = int(raw_input());\n        array.append(array_item)\n        array_i += 1\n\n\n    res = delta_encode(array);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":232,"fileType":"python","requestStartTime":1517977235768}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef delta_encode(array):\n    a = zip(array[1:], array)\n    b = [array[0]]\n    for i in a:\n        b.append(i[0]-i[1])\n    c = [b[0]]\n    print(b[0])   \n    for j in b[1:]:\n        if (j < -127 or j > 127):\n            c.(-128)\n        print(j)\n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    array_cnt = 0\n    array_cnt = int(raw_input())\n    array_i = 0\n    array = []\n    while array_i < array_cnt:\n        array_item = int(raw_input());\n        array.append(array_item)\n        array_i += 1\n\n\n    res = delta_encode(array);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":291,"fileType":"python","requestStartTime":1517977311099}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef delta_encode(array):\n    a = zip(array[1:], array)\n    b = [array[0]]\n    for i in a:\n        b.append(i[0]-i[1])\n    c = [b[0]]\n    print(b[0])   \n    for j in b[1:]:\n        if (j < -127 or j > 127):\n            c.append(-128)\n        c.(j)\n    \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    array_cnt = 0\n    array_cnt = int(raw_input())\n    array_i = 0\n    array = []\n    while array_i < array_cnt:\n        array_item = int(raw_input());\n        array.append(array_item)\n        array_i += 1\n\n\n    res = delta_encode(array);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":314,"fileType":"python","requestStartTime":1517977313506}}
{"body": {"column":30,"line":46,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\nimport Queue\n\nmoves = [[1, 2],\n         [2, 1],\n         [2, -1],\n         [1, -2],\n         [-1, -2],\n         [-2, -1],\n         [-2, 1],\n         [-1, 2]]\n\ndef valid(rows, cols, start_row, start_col):\n    return start_row >= 0 and start_col >= 0 and \\\n           start_row < rows and start_col < cols\n    \ndef find_minimum_number_of_moves(rows, cols, start_row, start_col, end_row, end_col):\n    if not valid(rows, cols, start_row, start_col):\n        return -1\n    \n    count = 0\n    traversed = set()\n    choices = Queue.Queue()\n    choices.put((start_row, start_col))\n    choices.put(None)\n    \n    while not choices.empty():\n        choice = choices.get()\n        if choice is None:\n            count += 1\n            choices.put(None)\n        else:\n            if choice[0] == end_row and choice[1] == end_col:\n                return count\n            for move in moves:\n                pos = [choice[0] + move[0], choice[1] + move[1]]\n                if valid(rows, cols, pos[0], pos[1]) and (pos[0], pos[1]) not in traversed:\n                    choices.put((pos[0], pos[1]))\n                    traversed.\n            \n    return -1\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rows = int(raw_input())\n\n    cols = int(raw_input())\n\n    start_row = int(raw_input())\n\n    start_col = int(raw_input())\n\n    end_row = int(raw_input())\n\n    end_col = int(raw_input())\n\n    res = find_minimum_number_of_moves(rows, cols, start_row, start_col, end_row, end_col)\n\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n\n","offset":1225,"fileType":"python","requestStartTime":1517977584465}}
{"body": {"column":10,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef howManyAgentsToAdd(noOfCurrentAgents, callsTimes):\n    minTime = min(map(lambda x: x[0], callTimes))\n    maxTime = max(map(lambda x: x[1], callTimes))\n    newCT = []\n    for i in callTimes:\n        i.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    noOfCurrentAgents = int(raw_input());\n\n    callsTimes_rows = 0\n    callsTimes_cols = 0\n    callsTimes_rows = int(raw_input())\n    callsTimes_cols = int(raw_input())\n\n    callsTimes = []\n    for callsTimes_i in xrange(callsTimes_rows):\n        callsTimes_temp = map(int,raw_input().strip().split(' '))\n        callsTimes.append(callsTimes_temp)\n\n    res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":275,"fileType":"python","requestStartTime":1517977593904}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef howManyAgentsToAdd(noOfCurrentAgents, callsTimes):\n    minTime = min(map(lambda x: x[0], callTimes))\n    maxTime = max(map(lambda x: x[1], callTimes))\n    newCT = []\n    for i in callTimes:\n        newCT.\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    noOfCurrentAgents = int(raw_input());\n\n    callsTimes_rows = 0\n    callsTimes_cols = 0\n    callsTimes_rows = int(raw_input())\n    callsTimes_cols = int(raw_input())\n\n    callsTimes = []\n    for callsTimes_i in xrange(callsTimes_rows):\n        callsTimes_temp = map(int,raw_input().strip().split(' '))\n        callsTimes.append(callsTimes_temp)\n\n    res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":279,"fileType":"python","requestStartTime":1517977596233}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef howManyAgentsToAdd(noOfCurrentAgents, callsTimes):\n    minTime = min(map(lambda x: x[0], callTimes))\n    maxTime = max(map(lambda x: x[1], callTimes))\n    newCT = []\n    for i in callTimes:\n        newCT.append(i[0] - minTime, i[1] - minTime)\n    allTimes = []\n    for i in newCT:\n        alltimes.\n    x = [0 for i in range()]\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    noOfCurrentAgents = int(raw_input());\n\n    callsTimes_rows = 0\n    callsTimes_cols = 0\n    callsTimes_rows = int(raw_input())\n    callsTimes_cols = int(raw_input())\n\n    callsTimes = []\n    for callsTimes_i in xrange(callsTimes_rows):\n        callsTimes_temp = map(int,raw_input().strip().split(' '))\n        callsTimes.append(callsTimes_temp)\n\n    res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":373,"fileType":"python","requestStartTime":1517977726869}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef howManyAgentsToAdd(noOfCurrentAgents, callsTimes):\n    minTime = min(map(lambda x: x[0], callTimes))\n    maxTime = max(map(lambda x: x[1], callTimes))\n    newCT = []\n    for i in callTimes:\n        newCT.append(i[0] - minTime, i[1] - minTime)\n    allTimes = []\n    for i in newCT:\n        allTimes.\n    x = [0 for i in range()]\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    noOfCurrentAgents = int(raw_input());\n\n    callsTimes_rows = 0\n    callsTimes_cols = 0\n    callsTimes_rows = int(raw_input())\n    callsTimes_cols = int(raw_input())\n\n    callsTimes = []\n    for callsTimes_i in xrange(callsTimes_rows):\n        callsTimes_temp = map(int,raw_input().strip().split(' '))\n        callsTimes.append(callsTimes_temp)\n\n    res = howManyAgentsToAdd(noOfCurrentAgents, callsTimes);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":373,"fileType":"python","requestStartTime":1517977729130}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\ndef array_left_rotation(a, n, k):\n    count = n\n    arr = [a:]\n    for i in xrange(n):\n        arr.\n\nn, k = map(int, raw_input().strip().split(' '))\na = map(int, raw_input().strip().split(' '))\nanswer = array_left_rotation(a, n, k);\nprint ' '.join(map(str,answer))\n\n\n","offset":101,"fileType":"python","requestStartTime":1517977885499}}
{"body": {"column":9,"line":9,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.\n    a=len(prices)\n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":107,"fileType":"python","requestStartTime":1517978089852}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    if a>\n    if prices[1]\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":136,"fileType":"python","requestStartTime":1517978355901}}
{"body": {"column":24,"line":14,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    price=[]\n    if a>2:\n        if prices[1]>=1.prices[0]:\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":190,"fileType":"python","requestStartTime":1517978453081}}
{"body": {"column":28,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    \ndef isOutpaced(pos1, v1, pos2, v2):\n    if pos1 >= pos2 and v1 > v2:\n        return true\n    if pos2 >= pos1 and v2 >\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":210,"fileType":"python","requestStartTime":1517978559052}}
{"body": {"column":18,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    equal = []\n    for i, ele in enumerate(arr):\n        if ele > pivot:\n            right.\n        elif ele < pivot:\n            left += [ele]\n        else:\n            equal += [ele]\n        \n    return left + equal + right\n            \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    result = quickSort(arr)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":217,"fileType":"python","requestStartTime":1517978608625}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    equal = []\n    for i, ele in enumerate(arr):\n        if ele > pivot:\n            right.append(ele)\n        elif ele < pivot:\n            left.\n        else:\n            equal += [ele]\n        \n    return left + equal + right\n            \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    result = quickSort(arr)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":272,"fileType":"python","requestStartTime":1517978613948}}
{"body": {"column":12,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  closest_subtring(intList, n):\n    sum=[]\n    for i in range(len(intList)):\n        tempSum=0\n        for k in range(i+1):\n            tempSum+=intList[k]\n        sum.\n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_intList_cnt = 0\n_intList_cnt = int(raw_input())\n_intList_i=0\n_intList = []\nwhile _intList_i < _intList_cnt:\n    _intList_item = int(raw_input());\n    _intList.append(_intList_item)\n    _intList_i+=1\n    \n\n\n_n = int(raw_input());\n\nres = closest_subtring(_intList, _n)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":242,"fileType":"python","requestStartTime":1517978616019}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef quickSort(arr):\n    # Complete this function\n    pivot = arr[0]\n    left = []\n    right = []\n    equal = []\n    for i, ele in enumerate(arr):\n        if ele > pivot:\n            right.append(ele)\n        elif ele < pivot:\n            left.append(ele)\n        else:\n            equal.\n        \n    return left + equal + right\n            \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    result = quickSort(arr)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":316,"fileType":"python","requestStartTime":1517978620301}}
{"body": {"column":45,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef acidNaming(acid_name):\n    if 'hydro'.find(acid_name) == 0 and 'ic'.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        acid_name = raw_input().strip()\n        result = acidNaming(acid_name)\n        print result\n\n\n\n","offset":101,"fileType":"python","requestStartTime":1517978764336}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\n\nwhile (not arr.)\n\n\n","offset":121,"fileType":"python","requestStartTime":1517978912699}}
{"body": {"column":8,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\n\nwhile (not arr.empty()):\n    arr.\n\n\n","offset":139,"fileType":"python","requestStartTime":1517978919034}}
{"body": {"column":8,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\nres = []\nwhile (not arr.empty()):\n    res.arr.pop()\n\n\n","offset":147,"fileType":"python","requestStartTime":1517978939338}}
{"body": {"column":8,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\nres = []\nwhile (not arr.empty()):\n    res.append(arr.pop())\n    \ns = \" \".\n\n\n","offset":178,"fileType":"python","requestStartTime":1517978960457}}
{"body": {"column":23,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(reviews):\n        r = reviews[i]\n        hid = hotel_ids[i]\n        for k in keywords:\n            count += r.\n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":324,"fileType":"python","requestStartTime":1517978981322}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(reviews):\n        r = reviews[i]\n        hid = hotel_ids[i]\n        for k in keywords:\n            count += len(re.)\n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":329,"fileType":"python","requestStartTime":1517978984640}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\nres = []\nwhile (len(res) > ):\n    res.append(arr.pop())\n    \ns = \" \".join(res)\nprint s\n\n\n","offset":132,"fileType":"python","requestStartTime":1517978988832}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(reviews):\n        r = reviews[i]\n        hid = hotel_ids[i]\n        for k in keywords:\n            count += len(re.findall(k, r))\n        counts[hid] += count\n    items = counts.\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":392,"fileType":"python","requestStartTime":1517979060196}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    n = Node(data, head.)\n\n \n\n\n\n\n","offset":366,"fileType":"python","requestStartTime":1517979129603}}
{"body": {"column":9,"line":17,"wordToComplete":"","code":"\n\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n    n = Node(data, head.next)\n    head.\n\n \n\n\n\n\n","offset":381,"fileType":"python","requestStartTime":1517979142514}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=prices[0]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":240,"fileType":"python","requestStartTime":1517979253287}}
{"body": {"column":20,"line":17,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=prices[0]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp=bp*1.\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":271,"fileType":"python","requestStartTime":1517979279781}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=prices[0]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp=bp*1.01\n        else:\n            number.\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":307,"fileType":"python","requestStartTime":1517979291385}}
{"body": {"column":7,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    bp.\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp=bp*1.01\n        else:\n            number.append(1)\n           \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":158,"fileType":"python","requestStartTime":1517979313102}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head\n    cur_val = head.\n    while (p != None)\n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":390,"fileType":"python","requestStartTime":1517979332548}}
{"body": {"column":13,"line":18,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.\n    cur_val = head.data\n    while (p != None)\n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":371,"fileType":"python","requestStartTime":1517979336138}}
{"body": {"column":13,"line":21,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    cur_val = head.data\n    while (p != None):\n        if p.\n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":436,"fileType":"python","requestStartTime":1517979356349}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    cur_val = head.data\n    while (p != None):\n        if p.data == cur_val:\n        else:\n            cur_val = p.\n                \n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":491,"fileType":"python","requestStartTime":1517979374354}}
{"body": {"column":13,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass Vector:\n    def __init__(self, position, pace):\n        self.\ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    t = 1\n    low = 1\n    high = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(pos1, v1, pos2, v2):\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":96,"fileType":"python","requestStartTime":1517979390639}}
{"body": {"column":14,"line":25,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    cur_val = head.data\n    while (p != None):\n        if p.data == cur_val:\n        else:\n            cur_val = p.data\n            \n        p = p.\n                \n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":523,"fileType":"python","requestStartTime":1517979381570}}
{"body": {"column":15,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp,append(prices[0]*)\n        else:\n            number.append(1)\n            bp.\n           \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":336,"fileType":"python","requestStartTime":1517979391375}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass Vector:\n    def __init__(self, position, pace):\n        self.position = position\n        self. \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    t = 1\n    low = 1\n    high = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(pos1, v1, pos2, v2):\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":130,"fileType":"python","requestStartTime":1517979394740}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp.append(prices[0]*)\n        else:\n            number.append(1)\n            bp.\n           \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":259,"fileType":"python","requestStartTime":1517979394295}}
{"body": {"column":34,"line":20,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp.append(prices[0]*)\n        else:\n            number.append(1)\n            bp.append(prices[0]*0.)\n           \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":355,"fileType":"python","requestStartTime":1517979408979}}
{"body": {"column":34,"line":17,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp.append(prices[0]*0.)\n        else:\n            number.append(1)\n            bp.append(prices[0]*0.99)\n           \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":278,"fileType":"python","requestStartTime":1517979412286}}
{"body": {"column":26,"line":18,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp.append(prices[0]*0.99)\n        elif prices[1]<=0.*prices[0]:\n            number.append(1)\n            bp.append(prices[0]*0.99)\n           \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":308,"fileType":"python","requestStartTime":1517979428045}}
{"body": {"column":26,"line":22,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    prev = head\n    cur_val = head.data\n    while (p != None):\n        if p.data == prev.:\n            \n        else:\n            cur_val = p.data\n            \n        p = p.next\n        \n    return head\n                \n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":465,"fileType":"python","requestStartTime":1517979446290}}
{"body": {"column":20,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.\ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    t = 1\n    low = 1\n    high = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(pos1, v1, pos2, v2):\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":204,"fileType":"python","requestStartTime":1517979458414}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    prev = head\n    cur_val = head.data\n    while (p != None):\n        if p.data == prev.data:\n            prev.\n        else:\n            cur_val = p.data\n            \n        p = p.next\n        \n    return head\n                \n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":488,"fileType":"python","requestStartTime":1517979450658}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    prev = head\n    cur_val = head.data\n    while (p != None):\n        if p.data == prev.data:\n            prev.next = p.\n        else:\n            cur_val = p.data\n            \n        p = p.next\n        \n    return head\n                \n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":497,"fileType":"python","requestStartTime":1517979454792}}
{"body": {"column":43,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.)\ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    t = 1\n    low = 1\n    high = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(pos1, v1, pos2, v2):\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":227,"fileType":"python","requestStartTime":1517979466765}}
{"body": {"column":7,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    bp.\n    price=[]\n    if a>2:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp.append(prices[0]*0.99)\n        elif prices[1]<=0.99*prices[0]:\n            number.append(1)\n            bp.append(prices[0]*0.99)\n          \n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":158,"fileType":"python","requestStartTime":1517979471734}}
{"body": {"column":42,"line":23,"wordToComplete":"","code":"\n\"\"\"\n Delete duplicate nodes\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method.\n\"\"\"\n\ndef RemoveDuplicates(head):\n    if head == None:\n        return head\n    p = head.next\n    prev = head\n    cur_val = head.data\n    while (p != None):\n        if p.data == prev.data:\n            print \"dropping node %d\" % (p.)\n            prev.next = p.next\n        p = p.next\n        \n    return head\n                \n        \n    \n    \n  \n  \n  \n  \n  \n  \n\n\n","offset":513,"fileType":"python","requestStartTime":1517979559917}}
{"body": {"column":27,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(len(reviews)):\n        r = toLower(reviews[i])\n        hid = hotel_ids[i]\n        count = 0\n        for k in keywords:\n            words = [s.strip() for s in re.split(\"\\.|,|!\", r)]\n            count += wrods.\n        counts[hid] += count\n    items = counts.items()\n    a = sorted(items, key=lambda x: x[1])\n    b = map(lambda x: x[0], a)\n    return b\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":423,"fileType":"python","requestStartTime":1517979618831}}
{"body": {"column":27,"line":20,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(len(reviews)):\n        r = toLower(reviews[i])\n        hid = hotel_ids[i]\n        count = 0\n        for k in keywords:\n            words = [s.strip() for s in re.split(\"\\.|,|!\", r)]\n            count += words.\n        counts[hid] += count\n    items = counts.items()\n    a = sorted(items, key=lambda x: x[1])\n    b = map(lambda x: x[0], a)\n    return b\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":423,"fileType":"python","requestStartTime":1517979620507}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(len(reviews)):\n        r = reviews[i].\n        hid = hotel_ids[i]\n        count = 0\n        for k in keywords:\n            words = [s.strip() for s in re.split(\"\\.|,|!\", r)]\n            count += words.count(k)\n        counts[hid] += count\n    items = counts.items()\n    a = sorted(items, key=lambda x: x[1])\n    b = map(lambda x: x[0], a)\n    return b\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":252,"fileType":"python","requestStartTime":1517979642602}}
{"body": {"column":10,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":582,"fileType":"python","requestStartTime":1517979661694}}
{"body": {"column":10,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":582,"fileType":"python","requestStartTime":1517979668444}}
{"body": {"column":29,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > \n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":601,"fileType":"python","requestStartTime":1517979673800}}
{"body": {"column":33,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2. \n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":605,"fileType":"python","requestStartTime":1517979674784}}
{"body": {"column":56,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":628,"fileType":"python","requestStartTime":1517979682113}}
{"body": {"column":66,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k1.\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":638,"fileType":"python","requestStartTime":1517979695855}}
{"body": {"column":66,"line":30,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(x1 + t * v1, v1, v1 + t * v2, v2):\n            break\n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.\n    if pos1 >= pos2 and v1 > v2:\n        return True\n    if pos2 >= pos1 and v2 > v1:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":638,"fileType":"python","requestStartTime":1517979698351}}
{"body": {"column":13,"line":25,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(len(reviews)):\n        r = reviews[i].lower()\n        hid = hotel_ids[i]\n        count = 0\n        for k in keywords:\n            words = [s.strip() for s in re.split(\"\\.|,|!\", r)]\n            count += words.count(k)\n        counts[hid] += count\n    items = counts.items()\n    a = sorted(items, key=lambda x: x[1])\n    b = map(lambda x: x[0], a)\n    return b.\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":573,"fileType":"python","requestStartTime":1517979753887}}
{"body": {"column":10,"line":25,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    for i in range(len(reviews)):\n        r = reviews[i].lower()\n        hid = hotel_ids[i]\n        count = 0\n        for k in keywords:\n            words = [s.strip() for s in re.split(\"\\.|,|!\", r)]\n            count += words.count(k)\n        counts[hid] += count\n    items = counts.items()\n    a = sorted(items, key=lambda x: x[1])\n    b = map(lambda x: x[0], a)\n    c = b.\n    return b.reverse()\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":570,"fileType":"python","requestStartTime":1517979780888}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef diagonalDifference(a):\n    # Complete this function\n    length = a.\n    for i in range()\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    a = []\n    for a_i in xrange(n):\n        a_temp = map(int,raw_input().strip().split(' '))\n        a.append(a_temp)\n    result = diagonalDifference(a)\n    print result\n\n\n","offset":100,"fileType":"python","requestStartTime":1517979877413}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nmyStrs = {}\n\nn = raw_input().\n\n","offset":102,"fileType":"python","requestStartTime":1517980015677}}
{"body": {"column":22,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nmyStrs = {}\n\nn = int(raw_input().strip())\nfor i in range(n):\n    str = raw_input().\n\n","offset":156,"fileType":"python","requestStartTime":1517980044428}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nmyStrs = {}\n\nn = int(raw_input().strip())\nfor i in range(n):\n    s = raw_input().strip()\n    if myStrs.\n\n","offset":176,"fileType":"python","requestStartTime":1517980055308}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nmyStrs = {}\n\nn = int(raw_input().strip())\nfor i in range(n):\n    s = raw_input().strip()\n    if myStrs.has_key(s):\n        myStrs[s] = myStrs[s] + 1\n    else:\n        myStrs.\n\n","offset":247,"fileType":"python","requestStartTime":1517980080915}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nmyStrs = {}\n\nn = int(raw_input().strip())\nfor i in range(n):\n    s = raw_input().strip()\n    if myStrs.has_key(s):\n        myStrs[s] = myStrs[s] + 1\n    else:\n        myStrs[s] = 1\n\nq = int(raw_input().strip()) \nfor i in range(q):\n    if myStrs.\n\n","offset":318,"fileType":"python","requestStartTime":1517980136177}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nmyStrs = {}\n\nn = int(raw_input().strip())\nfor i in range(n):\n    s = raw_input().strip()\n    if myStrs.has_key(s):\n        myStrs[s] = myStrs[s] + 1\n    else:\n        myStrs[s] = 1\n\nq = int(raw_input().strip()) \nfor i in range(q):\n    s = raw_input().\n    if myStrs.has_key(s)\n\n","offset":324,"fileType":"python","requestStartTime":1517980148369}}
{"body": {"column":34,"line":18,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    number=[]\n    bp=[]\n    bp.append(prices[0])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            number.append(-1)\n            bp.append(prices[0]*1.)\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            number.append(1)\n            bp.append(prices[0]*0.99)\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            if prices[a]>=1.01*bp[len(bp)-1]:\n                number.append(-1)\n                bp.append(prices[0]*0.99)\n            elif prices[a]<=0.99*bp[len(bp)-1]:\n                number.append(1)\n                bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":303,"fileType":"python","requestStartTime":1517980162010}}
{"body": {"column":8,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.\n    sell=[]\n    bp=[]\n    bp.append(prices[0])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append(1)\n            bp.append(prices[0]*1.01)\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append(1)\n            bp.append(prices[0]*0.99)\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            if prices[a]>=1.01*bp[len(bp)-1]:\n                number.append(-1)\n                bp.append(prices[0]*0.99)\n            elif prices[a]<=0.99*bp[len(bp)-1]:\n                number.append(1)\n                bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":146,"fileType":"python","requestStartTime":1517980283243}}
{"body": {"column":9,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append(0)\n    sell=[]\n    sell.\n    bp=[]\n    bp.append(prices[0])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append(1)\n            bp.append(prices[0]*1.01)\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append(1)\n            bp.append(prices[0]*0.99)\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            if prices[a]>=1.01*bp[len(bp)-1]:\n                number.append(-1)\n                bp.append(prices[0]*0.99)\n            elif prices[a]<=0.99*bp[len(bp)-1]:\n                number.append(1)\n                bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":177,"fileType":"python","requestStartTime":1517980294467}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    kws = keyswords.\n    for i in range(len(reviews)):\n        r = reviews[i].lower()\n        hid = hotel_ids[i]\n        count = 0\n        words = [s.strip() for s in re.split(\" |\\.|,|!\", r)]\n        print(words)\n        for k in keywords:\n            count += words.count(k)\n            print(k, words.count(k))\n        print(count)\n        counts[hid] += count\n    items = counts.items()\n    print(items)\n    a = sorted(items, key=lambda x: (-x[1], x[0]))\n    print(a)\n    b = map(lambda x: x[0], a)\n    print(b)\n    return b\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":210,"fileType":"python","requestStartTime":1517980484721}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nimport re\n\ndef sort_hotels(keywords, hotel_ids, reviews):\n    counts = {}\n    for i in hotel_ids:\n        counts[i] = 0\n    \n    kws = keywords.\n    for i in range(len(reviews)):\n        r = reviews[i].lower()\n        hid = hotel_ids[i]\n        count = 0\n        words = [s.strip() for s in re.split(\" |\\.|,|!\", r)]\n        print(words)\n        for k in keywords:\n            count += words.count(k)\n            print(k, words.count(k))\n        print(count)\n        counts[hid] += count\n    items = counts.items()\n    print(items)\n    a = sorted(items, key=lambda x: (-x[1], x[0]))\n    print(a)\n    b = map(lambda x: x[0], a)\n    print(b)\n    return b\n    \n            \nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        keywords = raw_input()\n    except:\n        keywords = None\n\n    hotel_ids_cnt = 0\n    hotel_ids_cnt = int(raw_input())\n    hotel_ids_i = 0\n    hotel_ids = []\n    while hotel_ids_i < hotel_ids_cnt:\n        hotel_ids_item = int(raw_input());\n        hotel_ids.append(hotel_ids_item)\n        hotel_ids_i += 1\n\n\n    reviews_cnt = 0\n    reviews_cnt = int(raw_input())\n    reviews_i = 0\n    reviews = []\n    while reviews_i < reviews_cnt:\n        try:\n            reviews_item = raw_input()\n        except:\n            reviews_item = None\n        reviews.append(reviews_item)\n        reviews_i += 1\n\n\n    res = sort_hotels(keywords, hotel_ids, reviews);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":214,"fileType":"python","requestStartTime":1517980498872}}
{"body": {"column":31,"line":26,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, position, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(t, k1, k2):\n            tHigh = time if tHigh is None else tHigh\n            mid = int((tHigh + tLow) / 2)\n            time = mid if mid >\n            \n        t += 1\n    \n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return true\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return true\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":590,"fileType":"python","requestStartTime":1517980565240}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef countingSort(arr):\n    # Complete this function\n    nums = [0] * 100\n    for i in arr:\n        nums[i] += 1\n    \n    sorted_nums = []\n    for val in nums:\n        for i in range(val):\n            sorted_nums.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    arr = map(int, raw_input().strip().split(' '))\n    result = countingSort(arr)\n    print \" \".join(map(str, result))\n\n\n\n\n","offset":241,"fileType":"python","requestStartTime":1517980591688}}
{"body": {"column":15,"line":28,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, initial, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(time, k1, k2):\n            tHigh = time if tHigh is None else tHigh\n            mid = int((tHigh + tLow) / 2)\n            time = tHigh - (mid if mid >= 1 else 1)\n        elif:\n            k1.\n            time *= 2\n\n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return True\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":642,"fileType":"python","requestStartTime":1517980773746}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, initial, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(time, k1, k2):\n            tHigh = time if tHigh is None else tHigh\n            mid = int((tHigh + tLow) / 2)\n            time = tHigh - (mid if mid >= 1 else 1)\n        elif k1.\n            time *= 2\n\n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return True\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":629,"fileType":"python","requestStartTime":1517980781554}}
{"body": {"column":39,"line":27,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, initial, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 1\n    tLow = 1\n    tHigh = None\n    \n    while True:\n        if isOutpaced(time, k1, k2):\n            tHigh = time if tHigh is None else tHigh\n            mid = int((tHigh + tLow) / 2)\n            time = tHigh - (mid if mid >= 1 else 1)\n        elif k1.positionAt(time) == k2.\n            time *= 2\n\n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return True\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":652,"fileType":"python","requestStartTime":1517980790299}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef morganAndString(a, b):\n    # Complete this function\n    string i = \"\"\n    apos = 1\n    bpos = 1\n    while apos <= a.\n    if ( ord(a[apos]) > )\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        a = raw_input().strip()\n        b = raw_input().strip()\n        result = morganAndString(a, b)\n        print result\n\n\n\n","offset":149,"fileType":"python","requestStartTime":1517980795012}}
{"body": {"column":40,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef morganAndString(a, b):\n    # Complete this function\n    string i = \"\"\n    apos = 1\n    bpos = 1\n    while apos <= a.length or bpos <= a.\n    if ( ord(a[apos]) > )\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        a = raw_input().strip()\n        b = raw_input().strip()\n        result = morganAndString(a, b)\n        print result\n\n\n\n","offset":169,"fileType":"python","requestStartTime":1517980811477}}
{"body": {"column":40,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef morganAndString(a, b):\n    # Complete this function\n    string i = \"\"\n    apos = 1\n    bpos = 1\n    while apos <= a.length or bpos <= b.\n    if ( ord(a[apos]) > )\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        a = raw_input().strip()\n        b = raw_input().strip()\n        result = morganAndString(a, b)\n        print result\n\n\n\n","offset":169,"fileType":"python","requestStartTime":1517980812982}}
{"body": {"column":25,"line":32,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                if prices[a]>=1.01*bp[len(bp)-1][j]:\n                    sell.append([1+buy[len(bp)-1][j]])\n                    temp.\n                    bp.append(prices[0]*0.99)\n                elif prices[a]<=0.99*bp[len(bp)-1]:\n                    number.append(1)\n                    bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":773,"fileType":"python","requestStartTime":1517980943800}}
{"body": {"column":34,"line":36,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                if prices[a]>=1.01*bp[len(bp)-1][j]:\n                    sell.append([1+buy[len(bp)-1][j]])\n                    temp.append[1.01*bp[len(bp)-1][j]]\n                    bp.append(prices[0]*0.99)\n                elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                    buy.append([1+sell[len(bp)-1][j]])\n                    temp.append[0.*bp[len(bp)-1][j]]\n                    bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":993,"fileType":"python","requestStartTime":1517981009612}}
{"body": {"column":27,"line":9,"wordToComplete":"result.\"","code":"\nif __name__ == '__main__':\n    N = int(raw_input())\n    result = []\n    for i in range(N):\n        cmdstr = raw_input().split()\n        cmd = cmdstr[0]\n        args = cmdstr[1:]\n        if cmd != \"print\":\n            cmd += \"result.\"\n            else:\n                print result\n        print cmdstr[1:]\n        args2 = tuple(map(eval, x) for x in cmdstr[1:])\n        print args2\n        command = \"result.\" + cmdstr[0] + str(args)\n        print command\n\n\n","offset":234,"fileType":"python","requestStartTime":1517981334617}}
{"body": {"column":41,"line":11,"wordToComplete":"swaps.\"","code":"\nn = int(raw_input().strip())\na = map(int, raw_input().strip().split(' '))\n\nswap = 0\nfor i in range(n):\n    for j in range(n-i):\n        if a[j] > a[j+1]:\n            a[j], a[j+1] = a[j+1], a[j]\n            swap += 1\n \nprint \"Array is sorted in\", swap, \"swaps.\"\nprint \"First Element:\", a[0] \nprint \"Last Element:\", a[-1]\n\n","offset":261,"fileType":"python","requestStartTime":1517981486453}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    arr=[]\n    for i in range(l,r+1):\n        if i%2==0:\n            arr.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":167,"fileType":"python","requestStartTime":1517981471757}}
{"body": {"column":39,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, initial, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 0\n    tLow = 0\n    tHigh = None\n    iterations = 1\n    while True:\n        if k1.positionAt(time) == k2.positionAt(time):\n            return \"YES\"\n        elif tLow == tHigh:\n            return \"NO\"\n        \n        if isOutpaced(time, k1, k2):\n            tHigh = time if tHigh is None else tHigh\n            mid = int((tHigh + tLow) / 2)\n            time = tHigh - (mid if mid < 1 else 1)\n            print 'isOutpaced'\n        else:\n            tLow = time\n            time = (time * 2) if time >\n            print 'notPaced'\n        print time\n        print tHigh\n        print tLow\n        iterations += 1\n        if iterations > 100:\n            return\n\n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return True\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":875,"fileType":"python","requestStartTime":1517981874312}}
{"body": {"column":33,"line":10,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef oddSum(num):\n    total = 0\n    for i in range(1, int(num**0.), 2):\n        if num % i == 0 and i % 2 != 0:\n            total += i\n    return total\n\ndef countSum(numbers):\n    total = 0\n    for num in numbers:\n        total += oddSum(num)\n    return total\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    numbers_cnt = 0\n    numbers_cnt = int(raw_input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(raw_input());\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    res = countSum(numbers);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":135,"fileType":"python","requestStartTime":1517981928258}}
{"body": {"column":42,"line":36,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                if prices[a]>=1.01*bp[len(bp)-1][j] and j!=len(bp[len(bp)-1])-1:\n                    sell.append([buy[len(bp)-1][j]])\n                    temp.append[1.01*bp[len(bp)-1][j]\n                    if prices[a]>=1.03*bp[len(bp)-1][j]:\n                        if sell[len(bp)-1][j]]>0:\n                            buy.append([sell[len(bp)-1][j]])\n                            temp.append[1.*bp[len(bp)-1][j]\n                    bp.append(prices[0]*0.99)\n                elif prices[a]<=0.99*bp[len(bp)-1][len(bp[len(bp)-1])-1] and j!=len(bp[len(bp)-1])-1:\n                    buy.append([sell[len(bp)-1][j]])\n                    temp.append[0.99*bp[len(bp)-1][j]\n                    bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":1038,"fileType":"python","requestStartTime":1517981958723}}
{"body": {"column":33,"line":12,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef oddSum(num):\n    while n % 2 == 0:\n        n /= 2\n    total = 0\n    for i in range(1, int(num**0.), 2):\n        if num % i == 0 and i % 2 != 0:\n            total += i\n    return total\n\ndef countSum(numbers):\n    total = 0\n    for num in numbers:\n        total += oddSum(num)\n    return total\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    numbers_cnt = 0\n    numbers_cnt = int(raw_input())\n    numbers_i = 0\n    numbers = []\n    while numbers_i < numbers_cnt:\n        numbers_item = int(raw_input());\n        numbers.append(numbers_item)\n        numbers_i += 1\n\n\n    res = countSum(numbers);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":172,"fileType":"python","requestStartTime":1517981999785}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef counting_sort(x, s):\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        x, s = raw_input().strip().split(' ')\n        x, s = [int(x), str(s)]\n        answer = counting_sort(x,s)\n        print(\" \".map(str, answer))\n    \n\n\n","offset":277,"fileType":"python","requestStartTime":1517982171880}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef counting_sort(x, s):\n    count_arr = [[] for i in range(100)]\n    for i, val in enumerate(x):\n        count_arr[val].\n        \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        x, s = raw_input().strip().split(' ')\n        x, s = [int(x), str(s)]\n        answer = counting_sort(x,s)\n        print(\" \".join(map(str, answer)))\n    \n\n\n","offset":150,"fileType":"python","requestStartTime":1517982510305}}
{"body": {"column":20,"line":9,"wordToComplete":"Hello, World.'","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninputString = raw_input()\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint 'Hello, World.'\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\n\nprint('Hello, World.')\n\n","offset":318,"fileType":"python","requestStartTime":1517982541883}}
{"body": {"column":28,"line":2,"wordToComplete":"Hello, World.'","code":"\n# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.\ninputString = 'Hello, World.'\n\n# Print a string literal saying \"Hello, World.\" to stdout.\nprint 'Hello, World.'\n\n# TODO: Write a line of code here that prints the contents of input_string to stdout.\n\ninputString\n\n","offset":130,"fileType":"python","requestStartTime":1517982592151}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":136,"fileType":"python","requestStartTime":1517982778926}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":161,"fileType":"python","requestStartTime":1517982783081}}
{"body": {"column":21,"line":20,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef counting_sort(x, s):\n    \n    # replace the first half of the string with '-'\n    s[:len(s)/2] = ['-'] * (len(s)/2)\n    \n    # build a list of lists of size |x|, store values in order\n    count_arr = [[] for i in range(100)]\n    for i, val in enumerate(x):\n        count_arr[val].append(s[i])\n    \n    text = []\n    \n    for ele in count_arr:\n        if ele != []:\n            for val in ele:\n                text.\n        \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        x, s = raw_input().strip().split(' ')\n        x, s = [int(x), str(s)]\n        answer = counting_sort(x,s)\n        print(\" \".join(map(str, answer)))\n    \n\n\n","offset":447,"fileType":"python","requestStartTime":1517982860145}}
{"body": {"column":21,"line":41,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, initial, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 0\n    tLow = 0\n    tHigh = None\n    iterations = 1\n    while True:\n        print 'it: %s, time %s, low %s, high %s' % (iterations, time, tLow, tHigh)\n        iterations += 1\n        print 'iteration START\\n'\n        if iterations > 100:\n            return\n\n        if k1.positionAt(time) == k2.positionAt(time):\n            return \"YES\"\n        elif tLow == tHigh:\n            return \"NO\"\n        \n        if isOutpaced(time, k1, k2):\n            tHigh = time if tHigh is None or time <= tHigh else tHigh\n            time = max(tLow, int((tHigh + tLow) / 2))\n            print 'isOutpaced, new time %s' % time\n        else:\n            tLow = time\n            time *= 2\n            if time >\n            time = min(time * 2, tHigh - 1) if time > 0 else 1\n            print 'notPaced'\n\n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return True\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":1067,"fileType":"python","requestStartTime":1517983152672}}
{"body": {"column":24,"line":43,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nclass KangarooVector:\n    def __init__(self, initial, pace):\n        self.initial = initial\n        self.pace = pace\n    \n    def positionAt(self, time):\n        return self.initial + (time * self.pace)\n    \ndef kangaroo(x1, v1, x2, v2):\n    # Complete this function\n    k1 = KangarooVector(x1, v1)\n    k2 = KangarooVector(x2, v2)\n    \n    time = 0\n    tLow = 0\n    tHigh = None\n    iterations = 1\n    while True:\n        print 'it: %s, time %s, low %s, high %s' % (iterations, time, tLow, tHigh)\n        iterations += 1\n        print 'iteration START\\n'\n        if iterations > 100:\n            return\n\n        if k1.positionAt(time) == k2.positionAt(time):\n            return \"YES\"\n        elif tLow == tHigh:\n            return \"NO\"\n        \n        if isOutpaced(time, k1, k2):\n            tHigh = time if tHigh is None or time <= tHigh else tHigh\n            time = max(tLow, int((tHigh + tLow) / 2))\n            print 'isOutpaced, new time %s' % time\n        else:\n            tLow = time\n            time *= 2\n            if time == 0:\n                time = 1\n            elif time > \n            time = min(time * 2, tHigh - 1) if time > 0 else 1\n            print 'notPaced'\n\n    print t\n    \ndef isOutpaced(time, k1, k2):\n    if k1.positionAt(time) > k2.positionAt(time) and k1.pace > k2.pace:\n        return True\n    if k2.positionAt(time) > k1.positionAt(time) and k2.pace > k1.pace:\n        return True\n    return False\n\nx1, v1, x2, v2 = raw_input().strip().split(' ')\nx1, v1, x2, v2 = [int(x1), int(v1), int(x2), int(v2)]\nresult = kangaroo(x1, v1, x2, v2)\nprint(result)\n\n\n","offset":1121,"fileType":"python","requestStartTime":1517983166905}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef twins(a, b):\n    if len(a) != len(b):\n        return 'No'\n    chr = {}\n    i = 0\n    for ch in a.:\n        chr[ch] = i\n        i += 1\n    result = 'Yes'\n    for ch in b:\n        if chr[ch] % 2 != i % 2:\n            result = 'No'\n    \n    return result\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    a_cnt = 0\n    a_cnt = int(raw_input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        try:\n            a_item = raw_input()\n        except:\n            a_item = None\n        a.append(a_item)\n        a_i += 1\n\n\n    b_cnt = 0\n    b_cnt = int(raw_input())\n    b_i = 0\n    b = []\n    while b_i < b_cnt:\n        try:\n            b_item = raw_input()\n        except:\n            b_item = None\n        b.append(b_item)\n        b_i += 1\n\n\n    res = twins(a, b);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":172,"fileType":"python","requestStartTime":1517983265064}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef twins(a, b):\n    if len(a) != len(b):\n        return 'No'\n    chr = {}\n    i = 0\n    for ch in a.split(''):\n        chr[ch] = i\n        i += 1\n    result = 'Yes'\n    for ch in b.:\n        if chr[ch] % 2 != i % 2:\n            result = 'No'\n    \n    return result\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    a_cnt = 0\n    a_cnt = int(raw_input())\n    a_i = 0\n    a = []\n    while a_i < a_cnt:\n        try:\n            a_item = raw_input()\n        except:\n            a_item = None\n        a.append(a_item)\n        a_i += 1\n\n\n    b_cnt = 0\n    b_cnt = int(raw_input())\n    b_i = 0\n    b = []\n    while b_i < b_cnt:\n        try:\n            b_item = raw_input()\n        except:\n            b_item = None\n        b.append(b_item)\n        b_i += 1\n\n\n    res = twins(a, b);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":253,"fileType":"python","requestStartTime":1517983276312}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    x = array()\n    if l % 2 == 1:\n        x.\n    while l <= r\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":139,"fileType":"python","requestStartTime":1517983370720}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":312,"fileType":"python","requestStartTime":1517983483000}}
{"body": {"column":24,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.\n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":323,"fileType":"python","requestStartTime":1517983488068}}
{"body": {"column":14,"line":32,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef counting_sort(x, s):\n    print(x,s)\n    # replace the first half of the string with '-'\n    s[:len(s)/2] = ['-'] * (len(s)/2)\n    \n    # build a list of lists of size |x|, store values in order\n    count_arr = [[] for i in range(100)]\n    for i, val in enumerate(x):\n        count_arr[val].append(s[i])\n    \n    text = []\n    \n    for ele in count_arr:\n        if ele != []:\n            for val in ele:\n                text += val\n    \n    return text\n        \n\nif __name__ == \"__main__\":\n    x_arr = []\n    s_arr = []\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        x, s = raw_input().strip().split(' ')\n        x, s = [int(x), str(s)]\n        x_arr.\n        \n    answer = counting_sort(x_arr,s_arr)\n    print(\" \".join(map(str, answer)))\n    \n\n\n","offset":702,"fileType":"python","requestStartTime":1517983406916}}
{"body": {"column":14,"line":33,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef counting_sort(x, s):\n    print(x,s)\n    # replace the first half of the string with '-'\n    s[:len(s)/2] = ['-'] * (len(s)/2)\n    \n    # build a list of lists of size |x|, store values in order\n    count_arr = [[] for i in range(100)]\n    for i, val in enumerate(x):\n        count_arr[val].append(s[i])\n    \n    text = []\n    \n    for ele in count_arr:\n        if ele != []:\n            for val in ele:\n                text += val\n    \n    return text\n        \n\nif __name__ == \"__main__\":\n    x_arr = []\n    s_arr = []\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        x, s = raw_input().strip().split(' ')\n        x, s = [int(x), str(s)]\n        x_arr.append(x)\n        s_arr.\n        \n    answer = counting_sort(x_arr,s_arr)\n    print(\" \".join(map(str, answer)))\n    \n\n\n","offset":726,"fileType":"python","requestStartTime":1517983412766}}
{"body": {"column":38,"line":38,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                if j!=len(bp[len(bp)-1])-1:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        sell.append([buy[len(bp)-1][j]])\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                buy.append([sell[len(bp)-1][j]])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.\n                    bp.append(prices[0]*0.99)\n                else:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                    buy.append([sell[len(bp)-1][j]])\n                    temp.append(0.99*bp[len(bp)-1][j])\n                    bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":1141,"fileType":"python","requestStartTime":1517983421864}}
{"body": {"column":17,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":347,"fileType":"python","requestStartTime":1517983577051}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name > a.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":356,"fileType":"python","requestStartTime":1517983582672}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name > b.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":356,"fileType":"python","requestStartTime":1517983585171}}
{"body": {"column":46,"line":44,"wordToComplete":"0.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                if j!=len(bp[len(bp)-1])-1:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        sell.append([buy[len(bp)-1][j]])\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                buy.append([sell[len(bp)-1][j]])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        buy.append([sell[len(bp)-1][j]])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                sell.append([buy[len(bp)-1][j]])\n                                temp.append(0.*bp[len(bp)-1][j])\n                    bp.append(prices[0]*0.99)\n                else:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                    buy.append([sell[len(bp)-1][j]])\n                    temp.append(0.99*bp[len(bp)-1][j])\n                    bp.append(prices[0]*0.99)\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":1502,"fileType":"python","requestStartTime":1517983483308}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return a\n            else:\n                return b\n        return a.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":447,"fileType":"python","requestStartTime":1517983647339}}
{"body": {"column":27,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return a\n            else:\n                return b\n        return a.score - b.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":457,"fileType":"python","requestStartTime":1517983650215}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return a\n            else:\n                return b\n        if a.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":443,"fileType":"python","requestStartTime":1517983661040}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return a\n            else:\n                return b\n        if a.score - be.\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":454,"fileType":"python","requestStartTime":1517983666776}}
{"body": {"column":24,"line":19,"wordToComplete":"s","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return a\n            else:\n                return b\n        if a.score - b.s\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":454,"fileType":"python","requestStartTime":1517983667599}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    x = []\n    if l % 2 == 1:\n        x. l\n        k = l\n    else:\n        k = l + 1\n        x += l\n    while k <= r:\n        k = k + 2\n        x += k\n    return x\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":134,"fileType":"python","requestStartTime":1517983620526}}
{"body": {"column":28,"line":33,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                if j!=len(bp[len(bp)-1])-1:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        sell.append([buy[len(bp)-1][j]])\n                        buy.\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                buy.append([sell[len(bp)-1][j]])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        buy.append([sell[len(bp)-1][j]])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                sell.append([buy[len(bp)-1][j]])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                else:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        sell.append(1+[buy[len(bp)-1][j]])\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                buy.append([sell[len(bp)-1][j]])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        buy.append(1+[sell[len(bp)-1][j]])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                sell.append([buy[len(bp)-1][j]])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                bp.append(temp)\n                for\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":826,"fileType":"python","requestStartTime":1517983624624}}
{"body": {"column":21,"line":19,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef counting_sort(x, s):\n    # replace the first half of the string with '-'\n    s[:len(s)/2] = ['-'] * (len(s)/2)\n    \n    # build a list of lists of size |x|, store values in order\n    count_arr = [[] for i in range(100)]\n    for i, val in enumerate(x):\n        count_arr[val].append(s[i])\n    \n    text = []\n    \n    for ele in count_arr:\n        if ele != []:\n            for i in range(len(ele)):\n                text.ele[i]\n                print(text)\n    \n    return text\n        \n\nif __name__ == \"__main__\":\n    x_arr = []\n    s_arr = []\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        x, s = raw_input().strip().split(' ')\n        x, s = [int(x), str(s)]\n        x_arr.append(x)\n        s_arr.append(s)\n        \n    answer = counting_sort(x_arr,s_arr)\n    print(\" \".join(map(str, answer)))\n    \n\n\n","offset":452,"fileType":"python","requestStartTime":1517983665700}}
{"body": {"column":21,"line":64,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                temps=[]\n                tempb=[]\n                if j!=len(bp[len(bp)-1])-1:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        temps.append(buy[len(bp)-1][j])\n                        tempb.append(0)\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                tempb.append(sell[len(bp)-1][j])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        tempb.append(sell[len(bp)-1][j])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                temps.append(buy[len(bp)-1][j])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                else:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        temps.append(1+buy[len(bp)-1][j])\n                        tempb.append(0)\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                tempb.append(sell[len(bp)-1][j])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        tempb.append(1+sell[len(bp)-1][j])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                temps.append(buy[len(bp)-1][j])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                sell.\n                bp.append(temp)\n                for\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":2535,"fileType":"python","requestStartTime":1517983753637}}
{"body": {"column":20,"line":65,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                temps=[]\n                tempb=[]\n                if j!=len(bp[len(bp)-1])-1:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        temps.append(buy[len(bp)-1][j])\n                        tempb.append(0)\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                tempb.append(sell[len(bp)-1][j])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        tempb.append(sell[len(bp)-1][j])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                temps.append(buy[len(bp)-1][j])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                else:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        temps.append(1+buy[len(bp)-1][j])\n                        tempb.append(0)\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                tempb.append(sell[len(bp)-1][j])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        tempb.append(1+sell[len(bp)-1][j])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                temps.append(buy[len(bp)-1][j])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                sell.append(temps)\n                buy.\n                bp.append(temp)\n                for\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":2569,"fileType":"python","requestStartTime":1517983759558}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nclass Player:\n    def __init__(self, name, score):\n        self.name = name\n        self.score = score\n        \n    def __repr__(self):\n        \n    def comparator(a, b):\n        Checker.\n        \n        \nclass Checker:\n    def compare(a, b):\n        if a.score == b.score:\n            if a.name < b.name:\n                return a\n            else:\n                return b\n        if a.score - b.score < 0:\n            return b\n        else:\n            return a\n            \n        \nn = int(raw_input())\ndata = []\nfor i in range(n):\n    name, score = raw_input().split()\n    score = int(score)\n    player = Player(name, score)\n    data.append(player)\n    \ndata = sorted(data, cmp=Player.comparator)\nfor i in data:\n    print i.name, i.score\n","offset":259,"fileType":"python","requestStartTime":1517983895168}}
{"body": {"column":43,"line":67,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  calculate_pl(prices):\n    pl=0.0\n    a=len(prices)\n    buy=[]\n    buy.append([0])\n    sell=[]\n    sell.append([0])\n    bp=[]\n    bp.append([prices[0]])\n    price=[]\n    if a>3:\n        if prices[1]>=1.01*prices[0]:\n            sell.append([1])\n            bp.append([prices[0]*1.01])\n            pl=pl+prices[0]*0.99\n        elif prices[1]<=0.99*prices[0]:\n            buy.append([1])\n            bp.append([prices[0]*0.99])\n            pl=pl-prices[0]*0.99\n        for i in range(2,a-1):\n            for j in range (0,len(bp[len(bp)-1])):\n                temp=[]\n                temps=[]\n                tempb=[]\n                if j!=len(bp[len(bp)-1])-1:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        temps.append(buy[len(bp)-1][j])\n                        tempb.append(0)\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                tempb.append(sell[len(bp)-1][j])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        tempb.append(sell[len(bp)-1][j])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                temps.append(buy[len(bp)-1][j])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                else:\n                    if prices[a]>=1.01*bp[len(bp)-1][j]:\n                        temps.append(1+buy[len(bp)-1][j])\n                        tempb.append(0)\n                        temp.append(1.01*bp[len(bp)-1][j])\n                        if prices[a]>=1.03*bp[len(bp)-1][j]:\n                            if sell[len(bp)-1][j]>0:\n                                tempb.append(sell[len(bp)-1][j])\n                                temp.append(1.03*bp[len(bp)-1][j])\n                    elif prices[a]<=0.99*bp[len(bp)-1][j]:\n                        tempb.append(1+sell[len(bp)-1][j])\n                        temp.append(0.99*bp[len(bp)-1][j])\n                        if prices[a]<=0.97*bp[len(bp)-1][j]:\n                            if buy[len(bp)-1][j]>0:\n                                temps.append(buy[len(bp)-1][j])\n                                temp.append(0.97*bp[len(bp)-1][j])\n                sell.append(temps)\n                buy.append(tempb)\n                bp.append(temp)\n                for qq in range(0,len(sell.))\n            \n            \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_prices_cnt = 0\n_prices_cnt = int(raw_input())\n_prices_i=0\n_prices = []\nwhile _prices_i < _prices_cnt:\n    _prices_item = float(raw_input());\n    _prices.append(_prices_item)\n    _prices_i+=1\n    \n\nres = calculate_pl(_prices)\nf.write(res + \"\\n\")\n\nf.close()\n\n","offset":2658,"fileType":"python","requestStartTime":1517983795162}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.\n\ndef add(content):\n    obj = json.loads(content)\n    objs.append(obj)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef findOb(obj):\n    results = []\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in objs:\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if contains(t_value, value):\n                        results.append(ob)\n                else:\n                    if value == t_value:\n                        results.append(ob)\n    return results\n\ndef delete(content):\n    obj = json.loads(content)\n    results = findOb(obj)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    obj = json.loads(content)\n    for o in obj:\n        print json.dumps(o)\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":169,"fileType":"python","requestStartTime":1517984375376}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    \n    ret = []\n    \n    if l==r and l%2==0:\n        return l\n    for i in range(l+1,r):\n        if i%2 == 0:\n            ret.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":222,"fileType":"python","requestStartTime":1517984409976}}
{"body": {"column":12,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.split(',')\n    obj = {}\n    for element in elements:\n        key, value = element.split(':')\n        v = to_obj(value)\n        obj.\n\ndef add(content):\n    obj = json.loads(content)\n    objs.append(obj)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef findOb(obj):\n    results = []\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in objs:\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if contains(t_value, value):\n                        results.append(ob)\n                else:\n                    if value == t_value:\n                        results.append(ob)\n    return results\n\ndef delete(content):\n    obj = json.loads(content)\n    results = findOb(obj)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    obj = json.loads(content)\n    for o in obj:\n        print json.dumps(o)\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":300,"fileType":"python","requestStartTime":1517984458936}}
{"body": {"column":20,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ninput = raw_input().\n\n","offset":93,"fileType":"python","requestStartTime":1517984579920}}
{"body": {"column":9,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.split(',')\n    obj = {}\n    for element in elements:\n        key, value = element.split(':')\n        v = to_obj(value)\n        obj[key] = v\n    return obj\n\ndef to_obj(content):\n    json.\n\ndef add(content):\n    obj = json.loads(content)\n    objs.append(obj)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef findOb(obj):\n    results = []\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in objs:\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if contains(t_value, value):\n                        results.append(ob)\n                else:\n                    if value == t_value:\n                        results.append(ob)\n    return results\n\ndef delete(content):\n    obj = json.loads(content)\n    results = findOb(obj)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    obj = json.loads(content)\n    for o in obj:\n        print json.dumps(o)\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":355,"fileType":"python","requestStartTime":1517984708728}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\ndef getNumberOfMovies(substr):\n    # Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n    \n    req = urllib2.\n    \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getNumberOfMovies(_substr)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":232,"fileType":"python","requestStartTime":1517985020060}}
{"body": {"column":19,"line":28,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nfrom collections import OrderedDict\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.split(',', 1)\n    obj = {}\n    for element in elements:\n        key, value = element.split(':', 1)\n        v = to_obj(value)\n        obj[key] = v\n    return obj\n\ndef to_obj(content):\n    return json.loads(content)\n\ndef add(content):\n    objs.append(content)\n    #print json.dumps(objs)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef findOb(obj):\n    results = objs.\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in objs:\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if contains(t_value, value):\n                        results.append(ob)\n                else:\n                    if value == t_value:\n                        results.append(ob)\n    return results\n\ndef delete(content):\n    results = findOb(content)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    results = findOb(content)\n    print 'get content: '\n    print content\n    print results\n    for r in results:\n        print json.dumps(OrderedDict(r))\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    content = json.loads(content, object_pairs_hook=OrderedDict)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":600,"fileType":"python","requestStartTime":1517985757361}}
{"body": {"column":40,"line":21,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\nimport urllib2\nimport json\n\n# Complete the function below.\ndef getNumberOfMovies(substr):\n    # Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n    my_url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\"+ substr\n    req = urllib2.Request(my_url)\n    response = urllib2.urlopen(req)\n    ret_data = response.read()\n    #print ret_data\n    cnt = 0\n    \n    data_dic = json.loads(ret_data)\n    print substr\n    for i in data_dic['data']:\n        print i['Title']\n        if substr.upper() in i['Title'].:\n            cnt += 1\n    print cnt\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\ntry:\n    _substr = raw_input()\nexcept:\n    _substr = None\n\nres = getNumberOfMovies(_substr)\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":577,"fileType":"python","requestStartTime":1517986014768}}
{"body": {"column":16,"line":50,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport copy\nfrom collections import OrderedDict\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.split(',', 1)\n    obj = {}\n    for element in elements:\n        key, value = element.split(':', 1)\n        v = to_obj(value)\n        obj[key] = v\n    return obj\n\ndef to_obj(content):\n    return json.loads(content)\n\ndef add(content):\n    objs.append(content)\n    #print json.dumps(objs)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef findOb(obj):\n    results = copy.deepcopy(objs)\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in results:\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if not contains(t_value, value):\n                        results.remove(ob)\n                else:\n                    if value != t_value:\n                        results.remove(ob)\n    return results\n\ndef delete(content):\n    results = findOb(content)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    print 'get'\n    print jsons.\n    results = findOb(content)\n    for r in results:\n        print json.dumps(OrderedDict(r))\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    content = json.loads(content, object_pairs_hook=OrderedDict)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":1179,"fileType":"python","requestStartTime":1517986323621}}
{"body": {"column":28,"line":14,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root):\n    \ndef checkBST(root):\n    if root == None:\n        print Yes\n    if checkleft(root, root.):\n        print Yes\n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":261,"fileType":"python","requestStartTime":1517986791762}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.\n\n\n","offset":178,"fileType":"python","requestStartTime":1517986530163}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.data\n    preOrder(root.)\n\n\n","offset":201,"fileType":"python","requestStartTime":1517986545523}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.data\n    preOrder(root.left)\n    preOrder(root.)\n\n\n","offset":225,"fileType":"python","requestStartTime":1517986551394}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.data\n    if root.\n    preOrder(root.left)\n    preOrder(root.right)\n\n\n","offset":195,"fileType":"python","requestStartTime":1517986559786}}
{"body": {"column":13,"line":11,"wordToComplete":"r","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    print root.data\n    if root.left:\n        preOrder(root.left)\n    if root.r\n    preOrder(root.right)\n\n\n","offset":242,"fileType":"python","requestStartTime":1517986564386}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root, nodes=None):\n    nodes = nodes or []\n    nodes.root.data\n    if root.left:\n        preOrder(root.left)\n    if root.right:\n        preOrder(root.right)\n\n\n","offset":209,"fileType":"python","requestStartTime":1517986628832}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root, nodes=None):\n    nodes = nodes or []\n    nodes.append(root.data)\n    if root.left:\n        nodes.preOrder(root.left)\n    if root.right:\n        preOrder(root.right)\n\n\n","offset":259,"fileType":"python","requestStartTime":1517986634802}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root, nodes=None):\n    nodes = nodes or []\n    nodes.append(root.data)\n    if root.left:\n        nodes.append(preOrder(root.left))\n    if root.right:\n        nodes.preOrder(root.right)\n\n\n","offset":320,"fileType":"python","requestStartTime":1517986648088}}
{"body": {"column":25,"line":9,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.):\n    \ndef checkBST(root):\n    if root == None:\n        print Yes\n    if checkleft(root, root.left):\n        print Yes\n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":173,"fileType":"python","requestStartTime":1517986989727}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.\ndef checkBST(root):\n    if root == None:\n        print Yes\n    if checkleft(root, root.left):\n        print Yes\n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":192,"fileType":"python","requestStartTime":1517987000385}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.\ndef checkBST(root):\n    if root == None:\n        print Yes\n    if checkleft(root, root.left):\n        print Yes\n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":197,"fileType":"python","requestStartTime":1517987003278}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value >\ndef checkBST(root):\n    if root == None:\n        print Yes\n    if checkleft(root, root.left):\n        print Yes\n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":204,"fileType":"python","requestStartTime":1517987005288}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value > root.\ndef checkBST(root):\n    if root == None:\n        print Yes\n    if checkleft(root, root.left):\n        print Yes\n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":210,"fileType":"python","requestStartTime":1517987008722}}
{"body": {"column":11,"line":2,"wordToComplete":"10.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n(80-70)/10.\n\n","offset":83,"fileType":"python","requestStartTime":1517986697164}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root, nodes=None):\n    nodes = nodes or []\n    nodes.root.data\n    if root.left:\n        preOrder(root.left)\n    if root.right:\n        preOrder(root.right)\n\n\n","offset":209,"fileType":"python","requestStartTime":1517986726939}}
{"body": {"column":22,"line":42,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport copy\nfrom collections import OrderedDict\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.split(',', 1)\n    obj = {}\n    for element in elements:\n        key, value = element.split(':', 1)\n        v = to_obj(value)\n        obj[key] = v\n    return obj\n\ndef to_obj(content):\n    return json.loads(content)\n\ndef add(content):\n    objs.append(content)\n    #print json.dumps(objs)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef findOb(obj):\n    results = copy.deepcopy(objs)\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in results:\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if not contains(t_value, value):\n                        results.remove(ob)\n                else:\n                    if value != t_value:\n                        results.remove(ob)\n            else:\n                for k.\n                results.remove(ob)\n    return results\n\ndef delete(content):\n    results = findOb(content)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    print 'get'\n    print json.dumps(content)\n    results = findOb(content)\n    for r in results:\n        print json.dumps(OrderedDict(r))\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    content = json.loads(content, object_pairs_hook=OrderedDict)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":1052,"fileType":"python","requestStartTime":1517986755098}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value > root.value:\n        return 0\n    else: \n        return 1\ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if checkleft(real_root, root.left):\n            print Yes\n        root = root.\n        \n    if checkright(root):\n        print Yes\n    print No\n  \n\n\n","offset":444,"fileType":"python","requestStartTime":1517987146943}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    def pre_order(node, nodes):\n        nodes.\n    if not nodes:\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    print nodes\n\n\n","offset":209,"fileType":"python","requestStartTime":1517986860288}}
{"body": {"column":27,"line":9,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    def pre_order(node, nodes):\n        nodes.append(node.d)\n    if not nodes:\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    print nodes\n\n\n","offset":222,"fileType":"python","requestStartTime":1517986866937}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    def pre_order(node, nodes):\n        nodes.append(node.data)\n        if ndoe.\n    if not nodes:\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    print nodes\n\n\n","offset":243,"fileType":"python","requestStartTime":1517986870872}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    def pre_order(node, nodes):\n        nodes.append(node.data)\n        if node.\n    if not nodes:\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    print nodes\n\n\n","offset":243,"fileType":"python","requestStartTime":1517986873247}}
{"body": {"column":19,"line":1,"wordToComplete":"r\".\"","code":"\nregex_pattern = r\".\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":21,"fileType":"python","requestStartTime":1517986873258}}
{"body": {"column":20,"line":1,"wordToComplete":"r\"..\"","code":"\nregex_pattern = r\"..\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":22,"fileType":"python","requestStartTime":1517986873568}}
{"body": {"column":21,"line":1,"wordToComplete":"r\"...\"","code":"\nregex_pattern = r\"...\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":23,"fileType":"python","requestStartTime":1517986873971}}
{"body": {"column":23,"line":1,"wordToComplete":"r\"...\\.\"","code":"\nregex_pattern = r\"...\\.\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":25,"fileType":"python","requestStartTime":1517986875240}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    def pre_order(node, nodes):\n        nodes.append(node.data)\n        if node.left:\n            nodes.\n    if not nodes:\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    print nodes\n\n\n","offset":267,"fileType":"python","requestStartTime":1517986876239}}
{"body": {"column":24,"line":1,"wordToComplete":"r\"...\\..\"","code":"\nregex_pattern = r\"...\\..\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":26,"fileType":"python","requestStartTime":1517986877791}}
{"body": {"column":25,"line":1,"wordToComplete":"r\"...\\...\"","code":"\nregex_pattern = r\"...\\...\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":27,"fileType":"python","requestStartTime":1517986878129}}
{"body": {"column":26,"line":1,"wordToComplete":"r\"...\\....\"","code":"\nregex_pattern = r\"...\\....\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":28,"fileType":"python","requestStartTime":1517986878584}}
{"body": {"column":28,"line":1,"wordToComplete":"r\"...\\....\\.\"","code":"\nregex_pattern = r\"...\\....\\.\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":30,"fileType":"python","requestStartTime":1517986880158}}
{"body": {"column":29,"line":1,"wordToComplete":"r\"...\\....\\..\"","code":"\nregex_pattern = r\"...\\....\\..\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":31,"fileType":"python","requestStartTime":1517986881652}}
{"body": {"column":30,"line":1,"wordToComplete":"r\"...\\....\\...\"","code":"\nregex_pattern = r\"...\\....\\...\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":32,"fileType":"python","requestStartTime":1517986882009}}
{"body": {"column":31,"line":1,"wordToComplete":"r\"...\\....\\....\"","code":"\nregex_pattern = r\"...\\....\\....\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":33,"fileType":"python","requestStartTime":1517986882466}}
{"body": {"column":33,"line":1,"wordToComplete":"r\"...\\....\\....\\.\"","code":"\nregex_pattern = r\"...\\....\\....\\.\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":35,"fileType":"python","requestStartTime":1517986883551}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value > root.value:\n        return 0\n    else: \n        return 1\ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if checkleft(real_root, root.left):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.\n    print No\n  \n\n\n","offset":540,"fileType":"python","requestStartTime":1517987184189}}
{"body": {"column":34,"line":1,"wordToComplete":"r\"...\\....\\....\\..\"","code":"\nregex_pattern = r\"...\\....\\....\\..\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":36,"fileType":"python","requestStartTime":1517986884780}}
{"body": {"column":35,"line":1,"wordToComplete":"r\"...\\....\\....\\...\"","code":"\nregex_pattern = r\"...\\....\\....\\...\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":37,"fileType":"python","requestStartTime":1517986885109}}
{"body": {"column":36,"line":1,"wordToComplete":"r\"...\\....\\....\\....\"","code":"\nregex_pattern = r\"...\\....\\....\\....\"\t# Do not delete 'r'.\nimport re\nimport sys\n\ntest_string = raw_input()\n\nmatch = re.match(regex_pattern, test_string) is not None\n\nprint str(match).lower()\n","offset":38,"fileType":"python","requestStartTime":1517986885483}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root, nodes=None):\n    if not nodes:\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        nodes.preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    print nodes\n\n\n","offset":272,"fileType":"python","requestStartTime":1517986907729}}
{"body": {"column":56,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6*array[i-1] + 1/6*. (6+ int(array[i-1]) + 1) * (6 - int(array[i-1])) / 2.0\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":259,"fileType":"python","requestStartTime":1517986915723}}
{"body": {"column":62,"line":13,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6*array[i-1] + 1/6*.0 *(6.+ int(array[i-1]) + 1) * (6 - int(array[i-1])) / 2.0\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":265,"fileType":"python","requestStartTime":1517986941353}}
{"body": {"column":53,"line":13,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6*array[i-1] + 1./6*.0 *(6.0+ int(array[i-1]) + 1) * (6 - int(array[i-1])) / 2.0\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":256,"fileType":"python","requestStartTime":1517986943433}}
{"body": {"column":38,"line":13,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6.*array[i-1] + 1.0/6*.0 *(6.0+ int(array[i-1]) + 1) * (6 - int(array[i-1])) / 2.0\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":241,"fileType":"python","requestStartTime":1517986947361}}
{"body": {"column":93,"line":13,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.) * (6 - int(array[i-1])) / 2.0\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":296,"fileType":"python","requestStartTime":1517986972016}}
{"body": {"column":101,"line":13,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6. - int(array[i-1])) / 2.0\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":304,"fileType":"python","requestStartTime":1517986976001}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root, nodes=None):\n    is_root = False\n    if not nodes:\n        is_root = True\n        nodes = []\n    nodes.append(root.data)\n    if root.left:\n        preOrder(root.left, nodes)\n    if root.right:\n        preOrder(root.right, nodes)\n    if is_root:\n        print ' '.nodes\n\n\n","offset":425,"fileType":"python","requestStartTime":1517986988223}}
{"body": {"column":126,"line":13,"wordToComplete":"2.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = []\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.\n            array.append(res)\n            i += 1\n\t    return int(array[rolls - 1])\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":329,"fileType":"python","requestStartTime":1517987014626}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.\n\n","offset":216,"fileType":"python","requestStartTime":1517987049428}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.\n\n","offset":233,"fileType":"python","requestStartTime":1517987054484}}
{"body": {"column":19,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.)\n\n","offset":242,"fileType":"python","requestStartTime":1517987059099}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.\n\n","offset":261,"fileType":"python","requestStartTime":1517987067350}}
{"body": {"column":14,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.left:\n            q.\n\n","offset":281,"fileType":"python","requestStartTime":1517987072982}}
{"body": {"column":23,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.left:\n            q.append(q.)\n\n","offset":290,"fileType":"python","requestStartTime":1517987075637}}
{"body": {"column":14,"line":15,"wordToComplete":"r","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.left:\n            q.append(q.left)\n        if q.r\n\n","offset":310,"fileType":"python","requestStartTime":1517987079077}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.left:\n            q.append(q.left)\n        if q.right:\n            q.\n\n","offset":330,"fileType":"python","requestStartTime":1517987080262}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.left:\n            q.append(q.left)\n        if q.right:\n            q.append(q.)\n\n","offset":339,"fileType":"python","requestStartTime":1517987081679}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef preOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(q.data)\n        if q.left:\n            q.append(q.left)\n        if q.right:\n            q.append(q.right)\n    print ' '.\n\n","offset":360,"fileType":"python","requestStartTime":1517987091632}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value > root.value:\n        return 0\n    else: \n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.\n        if checkleft(real_root, root):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":366,"fileType":"python","requestStartTime":1517987438827}}
{"body": {"column":23,"line":19,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value > root.value:\n        return 0\n    else: \n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value >\n        if checkleft(real_root, root):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":373,"fileType":"python","requestStartTime":1517987440847}}
{"body": {"column":34,"line":19,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root, root.left):\n    if root.left.value > root.value:\n        return 0\n    else: \n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value > real_root.\n        if checkleft(real_root, root):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":384,"fileType":"python","requestStartTime":1517987445347}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root):\n    if root.left.value > root.value:\n        return 0\n    if root.\n    else: \n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value > real_root.value:\n            print No\n        if checkleft(root):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":235,"fileType":"python","requestStartTime":1517987533117}}
{"body": {"column":18,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root):\n    if root.left.value > root.value:\n        return 0\n    if root.right.\n    else: \n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value > real_root.value:\n            print No\n        if checkleft(root):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":241,"fileType":"python","requestStartTime":1517987535989}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root):\n    if root.left.value > root.value:\n        return 0\n    if root.right.value < root.\n    else: \n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value > real_root.value:\n            print No\n        if checkleft(root):\n            print Yes\n        root = root.left\n    while root:    \n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":254,"fileType":"python","requestStartTime":1517987541334}}
{"body": {"column":19,"line":11,"wordToComplete":"3.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.]\n\t\tfor i in range(1,rolls):\n            res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":176,"fileType":"python","requestStartTime":1517987265563}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root):\n    if root.left.value > root.value:\n        return 0\n    if root.right.value < root.value:\n        return 0\n    else: \n        return 1\n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value > real_root.value:\n            print No\n        if checkleft(root):\n            print Yes\n        root = root.left\n    while root: \n        if root.\n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":581,"fileType":"python","requestStartTime":1517987584754}}
{"body": {"column":34,"line":28,"wordToComplete":"","code":"\n\"\"\" Node is defined as\nclass node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef checkleft(root):\n    if root.left.value > root.value:\n        return 0\n    if root.right.value < root.value:\n        return 0\n    else: \n        return 1\n        \ndef checkBST(root):\n    if root == None:\n        print Yes\n    real_root = root\n    while root:\n        if root.value > real_root.value:\n            print No\n        if checkleft(root):\n            print Yes\n        root = root.left\n    while root: \n        if root.value < real_root.\n        if checkright(root):\n            print Yes\n        root = root.right\n    print No\n  \n\n\n","offset":599,"fileType":"python","requestStartTime":1517987602244}}
{"body": {"column":30,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls)\n        res=int(array[i-1])/6.\n        res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":244,"fileType":"python","requestStartTime":1517987310937}}
{"body": {"column":47,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls)\n        res=int(array[i-1])/6.0*array[i-1]+1?6.\n        res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":261,"fileType":"python","requestStartTime":1517987330165}}
{"body": {"column":47,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls)\n        res=int(array[i-1])/6.0*array[i-1]+1/6.\n        res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":261,"fileType":"python","requestStartTime":1517987333197}}
{"body": {"column":52,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls)\n        res=int(array[i-1])/6.0*array[i-1]+1/6.0*(6.)\n        res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":266,"fileType":"python","requestStartTime":1517987342941}}
{"body": {"column":76,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls)\n        res=int(array[i-1])/6.0*array[i-1]+1/6.0*(6.0+int(array[i-1])+1)+(6.)\n        res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":290,"fileType":"python","requestStartTime":1517987365500}}
{"body": {"column":97,"line":14,"wordToComplete":"2.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls)\n        res=int(array[i-1])/6.0*array[i-1]+1/6.0*(6.0+int(array[i-1])+1)+(6.0-int(array[i-1]))/2.\n        res = int(array[i - 1])/6.0*array[i - 1] + 1.0/6*.0 *(6.0+ int(array[i - 1]) + 1.0) * (6.0 - int(array[i - 1]))/2.0\n            array.append(res)\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":311,"fileType":"python","requestStartTime":1517987380979}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*array[i-1]+1/6.0*(6.0+int(array[i-1])+1)+(6.0-int(array[i-1]))/2.0\n            array.\n            i += 1\n        return int(array[rolls - 1])\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":336,"fileType":"python","requestStartTime":1517987405059}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"\n#!/bin/python\nfrom collections import defaultdict\n\nkdr = [1, 1, 2, 2, -1, -1, -2, -2]\nkdc = [2, -2, 1, -1, 2, -2, 1, -1]\nbdr = [1, 1, -1, -1]\nbdc = [1, -1, 1, -1]\nrdr = [1, 0, -1, 0]\nrdc = [0, 1, 0, -1]\nqdr = [0, 1, 1, 1, 0, -1, -1, -1]\nqdc = [1, 1, 0, -1, -1, -1, 0, 1]\n\ndef findPiece(board, p):\n  for r in xrange(8):\n    for c in xrange(8):\n      if board[r][c] == p:\n        return (r, c)\n\ndef valid(r, c):\n  return r >\n      \ndef waysToGiveACheck(board):\n  kr, kc = findPiece(board, 'k')\n  threats = defaultdict\n  for r, c in zip(kdr, kdc):\n    \n  \n      \n      \n\nif __name__ == \"__main__\":\n  t = int(raw_input().strip())\n  for a0 in xrange(t):\n    board = []\n    for board_i in xrange(8):\n      board_temp = map(str,raw_input().strip().split(' '))\n      board.append(board_temp)\n    result = waysToGiveACheck(board)\n    print result\n\n\n\n","offset":424,"fileType":"python","requestStartTime":1517987539523}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\nstudents = []\nscores = {}\nfor _ in range(int(raw_input())):\n    name = raw_input()\n    score = float(raw_input())\n    students.append([name, score])\n    scores.\n    \nscores = \n\n\n","offset":162,"fileType":"python","requestStartTime":1517987440738}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\nstudents = []\nscores = []\nfor _ in range(int(raw_input())):\n    name = raw_input()\n    score = float(raw_input())\n    students.append([name, score])\n    scores.\n    \nscores = \n\n\n","offset":162,"fileType":"python","requestStartTime":1517987465917}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\nstudents = []\nscores = []\nfor _ in range(int(raw_input())):\n    name = raw_input()\n    score = float(raw_input())\n    students.append([name, score])\n    scores.append(score)\n    \nsecond_lowest = sorted(set(scores))[1]\nnames = []\nfor name, score in students:\n    if score == second_lowest:\n        names.\n\n","offset":305,"fileType":"python","requestStartTime":1517987570776}}
{"body": {"column":34,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.*array[i-1]+1/6.0*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1])\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":255,"fileType":"python","requestStartTime":1517987702728}}
{"body": {"column":11,"line":14,"wordToComplete":"","code":"\nstudents = []\nscores = []\nfor _ in range(int(raw_input())):\n    name = raw_input()\n    score = float(raw_input())\n    students.append([name, score])\n    scores.append(score)\n    \nsecond_lowest = sorted(set(scores))[1]\nnames = []\nfor name, score in students:\n    if score == second_lowest:\n        names.append(name)\nprint '\\n'.\n\n","offset":329,"fileType":"python","requestStartTime":1517987594038}}
{"body": {"column":49,"line":14,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*array[i-1]+1./6.0*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":270,"fileType":"python","requestStartTime":1517987997822}}
{"body": {"column":76,"line":14,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*array[i-1]+1.0/6.0*(6+int(array[i-1])+1.)+(6-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":297,"fileType":"python","requestStartTime":1517988000493}}
{"body": {"column":82,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*array[i-1]+1.0/6.0*(6+int(array[i-1])+1.0)+(6.-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":303,"fileType":"python","requestStartTime":1517988002669}}
{"body": {"column":34,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.*int(array[i-1])+1/6*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":255,"fileType":"python","requestStartTime":1517988157812}}
{"body": {"column":54,"line":14,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*int(array[i-1])+1./6*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":275,"fileType":"python","requestStartTime":1517988160524}}
{"body": {"column":58,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*int(array[i-1])+1.0/6.*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":279,"fileType":"python","requestStartTime":1517988162659}}
{"body": {"column":63,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*int(array[i-1])+1.0/6.0*(6.+int(array[i-1])+1)+(6-int(array[i-1]))/2\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":284,"fileType":"python","requestStartTime":1517988166171}}
{"body": {"column":83,"line":14,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*int(array[i-1])+1.0/6.0*(6.0+int(array[i-1])+1.)+(6-int(array[i-1]))/2\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":304,"fileType":"python","requestStartTime":1517988168811}}
{"body": {"column":89,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*int(array[i-1])+1.0/6.0*(6.0+int(array[i-1])+1.0)+(6.-int(array[i-1]))/2\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":310,"fileType":"python","requestStartTime":1517988170755}}
{"body": {"column":110,"line":14,"wordToComplete":"2.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*int(array[i-1])+1.0/6.0*(6.0+int(array[i-1])+1.0)+(6.0-int(array[i-1]))/2.\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":331,"fileType":"python","requestStartTime":1517988173012}}
{"body": {"column":34,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.*int(array[i-1])+1.0/6.0*(6+int(array[i-1])+1)+(6.0-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":255,"fileType":"python","requestStartTime":1517988217984}}
{"body": {"column":34,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.*array[i-1]+1/6.0*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":255,"fileType":"python","requestStartTime":1517988273430}}
{"body": {"column":76,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6*array[i-1]+1/6.0*(6+int(array[i-1])+1)+(6.-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":297,"fileType":"python","requestStartTime":1517988286557}}
{"body": {"column":34,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.*array[i-1]+1/6.0*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":255,"fileType":"python","requestStartTime":1517988315685}}
{"body": {"column":51,"line":14,"wordToComplete":"6.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\ndef die_game_fair_value(rolls):\n    if (rolls ==1 ):\n        return int(3.5*10000)\n    else:\n        array = [3.5]\n        i=1\n        while(i<rolls):\n            res=int(array[i-1])/6.0*array[i-1]+1/6.*(6+int(array[i-1])+1)+(6-int(array[i-1]))/2.0\n            array.append(res)\n            i+=1\n    return int(array[rolls-1]*10000)\n\n\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":272,"fileType":"python","requestStartTime":1517988329719}}
{"body": {"column":11,"line":39,"wordToComplete":"","code":"\n#!/bin/python\nkdr = [1, 1, 2, 2, -1, -1, -2, -2]\nkdc = [2, -2, 1, -1, 2, -2, 1, -1]\nbdr = [1, 1, -1, -1]\nbdc = [1, -1, 1, -1]\nrdr = [1, 0, -1, 0]\nrdc = [0, 1, 0, -1]\n\ndef findPiece(board, p):\n  for r in xrange(8):\n    for c in xrange(8):\n      if board[r][c] == p:\n        return (r, c)\n\ndef isValid(r, c):\n  return r >= 0 and r < 8 and c >= 0 and c < 8\n      \ndef waysToGiveACheck(board):\n  nbits = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  kr, kc = findPiece(board, 'k')\n  cand = [[0] * 8 for _ in xrange(8)]\n  for dr, dc in zip(kdr, kdc):\n    r, c = kr + dr, kc + dc\n    if isValid(r, c):\n      cand[r][c] |= 1\n  for xdr, xdc, m in [(bdr, bdc, 2 | 8), (rdr, rdc, 4 | 8)]:\n    for dr, dc in zip(xdr, xdc):\n      r, c = kr, kc\n      while True:\n        r, c = r + dr, c + dc\n        if not isValid(r, c) or board[r][c] != '#':\n          break\n        cand[r][c] |= m\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      ret += nbits[cand[0][i]]\n  for row in board:\n    t = ''.['%X']\n  return ret\n\nif __name__ == \"__main__\":\n  t = int(raw_input().strip())\n  for a0 in xrange(t):\n    board = [raw_input().strip() for _ in xrange(8)]\n    print waysToGiveACheck(board)\n\n\n\n","offset":1023,"fileType":"python","requestStartTime":1517988368222}}
{"body": {"column":12,"line":39,"wordToComplete":"","code":"\n#!/bin/python\nkdr = [1, 1, 2, 2, -1, -1, -2, -2]\nkdc = [2, -2, 1, -1, 2, -2, 1, -1]\nbdr = [1, 1, -1, -1]\nbdc = [1, -1, 1, -1]\nrdr = [1, 0, -1, 0]\nrdc = [0, 1, 0, -1]\n\ndef findPiece(board, p):\n  for r in xrange(8):\n    for c in xrange(8):\n      if board[r][c] == p:\n        return (r, c)\n\ndef isValid(r, c):\n  return r >= 0 and r < 8 and c >= 0 and c < 8\n      \ndef waysToGiveACheck(board):\n  nbits = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  kr, kc = findPiece(board, 'k')\n  cand = [[0] * 8 for _ in xrange(8)]\n  for dr, dc in zip(kdr, kdc):\n    r, c = kr + dr, kc + dc\n    if isValid(r, c):\n      cand[r][c] |= 1\n  for xdr, xdc, m in [(bdr, bdc, 2 | 8), (rdr, rdc, 4 | 8)]:\n    for dr, dc in zip(xdr, xdc):\n      r, c = kr, kc\n      while True:\n        r, c = r + dr, c + dc\n        if not isValid(r, c) or board[r][c] != '#':\n          break\n        cand[r][c] |= m\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      ret += nbits[cand[0][i]]\n  for row in board:\n    t = ''..['%X']\n  return ret\n\nif __name__ == \"__main__\":\n  t = int(raw_input().strip())\n  for a0 in xrange(t):\n    board = [raw_input().strip() for _ in xrange(8)]\n    print waysToGiveACheck(board)\n\n\n\n","offset":1024,"fileType":"python","requestStartTime":1517988368633}}
{"body": {"column":21,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[6][i] == 'P' and board[7][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 7:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        board[7][s+1:]\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":514,"fileType":"python","requestStartTime":1517988594764}}
{"body": {"column":25,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[6][i] == 'P' and board[7][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 7:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        all(map(lambda x:board[7][s+1:e]\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":518,"fileType":"python","requestStartTime":1517988612428}}
{"body": {"column":38,"line":43,"wordToComplete":"processing 2...'","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport json\nimport copy\nfrom collections import OrderedDict\n\nobjs = []\n\ndef to_dict(content):\n    content = content[1:-1]\n    elements = content.split(',', 1)\n    obj = {}\n    for element in elements:\n        key, value = element.split(':', 1)\n        v = to_obj(value)\n        obj[key] = v\n    return obj\n\ndef to_obj(content):\n    return json.loads(content)\n\ndef add(content):\n    objs.append(content)\n    #print json.dumps(objs)\n\ndef contains(longl, short):\n    return set(short).issubset(set(longl))\n\ndef containsDict(dict, sdict):\n    for k in sdict:\n        v = sdict[k]\n        if k not in dict:\n            return False\n        elif sdict[k] != dict[k]:\n            return False\n    return True\n\ndef findOb(obj):\n    results = copy.deepcopy(objs)\n    for k, value in obj.items():\n        value = obj[k]\n        for ob in results:\n            if ob['id'] == 2:\n                print 'processing 2...'\n            if k in ob:\n                t_value = ob[k]\n                if isinstance(value, list):\n                    if not contains(t_value, value):\n                        results.remove(ob)\n                if isinstance(value, dict):\n                    if not containsDict(t_value, value):\n                        print ob, ' 1111dict', t_value\n                        results.remove(ob)\n                else:\n                    if value != t_value:\n                        print ob, ' 2222 ', t_value\n                        results.remove(ob)\n            else:      \n                print ob, ' 3333'\n                results.remove(ob)\n    return results\n\ndef delete(content):\n    results = findOb(content)\n    for r in results:\n        objs.remove(r)\n\ndef get(content):\n    print 'get'\n    print json.dumps(content)\n    results = findOb(content)\n    for r in results:\n        print json.dumps(OrderedDict(r))\n\nwhile True:\n    input = raw_input()\n    if input == '':\n        break\n    cmd, content = input.split(' ', 1)\n    content = json.loads(content, object_pairs_hook=OrderedDict)\n    if cmd == 'add':\n        add(content)\n    elif cmd == 'delete':\n        delete(content)\n    else:\n        get(content)\n\n\n\n    \n\n","offset":977,"fileType":"python","requestStartTime":1517988649579}}
{"body": {"column":50,"line":46,"wordToComplete":"Temorarily remove pawn.","code":"\n#!/bin/python\nkdr = [1, 1, 2, 2, -1, -1, -2, -2]\nkdc = [2, -2, 1, -1, 2, -2, 1, -1]\nbdr = [1, 1, -1, -1]\nbdc = [1, -1, 1, -1]\nrdr = [1, 0, -1, 0]\nrdc = [0, 1, 0, -1]\n\ndef findPiece(board, p):\n  for r in xrange(8):\n    for c in xrange(8):\n      if board[r][c] == p:\n        return (r, c)\n\ndef isValid(r, c):\n  return r >= 0 and r < 8 and c >= 0 and c < 8\n\ndef sim(board, kr, kc):\n  nbits = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  cand = [[0] * 8 for _ in xrange(8)]\n  for dr, dc in zip(kdr, kdc):\n    r, c = kr + dr, kc + dc\n    if isValid(r, c):\n      cand[r][c] |= 1\n  for xdr, xdc, m in [(bdr, bdc, 2 | 8), (rdr, rdc, 4 | 8)]:\n    for dr, dc in zip(xdr, xdc):\n      r, c = kr, kc\n      while True:\n        r, c = r + dr, c + dc\n        if not isValid(r, c) or board[r][c] != '#':\n          break\n        cand[r][c] |= m\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      ret += nbits[cand[0][i]]\n  for row in cand:\n    print(''.join('%X' % t for t in row))\n  return ret\n  \ndef waysToGiveACheck(board):\n  kr, kc = findPiece(board, 'k')\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      board[1][i] = '#'  # Temorarily remove pawn.\n      ret += sim(board, kr, kc)\n      board[1][i] = 'P'\n  return ret\n\nif __name__ == \"__main__\":\n  t = int(raw_input().strip())\n  for a0 in xrange(t):\n    board = [raw_input().strip() for _ in xrange(8)]\n    print waysToGiveACheck(board)\n\n\n\n","offset":1219,"fileType":"python","requestStartTime":1517988668847}}
{"body": {"column":33,"line":54,"wordToComplete":"","code":"\n#!/bin/python\nkdr = [1, 1, 2, 2, -1, -1, -2, -2]\nkdc = [2, -2, 1, -1, 2, -2, 1, -1]\nbdr = [1, 1, -1, -1]\nbdc = [1, -1, 1, -1]\nrdr = [1, 0, -1, 0]\nrdc = [0, 1, 0, -1]\n\ndef findPiece(board, p):\n  for r in xrange(8):\n    for c in xrange(8):\n      if board[r][c] == p:\n        return (r, c)\n\ndef isValid(r, c):\n  return r >= 0 and r < 8 and c >= 0 and c < 8\n\ndef sim(board, kr, kc):\n  nbits = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  cand = [[0] * 8 for _ in xrange(8)]\n  for dr, dc in zip(kdr, kdc):\n    r, c = kr + dr, kc + dc\n    if isValid(r, c):\n      cand[r][c] |= 1\n  for xdr, xdc, m in [(bdr, bdc, 2 | 8), (rdr, rdc, 4 | 8)]:\n    for dr, dc in zip(xdr, xdc):\n      r, c = kr, kc\n      while True:\n        r, c = r + dr, c + dc\n        if not isValid(r, c) or board[r][c] != '#':\n          break\n        cand[r][c] |= m\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      ret += nbits[cand[0][i]]\n  for row in cand:\n    print(''.join('%X' % t for t in row))\n  return ret\n  \ndef waysToGiveACheck(board):\n  kr, kc = findPiece(board, 'k')\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      board[1][i] = '#'  # Temorarily remove pawn.\n      ret += sim(board, kr, kc)\n      board[1][i] = 'P'\n  return ret\n\nif __name__ == \"__main__\":\n  t = int(raw_input().strip())\n  for a0 in xrange(t):\n    board = [raw_input().strip().for _ in xrange(8)]\n    print waysToGiveACheck(board)\n\n\n\n","offset":1404,"fileType":"python","requestStartTime":1517988694927}}
{"body": {"column":54,"line":20,"wordToComplete":"500.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nfrom decimal import Decimal\n\ndef die_game_fair_value(rolls):\n\tif (rolls ==1 ):\n\t\treturn Decimal(3.5 * 10000)\n\telse:\n\t\tarray = [3.5]\n\t\ti = 1\n\t\twhile (i < rolls):\n\t\t\tres = float(array[i - 1])/6.0 * array[i-1] + 1/6.0 * (6+ float(array[i-1]) + 1) * (6 - float(array[i-1]))  / 2.0\n\t\t\tarray.append(res)\n\t\t\ti += 1\n\t\n\treturn float(math.ceil(array[rolls - 1] *10000) /500.)  \nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":434,"fileType":"python","requestStartTime":1517988734275}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[6][i] == 'P' and board[7][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 7:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[7][s+1:e]))\n        if ok:\n            return 2\n        else:\n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 7])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            return 2\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":601,"fileType":"python","requestStartTime":1517988839825}}
{"body": {"column":13,"line":32,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[6][i] == 'P' and board[7][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 7:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[7][s+1:e]))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 7])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            return 2\n        else:\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":872,"fileType":"python","requestStartTime":1517988844241}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    s = []\n    node = root\n    while s or node:\n        if node:\n            s.\n\n","offset":243,"fileType":"python","requestStartTime":1517988909673}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    s = []\n    node = root\n    while s or node:\n        if node:\n            s.append(node)\n            node = node.\n\n","offset":280,"fileType":"python","requestStartTime":1517988920642}}
{"body": {"column":76,"line":34,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[6][i] == 'P' and board[7][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 7:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[7][s+1:e]))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 7])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif abs(blackKingPos[0] - 7) == abs(blackKingPos[1] - pwnPromotePoint):\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":970,"fileType":"python","requestStartTime":1517988960525}}
{"body": {"column":45,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[6][i] == 'P' and board[7][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 7:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[7][s+1:e]))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 7])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif abs(blackKingPos[0] - 7) == abs(blackKingPos[1] - pwnPromotePoint):\n        if blackKingPos[1] > pwnPromotePoint:\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1016,"fileType":"python","requestStartTime":1517989013199}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    if root.\n\n","offset":176,"fileType":"python","requestStartTime":1517989024028}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    l = []\n    if root.left:\n        l.\n\n","offset":203,"fileType":"python","requestStartTime":1517989036099}}
{"body": {"column":32,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    l = []\n    if root.left:\n        l.extend(postOrder(root.))\n\n","offset":225,"fileType":"python","requestStartTime":1517989046034}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    l = []\n    postOrder(root.)\n\n","offset":194,"fileType":"python","requestStartTime":1517989057003}}
{"body": {"column":20,"line":10,"wordToComplete":"r","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root):\n    l = []\n    postOrder(root.left)\n    postOrder(root.r)\n\n","offset":220,"fileType":"python","requestStartTime":1517989061255}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    is_root = False\n    if not l:    \n        l = []\n        is_root = True\n    postOrder(root.left)\n    postOrder(root.right)\n    if is_root:\n        print ' '.\n\n","offset":333,"fileType":"python","requestStartTime":1517989103905}}
{"body": {"column":7,"line":12,"wordToComplete":"epostOrder","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    is_root = False\n    if not l:    \n        l = []\n        is_root = True\n    l.epostOrder(root.left)\n    postOrder(root.right)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return \n\n","offset":255,"fileType":"python","requestStartTime":1517989145305}}
{"body": {"column":7,"line":13,"wordToComplete":"epostOrder","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    is_root = False\n    if not l:    \n        l = []\n        is_root = True\n    l.extend(postOrder(root.left))\n    l.epostOrder(root.right)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return \n\n","offset":290,"fileType":"python","requestStartTime":1517989149275}}
{"body": {"column":21,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    is_root = False\n    if not l:    \n        l = []\n        is_root = True\n    l.extend(postOrder(root.left))\n    l.extend(postOrder(root.right))\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return [root.]\n\n","offset":408,"fileType":"python","requestStartTime":1517989156206}}
{"body": {"column":25,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import counter\nshoe_list = [x]\nprint counter(shoe_list)\nprint counter(shoe_list).\n\n\n\n","offset":170,"fileType":"python","requestStartTime":1517989187598}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import counter\nshoe_list = [x]\nprint counter(shoe_list)\nprint counter(shoe_list).items()\nprint counter(shoe_list).\n\n\n\n","offset":203,"fileType":"python","requestStartTime":1517989213677}}
{"body": {"column":25,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import counter\nshoe_list = [x]\nprint counter(shoe_list)\nprint counter(shoe_list).items()\nprint counter(shoe_list).keys()\nprint counter(shoe_list).\n\n\n\n\n","offset":235,"fileType":"python","requestStartTime":1517989248011}}
{"body": {"column":7,"line":14,"wordToComplete":"epostOrder","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.epostOrder(root.left)\n    postOrder(root.right)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return [root.data]\n\n","offset":290,"fileType":"python","requestStartTime":1517989277179}}
{"body": {"column":7,"line":15,"wordToComplete":"epostOrder","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.epostOrder(root.right)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return [root.data]\n\n","offset":329,"fileType":"python","requestStartTime":1517989287350}}
{"body": {"column":6,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return [root.data]\n\n","offset":368,"fileType":"python","requestStartTime":1517989309018}}
{"body": {"column":19,"line":16,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.d)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return [root.data]\n\n","offset":381,"fileType":"python","requestStartTime":1517989312438}}
{"body": {"column":9,"line":50,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 0:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[0][s+1:e]))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 0])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint):\n        diff = abs(blackKingPos[1] - pwnPromotePoint)\n        if blackKingPos[1] > pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                return 2\n            else:\n                return 0\n        elif blackKingPos[1] < pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                return 2\n            else:\n                return 0\n    else:\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1586,"fileType":"python","requestStartTime":1517989532318}}
{"body": {"column":24,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    def post_order(node):\n        post_order(node.)\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.data)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return l\n\n","offset":222,"fileType":"python","requestStartTime":1517989532739}}
{"body": {"column":24,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    def post_order(node):\n        post_order(node.left)\n        post_order(node.)\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.data)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return l\n\n","offset":252,"fileType":"python","requestStartTime":1517989537836}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    def post_order(node):\n        post_order(node.left)\n        post_order(node.right)\n        l.\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.data)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return l\n\n","offset":269,"fileType":"python","requestStartTime":1517989541166}}
{"body": {"column":23,"line":11,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    def post_order(node):\n        post_order(node.left)\n        post_order(node.right)\n        l.append(post.d)\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.data)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return l\n\n","offset":282,"fileType":"python","requestStartTime":1517989546926}}
{"body": {"column":10,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    def post_order(node):\n        l.post_order(node.left)\n        post_order(node.right)\n        l.append(post.data)\n        return l\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.data)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return l\n\n","offset":208,"fileType":"python","requestStartTime":1517989556781}}
{"body": {"column":11,"line":11,"wordToComplete":"epost_order","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef postOrder(root, l=None):\n    def post_order(node):\n        l = []\n        l.extend(post_order(node.left))\n        l.epost_order(node.right)\n        l.append(post.data)\n        return l\n    if not root:\n        return []\n    is_root = False\n    if l is None:\n        is_root = True\n        l = []\n    l.extend(postOrder(root.left, []))\n    l.extend(postOrder(root.right, []))\n    l.append(root.data)\n    if is_root:\n        print ' '.join(str(i) for i in l)\n    else:\n        return l\n\n","offset":264,"fileType":"python","requestStartTime":1517989568503}}
{"body": {"column":30,"line":33,"wordToComplete":"Check for discovery check.","code":"\n#!/bin/python\nkdr = [1, 1, 2, 2, -1, -1, -2, -2]\nkdc = [2, -2, 1, -1, 2, -2, 1, -1]\nbdr = [1, 1, -1, -1]\nbdc = [1, -1, 1, -1]\nrdr = [1, 0, -1, 0]\nrdc = [0, 1, 0, -1]\n\ndef findPiece(board, p):\n  for r in xrange(8):\n    for c in xrange(8):\n      if board[r][c] == p:\n        return (r, c)\n\ndef isValid(r, c):\n  return r >= 0 and r < 8 and c >= 0 and c < 8\n\ndef sim(board, kr, kc, pos):\n  nbits = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n  cand = [[0] * 8 for _ in xrange(8)]\n  for dr, dc in zip(kdr, kdc):\n    r, c = kr + dr, kc + dc\n    if isValid(r, c):\n      cand[r][c] |= 1\n  for xdr, xdc, m in [(bdr, bdc, 2 | 8), (rdr, rdc, 4 | 8)]:\n    for dr, dc in zip(xdr, xdc):\n      r, c = kr, kc\n      while True:\n        r, c = r + dr, c + dc\n        if not isValid(r, c):\n          break\n        cand[r][c] |= m\n  # Check for discovery check.\n  return nbits[cand[0][pos]]\n  \ndef waysToGiveACheck(board):\n  kr, kc = findPiece(board, 'k')\n  ret = 0\n  for i in xrange(8):\n    if board[0][i] == '#' and board[1][i] == 'P':\n      board[1][i] = '#'  # Temporarily remove pawn.\n      ret += sim(board, kr, kc, i)\n      board[1][i] = 'P'\n  return ret\n\nif __name__ == \"__main__\":\n  t = int(raw_input().strip())\n  for a0 in xrange(t):\n    board = [list(raw_input().strip()) for _ in xrange(8)]\n    print waysToGiveACheck(board)\n\n\n","offset":848,"fileType":"python","requestStartTime":1517989592380}}
{"body": {"column":13,"line":55,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n                \n    if blackKingPos[0] == 0:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[0][s+1:e]))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 0])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            return 2\n        else:\n            return 0\n    elif abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint):\n        diff = abs(blackKingPos[1] - pwnPromotePoint)\n        if blackKingPos[1] > pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                return 2\n            else:\n                return 0\n        elif blackKingPos[1] < pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                return 2\n            else:\n                return 0\n    else:\n        if abs(blackKingPos[0] - 0) == 1 and abs(blackKingPos[1] - pwnPromotePoint) == 2:\n            return 1\n        elif abs(blackKingPos[0] - 0) == 2 and abs(blackKingPos[1] - pwnPromotePoint) == 1:\n            return 1\n        else:\n        \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1824,"fileType":"python","requestStartTime":1517989661736}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.\n\n","offset":232,"fileType":"python","requestStartTime":1517989717715}}
{"body": {"column":32,"line":17,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef alert(inputs, windowSize, allowedIncrease):\n    print(inputs)\n    print(windowSize)\n    print(allowedIncrease)\n    \n    loop_count = len(inputs) - windowSize + 1\n    shift = windowSize - 1\n    for i in range(loop_count):\n        window = inputs[i:i+shift]\n        window_average = window.\n        \n        \n    return True\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    inputs_cnt = 0\n    inputs_cnt = int(raw_input())\n    inputs_i = 0\n    inputs = []\n    while inputs_i < inputs_cnt:\n        inputs_item = int(raw_input());\n        inputs.append(inputs_item)\n        inputs_i += 1\n\n\n    windowSize = int(raw_input());\n\n    allowedIncrease = float(raw_input());\n\n    res = alert(inputs, windowSize, allowedIncrease);\n    f.write(str(int(res)) + \"\\n\")\n\n    f.close()\n","offset":363,"fileType":"python","requestStartTime":1517989719176}}
{"body": {"column":26,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.extend(node.)\n\n","offset":244,"fileType":"python","requestStartTime":1517989720380}}
{"body": {"column":14,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.extend(in_order(node.left))\n            l.\n\n","offset":274,"fileType":"python","requestStartTime":1517989729426}}
{"body": {"column":27,"line":12,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.extend(in_order(node.left))\n            l.append(node.d)\n\n","offset":287,"fileType":"python","requestStartTime":1517989730922}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.extend(in_order(node.left))\n            l.append(node.data)\n            l.\n\n","offset":306,"fileType":"python","requestStartTime":1517989732475}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.extend(in_order(node.left))\n            l.append(node.data)\n            l.extend(in_order(node.))\n\n","offset":327,"fileType":"python","requestStartTime":1517989737605}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef inOrder(root):\n    def in_order(node):\n        l = []\n        if node:\n            l.extend(in_order(node.left))\n            l.append(node.data)\n            l.extend(in_order(node.right))\n        return l\n    print ' '.\n\n","offset":366,"fileType":"python","requestStartTime":1517989749913}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    student_marks = {}\n    for _ in range(n):\n        line = raw_input().split()\n        name, scores = line[0], line[1:]\n        scores = map(float, scores)\n        student_marks[name] = scores\n    query_name = raw_input()\n    print \"%.\"sum(student_marks[query_name]) / len(student_marks[query_name])\n\n","offset":291,"fileType":"python","requestStartTime":1517989826855}}
{"body": {"column":17,"line":10,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    student_marks = {}\n    for _ in range(n):\n        line = raw_input().split()\n        name, scores = line[0], line[1:]\n        scores = map(float, scores)\n        student_marks[name] = scores\n    query_name = raw_input()\n    print \"%.2f\".sum(student_marks[query_name]) / len(student_marks[query_name])\n\n","offset":295,"fileType":"python","requestStartTime":1517989828894}}
{"body": {"column":17,"line":51,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [(1, root)]\n    while root:\n        n = root.\n    \n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1340,"fileType":"python","requestStartTime":1517990159892}}
{"body": {"column":13,"line":52,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [(1, root)]\n    while s:\n        level, n = s.pop()\n        if n.\n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1360,"fileType":"python","requestStartTime":1517990244527}}
{"body": {"column":14,"line":53,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [(1, root)]\n    while s:\n        level, n = s.pop()\n        if n.left:\n            s.\n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1380,"fileType":"python","requestStartTime":1517990250343}}
{"body": {"column":35,"line":53,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [(1, root)]\n    while s:\n        level, n = s.pop()\n        if n.left:\n            s.append((level + 1, n.))\n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1401,"fileType":"python","requestStartTime":1517990259355}}
{"body": {"column":13,"line":54,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [(1, root)]\n    while s:\n        level, n = s.pop()\n        if n.left:\n            s.append((level + 1, n.left))\n        if n.\n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1421,"fileType":"python","requestStartTime":1517990266431}}
{"body": {"column":22,"line":53,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [(0, root)]\n    max_level = 0\n    while s:\n        level, n = s.pop()\n        if max_level >\n        max_level = max(max_level, level)\n        if n.left:\n            s.append((level + 1, n.left))\n        if n.right:\n            s.append((level + 1, n.right))\n    return max_level\n        \n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1387,"fileType":"python","requestStartTime":1517990472849}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef alert(inputs, windowSize, allowedIncrease):\n    loop_count = len(inputs) - windowSize + 1\n    out = False\n    for i in range(loop_count):\n        window = inputs[i:i+windowSize]\n        window_average = float(sum(window) / windowSize)\n        averages.\n        window_max = window_average * allowedIncrease\n        flag = False\n        for w in window:\n            if w > window_max:\n                flag = True\n                break\n        print(flag)\n        if flag:\n            out = True\n            break\n            \n    return out\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    inputs_cnt = 0\n    inputs_cnt = int(raw_input())\n    inputs_i = 0\n    inputs = []\n    while inputs_i < inputs_cnt:\n        inputs_item = int(raw_input());\n        inputs.append(inputs_item)\n        inputs_i += 1\n\n\n    windowSize = int(raw_input());\n\n    allowedIncrease = float(raw_input());\n\n    res = alert(inputs, windowSize, allowedIncrease);\n    f.write(str(int(res)) + \"\\n\")\n\n    f.close()\n","offset":327,"fileType":"python","requestStartTime":1517990498482}}
{"body": {"column":11,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\nnewarr = []\nwhile n  >=0 :\n    n = n - 1\n    newarr.\n    \n    \n\n\n","offset":157,"fileType":"python","requestStartTime":1517990545792}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\n\nn = int(raw_input().strip())\narr = map(int,raw_input().strip().split(' '))\nnewarr = []\nwhile n  >=0 :\n    n = n - 1\n    newarr.append(arr[n])\nprint newarr.\n    \n    \n\n\n","offset":185,"fileType":"python","requestStartTime":1517990573167}}
{"body": {"column":40,"line":3,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    if(n%2==0 and (n in range(2,6) or n>))\n\n","offset":94,"fileType":"python","requestStartTime":1517990507454}}
{"body": {"column":50,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  maxLength(a, k):\n    for i in xrange(len(a)):\n        charList = []\n        maxLen = 0\n        for j in xrange(len(a)-i-1):\n            charList.append(a[j:j+i+1])\n            if sum(charList)<=k and len(charList)>\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_a_cnt = 0\n_a_cnt = int(raw_input())\n_a_i=0\n_a = []\nwhile _a_i < _a_cnt:\n    _a_item = int(raw_input());\n    _a.append(_a_item)\n    _a_i+=1\n    \n\n\n_k = int(raw_input());\n\nres = maxLength(_a, _k);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":291,"fileType":"python","requestStartTime":1517990667842}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef findPieces(board):\n    whites = {}\n    blacks = {}\n    for index, rank in enumerate(board):\n        for index, file in enumerate(rank):\n            if file.isalpha():\n                if file.\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    print(board)\n    whites, blacks = findPieces(board)\n    print(whites, blacks)\n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = raw_input().strip()\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":224,"fileType":"python","requestStartTime":1517990720565}}
{"body": {"column":26,"line":53,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    s = [root]\n    max_level = 0\n    while s:\n        n = s.pop()\n        if max_level <= n.level:\n            max_level = level\n        else:\n            return max_level\n        # max_level = max(max_level, level)\n        if n.left:\n            s.append((level + 1, n.left))\n        if n.right:\n            s.append((level + 1, n.right))\n    return max_level\n        \n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1379,"fileType":"python","requestStartTime":1517990747016}}
{"body": {"column":9,"line":49,"wordToComplete":"","code":"class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    root.\n    s = [root]\n    max_level = 0\n    while s:\n        n = s.pop()\n        if max_level <= n.level:\n            max_level = level\n        else:\n            return max_level\n        # max_level = max(max_level, level)\n        if n.left:\n            s.append((level + 1, n.left))\n        if n.right:\n            s.append((level + 1, n.right))\n    return max_level\n        \n\n\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n\n","offset":1296,"fileType":"python","requestStartTime":1517990754037}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    node = root.\n    s = []\n    while\n\n\n","offset":198,"fileType":"python","requestStartTime":1517990911618}}
{"body": {"column":14,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    s = []\n    node = root.left\n    while nod.\n\n\n","offset":228,"fileType":"python","requestStartTime":1517990925804}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    s = []\n    node = root.left\n    while node.\n\n\n","offset":229,"fileType":"python","requestStartTime":1517990926457}}
{"body": {"column":37,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef findPieces(board):\n    whites = {}\n    blacks = {}\n    for i, rank in enumerate(board):\n        for j, file in enumerate(rank):\n            if file.isalpha():\n                if file.islower():\n                    if file in blacks:\n                        blacks[file] = [(8-i, j)]\n                    else:\n                        blacks[file].\n                else:\n                    whites[file] = (8-i, j)\n    return whites, blacks\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    print(board)\n    whites, blacks = findPieces(board)\n    print(whites, blacks)\n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = raw_input().strip()\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":379,"fileType":"python","requestStartTime":1517990930774}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    s = []\n    node = root.left\n    while node.left:\n        s.\n\n\n","offset":245,"fileType":"python","requestStartTime":1517990931204}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    s = []\n    node = root.left\n    while node.left:\n        s.append(node.)\n\n\n","offset":257,"fileType":"python","requestStartTime":1517990938225}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    s = []\n    node = root.left\n    while node.left:\n        s.append(node.left)\n        node = node.\n\n\n","offset":283,"fileType":"python","requestStartTime":1517990941937}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"from __future__ import division\nfrom __future__ import division\nif __name__ == '__main__':\n    a = int(raw_input())\n    b = int(raw_input())\n    print a.\n\n\n","offset":154,"fileType":"python","requestStartTime":1517990883564}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"from __future__ import division\nfrom __future__ import division\nif __name__ == '__main__':\n    a = int(raw_input())\n    b = int(raw_input())\n    print a..\n\n\n","offset":155,"fileType":"python","requestStartTime":1517990883847}}
{"body": {"column":14,"line":22,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    l = []\n    node = root\n    while node.left:\n        l.insert(0, node.left)\n        node = node.left\n        \n    # right children\n    r = []\n    node = root\n    while node.right:\n        r.append(node.right)\n        node = node.right\n        \n    print ' '.\n\n","offset":443,"fileType":"python","requestStartTime":1517991113177}}
{"body": {"column":44,"line":22,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    l = []\n    node = root\n    while node.left:\n        l.insert(0, node.left)\n        node = node.left\n        \n    # right children\n    r = []\n    node = root\n    while node.right:\n        r.append(node.right)\n        node = node.right\n        \n    print ' '.join(str(i) for i in l), root.\n\n","offset":473,"fileType":"python","requestStartTime":1517991124742}}
{"body": {"column":46,"line":22,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef topView(root):\n    # left children\n    l = []\n    node = root\n    while node.left:\n        l.insert(0, node.data)\n        node = node.left\n        \n    # right children\n    r = []\n    node = root\n    while node.right:\n        r.append(node.data)\n        node = node.right\n        \n    print ' '.join(str(i) for i in l + [root.d]\n\n","offset":474,"fileType":"python","requestStartTime":1517991205248}}
{"body": {"column":40,"line":9,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef alert(inputs, windowSize, allowedIncrease):\n    if windowSize != 0 and len(inputs) >\n        loop_count = len(inputs) - windowSize + 1\n        out = False\n        averages = []\n        for i in range(loop_count):\n            window = inputs[i:i+windowSize]\n            window_average = float(sum(window) / windowSize)\n            averages.append(window_average)\n            window_max = window_average * allowedIncrease\n            flag = False\n            for w in window:\n                if w > window_max:\n                    flag = True\n                    break\n            if flag:\n                out = True\n                break\n\n        print(averages)\n\n        if not flag:\n            flag_2 = False        \n            for i in range(len(averages)-1):\n                print(i)\n                if averages[i]*allowedIncrease < averages[i+1]:\n                    flag_2 = True\n                    break\n\n    return (flag or flag_2)\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    inputs_cnt = 0\n    inputs_cnt = int(raw_input())\n    inputs_i = 0\n    inputs = []\n    while inputs_i < inputs_cnt:\n        inputs_item = int(raw_input());\n        inputs.append(inputs_item)\n        inputs_i += 1\n\n\n    windowSize = int(raw_input());\n\n    allowedIncrease = float(raw_input());\n\n    res = alert(inputs, windowSize, allowedIncrease);\n    f.write(str(int(res)) + \"\\n\")\n\n    f.close()\n","offset":159,"fileType":"python","requestStartTime":1517991313978}}
{"body": {"column":15,"line":8,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef levelOrder(root):\n    q = [root.d]\n    \n\n","offset":180,"fileType":"python","requestStartTime":1517991325756}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.\n\n","offset":207,"fileType":"python","requestStartTime":1517991347739}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.)\n\n","offset":269,"fileType":"python","requestStartTime":1517991405992}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.data, end='')\n        if n.\n\n","offset":296,"fileType":"python","requestStartTime":1517991424937}}
{"body": {"column":14,"line":15,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.data, end='')\n        if n.left:\n            q.\n\n","offset":316,"fileType":"python","requestStartTime":1517991432789}}
{"body": {"column":23,"line":15,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.data, end='')\n        if n.left:\n            q.append(n.)\n\n","offset":325,"fileType":"python","requestStartTime":1517991436356}}
{"body": {"column":14,"line":16,"wordToComplete":"r","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.data, end='')\n        if n.left:\n            q.append(n.left)\n        if n.r\n\n","offset":345,"fileType":"python","requestStartTime":1517991439854}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.data, end='')\n        if n.left:\n            q.append(n.left)\n        if n.right:\n            q.\n\n","offset":365,"fileType":"python","requestStartTime":1517991441395}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nfrom __future__ import print_function\n\ndef levelOrder(root):\n    q = [root]\n    while q:\n        n = q.pop(0)\n        print(n.data, end='')\n        if n.left:\n            q.append(n.left)\n        if n.right:\n            q.append(n.)\n\n","offset":374,"fileType":"python","requestStartTime":1517991442858}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef getSafePaths(journeys):\n\n    print journeys[0].\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    journeys_cnt = 0\n    journeys_cnt = int(raw_input())\n    journeys_i = 0\n    journeys = []\n    while journeys_i < journeys_cnt:\n        try:\n            journeys_item = raw_input()\n        except:\n            journeys_item = None\n        journeys.append(journeys_item)\n        journeys_i += 1\n\n\n    res = getSafePaths(journeys);\n    for res_cur in res:\n        f.write( str(res_cur) + \"\\n\" )\n\n    f.close()\n","offset":122,"fileType":"python","requestStartTime":1517991474178}}
{"body": {"column":10,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef levelOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.n.data\n        if n.left:\n            q.append(n.left)\n        if n.right:\n            q.append(n.right)\n\n","offset":236,"fileType":"python","requestStartTime":1517991506017}}
{"body": {"column":14,"line":18,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\n\ndef levelOrder(root):\n    q = [root]\n    v = []\n    while q:\n        n = q.pop(0)\n        v.append(n.data)\n        if n.left:\n            q.append(n.left)\n        if n.right:\n            q.append(n.right)\n    print ' '.\n\n","offset":363,"fileType":"python","requestStartTime":1517991517268}}
{"body": {"column":15,"line":9,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    while node.\n\n","offset":190,"fileType":"python","requestStartTime":1517991593094}}
{"body": {"column":23,"line":10,"wordToComplete":"d","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    while node.data:\n        if val < node.d\n\n","offset":219,"fileType":"python","requestStartTime":1517991606560}}
{"body": {"column":24,"line":11,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    while node.data:\n        if val < node.data:\n            node = node.\n\n","offset":248,"fileType":"python","requestStartTime":1517991612185}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    while node.data:\n        if val < node.data:\n            node = node.left\n        else:\n            node = node.\n\n","offset":291,"fileType":"python","requestStartTime":1517991631782}}
{"body": {"column":19,"line":9,"wordToComplete":"","code":"\ndef minion_game(s):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    scored = []\n    kev_score = 0\n    stu_score = 0\n    for i in xrange(len(s)):\n        if s[i] in vowels and s[i] not in scored:\n            kev_score += s[i:].count(s[i])\n            scored.s[i]\n    print kev_score, stu_score\nif __name__ == '__main__':\n    s = raw_input()\n    minion_game(s)\n","offset":254,"fileType":"python","requestStartTime":1517991743653}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    parent = None\n    while node.data:\n        parent = node\n        if val < node.data:\n            if node.\n            node = node.left\n        else:\n            node = node.right\n    return r\n\n","offset":284,"fileType":"python","requestStartTime":1517991866979}}
{"body": {"column":23,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    parent = None\n    while node.data:\n        parent = node\n        if val < node.data:\n            if node.left:\n                node = node.left\n            else:\n                parent.\n        else:\n            node = node.right\n    return r\n\n","offset":364,"fileType":"python","requestStartTime":1517991873233}}
{"body": {"column":21,"line":18,"wordToComplete":"r","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    parent = None\n    while node.data:\n        parent = node\n        if val < node.data:\n            if node.left:\n                node = node.left\n            else:\n                parent.left = Node(data=val)\n        else:\n            if node.r\n            node = node.right\n    return r\n\n","offset":421,"fileType":"python","requestStartTime":1517991895452}}
{"body": {"column":24,"line":21,"wordToComplete":"r","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\"\"\"\n\ndef insert(r,val):\n    node = r\n    parent = None\n    while node:\n        parent = node\n        if val < node.data:\n            if node.left:\n                node = node.left\n            else:\n                parent.left = Node(data=val)\n        else:\n            if node.right:\n                node = node.right\n            else:\n                parent.r\n    return r\n\n","offset":498,"fileType":"python","requestStartTime":1517991930080}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.\n\n\n","offset":350,"fileType":"python","requestStartTime":1517992382416}}
{"body": {"column":25,"line":17,"wordToComplete":"r","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"        \n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.r\n\n\n","offset":401,"fileType":"python","requestStartTime":1517992393778}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leave(node):\n    return not node.\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.right\n        if nod\n\n\n","offset":195,"fileType":"python","requestStartTime":1517992435472}}
{"body": {"column":39,"line":10,"wordToComplete":"r","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leave(node):\n    return not node.left and not node.r\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.right\n        if nod\n\n\n","offset":214,"fileType":"python","requestStartTime":1517992444483}}
{"body": {"column":14,"line":22,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.right\n        if is_leaf(node):\n            s.\n\n\n","offset":502,"fileType":"python","requestStartTime":1517992469200}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.right\n        if is_leaf(node):\n            output.\n\n\n","offset":507,"fileType":"python","requestStartTime":1517992474780}}
{"body": {"column":32,"line":22,"wordToComplete":"d","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.right\n        if is_leaf(node):\n            output.append(node.d)\n\n\n","offset":520,"fileType":"python","requestStartTime":1517992481362}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if s == 0:\n            node = node.left\n        elif s == 1:\n            node = node.right\n        if is_leaf(node):\n            output.append(node.data)\n            node.\n\n\n","offset":542,"fileType":"python","requestStartTime":1517992485018}}
{"body": {"column":25,"line":22,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        print(c)\n        if s == '0':\n            node = node.left\n        elif s == '1':\n            node = node.right\n        print(node, node.)\n        if is_leaf(node):\n            output += node.data\n            node = root\n    print output\n\n\n","offset":508,"fileType":"python","requestStartTime":1517992637198}}
{"body": {"column":36,"line":22,"wordToComplete":"","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        print(c)\n        if s == '0':\n            node = node.left\n        elif s == '1':\n            node = node.right\n        print(node, node.left, node.)\n        if is_leaf(node):\n            output += node.data\n            node = root\n    print output\n\n\n","offset":519,"fileType":"python","requestStartTime":1517992638549}}
{"body": {"column":49,"line":22,"wordToComplete":"d","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\ndef is_leaf(node):\n    return not node.left and not node.right\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        print(c)\n        if s == '0':\n            node = node.left\n        elif s == '1':\n            node = node.right\n        print(node, node.left, node.right, node.d)\n        if is_leaf(node):\n            output += node.data\n            node = root\n    print output\n\n\n","offset":532,"fileType":"python","requestStartTime":1517992640169}}
{"body": {"column":17,"line":19,"wordToComplete":"d","code":"\n\"\"\"class Node:\n    def __init__(self, freq,data):\n        self.freq= freq\n        self.data=data\n        self.left = None\n        self.right = None\n\"\"\"\n\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef decodeHuff(root , s):\n    output = ''\n    node = root\n    for c in s:\n        if c == '0':\n            node = node.left\n        elif c == '1':\n            node = node.right\n        if node.d:\n            output += node.data\n            node = root\n    print output\n\n\n","offset":420,"fileType":"python","requestStartTime":1517992797539}}
{"body": {"column":7,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nstring.()\n\nSystem.out.println(string)\n\n","offset":80,"fileType":"python","requestStartTime":1517992872078}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\nwords = []\n\nfor i in sys.stdin:\n    word.i\n\n","offset":126,"fileType":"python","requestStartTime":1517993175296}}
{"body": {"column":10,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\nwords = []\n\nfor i in sys.stdin:\n    words.i\n\n","offset":127,"fileType":"python","requestStartTime":1517993176189}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\nwords = []\n\nfor i in sys.stdin.:\n    words.append(i)\n    \nprint words\n\n","offset":116,"fileType":"python","requestStartTime":1517993212832}}
{"body": {"column":28,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\nwords = []\n\nfor i in sys.stdin.readline.():\n    words.append(i)\n    \nprint words\n\n","offset":125,"fileType":"python","requestStartTime":1517993228225}}
{"body": {"column":8,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\n\nwords = []\nans = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    ans. = i[:-1]\n    \nprint words\n    \n    \n\n","offset":201,"fileType":"python","requestStartTime":1517993575010}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"function\"\n # A function is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses functions as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\ndef conditional_op(num1, num2, num3, numtest):\n    #Start your code below (tip: Make sure to indent your code)\n    var = 200\n    if numtest >\n    var = numtest > num2 ? var - 50 : var + 100\n    var = numtest > num3 ? var + 19 : var - 150\n    return var\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    num1 = int(raw_input());\n\n    num2 = int(raw_input());\n\n    num3 = int(raw_input());\n\n    numtest = int(raw_input());\n\n    res = conditional_op(num1, num2, num3, numtest);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":614,"fileType":"python","requestStartTime":1517994244729}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef findPieces(board):\n    whites = {}\n    blacks = {}\n    for i, rank in enumerate(board):\n        for j, file in enumerate(rank):\n            if file.isalpha():\n                if file.islower():\n                    if file in blacks:\n                        blacks[file].append((8-i, j))\n                    else:\n                        blacks[file] = [(8-i, j)]\n                else:\n                    if file in whites:\n                        whites[file].append((8-i, j))\n                    else:\n                        whites[file] = [(8-i, j)]\n    return whites, blacks\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    board = board.\n    print(board)\n    whites, blacks = findPieces(board)\n    print(whites, blacks)\n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = raw_input().strip()\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":690,"fileType":"python","requestStartTime":1517994333041}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\ncounts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(counts)]\n\nfor n in counts.:\n\n\n","offset":446,"fileType":"python","requestStartTime":1517994396277}}
{"body": {"column":8,"line":32,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\ncounts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(counts)]\n\nfor n in counts.values():\n    ans.\n\n\n","offset":464,"fileType":"python","requestStartTime":1517994405245}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\ncounts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(counts)]\n\nfor n in counts.():\n    ans.append(n)\n    \nprint ans\n\n","offset":446,"fileType":"python","requestStartTime":1517994432718}}
{"body": {"column":11,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\n#counts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(counts)]\n\nfor n in d.:\n    ans.append(counts[n])\n    \nprint ans\n\n","offset":442,"fileType":"python","requestStartTime":1517994501982}}
{"body": {"column":8,"line":32,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\ncounts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(counts)]\n\nfor n in d.items():\n    ans. n[1]\n    \n#print ans\n\n","offset":458,"fileType":"python","requestStartTime":1517994588814}}
{"body": {"column":13,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\ncounts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(counts)]\n\nfor n in d.items():\n    ans.append(n[1])\n    \nprint ans[0].\n\n","offset":489,"fileType":"python","requestStartTime":1517994627583}}
{"body": {"column":13,"line":29,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport sys\nfrom collections import defaultdict\n\n\nwords = []\nstep1 = []\n\n#inp = sys.stdin.strip(\"/n\")\n\nfor i in sys.stdin:\n    words.append(i)\n\nfor i in words:\n    step1.append(i[:-1])\n\ntot_words = int(step1[0])    \n\nd = defaultdict(int)\n\nl = step1[1:]\n\nfor i in l:\n    d[i] += 1\n\ncounts = sorted(d.items(), key=lambda (c, n): (-n, c))\n\nans = [len(d.)]\n\nfor n in d.items():\n    ans.append(n[1])\n    \nprint ans[0],'/n', ans[1:]\n\n","offset":422,"fileType":"python","requestStartTime":1517994692181}}
{"body": {"column":28,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef move_rock(P, k):\n    for row in range(P[0]):\n        if (P[row, 1] == k):\n    return check\n\ndef move_bishop(P, k):\n    return check\n\ndef move_knight(P, k):\n    return check\n\ndef waysToGiveACheck(board):\n    # poner posiciones para cada elemento\n    Ps = []\n    for row in range(8):\n        for col in range(8):\n            if board[row][0][col] == 'P':\n                Ps.append([row, col])\n            elif board[row][0][col] == 'k':\n                k = [row, col]\n    # for each Pawn\n    moves = 0\n    for P in Ps:\n        # move pawn\n        P = [P[0] - 1, P[1]]\n        # check possible moves\n        if (P[1] == 0):\n            if (k[0] - P[0] == 0) or (k[1] - P[1] == 0):\n                # check rock & queen\n                moves += 2\n            if ((k[0] - P[0] == 1) and (k[1] - P[1] == 2)) or ((k[0] - P[0] == 2) and (k[1] - P[1] == 1)):\n                # check knight\n                moves += 1\n            if (k[0] - P[0] == k[1] - P[1]):\n                # check bishop & queen\n                moves += 2\n        if (P[1] == 1):\n            if (k[0] - P[0] == 0) or (k[1] - P[1] == 0):\n                # check rock & queen\n                moves += 2\n            if ((k[0] - P[0] == 1) and (abs(k[1] - P[1]) == 2)) or ((k[0] - P[0] == 2) and (k[1] - P[1] == 1)):\n                # check knight\n                moves += 1\n            if (k[0] - P[0] == abs(P[1] - k[1])):\n                # check bishop & queen\n                moves += 2\n        elif (P[1] == 6):\n            if (k[0] - P[0] == 0) or (k[1] - P[1] == 0):\n                # check rock & queen\n                moves += 2\n            if ((k[0] - P[0] == 1) and (abs(P[1] - k[1]) == 2)) or ((P[0] - k[0] == 2) and (k[1] - P[1] == 1)):\n                # check knight\n                moves += 1\n            if (k[0] - P[0] == abs(P[1] - k[1])):\n                # check bishop & queen\n                moves += 2\n        elif (P[1] == 7):\n            if (k[0] - P[0] == 0) or (k[1] - P[1] == 0):\n                # check rock & queen\n                moves += 2\n            if ((k[0] - P[0] == 1) and (P[1] - k[1] == 2)) or ((P[0] - k[0] == 2) and (k[1] - P[1] == 1)):\n                # check knight\n                moves += 1\n            if (k[0] - P[0] == P[1] - k[1]):\n                # check bishop & queen\n                moves += 2\n        else:\n            if (k[0] - P[0] == 0) or (k[1] - P[1] == 0):\n                # check rock & queen\n                moves += 2\n            if ((k[0] - P[0] == 1) and (abs(k[1] - P[1]) == 2)) or ((k[0] - P[0] == 2) and (abs(k[1] - P[1]) == 1)):\n                # check knight\n                moves += 1\n            if (k[0] - P[0] == abs(P[1] - k[1])):\n                # check bishop & queen\n                moves += 2\n    return moves\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":106,"fileType":"python","requestStartTime":1517994821794}}
{"body": {"column":42,"line":18,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            whiteKingFound, checkIf = None, None\n            for j in xrange(i-1, -1, -1):\n                if board[1][j] == 'K':\n                    whiteKingFound = j\n                    break\n                elif board[1][j] == '#':\n                    continue\n                else:\n                    break\n            if whiteKingFound is not None:\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n               \n    count = 0\n    if blackKingPos[0] == 0:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[0][s+1:e]))\n        if ok:\n            count = 2\n            \n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 0])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            count = 2\n\n    elif abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint):\n        diff = abs(blackKingPos[1] - pwnPromotePoint)\n        if blackKingPos[1] > pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n        elif blackKingPos[1] < pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n    else:\n        if abs(blackKingPos[0] - 0) == 1 and abs(blackKingPos[1] - pwnPromotePoint) == 2:\n            count = 1\n        elif abs(blackKingPos[0] - 0) == 2 and abs(blackKingPos[1] - pwnPromotePoint) == 1:\n            count = 1\n    \n    # check for not pawn checks\n    board[1][pwnPromotePoint] = '#'\n    \n    if pwnPromotePoint != 7 and (board[0][pwnPromotePoint+1] == 'B' or board[0][pwnPromotePoint+1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint - 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint - 1)\n            if blackKingPos[1] > pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    if pwnPromotePoint != 0 and (board[0][pwnPromotePoint-1] == 'B' or board[0][pwnPromotePoint-1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint + 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint + 1)\n            if blackKingPos[1] > pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    \n    if blackKingPos[0] == 1:\n        if blackKingPos[1] < pwnPromotePoint:\n            if 'R' in board[1][pwnPromotePoint+1:] or 'Q' in board[1][pwnPromotePoint+1:]:\n                count = 4\n        elif blackKingPos[1] > pwnPromotePoint:\n            if 'R' in board[1][:pwnPromotePoint] or 'Q' in board[1][:pwnPromotePoint]:\n                count = 4\n        \n    return count \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":518,"fileType":"python","requestStartTime":1517994911018}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            whiteKingFound, checkIf = None, None\n            for j in xrange(i-1, -1, -1):\n                if board[1][j] == 'K':\n                    whiteKingFound = j\n                    break\n                elif board[1][j] == '#':\n                    continue\n                else:\n                    break\n            if whiteKingFound is not None:\n                for j in xrange(i+1, 8):\n                    if board[1][j] == 'q' or board[1][j] == 'r':\n                        check = j\n                        break\n                    elif board[1][j] == '#':\n                        continue\n                    else:\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n               \n    count = 0\n    if blackKingPos[0] == 0:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[0][s+1:e]))\n        if ok:\n            count = 2\n            \n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 0])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            count = 2\n\n    elif abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint):\n        diff = abs(blackKingPos[1] - pwnPromotePoint)\n        if blackKingPos[1] > pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n        elif blackKingPos[1] < pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n    else:\n        if abs(blackKingPos[0] - 0) == 1 and abs(blackKingPos[1] - pwnPromotePoint) == 2:\n            count = 1\n        elif abs(blackKingPos[0] - 0) == 2 and abs(blackKingPos[1] - pwnPromotePoint) == 1:\n            count = 1\n    \n    # check for not pawn checks\n    board[1][pwnPromotePoint] = '#'\n    \n    if pwnPromotePoint != 7 and (board[0][pwnPromotePoint+1] == 'B' or board[0][pwnPromotePoint+1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint - 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint - 1)\n            if blackKingPos[1] > pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    if pwnPromotePoint != 0 and (board[0][pwnPromotePoint-1] == 'B' or board[0][pwnPromotePoint-1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint + 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint + 1)\n            if blackKingPos[1] > pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    \n    if blackKingPos[0] == 1:\n        if blackKingPos[1] < pwnPromotePoint:\n            if 'R' in board[1][pwnPromotePoint+1:] or 'Q' in board[1][pwnPromotePoint+1:]:\n                count = 4\n        elif blackKingPos[1] > pwnPromotePoint:\n            if 'R' in board[1][:pwnPromotePoint] or 'Q' in board[1][:pwnPromotePoint]:\n                count = 4\n        \n    return count \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":792,"fileType":"python","requestStartTime":1517995019516}}
{"body": {"column":31,"line":60,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            # king on left\n            whiteKingFound, checkIf = None, None\n            for j in xrange(i-1, -1, -1):\n                if board[1][j] == 'K':\n                    whiteKingFound = j\n                    break\n                elif board[1][j] == '#':\n                    continue\n                else:\n                    break\n            if whiteKingFound is not None:\n                for j in xrange(i+1, 8):\n                    if board[1][j] == 'q' or board[1][j] == 'r':\n                        checkIf = j\n                        break\n                    elif board[1][j] == '#':\n                        continue\n                    else:\n                        break\n            \n                if checkIf is not None:\n                    continue\n            \n            # king on right\n            whiteKingFound, checkIf = None, None\n            for j in xrange(i+1, 8):\n                if board[1][j] == 'K':\n                    whiteKingFound = j\n                    break\n                elif board[1][j] == '#':\n                    continue\n                else:\n                    break\n            if whiteKingFound is not None:\n                for j in xrange(i-1, -1, -1):\n                    if board[1][j] == 'q' or board[1][j] == 'r':\n                        checkIf = j\n                        break\n                    elif board[1][j] == '#':\n                        continue\n                    else:\n                        break\n            \n                if checkIf is not None:\n                    continue\n                   \n            # king on up left cell\n            if i > 0 and board[0][i-1] == 'K':\n                checkIf = None\n                j = 1\n                while True:\n                    if i+j > 7:\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n               \n    count = 0\n    if blackKingPos[0] == 0:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[0][s+1:e]))\n        if ok:\n            count = 2\n            \n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 0])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            count = 2\n\n    elif abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint):\n        diff = abs(blackKingPos[1] - pwnPromotePoint)\n        if blackKingPos[1] > pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n        elif blackKingPos[1] < pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n    else:\n        if abs(blackKingPos[0] - 0) == 1 and abs(blackKingPos[1] - pwnPromotePoint) == 2:\n            count = 1\n        elif abs(blackKingPos[0] - 0) == 2 and abs(blackKingPos[1] - pwnPromotePoint) == 1:\n            count = 1\n    \n    # check for not pawn checks\n    board[1][pwnPromotePoint] = '#'\n    \n    if pwnPromotePoint != 7 and (board[0][pwnPromotePoint+1] == 'B' or board[0][pwnPromotePoint+1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint - 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint - 1)\n            if blackKingPos[1] > pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    if pwnPromotePoint != 0 and (board[0][pwnPromotePoint-1] == 'B' or board[0][pwnPromotePoint-1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint + 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint + 1)\n            if blackKingPos[1] > pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    \n    if blackKingPos[0] == 1:\n        if blackKingPos[1] < pwnPromotePoint:\n            if 'R' in board[1][pwnPromotePoint+1:] or 'Q' in board[1][pwnPromotePoint+1:]:\n                count = 4\n        elif blackKingPos[1] > pwnPromotePoint:\n            if 'R' in board[1][:pwnPromotePoint] or 'Q' in board[1][:pwnPromotePoint]:\n                count = 4\n        \n    return count \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1933,"fileType":"python","requestStartTime":1517995340034}}
{"body": {"column":39,"line":72,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pwnPromotePoint = None\n    for i in xrange(8):\n        if board[1][i] == 'P' and board[0][i] == '#':\n            # king on left\n            whiteKingFound, checkIf = None, None\n            for j in xrange(i-1, -1, -1):\n                if board[1][j] == 'K':\n                    whiteKingFound = j\n                    break\n                elif board[1][j] == '#':\n                    continue\n                else:\n                    break\n            if whiteKingFound is not None:\n                for j in xrange(i+1, 8):\n                    if board[1][j] == 'q' or board[1][j] == 'r':\n                        checkIf = j\n                        break\n                    elif board[1][j] == '#':\n                        continue\n                    else:\n                        break\n            \n                if checkIf is not None:\n                    continue\n            \n            # king on right\n            whiteKingFound, checkIf = None, None\n            for j in xrange(i+1, 8):\n                if board[1][j] == 'K':\n                    whiteKingFound = j\n                    break\n                elif board[1][j] == '#':\n                    continue\n                else:\n                    break\n            if whiteKingFound is not None:\n                for j in xrange(i-1, -1, -1):\n                    if board[1][j] == 'q' or board[1][j] == 'r':\n                        checkIf = j\n                        break\n                    elif board[1][j] == '#':\n                        continue\n                    else:\n                        break\n            \n                if checkIf is not None:\n                    continue\n                   \n            # king on up left cell\n            if i > 0 and board[0][i-1] == 'K':\n                checkIf = None\n                cx, cy = 2, i+1\n                while True:\n                    if cx > 7 or cy > 7: break\n                    if board[cx][cy] == 'q' or board[cx][cy] == 'b':\n                        checkIf = True\n                        break\n                    elif board[cx][cy] == '#':\n                        continue\n                    else:\n                        break\n                    \n                    cx += 1\n                    cy += 1\n                \n                if checkIf is not None:\n            pwnPromotePoint = i\n            break\n    \n    blackKingPos = None\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == 'k':\n                blackKingPos = [i, j]\n                break\n               \n    count = 0\n    if blackKingPos[0] == 0:\n        s, e = sorted([blackKingPos[1], pwnPromotePoint])\n        ok = all(map(lambda x: x == '#', board[0][s+1:e]))\n        if ok:\n            count = 2\n            \n    elif blackKingPos[1] == pwnPromotePoint:\n        s, e = sorted([blackKingPos[0], 0])\n        ll = [board[i][pwnPromotePoint] for i in xrange(s+1, e)]\n        ok = all(map(lambda x: x == '#', ll))\n        if ok:\n            count = 2\n\n    elif abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint):\n        diff = abs(blackKingPos[1] - pwnPromotePoint)\n        if blackKingPos[1] > pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n        elif blackKingPos[1] < pwnPromotePoint:\n            ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n            ok = all(map(lambda x: x == '#', ll))\n            if ok:\n                count = 2\n\n    else:\n        if abs(blackKingPos[0] - 0) == 1 and abs(blackKingPos[1] - pwnPromotePoint) == 2:\n            count = 1\n        elif abs(blackKingPos[0] - 0) == 2 and abs(blackKingPos[1] - pwnPromotePoint) == 1:\n            count = 1\n    \n    # check for not pawn checks\n    board[1][pwnPromotePoint] = '#'\n    \n    if pwnPromotePoint != 7 and (board[0][pwnPromotePoint+1] == 'B' or board[0][pwnPromotePoint+1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint - 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint - 1)\n            if blackKingPos[1] > pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint+1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    if pwnPromotePoint != 0 and (board[0][pwnPromotePoint-1] == 'B' or board[0][pwnPromotePoint-1] == 'Q'):\n        if abs(blackKingPos[0] - 0) == abs(blackKingPos[1] - pwnPromotePoint + 1):\n            diff = abs(blackKingPos[1] - pwnPromotePoint + 1)\n            if blackKingPos[1] > pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] - i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n\n            elif blackKingPos[1] < pwnPromotePoint-1:\n                ll = [board[blackKingPos[0] - i][blackKingPos[1] + i] for i in xrange(1, diff)]\n                ok = all(map(lambda x: x == '#', ll))\n                if ok:\n                    count = 4\n                    \n    \n    if blackKingPos[0] == 1:\n        if blackKingPos[1] < pwnPromotePoint:\n            if 'R' in board[1][pwnPromotePoint+1:] or 'Q' in board[1][pwnPromotePoint+1:]:\n                count = 4\n        elif blackKingPos[1] > pwnPromotePoint:\n            if 'R' in board[1][:pwnPromotePoint] or 'Q' in board[1][:pwnPromotePoint]:\n                count = 4\n        \n    return count \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":2366,"fileType":"python","requestStartTime":1517995475177}}
{"body": {"column":19,"line":65,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef move_rock(P, k):\n    check = False\n    for row in range(8):\n        if (P[row, 1] == k):\n            check = True\n    for col in range(8):\n        if (P[0, col] == k):\n            check = True\n    return check\n\ndef move_bishop(P, k):\n    check = False\n    # move negative cols\n    for i in range(8):\n        tmp_P = [P[0] + i, P[1] - i]\n        if (tmp_P[1] > -1) and (tmp_P == k):\n            check = True\n    # move positive cols\n    for i in range(8):\n        tmp_P = [P[0] + i, P[1] + i]\n        if (tmp_P[1] < 8) and (tmp_P == k):\n            check True\n    return check\n\ndef move_knight(P, k):\n    check = False\n    # move 1\n    tmp_P = [P[0] + 1, P[1] - 2]\n    if (tmp_P[1] >= 0) and (tmp_P == k):\n        check = True\n    # move 2\n    tmp_P = [P[0] + 2, P[1] - 1]\n    if (tmp_P[1] >= 0) and (tmp_P == k):\n        check = True\n    # move 3\n    tmp_P = [P[0] + 2, P[1] + 1]\n    if (tmp_P[1] < 8) and (tmp_P == k):\n        check = True\n    # move 4\n    tmp_P = [P[0] + 1, P[1] + 2]\n    if (tmp_P[1] < 8) and (tmp_P == k):\n        check = True\n    return check\n\ndef waysToGiveACheck(board):\n    # poner posiciones para cada elemento\n    Ps = []\n    for row in range(8):\n        for col in range(8):\n            if board[row][0][col] == 'P':\n                Ps.append([row, col])\n            elif board[row][0][col] == 'k':\n                k = [row, col]\n    # for each Pawn\n    moves = 0\n    for P in Ps:\n        # move pawn\n        P = [P[0] - 1, P[1]]\n        # check possible moves\n        check = move_rock(P, k)\n        if (check):\n        check = move_bishop(P, k)\n        check = move_knight(P, k)\n    return moves\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1573,"fileType":"python","requestStartTime":1517995615377}}
{"body": {"column":25,"line":91,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = promotedPawnPos[2]\n    \n    rowKingPos = oppKingPos[0]\n    colKingPos = oppKingPos[2]\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    while( curColPawnPos > 0):\n        listPossibleMove.\n    \n    \n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = promotedPawnPos[2]\n    \n    rowKingPos = oppKingPos[0]\n    colKingPos = oppKingPos[2]\n    \n    terminatedBy = \"\"\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy = \"Queen\" \n    elif colKingPos == colPawnPos \n        terminatedBy = \"Queen\" \n    elif colKingPos == colPawnPos \n    \n     \n    \n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy += \";Rook\" \n    elif colKingPos == colPawnPos \n        terminatedBy += \";Rook\"\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    print(pawnPos)\n    print(oppKingPos)\n    print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1868,"fileType":"python","requestStartTime":1517996467235}}
{"body": {"column":15,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    clouds = []\n    cloudset = set()\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        clouds.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":270,"fileType":"python","requestStartTime":1517997095860}}
{"body": {"column":13,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":266,"fileType":"python","requestStartTime":1517997112987}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], 0))\n        data.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":304,"fileType":"python","requestStartTime":1517997143921}}
{"body": {"column":13,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], 0))\n        data.append((y[i] + r[i], 2))\n    for i in range(n):\n        data.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":365,"fileType":"python","requestStartTime":1517997162203}}
{"body": {"column":9,"line":16,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], -1))\n        data.append((y[i] + r[i], 2000000000))\n    for i in range(n):\n        data.append(x[i], p[i])\n    data.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":403,"fileType":"python","requestStartTime":1517997204940}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudarray = []\n    cloudset = set()\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], -1))\n        data.append((y[i] + r[i], 2000000000))\n        cloudarray.\n    for i in range(n):\n        data.append(x[i], p[i])\n    data.sort()\n    for position, event in data:\n        print(position, event)\n        if event == \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":378,"fileType":"python","requestStartTime":1517997279659}}
{"body": {"column":20,"line":15,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    cloudvalues = []\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], -1))\n        data.append((y[i] + r[i], 2000000000))\n        cloudvalues.\n    for i in range(n):\n        data.append(x[i], p[i])\n    data.sort()\n    for position, event in data:\n        print(position, event)\n        if event == \n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":380,"fileType":"python","requestStartTime":1517997320101}}
{"body": {"column":21,"line":23,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    cloudvalues = []\n    sunnypop = 0\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], -1))\n        data.append((y[i] + r[i], 2000000000))\n        cloudvalues.append(0)\n    for i in range(n):\n        data.append(x[i], p[i])\n    data.sort()\n    for position, event in data:\n        print(position, event)\n        if event == -1:\n            cloudset.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":587,"fileType":"python","requestStartTime":1517997337044}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef maximumPeople(p, x, y, r):\n    # Return the maximum number of people that will be in a sunny town after removing exactly one cloud.\n    data = []\n    cloudset = set()\n    cloudvalues = []\n    sunnypop = 0\n    m = len(y)\n    n = len(x)\n    for i in range(m):\n        data.append((y[i] - r[i], -1-i))\n        data.append((y[i] + r[i], 2000000000+i))\n        cloudvalues.append(0)\n    for i in range(n):\n        data.append(x[i], p[i])\n    data.sort()\n    for position, event in data:\n        print(position, event)\n        if event < 0:\n            cloudset.add(-1-event)\n        elif event >= 2000000000:\n            cloudset.\n    \n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    p = map(long, raw_input().strip().split(' '))\n    x = map(long, raw_input().strip().split(' '))\n    m = int(raw_input().strip())\n    y = map(long, raw_input().strip().split(' '))\n    r = map(long, raw_input().strip().split(' '))\n    result = maximumPeople(p, x, y, r)\n    print result\n\n\n","offset":658,"fileType":"python","requestStartTime":1517997386932}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\ndef levelOrder(root):\n    if root.\n\n\n","offset":177,"fileType":"python","requestStartTime":1517997518722}}
{"body": {"column":8,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(element):\n    sys.\n\ndef levelOrder(root):\n    \n\n\n","offset":185,"fileType":"python","requestStartTime":1517997549150}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(element):\n    sys.stdout.\n\ndef levelOrder(root):\n    \n\n\n","offset":192,"fileType":"python","requestStartTime":1517997553543}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(data.)\n\n\n","offset":246,"fileType":"python","requestStartTime":1517997572967}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.)\n\n\n","offset":246,"fileType":"python","requestStartTime":1517997575383}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    if (root.)\n\n\n","offset":265,"fileType":"python","requestStartTime":1517997581958}}
{"body": {"column":17,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    s_print(root.)\n    if root.left:\n        levelOrd\n\n\n","offset":269,"fileType":"python","requestStartTime":1517997603654}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.)\n    \n\n\n","offset":246,"fileType":"python","requestStartTime":1517997672331}}
{"body": {"column":9,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    \ndef print_level(root):\n    root.\n    \n\n\n","offset":289,"fileType":"python","requestStartTime":1517997705777}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    \ndef print_lower_level(root):\n    s_print(root.)\n    \n\n\n","offset":303,"fileType":"python","requestStartTime":1517997720145}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    \ndef print_lower_level(root):\n    s_print(root.left.)\n    \n\n\n","offset":308,"fileType":"python","requestStartTime":1517997727361}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    \ndef print_lower_level(root):\n    if root.\n    \n\n\n","offset":298,"fileType":"python","requestStartTime":1517997732544}}
{"body": {"column":31,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    \ndef print_lower_level(root):\n    if root.left:\n        print_lower_level(root.)\n    \n\n\n","offset":335,"fileType":"python","requestStartTime":1517997742906}}
{"body": {"column":36,"line":17,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    \ndef print_lower_level(root):\n    if root.left:\n        print_lower_level(root.left.)\n    \n\n\n","offset":340,"fileType":"python","requestStartTime":1517997745848}}
{"body": {"column":27,"line":14,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data))\n\ndef levelOrder(root):\n    s_print(root.data)\n    print_lower_level(root.)\n    \ndef print_lower_level(root):\n    if root.left:\n        print_lower_level(root.left.data)\n    if root.right:\n        print_lower_level(root.right.data)\n    \n\n\n","offset":279,"fileType":"python","requestStartTime":1517997765624}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data) + ' ')\n\ndef levelOrder(root):\n    s_print(root.data)\n    print_lower_level(root)\n    if root.\n    \ndef print_lower_level(root):\n    if root.left:\n        s_print(root.left.data)\n    if root.right:\n        s_print(root.right.data)\n    \n\n\n","offset":298,"fileType":"python","requestStartTime":1517997826858}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data) + ' ')\n\ndef levelOrder(root):\n    s_print(root.data)\n    print_lower_level(root)\n    if root.left:\n        levelOrder(root.)\n    \ndef print_lower_level(root):\n    if root.left:\n        s_print(root.left.data)\n    if root.right:\n        s_print(root.right.data)\n    \n\n\n","offset":328,"fileType":"python","requestStartTime":1517997837269}}
{"body": {"column":17,"line":13,"wordToComplete":"","code":"\n\"\"\"\nNode is defined as\nself.left (the left child of the node)\nself.right (the right child of the node)\nself.data (the value of the node)\n\"\"\"\nimport sys\n\ndef s_print(data):\n    sys.stdout.write(str(data) + ' ')\n\ndef levelOrder(root):\n    s_print(root.)\n    \ndef print_subtree(root):\n    print_lower_level(root)\n    if root.left:\n        print_subtree(root.left)\n    if root.right:\n        print_subtree(root.right)\n\ndef print_lower_level(root):\n    if root.left:\n        s_print(root.left.data)\n    if root.right:\n        s_print(root.right.data)\n    \n\n\n","offset":252,"fileType":"python","requestStartTime":1517997934657}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    n = len(A)\n    sums = [0]\n    for x in A:\n        sums.\n    # Return the largest value of any of A's nonempty subarrays.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":109,"fileType":"python","requestStartTime":1517998209440}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    n = len(A)\n    sums = [0]\n    for i in range(len(A)):\n        sums.\n    # Return the largest value of any of A's nonempty subarrays.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":121,"fileType":"python","requestStartTime":1517998232935}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    n = len(A)\n    sums = [0]\n    for i in range(len(A)):\n        sums.append(sums[i] + A[i])\n    maxsum = max(sums)\n    minsum = min(sums)\n    minindex = sums.\n        \n    # Return the largest value of any of A's nonempty subarrays.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":210,"fileType":"python","requestStartTime":1517998321038}}
{"body": {"column":20,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    n = len(A)\n    sums = [0]\n    for i in range(len(A)):\n        sums.append(sums[i] + A[i])\n    maxsum = max(sums)\n    minsum = min(sums)\n    minindex = sums.index(minsum)\n    maxindex = sums.\n        \n    # Return the largest value of any of A's nonempty subarrays.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":244,"fileType":"python","requestStartTime":1517998329654}}
{"body": {"column":15,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef powerSum(X, N):\n    # Complete this function\n    print math.sqrt(15)\n    \n\nif __name__ == \"__main__\":\n    X = int(raw_input().strip())\n    N = int(raw_input().strip())\n    result = powerSum(X, N)\n    print result\n\n\n","offset":93,"fileType":"python","requestStartTime":1517998678525}}
{"body": {"column":15,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef powerSum(X, N):\n    # Complete this function\n    print math.math.sqrt(15)\n    \n\nif __name__ == \"__main__\":\n    X = int(raw_input().strip())\n    N = int(raw_input().strip())\n    result = powerSum(X, N)\n    print result\n\n\n","offset":105,"fileType":"python","requestStartTime":1517998715876}}
{"body": {"column":33,"line":259,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = \"\"\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy = \"Queen\" \n    elif colKingPos == colPawnPos  :\n        terminatedBy = \"Queen\" \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy += \"Queen\"\n \n     \n    print(\"10> \" + terminatedBy )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy += \";Rook\" \n    elif colKingPos == colPawnPos :\n        terminatedBy += \";Rook\"\n    \n    print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy += \";Bishop\"\n    \n    print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy += \";Knight\"\n    \n    print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = promotedTo(oppKingPos, promotedPawnPos)\n    \n    result_set = map(str, result.)\n    \n    return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":6341,"fileType":"python","requestStartTime":1517999042736}}
{"body": {"column":15,"line":265,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = \"\"\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy = \"Queen\" \n    elif colKingPos == colPawnPos  :\n        terminatedBy = \"Queen\" \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy += \"Queen\"\n \n     \n    print(\"10> \" + terminatedBy )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy += \";Rook\" \n    elif colKingPos == colPawnPos :\n        terminatedBy += \";Rook\"\n    \n    print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy += \";Bishop\"\n    \n    print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy += \";Knight\"\n    \n    print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = \"\"\n    result = promotedTo(oppKingPos, promotedPawnPos)\n    \n    result_set = set(map(str, result.split(';')))\n    \n    \n    result_set.\n    print(result_set)\n    \n    return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":6428,"fileType":"python","requestStartTime":1517999155738}}
{"body": {"column":37,"line":262,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = \"\"\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy += \" Queen \" \n    elif colKingPos == colPawnPos  :\n        terminatedBy += \" Queen \" \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy = \" Queen \"\n \n     \n    print(\"10> \" + terminatedBy )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy += \" Rook \" \n    elif colKingPos == colPawnPos :\n        terminatedBy += \" Rook \"\n    \n    print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy += \" Bishop \"\n    \n    print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy += \" Knight \"\n    \n    print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = \"\"\n    result = promotedTo(oppKingPos, promotedPawnPos)\n    \n    result_set = set(map(str, result..split(';')))\n    \n    \n    result_set.remove(' ')\n    \n    print(result_set)\n    \n    return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":6401,"fileType":"python","requestStartTime":1517999363314}}
{"body": {"column":11,"line":261,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = \"\"\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy += \" Queen \" \n    elif colKingPos == colPawnPos  :\n        terminatedBy += \" Queen \" \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy = \" Queen \"\n \n     \n    print(\"10> \" + terminatedBy )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy += \" Rook \" \n    elif colKingPos == colPawnPos :\n        terminatedBy += \" Rook \"\n    \n    print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy += \" Bishop \"\n    \n    print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy += \" Knight \"\n    \n    print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = \"\"\n    result = promotedTo(oppKingPos, promotedPawnPos)\n    result.\n    \n    result_set = set(map(str, result.strip().split(' ')))\n    \n    \n   \n    \n    print(result_set)\n    \n    return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":6370,"fileType":"python","requestStartTime":1517999416151}}
{"body": {"column":21,"line":189,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = []\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy. += \" Queen \" \n    elif colKingPos == colPawnPos  :\n        terminatedBy += \" Queen \" \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy = \" Queen \"\n \n     \n    print(\"10> \" + terminatedBy )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy += \" Rook \" \n    elif colKingPos == colPawnPos :\n        terminatedBy += \" Rook \"\n    \n    print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy += \" Bishop \"\n    \n    print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy += \" Knight \"\n    \n    print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = \"\"\n    result = promotedTo(oppKingPos, promotedPawnPos)\n    result.strip(' ')\n    \n    result_set = set(map(str, result.strip().split(' ')))\n    \n    \n   \n    \n    print(result_set)\n    \n    return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":4502,"fileType":"python","requestStartTime":1517999619935}}
{"body": {"column":11,"line":2,"wordToComplete":"","code":"\ndef capitalize(string):\n    string.\n    return \n\n\nif __name__ == '__main__':\n    string = raw_input()\n    capitalized_string = capitalize(string)\n    print capitalized_string\n","offset":37,"fileType":"python","requestStartTime":1518000089082}}
{"body": {"column":27,"line":8,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nuser1_input = input(%s, \"Please choose any one option from Rock Paper and Scissor\")\nuser1_input1 = user1_input.\nuser2_input = input(%s, \"Please choose any one option from Rock Paper and Scissor\")\n\ndef playRPS(player1Throw, player2Throw):\n    if player1Throw == player2Throw:\n        return(\"Its a Tie, Please try again\")\n    elif player1Throw == 'rock':\n        if player2Throw == 'paper':\n            return(\"Player2 wins!\")\n    elif player1Throw == 'paper':\n        if player2Throw == 'scissors':\n            return(\"Player2 wins!\")\n    elif player1Throw == 'rock':\n        if player2Throw == 'scissors':\n            return(\"Player1 wins!\")\n        else:\n            return(\"Invalid input! Please chek if the words are from the three options\")\n        \n    \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        player1Throw = raw_input()\n    except:\n        player1Throw = None\n\n    try:\n        player2Throw = raw_input()\n    except:\n        player2Throw = None\n\n    res = playRPS(player1Throw, player2Throw);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":181,"fileType":"python","requestStartTime":1518000162593}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nuser1_input = input(%s, \"Please choose any one option from Rock Paper and Scissor\")\nuser1_input_low = user1_input.lower()\nuser2_input = input(%s, \"Please choose any one option from Rock Paper and Scissor\")\nuser2_input_low = user2_input.\n\ndef playRPS(player1Throw, player2Throw):\n    if player1Throw == player2Throw:\n        return(\"Its a Tie, Please try again\")\n    elif player1Throw == 'rock':\n        if player2Throw == 'paper':\n            return(\"Player2 wins!\")\n    elif player1Throw == 'paper':\n        if player2Throw == 'scissors':\n            return(\"Player2 wins!\")\n    elif player1Throw == 'rock':\n        if player2Throw == 'scissors':\n            return(\"Player1 wins!\")\n        else:\n            return(\"Invalid input! Please chek if the words are from the three options\")\n        \n    \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        player1Throw = raw_input()\n    except:\n        player1Throw = None\n\n    try:\n        player2Throw = raw_input()\n    except:\n        player2Throw = None\n\n    res = playRPS(player1Throw, player2Throw);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":306,"fileType":"python","requestStartTime":1518000196453}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nuser1_input = input(\"%s, Please choose any one option from rock, paper and scissor\")\nuser1_input_low = user1_input.lower()\nuser2_input = input(\"%s, Please choose any one option from rock ,paper and scissor\")\nuser2_input_low = user2_input.lower()\n\ndef playRPS(player1Throw, player2Throw):\n    if player1Throw == player2Throw:\n        return(\"Its a Tie, Please try again\")\n    elif player1Throw == 'rock':\n        if player2Throw == 'paper':\n            return(\"Player2 wins!\")\n    elif player1Throw == 'paper':\n        if player2Throw == 'scissors':\n            return(\"Player2 wins!\")\n    elif player1Throw == 'rock':\n        if player2Throw == 'scissors':\n            return(\"Player1 wins!\")\n        else:\n            return(\"Invalid input! Please chek if the words are from the three options\")\n        sys.\n        \nprint(playRPS(user1_input_low,user2_input_low))\n \n\n        \n    \n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        player1Throw = raw_input()\n    except:\n        player1Throw = None\n\n    try:\n        player2Throw = raw_input()\n    except:\n        player2Throw = None\n\n    res = playRPS(player1Throw, player2Throw);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":878,"fileType":"python","requestStartTime":1518000450009}}
{"body": {"column":14,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nif __name__ == \"__main__\":\n    meal_cost = float(raw_input().strip())\n    tip_percent = int(raw_input().strip())\n    tax_percent = int(raw_input().strip())\n    cost = (meal_cost * tip_percent/100) + (meal_cost * tax_percent / 100) + meal_cost\n    if cost > \n    print \"The total meal cost is \" + str(cost) + \" dollars.\"\n\n","offset":286,"fileType":"python","requestStartTime":1518000509422}}
{"body": {"column":11,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\ns=raw_input()\nl=re.split(\"[,.]+\",s)\nprint '\\n'.\n\n","offset":129,"fileType":"python","requestStartTime":1518000763189}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    prev = None\n    curr = self.\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":627,"fileType":"python","requestStartTime":1518001308291}}
{"body": {"column":40,"line":19,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef powerSum(X, N,last,l):\n    # Complete this function\n    i = 1\n    k = 0\n    \n    if X==0: return 1\n    if X==1: return 0\n    \n    while i**N<=X and i<last:\n        i += 1\n\n    for k in range(1,i):\n    \n        k+=powerSum(X-(i-k)**N,N,i-k,la.)\n    \n    \n    return k\n    \n   \n    \n\nif __name__ == \"__main__\":\n    X = int(raw_input().strip())\n    N = int(raw_input().strip())\n    result = powerSum(X, N, X+1,[])\n    print result\n\n\n","offset":287,"fileType":"python","requestStartTime":1518001361970}}
{"body": {"column":39,"line":19,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef powerSum(X, N,last,l):\n    # Complete this function\n    i = 1\n    k = 0\n    \n    if X==0: return 1\n    if X==1: return 0\n    \n    while i**N<=X and i<last:\n        i += 1\n\n    for k in range(1,i):\n    \n        k+=powerSum(X-(i-k)**N,N,i-k,l.)\n    \n    \n    return k\n    \n   \n    \n\nif __name__ == \"__main__\":\n    X = int(raw_input().strip())\n    N = int(raw_input().strip())\n    result = powerSum(X, N, X+1,[])\n    print result\n\n\n","offset":286,"fileType":"python","requestStartTime":1518001363122}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    prev = None\n    curr = list.\n    print \"Curr:\", curr\n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":627,"fileType":"python","requestStartTime":1518001422481}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef powerSum(X, N,last,l):\n    # Complete this function\n    i = 1\n    k = 0\n    \n    if X==0: return 1, l\n    if X==1: return 0, l\n    \n    while i**N<=X and i<last:\n        i += 1\n\n    for k in range(1,i):\n        \n        l.\n        \n        k+=powerSum(X-(i-k)**N,N,i-k,l.append(i-k))\n    \n    \n    \n    \n   \n    \n\nif __name__ == \"__main__\":\n    X = int(raw_input().strip())\n    N = int(raw_input().strip())\n    result = powerSum(X, N, X+1,[])\n    print result\n\n\n","offset":267,"fileType":"python","requestStartTime":1518001447306}}
{"body": {"column":20,"line":37,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while curr:\n        print \"values is:\", curr\n        curr = curr.\n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":741,"fileType":"python","requestStartTime":1518001623783}}
{"body": {"column":20,"line":49,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    listPos = []\n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = col\n            listPos.\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    return \"1;\" + str(colPos)\n\ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = []\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy.append(\"Queen\") \n    elif colKingPos == colPawnPos  :\n        terminatedBy.append(\"Queen\")  \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy.append(\"Queen\") \n \n     \n    #print(\"10> \" + str(terminatedBy) )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy.append(\"Rook\")          \n    elif colKingPos == colPawnPos :\n        terminatedBy.append(\"Rook\") \n    \n    #print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy.append(\"Bishop\") \n    \n    #print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy.append(\"Knight\") \n    \n    #print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    pawnPos = whereIsMyPawn(mboard)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    promotedPawnPos = \"0\" + pawnPos[1:]\n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = \"\"\n    result = promotedTo(oppKingPos, promotedPawnPos)\n    #result.strip(' ')\n    \n    result_set = set(result)\n    \n    \n    \n    \n   \n    \n    print(len(result_set))\n    \n    #return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        #print result\n\n\n\n","offset":924,"fileType":"python","requestStartTime":1518001932940}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef acidNaming(acid_name):\n    first=acid_name.\n\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    for a0 in xrange(n):\n        acid_name = raw_input().strip()\n        result = acidNaming(acid_name)\n        print result\n\n\n\n","offset":76,"fileType":"python","requestStartTime":1518001979101}}
{"body": {"column":6,"line":6,"wordToComplete":"0.","code":"i = 4\nd = 4.0\ns = 'HackerRank '\n\n# Declare second integer, double, and String variables.\nn = 0\ny = 0.\n# Read and save an integer, double, and String to your variables.\n\n# Print the sum of both integer variables on a new line.\n\n# Print the sum of the double variables on a new line.\n\n# Concatenate and print the String variables on a new line\n# The 's' variable above should be printed first.\n\n\n","offset":102,"fileType":"python","requestStartTime":1518001981863}}
{"body": {"column":29,"line":11,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\nimport math\n\ndef powerSum(X, N,last):\n    # Complete this function\n    i = 1\n    k = 0\n    \n    if X==0: return int(last>)\n    \n    while i**N<=X and i<last:\n        i += 1\n\n    for f in range(1,i):\n\n        k+=powerSum(X-(i-f)**N,N,i-f)\n        print(i-f)\n    \n    \n    return k\n    \n    \n   \n    \n\nif __name__ == \"__main__\":\n    X = int(raw_input().strip())\n    N = int(raw_input().strip())\n    result = powerSum(X, N, X+1)\n    print result\n\n\n","offset":149,"fileType":"python","requestStartTime":1518002027556}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\ncube = lambda x:x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    if n==1:\n        l=[0]\n    if n==2:\n        l=[0,1]\n    l.(fibonacci(n-1)[-2]+fibonacci(n-1)[-1])\n    \nif __name__ == '__main__':\n    n = int(raw_input())\n    print map(cube, fibonacci(n))\n","offset":177,"fileType":"python","requestStartTime":1518002402923}}
{"body": {"column":15,"line":270,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    listPos = []\n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = int(col)\n            listPos.append(int(col))\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    #return \"1;\" + str(colPos)\n    return listPos\n    \n    \ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = []\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy.append(\"Queen\") \n    elif colKingPos == colPawnPos  :\n        terminatedBy.append(\"Queen\")  \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy.append(\"Queen\") \n \n     \n    print(\"10> \" + str(terminatedBy) )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy.append(\"Rook\")          \n    elif colKingPos == colPawnPos :\n        terminatedBy.append(\"Rook\") \n    \n    #print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy.append(\"Bishop\") \n    \n    #print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy.append(\"Knight\") \n    \n    #print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    listPawnPos = whereIsMyPawn(mboard)\n    \n    #print(listPawnPos)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    \n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = []\n    \n    for pawnPos in listPawnPos:\n        promotedPawnPos = \"0;\" + str(pawnPos)\n    \n        result. = promotedTo(oppKingPos, promotedPawnPos)\n        print(result)\n    \n    result_set = set(result)\n    \n    \n    \n    \n   \n    \n    print(len(result_set))\n    \n    #return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        #print result\n\n\n\n","offset":6539,"fileType":"python","requestStartTime":1518002772176}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nprint numpy.\n\n\n","offset":40,"fileType":"python","requestStartTime":1518002740192}}
{"body": {"column":22,"line":3,"wordToComplete":"","code":"import numpy\nimport numpy\n\nprint numpy.max(numpy.)\n\n\n","offset":50,"fileType":"python","requestStartTime":1518002745995}}
{"body": {"column":24,"line":274,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef printBoard(mboard):\n        \n    for i in range(8):\n        for j in range(8):\n            print(mboard[i][j]),\n        print(\"\")\n        \n\n        \ndef convert(board):\n    \n    mboard = []    \n    \n    for i in range(8):\n        new = []\n        for j in range(8):\n            new.append(\"\")\n        mboard.append(new)\n\n    for i in range(8):\n        col = 0\n        \n        currCnt = board[i][0]\n        \n        # print(\"$^^ \" + str(currCnt))\n        \n        for cntnt in currCnt:\n            mboard[i][col] = cntnt\n            col += 1\n            # print(\">>< \" + str(col))\n            \n  \n            \n    return mboard\n\ndef whereIsMyPawn(board):\n    colPos = 0\n    \n    listPos = []\n    for col in range(8):        \n        #print(str(board[1][col]) + \" \"),\n        if str(board[1][col]) == \"P\":\n            #print(\"1> col \" + str(col))\n            colPos = int(col)\n            listPos.append(int(col))\n            #break\n        \n    #print( \" 3> 1;\" + str(colPos) )\n\n    #return \"@;@\"\n    #return \"1;\" + str(colPos)\n    return listPos\n    \n    \ndef whereIsOppKing(board):\n    \n    rowPos = 0\n    colPos = 0\n    \n    for row in range(8):\n        for col in range(8):\n            #print(str(board[1][col])),\n            if board[row][col] == \"k\":\n                #print(\"2> row \" + str(row)  + \" col \" +  str(col))\n                rowPos = row\n                colPos = col\n                #break\n                #break\n    \n\n    return str(rowPos) + \";\" + str(colPos)\n    #print ( \"4> \" + str(rowPos) + \";\" + str(colPos) )\n\n    #return \"@;@\"\n    \n    \ndef terminatedBy(oppKingPos, promotedPawnPos):\n    \n    return 1;\n    \ndef terminatedByLeftDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    \n    terminated = False\n    \n    while( futColPawnPos > 0):\n        futRowPawnPos += 1\n        futColPawnPos -=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n    \ndef terminatedByRightDiagonal(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    futColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    while( futColPawnPos < 9):\n        futRowPawnPos += 1\n        futColPawnPos +=1\n        \n        if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n            terminated = True\n        \n    return terminated\n\ndef terminatedByKnight(oppKingPos, promotedPawnPos):\n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    listPossibleMove = []\n    \n    curColPawnPos = int(colPawnPos)\n    futRowPawnPos = 0\n    \n    terminated = False\n    \n    \n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos - 2\n    \n    #print(\">40>10> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos))\n    \n    #print(\">>>\" + str(type(rowKingPos)) + \" \"  + str(type(futRowPawnPos)))\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:        \n        terminated = True\n        #print(\">40>20> rowKingPos \" + str(rowKingPos) + \" futRowPawnPos \" + str(futRowPawnPos) +  \" colKingPos \" + str(colKingPos) + \" futColPawnPos \" + str(futColPawnPos) + \"terminated = \" + str(terminated))\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos - 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    futRowPawnPos = 1\n    futColPawnPos = curColPawnPos + 2\n        \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n    \n    futRowPawnPos = 2\n    futColPawnPos = curColPawnPos + 1\n    \n    if rowKingPos == futRowPawnPos and colKingPos == futColPawnPos:\n        terminated = True\n\n    return terminated\n\n\n    \n    \ndef promotedTo(oppKingPos, promotedPawnPos):\n    \n    colPawnPos = int(promotedPawnPos[2])\n    \n    rowKingPos = int(oppKingPos[0])\n    colKingPos = int(oppKingPos[2])\n    \n    terminatedBy = []\n    \n    #if promoted to Queen\n    #   check horizontal\n    #   check vertical\n    #   check lower left diagonal\n    #   check lower right diagonal\n    if rowKingPos == 0 :\n        terminatedBy.append(\"Queen\") \n    elif colKingPos == colPawnPos  :\n        terminatedBy.append(\"Queen\")  \n    else  :\n        terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n        terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n        if terminatedLeft == True or terminatedRight == True :\n            terminatedBy.append(\"Queen\") \n \n     \n    print(\"10> \" + str(terminatedBy) )\n\n    \n    #if promoted to Rook\n    #   check horizontal\n    #   check vertical\n    if rowKingPos == 0 :\n        terminatedBy.append(\"Rook\")          \n    elif colKingPos == colPawnPos :\n        terminatedBy.append(\"Rook\") \n    \n    #print(\"20> \" + terminatedBy )\n    \n    #if promoted to Bishop\n    #   check lower left diagonal\n    #   check lower right diagonal\n\n    terminatedLeft = terminatedByLeftDiagonal(oppKingPos, promotedPawnPos)\n    terminatedRight = terminatedByRightDiagonal(oppKingPos, promotedPawnPos)\n    \n    \n    \n    if terminatedLeft == True or terminatedRight == True :\n        terminatedBy.append(\"Bishop\") \n    \n    #print(\"30> \" + terminatedBy )\n      \n    terminated = terminatedByKnight(oppKingPos, promotedPawnPos)\n     \n    if terminated == True   :\n        terminatedBy.append(\"Knight\") \n    \n    #print(\"40> \" + terminatedBy )\n    \n    #if promoted to Knight\n    #   check lower left diagonal - 1\n    #   check lower left diagonal - 2    \n    #   check lower right diagonal - 1\n    #   check lower right diagonal - 2\n    \n    return terminatedBy\n    \n    \ndef waysToGiveACheck(board):\n    # Complete this function1\n    \n    mboard = convert(board)\n\n    listPawnPos = whereIsMyPawn(mboard)\n    \n    #print(listPawnPos)\n    oppKingPos = whereIsOppKing(mboard)\n    \n    \n    \n    #print(pawnPos)\n    #print(oppKingPos)\n    #print(promotedPawnPos)\n    #printBoard(mboard)\n    \n    result = []\n    finalResult = []\n    for pawnPos in listPawnPos:\n        promotedPawnPos = \"0;\" + str(pawnPos)\n    \n        result = []\n        result = ( promotedTo(oppKingPos, promotedPawnPos) )\n        \n        for itm in result:\n            finalResult.\n        print(result)\n    \n    result_set = set(result)\n    \n    \n    \n    \n   \n    \n    print(len(result_set))\n    \n    #return 1\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        #print result\n\n\n\n","offset":6681,"fileType":"python","requestStartTime":1518002880867}}
{"body": {"column":16,"line":35,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    node = list.\n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":688,"fileType":"python","requestStartTime":1518003234431}}
{"body": {"column":32,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    #node = list.head\n    #print \"node:\", node\n    for node in list:\n        print \"value is:\", node.\n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":773,"fileType":"python","requestStartTime":1518003455294}}
{"body": {"column":21,"line":37,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    #node = list.head\n    #print \"node:\", node\n    for node in list.:\n        print \"value is:\", node.val\n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":740,"fileType":"python","requestStartTime":1518003490001}}
{"body": {"column":31,"line":37,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while (list != None):\n        print \"next is:\", list.\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":763,"fileType":"python","requestStartTime":1518003718235}}
{"body": {"column":64,"line":31,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    ppos=[1,-1]\n    kpos=[-1,-1]\n####find pawn promotion position    \n    for i in range(8):\n        #print board[1][i],board[0][i]\n        if board[1][0][i] == \"P\" and board[0][0][i] == \"#\":\n            ppos=[1,i]\n#### find black king position \n    for i in range(8):\n        for j in range(8):\n                if board[i][0][j] == \"k\":\n                    kpos=[i,j]\n    allpieces=[]                \n    for i in range(8):\n        for j in range(8):\n                if board[i][0][j] == \"K\"  or board[i][0][j] == \"Q\" or board[i][0][j] == \"N\" or board[i][0][j] == \"R\" or board[i][0][j] == \"B\":\n                    allpieces.append((board[i][0][j],i,j))\n    dcount=0                \n    for i in allpieces:\n        if i[0] == \"K\":\n            if abs(i[1]-kpos[0])==1 and abs(i[2]-kpos[1])==1:\n                dcount=dcount+1\n                \n        if i[0] == \"R\":\n            if (i[1]==kpos[0] and (i[1]<ppos[0]<kpos[0] or i[1]>ppos[0]>kpos[0] or i[2]==kpos[1]) and  \n        if i[0] == \"B\":\n            \n        if i[0] == \"N\":\n            \n        if i[0] == \"Q\":\n              \n    #print ppos,kpos\n    ppos[0]=0\n    #print ppos,kpos\n    output=[0,0,0,0]\n############r,kn,b,q]    \n###### check rook #####\n    if ppos[0]==kpos[0] or ppos[1]==kpos[1]:\n        output[0] = output[0] +1\n        output[3] = output[3]+1\n        #print \"rook\",output\n########### check bishop ####        \n    if abs(ppos[0]-kpos[0])==abs(ppos[1]-kpos[1]):\n        output[2] = output[2]+1\n        output[3] = output[3]+1\n        #print \"bishop\",output\n#######   check knight #######        \n    if (abs(ppos[0]-kpos[0])==2 and   abs(ppos[1]-kpos[1]) ==1 )  or (abs(ppos[1]-kpos[1])==2 and abs(ppos[0]-kpos[0]) ==1 ):\n        output[1]=1\n        #print \"knight\",output\n    return sum(output)    \n\n    \n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":1017,"fileType":"python","requestStartTime":1518003731509}}
{"body": {"column":13,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while (list != None):\n        print \"next is:\", list.next\n        list.\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":781,"fileType":"python","requestStartTime":1518003772909}}
{"body": {"column":27,"line":102,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef move_rock(P, k):\n    check = False\n    for row in range(8):\n        tmp_P = [row, P[1]]\n        if (tmp_P == k):\n            check = True\n    for col in range(8):\n        tmp_P = [P[0], col]\n        if (tmp_P == k):\n            check = True\n    return check\n\ndef move_bishop(P, k):\n    check = False\n    # move negative cols\n    for i in range(8):\n        tmp_P = [P[0] + i, P[1] - i]\n        if (tmp_P[1] > -1) and (tmp_P == k):\n            check = True\n    # move positive cols\n    for i in range(8):\n        tmp_P = [P[0] + i, P[1] + i]\n        if (tmp_P[1] < 8) and (tmp_P == k):\n            check = True\n    return check\n\ndef move_knight(P, k):\n    check = False\n    # move 1\n    tmp_P = [P[0] + 1, P[1] - 2]\n    if (tmp_P[1] >= 0) and (tmp_P == k):\n        check = True\n    # move 2\n    tmp_P = [P[0] + 2, P[1] - 1]\n    if (tmp_P[1] >= 0) and (tmp_P == k):\n        check = True\n    # move 3\n    tmp_P = [P[0] + 2, P[1] + 1]\n    if (tmp_P[1] < 8) and (tmp_P == k):\n        check = True\n    # move 4\n    tmp_P = [P[0] + 1, P[1] + 2]\n    if (tmp_P[1] < 8) and (tmp_P == k):\n        check = True\n    return check\n\ndef waysToGiveACheck(board):\n    # poner posiciones para cada elemento\n    Ps = []\n    K = []\n    Ns = []\n    Rs = []\n    Bs = []\n    Q = []\n    for row in range(8):\n        for col in range(8):\n            if board[row][0][col] == 'P':\n                Ps.append([row, col])\n            elif board[row][0][col] == 'k':\n                k = [row, col]\n            elif board[row][0][col] == 'Ks':\n                K = [row, col]\n            elif board[row][0][col] == 'B':\n                Bs.append([row, col])\n            elif board[row][0][col] == 'R':\n                Rs.append([row, col])\n            elif board[row][0][col] == 'Q':\n                Q = [row, col]\n            elif board[row][0][col] == 'N':\n                Ns.append([row, col])\n    # for each Pawn\n    moves = 0\n    for P in Ps:\n        # move pawn\n        P = [P[0] - 1, P[1]]\n        # check possible Pawn moves\n        check = move_rock(P, k)\n        if (check):\n            moves += 2\n            continue\n        check = move_bishop(P, k)\n        if (check):\n            moves += 2\n            continue\n        check = move_knight(P, k)\n        if (check):\n            moves += 1\n            continue\n        if (moves == 0):\n            # check rocks\n            for R in Rs:\n                check = move_rock(R, k)\n                if (check):\n                    moves = 1\n            # check knights\n            for N in Ns:\n                check = move_knight(N, k)\n                if (check):\n    return moves\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":2620,"fileType":"python","requestStartTime":1518003788280}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        \n        print \"next is:\", list.val\n        if list.\n        list = list.next\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":782,"fileType":"python","requestStartTime":1518004072923}}
{"body": {"column":17,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        \n        print \"next is:\", list.val\n        if list.val%2 == 0:\n            list = list.next\n        else:\n            list.\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":854,"fileType":"python","requestStartTime":1518004106032}}
{"body": {"column":29,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        \n        print \"next is:\", list.val\n        if list.val%2 == 0:\n            list = list.next\n        else:\n            list.next = list.\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":866,"fileType":"python","requestStartTime":1518004110350}}
{"body": {"column":34,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        \n        print \"next is:\", list.val\n        if list.val%2 == 0:\n            list = list.next\n        else:\n            list.next = list.next.\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":871,"fileType":"python","requestStartTime":1518004114034}}
{"body": {"column":16,"line":43,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        \n        print \"next is:\", list.val\n        if list.val%2 == 0:\n            list = list.next\n        else:\n            list.next = list.next.next\n    return list.\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":892,"fileType":"python","requestStartTime":1518004128979}}
{"body": {"column":24,"line":40,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        \n        print \"next is:\", list.val\n        if list.val%2 == 0:\n            list = list.\n        else:\n            list.next = list.next.next\n    return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":818,"fileType":"python","requestStartTime":1518004146293}}
{"body": {"column":31,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".\n            list = list.next\n        else:\n            list.next = list.next.next\n    return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":781,"fileType":"python","requestStartTime":1518004178948}}
{"body": {"column":43,"line":38,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.)\n            list = list.next\n        else:\n            list.next = list.next.next\n    return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":793,"fileType":"python","requestStartTime":1518004184289}}
{"body": {"column":21,"line":43,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            #list.next = list.next.next\n            del list.\n    return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":949,"fileType":"python","requestStartTime":1518004284750}}
{"body": {"column":24,"line":44,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            #list.next = list.next.next\n            del list.val\n            list = list.\n    return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":977,"fileType":"python","requestStartTime":1518004296065}}
{"body": {"column":21,"line":45,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            #list.next = list.next.next\n            del list.val\n            list = list.next\n    return list(list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":1003,"fileType":"python","requestStartTime":1518004370829}}
{"body": {"column":32,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\ninput()\nshoeList = map(int, raw_input().)\n\n","offset":112,"fileType":"python","requestStartTime":1518004504661}}
{"body": {"column":21,"line":46,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            #list.next = list.next.next\n            list = list(val)\n            list = list.next\n    \n    return list(list.)\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":1012,"fileType":"python","requestStartTime":1518004610637}}
{"body": {"column":34,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nshoeList = map(int, raw_input().split())\ncustomers = input()\nmoney = 0\nfor i in range(customers):\n    shoeSize, price = raw_input().\n\n","offset":205,"fileType":"python","requestStartTime":1518004635999}}
{"body": {"column":29,"line":44,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            #list.next = list.next.next\n            list = list(val)\n            list = list.next.\n    \n    #return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":986,"fileType":"python","requestStartTime":1518004781951}}
{"body": {"column":6,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\nprint input()\n\np = []\n\nfor i in n:\n    p.\n    \ndef minimizeCost(p, x, y):\n    xc = sum(x)/len(x)\n    xy = sum(y)/len(y)    \n    for people in p:        \n        price = price + people(abs(x[people]-xc) + abs(y[people]-yc))        \n    return price\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    p_cnt = 0\n    p_cnt = int(raw_input())\n    p_i = 0\n    p = []\n    while p_i < p_cnt:\n        p_item = int(raw_input());\n        p.append(p_item)\n        p_i += 1\n\n\n    x_cnt = 0\n    x_cnt = int(raw_input())\n    x_i = 0\n    x = []\n    while x_i < x_cnt:\n        x_item = int(raw_input());\n        x.append(x_item)\n        x_i += 1\n\n\n    y_cnt = 0\n    y_cnt = int(raw_input())\n    y_i = 0\n    y = []\n    while y_i < y_cnt:\n        y_item = int(raw_input());\n        y.append(y_item)\n        y_i += 1\n\n\n    res = minimizeCost(p, x, y);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":112,"fileType":"python","requestStartTime":1518004814271}}
{"body": {"column":37,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import Counter\nraw_input()\nshoeList = map(int, raw_input().split())\ncustomers = input()\nmoney = 0\nfor i in range(customers):\n    shoeSize, price = raw_input().split()\n    if shoeSize in Counter(shoeList).\n\n","offset":293,"fileType":"python","requestStartTime":1518004840152}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import Counter\nraw_input()\nshoeList = map(int, raw_input().split())\ncustomers = input()\nmoney = 0\nfor i in range(customers):\n    shoeSize, price = raw_input().split()\n    if shoeSize in Counter(shoeList).keys():\n        money += price\n        shoeList.\n\n","offset":341,"fileType":"python","requestStartTime":1518004882826}}
{"body": {"column":29,"line":44,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            list = list.next.next\n     while list:\n        print \"values \" list.\n    \n    #return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":968,"fileType":"python","requestStartTime":1518004890278}}
{"body": {"column":20,"line":45,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    curr = list.val\n    print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            list = list.next.next\n     while list:\n        print \"values \" list.val\n        list = list.\n    \n    #return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":992,"fileType":"python","requestStartTime":1518004897452}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import Counter\nraw_input()\nshoeList = map(int, raw_input().split())\ncustomers = input()\nmoney = 0\nfor i in range(customers):\n    shoeSize, price = raw_input().split()\n    if shoeSize in Counter(shoeList).keys():\n        money += price\n        shoeList.\n\n","offset":341,"fileType":"python","requestStartTime":1518004910058}}
{"body": {"column":17,"line":42,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\nclass LinkedListNode:\n    def __init__(self, node_value):\n        self.val = node_value\n        self.next = None\n\ndef _insert_node_into_singlylinkedlist(head, tail, val):\n    if head == None:\n        head = LinkedListNode(val)\n        tail = head\n    else:\n        node = LinkedListNode(val)\n        tail.next = node\n        tail = tail.next\n    return tail\n\n# Complete the function below.\n\n#For your reference:\n#LinkedListNode {\n#    int val\n#    LinkedListNode next\n#}\n\ndef  deleteOdd(list):\n    print \"list is:\", list\n    print \"type(list):\", type(list)\n    print \"dir(list):\", dir(list)\n    prev = None\n    #while curr:\n    #curr = list.val\n    #print \"Curr:\", curr\n    while list:\n        if list.val%2 == 0:\n            print \"{} is EVEN\".format(list.val)\n            list = list.next\n        else:\n            print \"{} is ODD\".format(list.val)\n            list. = list.next.next\n    while list:\n        print \"final values \", list.val\n        list = list.next\n    \n    #return list.val\n    \n    \n        \n    \n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_list = None\n_list_tail = None\n_list_size = 0\n_list_size = input()\n_list_i=0\nwhile _list_i < _list_size: \n    _list_item = int(raw_input());\n    if _list_i == 0:\n\t\t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n\t\t_list_tail = _list\n    else:\n\t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item)\n    _list_i += 1\n\nres = deleteOdd(_list);\nwhile (res != None):\n    f.write(str(res.val) + \"\\n\")\n    res = res.next;\n\nf.close()\n\n","offset":907,"fileType":"python","requestStartTime":1518005067876}}
{"body": {"column":16,"line":7,"wordToComplete":"","code":"\nt = int(raw_input().strip())\nfor a0 in xrange(t):\n    board = []\n    for board_i in xrange(8):\n        board_temp = map(str,raw_input().strip().split(' '))\n        board.append(board_temp)\n        while n>\n\n","offset":207,"fileType":"python","requestStartTime":1518005545321}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"\nt = int(raw_input().strip())\nfor a0 in xrange(t):\n    board = []\n    for board_i in xrange(8):\n        board_temp = map(str,raw_input().strip().split(' '))\n        board.append(board_temp)\n        while n<8:\n            if \"k\" in board[n]:\n                b=board[n].\n\n","offset":269,"fileType":"python","requestStartTime":1518005778977}}
{"body": {"column":18,"line":14,"wordToComplete":"","code":"\nt = int(raw_input().strip())\nfor a0 in xrange(t):\n    board = []\n    for board_i in xrange(8):\n        board_temp = map(str,raw_input().strip().split(' '))\n        board.append(board_temp)\n        while n<8:\n            if \"k\" in board[n]:\n                b=board[n].index(\"k\")\n                break\n            n-=1\n        while p<8:\n            if board[1][p]==\"P\" and board[0][p]==\"#\":\n                L.\n                \n\n","offset":410,"fileType":"python","requestStartTime":1518006576355}}
{"body": {"column":39,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import OrderedDict\nnum_items = int(raw_input())\ndayli_list = OrderedDict()\nfor i in range(num_items):\n    item_name, space, quantity = raw_input().rpartition(' ')\n    dayli_list[item_name] = dayli_list.(item_name, 0) + int(quantity)\nfor item, quantity in d.items():\n    print(item, quantity)\n    \n    \n'''\nd[item] = d.get(item, 0) + int(quantity)\nfor item, quantity in d.items():\n    print(item, quantity)\n'''    \n\n","offset":291,"fileType":"python","requestStartTime":1518007175257}}
{"body": {"column":16,"line":15,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\ndef  oddNumbers(l, r):\n    counter = l\n    arr = []\n    if (l < r):\n        if l % 2 == 0:\n            pass\n        else:\n            arr.\n    else:\n        print 'out of numbers'\n\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_l = int(raw_input());\n\n\n_r = int(raw_input());\n\nres = oddNumbers(_l, _r)\nfor res_cur in res:\n    f.write( str(res_cur) + \"\\n\" )\n\nf.close()\n\n","offset":209,"fileType":"python","requestStartTime":1518007936260}}
{"body": {"column":28,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\n\n\nN = int(raw_input().strip().)\n\n","offset":114,"fileType":"python","requestStartTime":1518008763788}}
{"body": {"column":29,"line":26,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    some_pieces = []\n    pawns = []\n    for ri in xrange(8):\n        for ci in xrange(8):\n            piece = board[7 - ri][0][ci]\n            if piece == \"#\":\n                pass\n            elif piece == \"P\":\n                if ri == 6:\n                    pawns.append([7, ci])\n                else:\n                    some_pieces.append([ri, ci])\n            elif piece == \"k\":\n                k = [ri, ci]\n            elif piece in [\"K\", \"Q\", \"N\", \"B\", \"R\", \"q\", \"n\", \"b\", \"r\", \"p\"]:\n                some_pieces.append([ri, ci]) \n    ways_arr = []\n    for z in xrange(len(pawns)):\n        P = pawns[0]\n        pieces = some_pieces.\n        ways = 0#; print P, k, pieces  \n        ok = True\n        if P[1] == k[1]: #same col\n            for pp in pieces:\n                if pp[1] == P[1]: #same col\n                    if pp[0] > k[0]:\n                        ok = False\n                        break\n            if ok == True:\n                ways += 2 #queen or rook move\n        elif P[1] > k[1]: #king is to the left of pawn\n            if k in [[P[0]-2, P[1]-1], [P[0]-1, P[1]-2]]:\n                ways += 1 #knight move\n            elif P[0] == k[0]: #same row\n                ok2 = True\n                for pp2 in pieces:\n                    if pp2[0] == P[0]: #same row\n                        if pp2[1] > k[1] and pp2[1] < P[1]:\n                            ok = False\n                            break\n                if ok == True:\n                    ways += 2 #queen or rook move\n            elif k[0] - P[0] == k[1] - P[1]:  #same diagonal\n                middle = [[P[0]-i, P[1]-i] for i in xrange(1, P[0] - k[0])]\n                if len(middle) == 0:\n                    ways += 2\n                else:\n                    ok3 = True#; print middle, pieces\n                    for pp3 in pieces:\n                        if pp3 in middle:\n                            ok3 = False\n                            break\n                    if ok3 == True:\n                        ways += 2 #queen or bishop move               \n        else:  #king is to the right of pawn\n            if k in [[P[0]-2, P[1]+1], [P[0]-1, P[1]+2]]:\n                ways += 1 #knight move\n            elif P[0] == k[0]: #same row\n                ok2 = True\n                for pp2 in pieces:\n                    if pp2[0] == P[0]: #same row\n                        if pp2[1] > k[1] and pp2[1] < P[1]:\n                            ok = False\n                            break\n                if ok == True:\n                    ways += 2 #queen or rook move\n            elif k[0] - P[0] == -1 * (k[1] - P[1]):  #same diagonal\n                middle = [[P[0]-i, P[1]+i] for i in xrange(1, P[0] - k[0])]\n                if len(middle) == 0:\n                    ways += 2\n                else:\n                    ok3 = True\n                    for pp3 in pieces:\n                        if pp3 in middle:\n                            ok3 = False\n                            break\n                    if ok3 == True:\n                        ways += 2 #queen or bishop move   \n        ways_arr.append(ways)                    \n    return max(ways_arr)\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":725,"fileType":"python","requestStartTime":1518009123759}}
{"body": {"column":20,"line":75,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    j=0\n    while (j<8):\n        if(board[1][0][j]=='P'):\n            position_pawn=j\n            break\n        j+=1\n    if(((position_pawn-2>=0) and (board[1][0][position_pawn-2]=='k')) or ((position_pawn+2<8) and (board[1][0][position_pawn+2]=='k')) or ((position_pawn-1>=0) and (board[2][0][position_pawn-1]=='k')) or ((position_pawn+1<8) and (board[2][0][position_pawn+1]=='k'))):\n        return (1)\n    i=1\n    b1=0\n    b2=0\n    while(i<8):\n        if((b1!=1) and (position_pawn-i>=0)):\n            if(board[i][0][position_pawn-i]=='k'):\n                return(2)\n            elif(board[i][0][position_pawn-i]!='#'):\n                b1=1\n        if((b2!=1) and (position_pawn+i<8)):\n            if(board[i][0][position_pawn+i]=='k'):\n                return(2)\n            elif(board[i][0][position_pawn+i]!='#'):\n                b2=1\n        i+=1\n    j=position_pawn\n    i=1\n    while(i<8):\n        if(board[i][0][j]=='k'):\n            return(2)\n        elif(board[i][0][j]!='#'):\n            break\n        i+=1\n    i=0\n    j=position_pawn+1\n    while(j<8):\n        if(board[i][0][j]=='k'):\n            return(2)\n        elif(board[i][0][j]!='#'):\n            break\n        j+=1\n    j=position_pawn-1\n    while(j>=0):\n        if(board[i][0][j]=='k'):\n            return(2)\n        elif(board[i][0][j]!='#'):\n            break\n        j-=1\n    j=position_pawn\n    if(board[0][0][j+1]=='B' or board[0][0][j-1]=='B'):\n        i=2\n        b1=0\n        b2=0\n        while(i<8):\n            if((b1!=1) and (position_pawn-i+1>=0)):\n                if(board[i][0][position_pawn-i+1]=='k'):\n                    return(4)\n                elif(board[i][0][position_pawn-i+1]!='#'):\n                    b1=1\n            if((b2!=1) and (position_pawn+i-1<8)):\n                if(board[i][0][position_pawn+i-1]=='k'):\n                    return(4)\n                elif(board[i][0][position_pawn+i]!='#'):\n                    b2=1\n            i+=1\n    i=1\n    j=position_pawn+1\n    while(j<8):\n        if(board[i][0][j]=='R'):\n            j=position_pawn-1\n            while(j>)\n       \n            \n    return (0)\n\n        \n   \n        \n    \n        \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":2154,"fileType":"python","requestStartTime":1518010010276}}
{"body": {"column":13,"line":26,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef findP(row):\n    ptr = 0\n    while ptr<len(row):\n        if row[ptr]=='P':\n            yield ptr\n        ptr+=1\n\ndef findk in (board):\n    for y,row in enumerate(board):\n        for x,cell in enumerate(row):\n            if cell=='k':\n                return x,y\n    return None\n        \ndef waysToGiveACheck(board):\n    # Complete this function\n    king = findk(board)\n    ret = 0\n    for x in findP(board[1]):\n        offense_posistion = (x,0)\n        #knight\n        if x>\n        \n    return ret\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":505,"fileType":"python","requestStartTime":1518010233303}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    white_pieces = ['K', 'Q', 'N', 'B', 'R', 'P']\n    black_pieces = ['k', 'q', 'n', 'b', 'r', 'p']\n    seventh_row = board.\n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":182,"fileType":"python","requestStartTime":1518011146853}}
{"body": {"column":23,"line":35,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef findP(row):\n    ptr = 0\n    while ptr<len(row):\n        if row[ptr]=='P':\n            yield ptr\n        ptr+=1\n\ndef findk(board):\n    for y,row in enumerate(board):\n        for x,cell in enumerate(row):\n            if cell=='k':\n                return x,y\n    return None\n        \ndef waysToGiveACheck(board):\n    # Complete this function\n    king = findk(board)\n    ret = 0\n    for x in findP(board[1]):\n        if board[0][x] == '#':\n            offense_posistion = (x,0)\n            #knight\n            if king == (x-2, 1):\n                ret += 1\n            if king == (x+2, 1):\n                ret += 1\n            #rook\n            if king[1] == 0:\n                if king[0] < x:\n                    rw = board[0][:x]\n                    rw.\n                \n                else:\n                    xx = x\n                    yy = 0\n                    while xx<len(board[0])-1:\n                        xx+=1\n                        if king==(xx,yy):\n                            ret += 2\n                            break\n                        if board[yy][xx] != '#':\n                            break\n            if king[0] == x:\n                xx = x\n                yy = 0\n                while yy<len(board)-1:\n                    yy+=1\n                    if king==(xx,yy):\n                        ret += 2\n                        break\n                    if board[yy][xx] != '#':\n                        break                                           \n            #alfiere\n            if king[0] < x:\n                xx = x\n                yy = 0\n                while xx>0:\n                    xx-=1\n                    yy+=1\n                    if king==(xx,yy):\n                        ret += 2 \n                        break\n                    if board[yy][xx] != '#':\n                        break\n            else:\n                xx = x\n                yy = 0\n                while xx<len(board[yy])-1:\n                    xx+=1\n                    yy+=1\n                    if king==(xx,yy):\n                        ret += 2 \n                        break\n                    if board[yy][xx] != '#':\n                        break           \n    return ret\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":783,"fileType":"python","requestStartTime":1518011832537}}
{"body": {"column":15,"line":10,"wordToComplete":"rem","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    for i in A:\n        #j = i+1\n        B = rem\n        for j in A:\n            s = s + i * j\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":174,"fileType":"python","requestStartTime":1518012283039}}
{"body": {"column":14,"line":10,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    for i in A:\n        #j = i+1\n        B = re\n        for j in A:\n            s = s + i * j\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":173,"fileType":"python","requestStartTime":1518012284860}}
{"body": {"column":14,"line":10,"wordToComplete":"st","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    for i in A:\n        #j = i+1\n        B = st\n        for j in A:\n            s = s + i * j\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":173,"fileType":"python","requestStartTime":1518012289139}}
{"body": {"column":13,"line":10,"wordToComplete":"c","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    for i in A:\n        #j = i+1\n        B = c\n        for j in A:\n            s = s + i * j\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":172,"fileType":"python","requestStartTime":1518012298179}}
{"body": {"column":15,"line":11,"wordToComplete":"del","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    for i in A:\n        #j = i+1\n        B = A\n        B = del\n        for j in A:\n            s = s + i * j\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":188,"fileType":"python","requestStartTime":1518012362307}}
{"body": {"column":14,"line":11,"wordToComplete":"de","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    for i in A:\n        #j = i+1\n        B = A\n        B = de\n        for j in A:\n            s = s + i * j\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":187,"fileType":"python","requestStartTime":1518012365095}}
{"body": {"column":23,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfor i in range(4):\n    text = raw_input().\n\n","offset":115,"fileType":"python","requestStartTime":1518012401987}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nif __name__=='__main__':\n    \n    lines = sys.\n\n","offset":130,"fileType":"python","requestStartTime":1518012422729}}
{"body": {"column":22,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.\n\n","offset":136,"fileType":"python","requestStartTime":1518012424206}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfirst = input().\n\nfor n in line:\n    print n\n\n\n\n\n\n","offset":89,"fileType":"python","requestStartTime":1518012521999}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfirst = input().strip('.'\n\nfor n in line:\n    print n\n\n\n\n\n\n","offset":97,"fileType":"python","requestStartTime":1518012527763}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndocs = [\"I'd like an apple.\",\n       \"An apple a day keeps the doctor away.\",\n       \"Never compare an apple to an orange.\",\n       \"I prefer scikit-learn to orange.\"]\n\ndef term_freq(doc):\n    words = doc.\n\n","offset":278,"fileType":"python","requestStartTime":1518012576350}}
{"body": {"column":16,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nimport collections\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    mydicts=[]\n    for line in lines:\n        \n        line=line[2:]\n        mydicts.\n        \n\n","offset":252,"fileType":"python","requestStartTime":1518012634451}}
{"body": {"column":18,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfirst = input().strip('.'\n\nfor n in line:\n    label,doc = n.\n\n\n\n\n\n","offset":133,"fileType":"python","requestStartTime":1518012643918}}
{"body": {"column":26,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfirst = input().strip('.'\n\nfor n in line:\n    label,doc = n.strip['.']\n\n\n\n\n\n","offset":141,"fileType":"python","requestStartTime":1518012650744}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    mydicts=[]\n    for line in lines:\n        \n        line=line[2:].\n        mydicts.append(Counter(line))\n        \n    print mydicts\n        \n\n","offset":249,"fileType":"python","requestStartTime":1518012681293}}
{"body": {"column":30,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    mydicts=[]\n    for line in lines:\n        \n        line=line[2:].strip().\n        mydicts.append(Counter(line))\n        \n    print mydicts\n        \n\n","offset":257,"fileType":"python","requestStartTime":1518012683479}}
{"body": {"column":33,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().\n    for line in sys.stdin:\n        print next_string(line.strip())\n        \n\nfor n in line:\n    label,doc = n.strip('.')\n    print label, doc\n                      \n\n\n\n\n\n","offset":148,"fileType":"python","requestStartTime":1518012714423}}
{"body": {"column":40,"line":5,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().str('.')\n    for line in sys.stdin:\n        print next_string(line.strip())\n        \n\nfor n in line:\n    label,doc = n.strip('.')\n    print label, doc\n                      \n\n\n\n\n\n","offset":155,"fileType":"python","requestStartTime":1518012718946}}
{"body": {"column":22,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    mydicts=[]\n    for line in lines:\n        \n        line=line[2:]..strip().split()\n        mydicts.append(Counter(line))\n        \n    print mydicts\n        \n\n","offset":249,"fileType":"python","requestStartTime":1518012721116}}
{"body": {"column":10,"line":14,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    B = A\n    for i in A:\n        del B[0]\n        print B\n        for j in B:\n            s = s + i * j\n        A.\n        print A\n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":241,"fileType":"python","requestStartTime":1518012724141}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    mydicts=[]\n    for line in lines:\n        \n        line=line[2:].replace('.').strip().split()\n        mydicts.append(Counter(line))\n        \n    print mydicts\n        \n\n","offset":259,"fileType":"python","requestStartTime":1518012731367}}
{"body": {"column":17,"line":6,"wordToComplete":"","code":"import numpy\n\n\ndef arrays(arr):\n    # complete this function\n    # use numpy.array \n    return numpy.\n\n\n\narr = raw_input().strip().split(' ')\nresult = arrays(arr)\nprint(result)\n","offset":102,"fileType":"python","requestStartTime":1518012770615}}
{"body": {"column":18,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\nimport random\n\ndef knight(ppos, kpos):\n    return random.\n\ndef queen(ppos, kpos):\n    pass\n\ndef bishop(ppos, kpos):\n    pass\n\ndef rook(ppos, kpos):\n    pass\n\ndef waysToGiveACheck(board, ppos, kpos):\n    # Complete this function\n    print ppos\n    print kpos\n    \n    return 0\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        ppos = []\n        kpos = []\n        for board_i in xrange(8):\n            board_temp = list(raw_input().strip())\n            if 'P' in board_temp:\n                ppos = [board_i,board_temp.index('P')]\n            if 'k' in board_temp:\n                kpos = [board_i,board_temp.index('k')]\n            board.append(board_temp)\n        result = waysToGiveACheck(board, ppos, kpos)\n        print result\n\n\n\n","offset":86,"fileType":"python","requestStartTime":1518012841017}}
{"body": {"column":30,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict={}\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].\n        \n\n","offset":405,"fileType":"python","requestStartTime":1518012867361}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict={}\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            if k in dfdict.\n        \n\n","offset":441,"fileType":"python","requestStartTime":1518012902561}}
{"body": {"column":13,"line":6,"wordToComplete":"","code":"\nstudents = []\n\nfor _ in range(int(raw_input())):\n    name = raw_input()\n    score = float(raw_input())\n    students.\n    \n\n\n","offset":118,"fileType":"python","requestStartTime":1518012979708}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    B = A\n    B.\n    for i in A:\n        print A\n        print B\n        for j in B:\n            print i , j\n            s = s + i * j\n        \n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":142,"fileType":"python","requestStartTime":1518013032484}}
{"body": {"column":6,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    B = A\n    B.\n    for i in A:\n        print A\n        print B\n        for j in B:\n            print i , j\n            s = s + i * j\n        \n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":142,"fileType":"python","requestStartTime":1518013051571}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().strip('.')\n    print first\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.\n        words = Counter(doc)\n        print words\n        \n                      \n\n\n\n\n\n","offset":293,"fileType":"python","requestStartTime":1518013091836}}
{"body": {"column":6,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef largestValue(A):\n    # Return the largest value of any of A's nonempty subarrays.\n    s = 0;\n    B = A\n    print type(B)\n    B.\n    for i in A:\n        print A\n        print B\n        for j in B:\n            print i , j\n            s = s + i * j\n        \n    return s\nif __name__ == \"__main__\":\n    n = int(raw_input().strip())\n    A = map(int, raw_input().strip().split(' '))\n    result = largestValue(A)\n    print result\n\n\n","offset":160,"fileType":"python","requestStartTime":1518013099866}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple.\",\n       \"An apple a day keeps the doctor away.\",\n       \"Never compare an apple to an orange.\",\n       \"I prefer scikit-learn to orange.\"]\n\ndef term_freq(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(term_freq(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.\n\n","offset":762,"fileType":"python","requestStartTime":1518013118653}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        \n        tfidfdicts.\n                \n        \n\n","offset":567,"fileType":"python","requestStartTime":1518013124143}}
{"body": {"column":24,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().strip('.')\n    print first\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        print words\n        print sum(words.)\n        \n                      \n\n\n\n\n\n","offset":374,"fileType":"python","requestStartTime":1518013144927}}
{"body": {"column":30,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in tfdicts[i].\n                \n        \n\n","offset":588,"fileType":"python","requestStartTime":1518013165341}}
{"body": {"column":25,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().strip('.')\n    print first\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        print words\n        for cnt in words.\n        print sum(words.values()**2)\n        \n                      \n\n\n\n\n\n","offset":375,"fileType":"python","requestStartTime":1518013175257}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().strip('.')\n    print first\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        print words\n        total = 0\n        for cnt in words.values():\n            print cnt\n            total += cnt**2\n        print m.total\n            \n        \n                      \n\n\n\n\n\n","offset":469,"fileType":"python","requestStartTime":1518013216196}}
{"body": {"column":23,"line":25,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in tfdicts[i].items():\n            tfidfdicts.\n        \n                \n        \n\n","offset":620,"fileType":"python","requestStartTime":1518013250898}}
{"body": {"column":31,"line":17,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    first = sys.stdin.readline().strip('.')\n    print first\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = cnt/,.           \n            \n        \n                      \n\n\n\n\n\n","offset":492,"fileType":"python","requestStartTime":1518013308324}}
{"body": {"column":26,"line":28,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple.\",\n       \"An apple a day keeps the doctor away.\",\n       \"Never compare an apple to an orange.\",\n       \"I prefer scikit-learn to orange.\"]\n\ndef term_freq(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(term_freq(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \nif __name__ == '__main__':\n    for i in range(4):\n        doc = raw_input().\n\n","offset":854,"fileType":"python","requestStartTime":1518013314828}}
{"body": {"column":43,"line":26,"wordToComplete":"1.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in tfdicts[i].items():\n            docdict[k]=tfdicts[i][k]*log(1.len(tfdicts))\n        \n                \n        \n\n","offset":661,"fileType":"python","requestStartTime":1518013383889}}
{"body": {"column":19,"line":27,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in tfdicts[i].items():\n            docdict[k]=tfdicts[i][k]*log(1.0*len(tfdicts)/dfdict[k])\n        tfidfdicts.\n        \n                \n        \n\n","offset":706,"fileType":"python","requestStartTime":1518013399952}}
{"body": {"column":42,"line":27,"wordToComplete":"Do a simple product of the vectors.\"\"\"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple\",\n       \"An apple a day keeps the doctor away\",\n       \"Never compare an apple to an orange\",\n       \"I prefer scikit-learn to orange\"]\n\ndef tf(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(tf(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \ndef doc_compare(doc1, doc2):\n    \"\"\"Do a simple product of the vectors.\"\"\"\n    \nif __name__ == '__main__':\n    \n\n","offset":831,"fileType":"python","requestStartTime":1518013540266}}
{"body": {"column":30,"line":28,"wordToComplete":"I might need to normalize.\"\"\"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple\",\n       \"An apple a day keeps the doctor away\",\n       \"Never compare an apple to an orange\",\n       \"I prefer scikit-learn to orange\"]\n\ndef tf(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(tf(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \ndef doc_compare(doc1, doc2):\n    \"\"\"Do a simple product of the vectors.\n    I might need to normalize.\"\"\"\n    \nif __name__ == '__main__':\n    \n\n","offset":862,"fileType":"python","requestStartTime":1518013545822}}
{"body": {"column":35,"line":28,"wordToComplete":"made by multiplying tf and idf.","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple\",\n       \"An apple a day keeps the doctor away\",\n       \"Never compare an apple to an orange\",\n       \"I prefer scikit-learn to orange\"]\n\ndef tf(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(tf(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \ndef doc_compare(doc1, doc2):\n    \"\"\"Do a simple dot product of the vectors\n    made by multiplying tf and idf.\n    (I might need to normalize later)\"\"\"\n    \n    \nif __name__ == '__main__':\n    \n\n","offset":870,"fileType":"python","requestStartTime":1518013568926}}
{"body": {"column":56,"line":30,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple\",\n       \"An apple a day keeps the doctor away\",\n       \"Never compare an apple to an orange\",\n       \"I prefer scikit-learn to orange\"]\n\ndef tf(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(tf(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \ndef doc_compare(doc1, doc2):\n    \"\"\"Do a simple dot product of the vectors\n    made by multiplying tf and idf\n    (I might need to normalize later)\"\"\"\n    vec1 = [value * idf(key) for key, value in tf(doc1).]\n    \nif __name__ == '__main__':\n    \n\n","offset":967,"fileType":"python","requestStartTime":1518013656113}}
{"body": {"column":63,"line":31,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple\",\n       \"An apple a day keeps the doctor away\",\n       \"Never compare an apple to an orange\",\n       \"I prefer scikit-learn to orange\"]\n\ndef tf(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(tf(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \ndef doc_compare(doc1, doc2):\n    \"\"\"Do a simple dot product of the vectors\n    made by multiplying tf and idf\n    (I might need to normalize later)\"\"\"\n    vec1 = [value * idf(key, docs) for key, value in tf(doc1).items()]\n    vec2 = [tf(doc2)[key] * idf(key, docs) for key in tf(doc1).]\n    \nif __name__ == '__main__':\n    \n\n","offset":1045,"fileType":"python","requestStartTime":1518013712019}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in dfdict.items():\n            try:\n                docdict[k]=tfdicts[i][k]*log(1.0*len(tfdicts)/dfdict[k])\n            except:\n                docdict[k]=0\n        tfidfdicts.append(docdict)\n    \n    print tfidfdicts[0].\n        \n                \n        \n\n","offset":817,"fileType":"python","requestStartTime":1518013770265}}
{"body": {"column":16,"line":3,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.\n\n","offset":99,"fileType":"python","requestStartTime":1518013835535}}
{"body": {"column":17,"line":4,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.\n\n","offset":123,"fileType":"python","requestStartTime":1518013845658}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"from __future__ import print_function\nfrom __future__ import print_function\nif __name__ == '__main__':\n    n = int(raw_input())\n    out=[]\n    for i in range(n):\n        out.\n\n\n","offset":175,"fileType":"python","requestStartTime":1518013877163}}
{"body": {"column":18,"line":7,"wordToComplete":"","code":"from __future__ import print_function\nfrom __future__ import print_function\nif __name__ == '__main__':\n    n = int(raw_input())\n    out=[]\n    for i in range(n):\n        out.append(i)\n        print(out.)\n\n\n","offset":203,"fileType":"python","requestStartTime":1518013894850}}
{"body": {"column":18,"line":38,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import Counter\nimport math\n\ndocs = [\"I'd like an apple\",\n       \"An apple a day keeps the doctor away\",\n       \"Never compare an apple to an orange\",\n       \"I prefer scikit-learn to orange\"]\n\ndef tf(doc):\n    \"\"\"Returns Counter object so that\n    term_freq(doc)[word] is the number of times word appears in doc\"\"\"\n    words = doc.split(' ')\n    return Counter(words)\n\ndef idf(word, docs):\n    \"\"\"Returns log (N / c), where N is the total number of docs,\n    and c is the number of docs where the word appears\"\"\"\n    N = len(docs)\n    c = sum(tf(doc)[word] != 0 for doc in docs)\n    if c == 0: return 0 #avoid division by 0\n    else:\n        return math.log(N / c)\n    \ndef doc_compare(doc1, doc2):\n    \"\"\"Do a simple dot product of the vectors\n    made by multiplying tf and idf\n    (I might need to normalize later)\"\"\"\n    vec1 = [value * idf(key, docs) for key, value in tf(doc1).items()]\n    vec2 = [tf(doc2)[key] * idf(key, docs) for key in tf(doc1).keys()]\n    return sum(vec1[i] * vec2[i] for i in range(len(vec1)))\n    \nif __name__ == '__main__':\n    max_score = 0\n    for i in range(1, 4):\n        score = doc_compare(docs[0], docs[i])\n        if score >\n\n","offset":1253,"fileType":"python","requestStartTime":1518013930562}}
{"body": {"column":16,"line":8,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    unit = 'MHz'\n    done = False\n    for word in words:\n        if word.\n\n","offset":207,"fileType":"python","requestStartTime":1518013945735}}
{"body": {"column":19,"line":7,"wordToComplete":"","code":"from __future__ import print_function\nfrom __future__ import print_function\nif __name__ == '__main__':\n    n = int(raw_input())\n    out=[]\n    for i in range(1,n+1):\n        out.append(i)\n    print(str(out).)\n\n\n","offset":208,"fileType":"python","requestStartTime":1518014045536}}
{"body": {"column":50,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in dfdict.items():\n            try:\n                docdict[k]=tfdicts[i][k]*log(1.0*len(tfdicts)/dfdict[k])\n            except:\n                docdict[k]=0\n        tfidfdicts.append(docdict)\n    \n    maxsim=0\n    for i in xrange(1,len(tfidfdicts)):\n        if  sum([x*y for x,y in zip(tfidfdicts[0].,tfidfdicts[i])])/\n        (sum([x**2 for x in tfidfdicts[0]]*sum([x*y for x,y in zip(tfidfdicts[0],tfidfdicts[i])]))\n        \n                \n        \n\n","offset":896,"fileType":"python","requestStartTime":1518014051872}}
{"body": {"column":73,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in dfdict.items():\n            try:\n                docdict[k]=tfdicts[i][k]*log(1.0*len(tfdicts)/dfdict[k])\n            except:\n                docdict[k]=0\n        tfidfdicts.append(docdict)\n    \n    maxsim=0\n    for i in xrange(1,len(tfidfdicts)):\n        if  sum([x*y for x,y in zip(tfidfdicts[0].values(),tfidfdicts[i].)])/\n        (sum([x**2 for x in tfidfdicts[0]]*sum([x*y for x,y in zip(tfidfdicts[0],tfidfdicts[i])]))\n        \n                \n        \n\n","offset":919,"fileType":"python","requestStartTime":1518014054704}}
{"body": {"column":42,"line":35,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in dfdict.items():\n            try:\n                docdict[k]=tfdicts[i][k]*log(1.0*len(tfdicts)/dfdict[k])\n            except:\n                docdict[k]=0\n        tfidfdicts.append(docdict)\n    \n    maxsim=0\n    for i in xrange(1,len(tfidfdicts)):\n        if  sum([x*y for x,y in zip(tfidfdicts[0].values(),tfidfdicts[i].values())])/\n        (sum([x**2 for x in tfidfdicts[0].]*sum([x*y for x,y in zip(tfidfdicts[0],tfidfdicts[i])]))\n        \n                \n        \n\n","offset":974,"fileType":"python","requestStartTime":1518014058916}}
{"body": {"column":86,"line":35,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfrom collections import Counter,defaultdict\nfrom math import log\n\nif __name__=='__main__':\n    \n    lines = sys.stdin.readlines()\n    tfdicts=[]\n\n    for line in lines:\n        \n        line=line[2:].replace('.','').strip().split()\n        tfdicts.append(Counter(line))\n    \n    dfdict=defaultdict(int)\n    for i in xrange(0,len(tfdicts)):\n        for k,v in tfdicts[i].items():\n            dfdict[k]+=1\n            \n    tfidfdicts=[]\n    \n    for i in xrange(0,len(tfdicts)):\n        docdict={}\n        for k,v in dfdict.items():\n            try:\n                docdict[k]=tfdicts[i][k]*log(1.0*len(tfdicts)/dfdict[k])\n            except:\n                docdict[k]=0\n        tfidfdicts.append(docdict)\n    \n    maxsim=0\n    for i in xrange(1,len(tfidfdicts)):\n        if  sum([x*y for x,y in zip(tfidfdicts[0].values(),tfidfdicts[i].values())])/\n        (sum([x**2 for x in tfidfdicts[0].values()]*sum([x*y for x,y in tfidfdicts[i].]))\n        \n                \n        \n\n","offset":1018,"fileType":"python","requestStartTime":1518014067055}}
{"body": {"column":23,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    for key in lexicon.\n        \n                      \n\n\n\n\n\n","offset":551,"fileType":"python","requestStartTime":1518014114344}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    print max(lexicon.)        \n        \n                      \n\n\n\n\n\n","offset":550,"fileType":"python","requestStartTime":1518014134168}}
{"body": {"column":18,"line":6,"wordToComplete":"","code":"\ndef print_formatted(number):\n    # your code goes here\n    width=len(bin(number)[2:])    \n    for idx in range(1, number+1):\n        dec=\"%d\" %idx\n        print dec.\nif __name__ == '__main__':\n    n = int(raw_input())\n    print_formatted(n)\n","offset":167,"fileType":"python","requestStartTime":1518014147680}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef checkKing(board, x, y):\n    tot = 0\n    if x-1 >\n    return tot\n\ndef checkPawn(board, x, y):\n    tot = 0\n    if x == 4:\n        if board[6][y] == \"P\" and board[5][y] == \"#\":\n            tot += 1   \n    x += 1\n    if board[x][y] == \"P\":\n        tot += 1\n    if y - 1 >= 0:\n        if board[x][y-1] == \"P\":\n            tot += 1\n    if y + 1 < 8:\n        if board[x][y+1] == \"P\":\n            tot += 1\n    \n    return tot\n\ndef checkKnight(board, x, y):\n    #Number of Knights that check\n    tot = 0\n    \n    if x - 2 >= 0:\n        if y - 1 >= 0:\n            if board[x-2][y-1] == \"N\":\n                tot += 1\n        if y + 1 < 8:\n            if board[x-2][y+1] == \"N\":\n                tot += 1\n    if x - 1 >= 0:\n        if y - 2 >= 0:\n            if board[x-1][y-2] == \"N\":\n                tot += 1\n        if y + 2 < 8:\n            if board[x-1][y+2] == \"N\":\n                tot += 1\n    if x + 1 < 8:\n        if y - 2 >= 0:\n            if board[x+1][y-2] == \"N\":\n                tot += 1\n        if y + 2 < 8:\n            if board[x+1][y+2] == \"N\":\n                tot += 1\n    if x + 2 < 8:\n        if y - 1 >= 0:\n            if board[x+2][y-1] == \"N\":\n                tot += 1\n        if y + 1 < 8:\n            if board[x+2][y+1] == \"N\":\n                tot += 1\n    return tot\n\ndef checkBish(board, x, y):\n    #Number of Bishops that check\n    tot = 0\n    tx = x\n    ty = y\n    \n    x -= 1\n    y -= 1\n    while x >= 0:\n        if y >= 0:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y -= 1\n        else:\n            break\n    x = tx - 1\n    y = ty + 1\n    while x >= 0:\n        if y < 8:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y += 1\n        else:\n            break\n    x = tx + 1\n    y = ty - 1\n    while x < 8:\n        if y >= 0:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y -= 1\n        else:\n            break \n    x = tx + 1\n    y = ty + 1\n    while x < 8:\n        if y < 8:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y += 1\n        else:\n            break \n    \n    return tot\n\ndef checkRook(board, x, y):\n    #Number of Rooks that check\n    tot = 0\n    tx = x\n    ty = y\n    x -= 1\n    while x >= 0:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x -= 1\n    x = tx + 1\n    while x < 8:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x += 1\n    x = tx\n    \n    y -= 1\n    while y >= 0:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y -= 1\n    y = ty + 1\n    while y < 8:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y += 1\n    \n    return tot\n\ndef checkQueen(board, x, y):\n    #Number of Queens that check\n    tot = 0\n    tx = x\n    ty = y\n    x -= 1\n    while x >= 0:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x -= 1\n    x = tx + 1\n    while x < 8:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x += 1\n    x = tx\n    \n    y -= 1\n    while y >= 0:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y -= 1\n    y = ty + 1\n    while y < 8:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y += 1\n    \n    x = tx - 1\n    y = ty - 1\n    while x >= 0:\n        if y >= 0:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y -= 1\n        else:\n            break\n    x = tx - 1\n    y = ty + 1\n    while x >= 0:\n        if y < 8:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y += 1\n        else:\n            break\n    x = tx + 1\n    y = ty - 1\n    while x < 8:\n        if y >= 0:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y -= 1\n        else:\n            break \n    x = tx + 1\n    y = ty + 1\n    while x < 8:\n        if y < 8:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y += 1\n        else:\n            break\n    \n    return tot\n\ndef findKing(board):\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == \"k\":\n                return [i,j]\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    tot = 0\n    pr = None\n    for x in xrange(8):\n        if board[1][x] == \"P\":\n            if board[0][x] == \"#\":\n                pr = x\n                board[0][x] == \"P\"\n                board[1][x] == \"#\"\n    \n    kx, ky = findKing(board)\n    \n    board[0][pr] = \"N\"\n    tot += checkKnight(board, kx, ky)\n    \n    board[0][pr] = \"Q\"\n    tot += checkQueen(board, kx, ky)\n    \n    board[0][pr] = \"R\"\n    tot += checkRook(board, kx, ky)\n    \n    board[0][pr] = \"B\"\n    tot += checkBish(board, kx, ky)\n    \n    return tot\n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = raw_input().strip()\n            board.append(list(board_temp))\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":81,"fileType":"python","requestStartTime":1518014153449}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef checkKing(board, x, y):\n    tot = 0\n    if x-1 >= 0:\n        if board[x-1][y] == \"K\":\n            tot += 1\n        if y - 1 >\n    if x+1 < 8:\n    return tot\n\ndef checkPawn(board, x, y):\n    tot = 0\n    if x == 4:\n        if board[6][y] == \"P\" and board[5][y] == \"#\":\n            tot += 1   \n    x += 1\n    if board[x][y] == \"P\":\n        tot += 1\n    if y - 1 >= 0:\n        if board[x][y-1] == \"P\":\n            tot += 1\n    if y + 1 < 8:\n        if board[x][y+1] == \"P\":\n            tot += 1\n    \n    return tot\n\ndef checkKnight(board, x, y):\n    #Number of Knights that check\n    tot = 0\n    \n    if x - 2 >= 0:\n        if y - 1 >= 0:\n            if board[x-2][y-1] == \"N\":\n                tot += 1\n        if y + 1 < 8:\n            if board[x-2][y+1] == \"N\":\n                tot += 1\n    if x - 1 >= 0:\n        if y - 2 >= 0:\n            if board[x-1][y-2] == \"N\":\n                tot += 1\n        if y + 2 < 8:\n            if board[x-1][y+2] == \"N\":\n                tot += 1\n    if x + 1 < 8:\n        if y - 2 >= 0:\n            if board[x+1][y-2] == \"N\":\n                tot += 1\n        if y + 2 < 8:\n            if board[x+1][y+2] == \"N\":\n                tot += 1\n    if x + 2 < 8:\n        if y - 1 >= 0:\n            if board[x+2][y-1] == \"N\":\n                tot += 1\n        if y + 1 < 8:\n            if board[x+2][y+1] == \"N\":\n                tot += 1\n    return tot\n\ndef checkBish(board, x, y):\n    #Number of Bishops that check\n    tot = 0\n    tx = x\n    ty = y\n    \n    x -= 1\n    y -= 1\n    while x >= 0:\n        if y >= 0:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y -= 1\n        else:\n            break\n    x = tx - 1\n    y = ty + 1\n    while x >= 0:\n        if y < 8:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y += 1\n        else:\n            break\n    x = tx + 1\n    y = ty - 1\n    while x < 8:\n        if y >= 0:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y -= 1\n        else:\n            break \n    x = tx + 1\n    y = ty + 1\n    while x < 8:\n        if y < 8:\n            if board[x][y] == \"B\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y += 1\n        else:\n            break \n    \n    return tot\n\ndef checkRook(board, x, y):\n    #Number of Rooks that check\n    tot = 0\n    tx = x\n    ty = y\n    x -= 1\n    while x >= 0:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x -= 1\n    x = tx + 1\n    while x < 8:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x += 1\n    x = tx\n    \n    y -= 1\n    while y >= 0:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y -= 1\n    y = ty + 1\n    while y < 8:\n        if board[x][y] == \"R\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y += 1\n    \n    return tot\n\ndef checkQueen(board, x, y):\n    #Number of Queens that check\n    tot = 0\n    tx = x\n    ty = y\n    x -= 1\n    while x >= 0:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x -= 1\n    x = tx + 1\n    while x < 8:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        x += 1\n    x = tx\n    \n    y -= 1\n    while y >= 0:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y -= 1\n    y = ty + 1\n    while y < 8:\n        if board[x][y] == \"Q\":\n            tot += 1\n        elif board[x][y] != \"#\":\n            break\n        y += 1\n    \n    x = tx - 1\n    y = ty - 1\n    while x >= 0:\n        if y >= 0:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y -= 1\n        else:\n            break\n    x = tx - 1\n    y = ty + 1\n    while x >= 0:\n        if y < 8:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x -= 1\n            y += 1\n        else:\n            break\n    x = tx + 1\n    y = ty - 1\n    while x < 8:\n        if y >= 0:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y -= 1\n        else:\n            break \n    x = tx + 1\n    y = ty + 1\n    while x < 8:\n        if y < 8:\n            if board[x][y] == \"Q\":\n                tot += 1\n            elif board[x][y] != \"#\":\n                break\n            x += 1\n            y += 1\n        else:\n            break\n    \n    return tot\n\ndef findKing(board):\n    for i in xrange(8):\n        for j in xrange(8):\n            if board[i][j] == \"k\":\n                return [i,j]\n\ndef waysToGiveACheck(board):\n    # Complete this function\n    tot = 0\n    pr = None\n    for x in xrange(8):\n        if board[1][x] == \"P\":\n            if board[0][x] == \"#\":\n                pr = x\n                board[0][x] == \"P\"\n                board[1][x] == \"#\"\n    \n    kx, ky = findKing(board)\n    \n    board[0][pr] = \"N\"\n    tot += checkKnight(board, kx, ky)\n    \n    board[0][pr] = \"Q\"\n    tot += checkQueen(board, kx, ky)\n    \n    board[0][pr] = \"R\"\n    tot += checkRook(board, kx, ky)\n    \n    board[0][pr] = \"B\"\n    tot += checkBish(board, kx, ky)\n    \n    return tot\n    \n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = raw_input().strip()\n            board.append(list(board_temp))\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":158,"fileType":"python","requestStartTime":1518014229752}}
{"body": {"column":39,"line":32,"wordToComplete":"I don't have that book.\"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# This is a comment. Text formatted with /.../ is ignored when the code runs.\n # The next line of code that the computer will evaluate starts with the word \"def\"\n # A def is a user-defined command that you'll learn how to create in the future\n # The HackerRank system uses def as its basic building block to give you feedback.\n # For now, you're just filling in the details.\n # Type your code where instructed below.\n\n\ndef books_collections(book):\n    #Start your code below (tip: Make sure to indent your code)\n    \n        \n    #if the input string “book” equals “calculus” return “I have my Calculus book.” */\n    if book == \"Calculus\":\n        return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “history” return “I have my History book.” */\n    if book == \"History\":\n        return 'I have my %s book.' % book\n\n    #else if the input string “book” equals “circuits” return \"I have my Circuits book.\" */\n    if book == \"Circuits\":\n        return 'I have my %s book.' % book\n    \n    #for everything else return \" I don't have that book.\" */\n    else:\n        return \"I don't have that book.\"\n\n\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    try:\n        book = str(raw_input())\n    except:\n        book = None\n\n    res = books_collections(book);\n    f.write(res + \"\\n\")\n\n    f.close()\n","offset":1161,"fileType":"python","requestStartTime":1518014256299}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:]\n            if suffix. == ''\n\n","offset":392,"fileType":"python","requestStartTime":1518014311114}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].\n            if suffix.lower() == 'mhz' or \n\n","offset":370,"fileType":"python","requestStartTime":1518014324618}}
{"body": {"column":60,"line":13,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            if (suffix == 'mhz' or suffix = 'ghz') and nums.\n\n","offset":438,"fileType":"python","requestStartTime":1518014348750}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            if (suffix == 'mhz' or suffix = 'ghz') and nums.isdecimal():\n                sys.\n\n","offset":471,"fileType":"python","requestStartTime":1518014416231}}
{"body": {"column":28,"line":14,"wordToComplete":"w","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            if (suffix == 'mhz' or suffix = 'ghz') and nums.isdecimal():\n                sys.stdout.w()\n\n","offset":479,"fileType":"python","requestStartTime":1518014437300}}
{"body": {"column":26,"line":3,"wordToComplete":"","code":"\ndef print_formatted(number):\n    # your code goes here\n    for i in range number:\nif __name__ == '__main__':\n    n = int(raw_input())\n    print_formatted(n)\n","offset":83,"fileType":"python","requestStartTime":1518014451993}}
{"body": {"column":13,"line":8,"wordToComplete":"max","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    max_ = max(ar)\n    print max\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":122,"fileType":"python","requestStartTime":1518014487742}}
{"body": {"column":16,"line":9,"wordToComplete":"xra","code":"\n#!/bin/python\n\nimport sys\n\ndef birthdayCakeCandles(n, ar):\n    # Complete this function\n    max_ = max(ar)\n    print max_\n    for i in xra\n\nn = int(raw_input().strip())\nar = map(int, raw_input().strip().split(' '))\nresult = birthdayCakeCandles(n, ar)\nprint(result)\n\n\n","offset":140,"fileType":"python","requestStartTime":1518014496419}}
{"body": {"column":20,"line":7,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        word = word.\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            if (suffix == 'mhz' or suffix == 'ghz') and nums.isdecimal():\n                sys.stdout.write(word + '\\n')\n\n","offset":205,"fileType":"python","requestStartTime":1518014526798}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    \n    for key in lexicon.keys():\n        for ksub in key.\n       \n        \n                      \n\n\n\n\n\n","offset":588,"fileType":"python","requestStartTime":1518014734269}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\ndef is_leap(year):\n    leap = False\n    if (year % 4) == 0>:\n    \n    print()\n    print((year % 100) == 0)\n    print((year % 400) == 0)\n    \n    return leap\nyear = int(raw_input())\nprint is_leap(year)\n","offset":62,"fileType":"python","requestStartTime":1518014829648}}
{"body": {"column":21,"line":24,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    \n    allwords = []\n    for key in lexicon.values():\n        for ksub in key.keys():\n            allwords.\n            tdoc[ksub]= Counter ksub\n       \n        \n                      \n\n\n\n\n\n","offset":637,"fileType":"python","requestStartTime":1518014845204}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":113,"fileType":"python","requestStartTime":1518014900032}}
{"body": {"column":14,"line":8,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":113,"fileType":"python","requestStartTime":1518014909502}}
{"body": {"column":16,"line":8,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.re(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":115,"fileType":"python","requestStartTime":1518014910976}}
{"body": {"column":16,"line":8,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.re(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":115,"fileType":"python","requestStartTime":1518014911913}}
{"body": {"column":16,"line":8,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.re(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":115,"fileType":"python","requestStartTime":1518014912970}}
{"body": {"column":16,"line":8,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.re(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":115,"fileType":"python","requestStartTime":1518014914063}}
{"body": {"column":16,"line":8,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.re(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":115,"fileType":"python","requestStartTime":1518014914565}}
{"body": {"column":16,"line":8,"wordToComplete":"re","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.re(\"AM\", \"\")\n        hours = \n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":115,"fileType":"python","requestStartTime":1518014914822}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef timeConversion(s):\n    # Complete this function\n    if \"AM\" in s:\n        s = s.replace(\"AM\", \"\")\n        hours = s.\n    else:\n        return s\n\ns = raw_input().strip()\nresult = timeConversion(s)\nprint(result)\n\n\n","offset":149,"fileType":"python","requestStartTime":1518014923116}}
{"body": {"column":29,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        word = word.strip('\"')\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            sys.stdout.write(nums + ':' + suffix + '\\n')\n            validsuffix = (suffix == 'mhz' or suffix == 'ghz')\n            validnums = nums..isdigit()\n            if validsuffix and validnums:\n                sys.stdout.write(word + '\\n')\n\n","offset":558,"fileType":"python","requestStartTime":1518014990966}}
{"body": {"column":29,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        word = word.strip('\"')\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            sys.stdout.write(nums + ':' + suffix + '\\n')\n            validsuffix = (suffix == 'mhz' or suffix == 'ghz')\n            validnums = nums.nums..isdigit()\n            if validsuffix and validnums:\n                sys.stdout.write(word + '\\n')\n\n","offset":558,"fileType":"python","requestStartTime":1518014994706}}
{"body": {"column":37,"line":16,"wordToComplete":"nums..isdigit()","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        word = word.strip('\"')\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            sys.stdout.write(nums + ':' + suffix + '\\n')\n            validsuffix = (suffix == 'mhz' or suffix == 'ghz')\n            validnums = nums.count('.nums..isdigit()\n            if validsuffix and validnums:\n                sys.stdout.write(word + '\\n')\n\n","offset":566,"fileType":"python","requestStartTime":1518014996626}}
{"body": {"column":63,"line":16,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport sys\nfor line in sys.stdin:\n    words = line.split(' ')\n    check_next_word = False\n    for word in words:\n        word = word.strip('\"')\n        if word == '@':\n            check_next_word = True\n        elif check_next_word:\n            check_next_word = False\n            nums = word[:-3]\n            suffix = word[-3:].lower()\n            sys.stdout.write(nums + ':' + suffix + '\\n')\n            validsuffix = (suffix == 'mhz' or suffix == 'ghz')\n            validnums = nums.count('.') < 2 and nums.replace('.'.isdigit()\n            if validsuffix and validnums:\n                sys.stdout.write(word + '\\n')\n\n","offset":592,"fileType":"python","requestStartTime":1518015007178}}
{"body": {"column":35,"line":32,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    \n    allwords = []\n    for key in lexicon.values():\n        for ksub in key.keys():\n            allwords.append(ksub)\n            \n    allwords = Counter(allwords)  \n    \n    print lexicon\n    for key in lexicon.values():\n        for ksub in key.keys():\n            print ksub\n            key[ksub]=key[ksub]*(m.log(4)-log(1+allwords[ksub]))\n                      \n\n\n\n\n\n","offset":844,"fileType":"python","requestStartTime":1518015091281}}
{"body": {"column":44,"line":32,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    \n    allwords = []\n    for key in lexicon.values():\n        for ksub in key.keys():\n            allwords.append(ksub)\n            \n    allwords = Counter(allwords)  \n    \n    print lexicon\n    for key in lexicon.values():\n        for ksub in key.keys():\n            print ksub\n            key[ksub]=key[ksub]*(m.log(4)-m.log(1+allwords[ksub]))\n                      \n\n\n\n\n\n","offset":853,"fileType":"python","requestStartTime":1518015093397}}
{"body": {"column":11,"line":6,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    if(a0 >)\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":75,"fileType":"python","requestStartTime":1518015450604}}
{"body": {"column":1,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    \n    allwords = []\n    for key in lexicon.values():\n        for ksub in key.keys():\n            allwords.append(ksub)\n            \n    allwords = Counter(allwords)  \n    \n    for key in lexicon.values():\n        for ksub in key.keys():\n            key[ksub]=key[ksub]*(m.log(4)-m.log(1+allwords[ksub]))\n    \n    print lexicon\n.              \n\n\n\n\n\n","offset":863,"fileType":"python","requestStartTime":1518015541963}}
{"body": {"column":2,"line":34,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nimport math as m\n\nfrom collections import Counter\nif __name__ == '__main__':\n    import sys\n    lexicon = {}\n    lines = 0\n    for line in sys.stdin:\n        label,doc,null = line.split('.')\n        doc = doc.split()\n        words = Counter(doc)\n        total = 0\n        for cnt in words.values():\n            total += cnt**2\n        for key in words.keys():\n            words[key] = words[key]/m.sqrt(total)\n        lexicon[lines]=words\n        lines+=1\n    \n    allwords = []\n    for key in lexicon.values():\n        for ksub in key.keys():\n            allwords.append(ksub)\n            \n    allwords = Counter(allwords)  \n    \n    for key in lexicon.values():\n        for ksub in key.keys():\n            key[ksub]=key[ksub]*(m.log(4)-m.log(1+allwords[ksub]))\n    \n    print lexicon\n..              \n\n\n\n\n\n","offset":864,"fileType":"python","requestStartTime":1518015542136}}
{"body": {"column":8,"line":21,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a=0\n    b = 0\n    if(a0 > b0):\n        a +=1\n    if(a0 < b0):\n        b +=1\n    if(a1 < b1):\n        b +=1\n    if(a1 > b1):\n        a +=1\n    if(a2 > b2):\n        a +=1\n    if(a2 < b2):\n        b +=1\n    res = set()\n    res.\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":292,"fileType":"python","requestStartTime":1518015666848}}
{"body": {"column":8,"line":22,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef solve(a0, a1, a2, b0, b1, b2):\n    a=0\n    b = 0\n    if(a0 > b0):\n        a +=1\n    if(a0 < b0):\n        b +=1\n    if(a1 < b1):\n        b +=1\n    if(a1 > b1):\n        a +=1\n    if(a2 > b2):\n        a +=1\n    if(a2 < b2):\n        b +=1\n    res = set()\n    res.add(a)\n    res.\na0, a1, a2 = raw_input().strip().split(' ')\na0, a1, a2 = [int(a0), int(a1), int(a2)]\nb0, b1, b2 = raw_input().strip().split(' ')\nb0, b1, b2 = [int(b0), int(b1), int(b2)]\nresult = solve(a0, a1, a2, b0, b1, b2)\nprint \" \".join(map(str, result))\n\n\n\n\n","offset":307,"fileType":"python","requestStartTime":1518015671247}}
{"body": {"column":37,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\n\n# Complete the function below.\n\ndef Comparison_Num(num1, num2, numtest):\n    # Write your code here.\n    if(numtest > num1) and {numtest >}\n\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    num1 = int(raw_input())\n\n    num2 = int(raw_input())\n\n    numtest = int(raw_input())\n\n    res = Comparison_Num(num1, num2, numtest)\n\n    f.write(str(int(res)) + \"\\n\")\n\n    f.close()\n\n","offset":216,"fileType":"python","requestStartTime":1518015776949}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nclass ll:\n    def __init__(self,item):\n        self.item=item\n        next=None\n        \n    def add_address(self,adress):\n        self.next=adress\n        \n       \n        \n\n","offset":209,"fileType":"python","requestStartTime":1518015955223}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nA = raw_input(\"Enter first list:\")\nB = raw_input(\"Enter second list:\")\n\nA = A.\n\ndef get_product_of(A, B):\n    from itertools import product\n    return product([A, B])\n\nprint get_product_of(A, B)\n\n","offset":151,"fileType":"python","requestStartTime":1518015990164}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nA = raw_input(\"Enter first list:\")\nB = raw_input(\"Enter second list:\")\n\nA = A.split().\n\ndef get_product_of(A, B):\n    from itertools import product\n    return product([A, B])\n\nprint get_product_of(A, B)\n\n","offset":159,"fileType":"python","requestStartTime":1518015995437}}
{"body": {"column":7,"line":6,"wordToComplete":"","code":"\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nA = raw_input(\"Enter first list:\")\nB = raw_input(\"Enter second list:\")\n\nA = [i.A.split()\n\ndef get_product_of(A, B):\n    from itertools import product\n    return product([A, B])\n\nprint get_product_of(A, B)\n\n","offset":152,"fileType":"python","requestStartTime":1518016005941}}
{"body": {"column":32,"line":10,"wordToComplete":"find my White Pawn.print i  ","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    brd = board\n        \n    for i in brd: \n        for x in i: \n            #find my White Pawn.print i  \n    \n    print 'done'# Complete this function\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":155,"fileType":"python","requestStartTime":1518016124505}}
{"body": {"column":31,"line":16,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = ordered(numbers)\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList.\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":508,"fileType":"python","requestStartTime":1518016529580}}
{"body": {"column":24,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = numbers.\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList.pop()\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":329,"fileType":"python","requestStartTime":1518016577109}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = numbers.copy\n    orderList = Arrays.\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList.pop()\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":357,"fileType":"python","requestStartTime":1518016605818}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    arr = map(int, raw_input().split())\n    z=max(arr);\n    while max(arr)==z:\n        arr.\n    \n    \n\n\n","offset":145,"fileType":"python","requestStartTime":1518016637490}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = copt.numbers\n    orderList = Arrays.sort(orderList)\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList.pop()\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":326,"fileType":"python","requestStartTime":1518016687736}}
{"body": {"column":21,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = copy.numbers\n    orderList = Arrays.sort(orderList)\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList.pop()\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":326,"fileType":"python","requestStartTime":1518016688895}}
{"body": {"column":21,"line":39,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t     #Write your code here\n            \n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1019,"fileType":"python","requestStartTime":1518016762410}}
{"body": {"column":35,"line":12,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = copy.copy(numbers).\n    orderList = orderList.sort\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":340,"fileType":"python","requestStartTime":1518016813993}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        print self.getNextLevel(root)   \n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append(root.left)\n        if root.right:\n            nodeVals.append(root.right)\n        return { level : nodevals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":535,"fileType":"python","requestStartTime":1518016882311}}
{"body": {"column":40,"line":39,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        print self.getNextLevel(0, root)   \n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).\n        if root.right:\n            nodeVals.append(root.right)\n        return { level : nodeVals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1068,"fileType":"python","requestStartTime":1518016967117}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nif __name__ == '__main__':\n    n = int(raw_input())\n    if n % 2 == 1:\n        print \"Weird\"\n    else:\n        if n >\n\n","offset":119,"fileType":"python","requestStartTime":1518016976220}}
{"body": {"column":40,"line":41,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        print self.getNextLevel(0, root)   \n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n        if root.right:\n            nodeVals.append(root.right).\n        return { level : nodeVals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1137,"fileType":"python","requestStartTime":1518016973126}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    brd = board\n    loc_wpawn=[]    \n    loc_bking=[]\n    \n    for i in range(0, len(brd)):\n        print brd[i]\n        for x in brd[i]:  #range(0, len(brd)): \n            x.\n            #find my White Pawn. \n            if x=='P': \n                loc_wpawn=[i,x]\n                print x   \n    \n    print 'done'# Complete this function\n\nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":233,"fileType":"python","requestStartTime":1518017071003}}
{"body": {"column":14,"line":13,"wordToComplete":"","code":"#!/bin/python\n\nimport sys, os, copy\n\n\n# Complete the function below.\n\n\ndef  unusual_sort(numbers):\n    \n    # This problem could be solved by put all the larger values in the odd index of the list and then the smaller values in the even index of the list\n    # sort the list and get the size of the list\n    orderList = copy.copy(numbers).sort()\n    orderList.\n    size = len(numbers)\n    # put the larger and smaller values into corresponding positions\n    j = 0\n    for i in range(1,size,2)+range(0,size,2):\n        numbers[i] = orderList[j]\n        j += 1\n    print numbers\ndef checkAnswer(numbers, ref_numbers):\n    size = len(numbers)\n    if size != len(ref_numbers):\n        return False\n    num_dict, num_ref_dict = {}, {}\n    for number in numbers:\n        num_dict[number] = num_dict.get(number,0) + 1\n    for number in ref_numbers:\n        num_ref_dict[number] = num_ref_dict.get(number,0) + 1\n    if num_dict != num_ref_dict:\n        return False   \n    for pos in range(1, size, 2):\n        if numbers[pos] <= numbers[pos-1]:\n            return False\n    for pos in range(2, size, 2):\n        if numbers[pos] >= numbers[pos-1]:\n            return False\n    return True\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n_numbers = [int(x) for x in raw_input().split()]   \n_ref_numbers = copy.copy(_numbers)\nunusual_sort(_numbers);\nres = checkAnswer(_numbers, _ref_numbers)\nf.write(str(int(res)) + \"\\n\")\nf.close()\n","offset":361,"fileType":"python","requestStartTime":1518017107702}}
{"body": {"column":27,"line":20,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.}\n        print self.getNextLevel(0, root)   \n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n        if root.right:\n            nodeVals.append((root.right).data)\n        return { level : nodeVals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":543,"fileType":"python","requestStartTime":1518017338601}}
{"body": {"column":14,"line":21,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.data }\n        order.self.getNextLevel(0, root)\n        print order\n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n        if root.right:\n            nodeVals.append((root.right).data)\n        return { level : nodeVals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":564,"fileType":"python","requestStartTime":1518017472889}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\nseen = {}\ndef numberOfPaths(a):\n    if a[0][0] == 0:\n        return 0\n    return _helper(a, 0, 0)\n\ndef _helper(a, row, col):\n    global seen\n    rowlen = len(a)\n    collen = len(a[0])\n    if row==rowlen-1 or col==collen-1:\n        return 1\n    down=0\n    right=0\n    if row!=rowlen-1 and a[row+1][col]!=0:\n        if seen.\n        down += _helper(a, row+1, col)\n        seen[(row+1,col)]=down\n    if col!=collen-1 and a[row][col+1]!=0:\n        right += _helper(a, row, col+1)\n        seen[(row,col+1)]=right\n    return right+down % (10**9+7)\n\nif __name__ == \"__main__\":\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n    a_rows = 0\n    a_cols = 0\n    a_rows = int(raw_input())\n    a_cols = int(raw_input())\n\n    a = []\n    for a_i in xrange(a_rows):\n        a_temp = map(int,raw_input().strip().split(' '))\n        a.append(a_temp)\n\n    res = numberOfPaths(a);\n    f.write(str(res) + \"\\n\")\n\n    f.close()\n","offset":392,"fileType":"python","requestStartTime":1518017520059}}
{"body": {"column":17,"line":40,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.data }\n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n            self.\n        if root.right:\n            nodeVals.append((root.right).data)\n        return { level : nodeVals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1081,"fileType":"python","requestStartTime":1518017559127}}
{"body": {"column":42,"line":40,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.data }\n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n            self.getNextLevel(level, root.)\n        if root.right:\n            nodeVals.append((root.right).data)\n        return { level : nodeVals }\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1106,"fileType":"python","requestStartTime":1518017572990}}
{"body": {"column":14,"line":9,"wordToComplete":"","code":"\n#!/bin/python\n\nimport sys\n\ndef waysToGiveACheck(board):\n    pawns = []\n    for i in range(len(board[1])):\n        if board[1][i] == \"P\"\n        pawns.\n        \nif __name__ == \"__main__\":\n    t = int(raw_input().strip())\n    for a0 in xrange(t):\n        board = []\n        for board_i in xrange(8):\n            board_temp = map(str,raw_input().strip().split(' '))\n            board.append(board_temp)\n        result = waysToGiveACheck(board)\n        print result\n\n\n\n","offset":152,"fileType":"python","requestStartTime":1518017601691}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"\nimport re\n\ndef waysToGiveACheck(board):\n    # Get all the pieces in the board.\n    pieces = []\n    Attackers = [\"Q\", \"R\", \"N\", \"B\"]\n    attackers = [\"q\", \"r\", \"n\", \"b\"]\n    for i in range(8):\n        for j in board[i]:\n            if j != \"#\":\n                pieces.\n                \n                \n                \nt = int(raw_input().strip())\nfor _ in xrange(t):\n    board = []\n    for i in xrange(8):\n        board.append(raw_input().strip())\n    print waysToGiveACheck(board)\n\n","offset":269,"fileType":"python","requestStartTime":1518017670488}}
{"body": {"column":19,"line":21,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.data }\n        print self.\n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        data = {}\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n            temp = self.getNextLevel(level, root.left)\n        if root.right:\n            nodeVals.append((root.right).data)\n            temp = self.getNextLevel(level, root.right)\n        data[level] = nodeVals\n        return data\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":569,"fileType":"python","requestStartTime":1518017764301}}
{"body": {"column":136,"line":12,"wordToComplete":"He could only get value of 1,2,3,4,5,6 from the rolling, let's say he would stop at 6 and otherwise keep rolling since he is greedy.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n    '''\n    This problem is to get the expectation essentially; \n    He could only get value of 1,2,3,4,5,6 from the rolling, let's say he would stop at 6 and otherwise keep rolling since he is greedy.\n    '''\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":306,"fileType":"python","requestStartTime":1518017788418}}
{"body": {"column":23,"line":16,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n    '''\n    This problem is to get the expectation essentially; \n    He could only get value of 1-6 from the rolling, let's say he would stop at 6 and otherwise keep rolling since he is greedy. \n    The key of this problem is to get the probability of each value\n    '''\n    # get the probality of each value at the 1st roll\n    pre_probality = [1.]\n    for i in range(1,rolls):\n        \n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":453,"fileType":"python","requestStartTime":1518017980416}}
{"body": {"column":22,"line":43,"wordToComplete":"d.temp1","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.data }\n        print self.getNextLevel(0, root)\n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        data = {}\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n            temp1 = self.getNextLevel(level, root.left)\n            print(\"%d.temp1\n        if root.right:\n            nodeVals.append((root.right).data)\n            temp2 = self.getNextLevel(level, root.right)\n            print temp2\n        data[level] = nodeVals\n        return data\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1201,"fileType":"python","requestStartTime":1518018012538}}
{"body": {"column":43,"line":43,"wordToComplete":"","code":"import sys\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def insert(self,root,data):\n        if root==None:\n            return Node(data)\n        else:\n            if data<=root.data:\n                cur=self.insert(root.left,data)\n                root.left=cur\n            else:\n                cur=self.insert(root.right,data)\n                root.right=cur\n        return root\n    def levelOrder(self,root):\n  \t    #Write your code here\n        order = { 0 : root.data }\n        print self.getNextLevel(0, root)\n            \n    def getHeight(self,root):\n        l = r = 0\n        if root.left:\n            l = self.getHeight(root.left)\n        if root.right:\n            r = self.getHeight(root.right)\n        if root.left == None and root.right == None:\n            return 0\n        if l >= r:\n            return l + 1\n        else:\n            return r + 1\n\n    def getNextLevel(self, lastLevel, root):\n        data = {}\n        nodeVals = []\n        level = lastLevel + 1\n        if root.left:\n            nodeVals.append((root.left).data)\n            temp1 = self.getNextLevel(level, root.left)\n            print(\"%d.left has %s\" % (root.temp1\n        if root.right:\n            nodeVals.append((root.right).data)\n            temp2 = self.getNextLevel(level, root.right)\n            print temp2\n        data[level] = nodeVals\n        return data\n        \n        \n\nT=int(raw_input())\nmyTree=Solution()\nroot=None\nfor i in range(T):\n    data=int(raw_input())\n    root=myTree.insert(root,data)\nmyTree.levelOrder(root)\n","offset":1222,"fileType":"python","requestStartTime":1518018039540}}
{"body": {"column":42,"line":19,"wordToComplete":"1.","code":"#!/bin/python\n\nimport sys\nimport os\n\n\n# Complete the function below.\n\n\ndef  die_game_fair_value(rolls):\n    '''\n    This problem is to get the expectation essentially; \n    He could only get value of 1-6 from the rolling, let's say he would stop at 6 and otherwise keep rolling since he is greedy. \n    The key of this problem is to get the probability of each value\n    '''\n    # get the probality of each value at the 1st roll\n    pre_probality = [1.0/6]*6\n    for i in range(1,rolls):\n        # get value 1\n        probality[0] = pre_probality[0]*1.\n\nf = open(os.environ['OUTPUT_PATH'], 'w')\n    \n\n_rolls = int(raw_input());\n\nres = die_game_fair_value(_rolls);\nf.write(str(res) + \"\\n\")\n\nf.close()\n\n","offset":553,"fileType":"python","requestStartTime":1518018097933}}
