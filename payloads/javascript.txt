{"body": {"column":13,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    var numChanges = 0;\n    var charCodeStr = [];\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    }\n    \n   \n    \n    \n    return s.;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":689,"fileType":"javascript","requestStartTime":1517907938638}}
{"body": {"column":14,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    var numChanges = 0;\n    var charCodeStr = [];\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    }\n    \n   \n    \n    \n    return (s.s.length%2)/2;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":690,"fileType":"javascript","requestStartTime":1517907988832}}
{"body": {"column":25,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = s.\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    }\n    \n   \n    \n    \n    return (s.length-s.length%2)/2;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":598,"fileType":"javascript","requestStartTime":1517908033736}}
{"body": {"column":26,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.)\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    }\n    \n   \n    \n    \n    return (s.length-s.length%2)/2;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":599,"fileType":"javascript","requestStartTime":1517908036446}}
{"body": {"column":35,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.)\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    }\n    \n   \n    \n    \n    return (s.length-s.length%2)/2;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":608,"fileType":"javascript","requestStartTime":1517908040817}}
{"body": {"column":25,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction findLargestThreeDigitNum(digits) {\n  var numString = digits.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var digits;\n    var digits = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = findLargestThreeDigitNum(digits);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1517908139415}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction findLargestThreeDigitNum(digits) {\n  var numString = digits.toString();\n  var largestNum = 0;\n  \n  for (var i = 0; i < numString.length; i += 3) {\n    var currentNum = numString.slice(i, i + 3);\n    \n    if (parseInt(currentNum) >)\n    \n  }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var digits;\n    var digits = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = findLargestThreeDigitNum(digits);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":499,"fileType":"javascript","requestStartTime":1517908235235}}
{"body": {"column":25,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.\n    \n   \n    \n    \n    return (s.length-s.length%2)/2;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":861,"fileType":"javascript","requestStartTime":1517908292334}}
{"body": {"column":27,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<=subArr.)\n    \n    \n    return subArr;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":932,"fileType":"javascript","requestStartTime":1517908381845}}
{"body": {"column":37,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    \n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<subArr.length; j++){\n       if (subArr[j] !== charCodeStr.)\n   }\n    \n    \n    return loopIt;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":987,"fileType":"javascript","requestStartTime":1517908532171}}
{"body": {"column":30,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    \n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<subArr.length; j++){\n       if (subArr[j] !== charCodeStr.reverse()[j]){\n           numChanges += Math.\n       }\n   }\n    \n    \n    return loopIt;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1032,"fileType":"javascript","requestStartTime":1517908630714}}
{"body": {"column":56,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    \n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<subArr.length; j++){\n       if (subArr[j] !== charCodeStr.reverse()[j]){\n           numChanges += Math.abs(subArr[j]-charCodeStr.)\n       }\n   }\n    \n    \n    return loopIt;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1058,"fileType":"javascript","requestStartTime":1517908647202}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n\n    var temp_item;\n    var count_result = 0;\n    \n    for( i = 0; i < items.lenght; i++){\n        temp_item = items[i];\n        console.\n        \n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":458,"fileType":"javascript","requestStartTime":1517908657025}}
{"body": {"column":57,"line":16,"wordToComplete":"making an array from given range.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction sumEvensOnly(rangeStart, rangeEnd) {\n  var numArray = []; // making an array from given range.\n  \n  for (var i = rangeStart; i <= rangeEnd; i++) {\n    numArray.push(i);\n  }\n  \n  var sum = 0; // final return value\n  \n  for (var i = 0; i < numArray.length; i++) {\n    if (numArray[i] % 2 === 0) {\n      sum += numArray[i];\n    }\n  }\n  \n  return sum;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var rangeStart;\n    var rangeStart = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var rangeEnd;\n    var rangeEnd = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = sumEvensOnly(rangeStart, rangeEnd);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":363,"fileType":"javascript","requestStartTime":1517908674264}}
{"body": {"column":34,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    \n    var count_result = 0;\n    \n    for( i = 0; i < items.lenght; i++){\n        console.log('origitem: '.,);\n        temp_item = items[i];\n        if(prices[i] != origPrices[origItems.indexOf( items[i] )]){\n            count_result = count_result + 1;\n        }\n    }\n    \n    return count_result;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":431,"fileType":"javascript","requestStartTime":1517909054343}}
{"body": {"column":25,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    \n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr..slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<subArr.length; j++){\n           numChanges = numChanges + Math.abs(subArr[j]-charCodeStr.reverse()[j]);\n   }\n    \n    \n    return numChanges;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":866,"fileType":"javascript","requestStartTime":1517909178590}}
{"body": {"column":86,"line":40,"wordToComplete":"words[count % 2] would be pushed into newStringArr depends on if statement.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction madLibs(sentence, words) {\n  \n  var sentenceArr = sentence.split(\"\"); // Convert string to array.\n  var newStringArr = []; // Final return value w/ join method.\n  var count = 0; // Increment when asterisk is found at each iteration.\n\n  for (var i = 0; i < sentenceArr.length; i++) {\n    \n    if (sentence[i] !== \"*\") { // if element in the newStringArr is not '*', push into newStringArr.\n      newStringArr.push(sentence[i]);\n     \n    // Need to see whether the length of words array is greater than 2 or not.\n      \n    } else {\n      if (words.length <= 2) { // If the length of given array is less than or equal to 2, then below body is executed.\n        \n        // When count is equal to 0 or 1, words[count] is pushed into newStringArr. \n        // Increment count after the element from words array is pushed.\n        \n        if (count === 0) {\n          newStringArr.push(words[count]);\n          count++;\n        } else if (count === 1) {\n          newStringArr.push(words[count]);\n          count++;\n        // words[count % 2] would be pushed into newStringArr depends on if statement.\n        } else if (count % 2 === 0) {\n          newStringArr.push(words[count % 2]);\n          count++;\n        } else {\n          newStringArr.push(words[count % 2]);\n          count++;\n        }\n        \n      } else {\n        if (count === 0 || count % 2 === 1) {\n          newStringArr.push(words[count]);\n          count++;\n        } else if (count % 2 === 0) {\n          newStringArr.push(words[count]);\n          count++;\n        }\n      }\n    } \n  }\n  \n  return newStringArr.join(\"\");\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    \n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var words = __input_stdin_array.slice(1)\n        .map(function(word) {\n            return word.trim();\n        });\n\n\n    res = madLibs(sentence, words);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1368,"fileType":"javascript","requestStartTime":1517909486046}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction szinValtas (){\n    document.\n}\n\n","offset":67,"fileType":"javascript","requestStartTime":1517909487143}}
{"body": {"column":23,"line":93,"wordToComplete":"","code":"\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction processData(input) {\n    //Enter your code here\n    let str = '',\n        undoStack = new Stack();\n    \n    input = input.split('\\n');\n    input = input.map(cur => cur.split(' '));\n    \n    for(let i = 1; i < input.length; i++) {\n        const operation = input[i][0];\n        \n        switch(operation) {\n            case '1':\n                str += input[i][1];\n                undoStack.push(str);\n                //console.log(undoStack._storage);\n                break;\n            case '2':\n                const s = parseInt(input[i][1]);\n                if(str.)\n                str = str.slice(0, str.length - );\n                undoStack.push(str);\n                break;\n            case '3':\n                const position = parseInt(input[i][1]);\n                console.log(str.charAt(position - 1));\n                break;\n            case '4':\n                undoStack.pop();\n                str = undoStack.peek();\n                break;\n        }\n    }\n    \n    \n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":2523,"fileType":"javascript","requestStartTime":1517909581933}}
{"body": {"column":42,"line":17,"wordToComplete":"Final return value.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPrime(num) {\n  \n  var prime = true; // Final return value.\n  \n  for (var i = 2; i < num; i++) {\n    if (num % i === 0) {\n      prime = false;\n    }\n  }\n  return prime;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = isPrime(num);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1517909643664}}
{"body": {"column":14,"line":78,"wordToComplete":"","code":"\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction processData(input) {\n    //Enter your code here\n    let str = '',\n        undoStack = new Stack();\n    undoStack.\n    input = input.split('\\n');\n    input = input.map(cur => cur.split(' '));\n    \n    for(let i = 1; i < input.length; i++) {\n        const operation = input[i][0];\n        \n        switch(operation) {\n            case '1':\n                str += input[i][1];\n                undoStack.push(str);\n                //console.log(undoStack._storage);\n                break;\n            case '2':\n                const s = parseInt(input[i][1]);\n                if(str.length === s) {\n                    str = \"\";\n                } else {\n                    str = str.slice(0, str.length - s);\n                }\n                undoStack.push(str);\n                break;\n            case '3':\n                const position = parseInt(input[i][1]);\n                console.log(str.charAt(position - 1));\n                break;\n            case '4':\n                undoStack.pop();\n                str = undoStack.peek();\n                break;\n        }\n    }\n    \n    \n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":2067,"fileType":"javascript","requestStartTime":1517909643990}}
{"body": {"column":23,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    \n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<subArr.length; j++){\n           numChanges += Math.abs(subArr[j]-charCodeStr.reverse()[j]);     \n   }\n    \n    \n    return charCodeStr.;\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1064,"fileType":"javascript","requestStartTime":1517909755933}}
{"body": {"column":60,"line":24,"wordToComplete":"Recursively calls itself if the chars[i] is an array.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\n\n// Need to use recursion.\n\nfunction nestingBird(chars) {\n  var string = \"\"; // Final return value.\n  \n  // Loop through the given array.\n  for (var i = 0; i < chars.length; i++) {\n    \n    // Recursively calls itself if the chars[i] is an array.\n    \n    if (typeof chars[i] === 'object') {\n      string += nestingBird(chars[i]);\n    } else {\n      string += chars[i];\n    }\n  }\n  \n  return string;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _chars = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    res = nestingBird(_chars);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":506,"fileType":"javascript","requestStartTime":1517909983317}}
{"body": {"column":68,"line":24,"wordToComplete":"Recursively calls itself if the typeof chars[i] is an object.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\n\n// Need to use recursion.\n\nfunction nestingBird(chars) {\n  var string = \"\"; // Final return value.\n  \n  // Loop through the given array.\n  for (var i = 0; i < chars.length; i++) {\n    \n    // Recursively calls itself if the typeof chars[i] is an object.\n    \n    if (typeof chars[i] === 'object') {\n      string += nestingBird(chars[i]);\n    } else {\n      string += chars[i];\n    }\n  }\n  \n  return string;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _chars = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    res = nestingBird(_chars);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":514,"fileType":"javascript","requestStartTime":1517909992727}}
{"body": {"column":33,"line":24,"wordToComplete":"Type of array is 'object'.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\n\n// Need to use recursion.\n\nfunction nestingBird(chars) {\n  var string = \"\"; // Final return value.\n  \n  // Loop through the given array.\n  for (var i = 0; i < chars.length; i++) {\n    \n    // Type of array is 'object'.\n    // Recursively calls itself if the typeof chars[i] is an object.\n    \n    if (typeof chars[i] === 'object') {\n      string += nestingBird(chars[i]);\n    } else {\n      string += chars[i];\n    }\n  }\n  \n  return string;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _chars = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    res = nestingBird(_chars);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":479,"fileType":"javascript","requestStartTime":1517910009021}}
{"body": {"column":56,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n    ///variables delcaration\n    var numChanges = 0;\n    var charCodeStr = [];\n    var subArrLength = (s.length-s.length%2)/2; //length of sub array to check\n    var subArr = [];\n    \n    ////Code\n    for (var i=0; i<s.length; i++){\n        charCodeStr[i] = s.charCodeAt(i);\n    } //transform string into numbers\n    \n    subArr = charCodeStr.slice(0,subArrLength); //create subArr\n    \n   for (var j=0; j<subArr.length; j++){\n           numChanges += Math.abs(subArr[j]-charCodeStr.[j]);     \n   }\n    \n    \n    return charCodeStr[0];\n\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1006,"fileType":"javascript","requestStartTime":1517910047620}}
{"body": {"column":17,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction repeatedString(s, n) {\n    return n / s.\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":508,"fileType":"javascript","requestStartTime":1517910188934}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction repeatedString(s, n) {\n    return .\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":503,"fileType":"javascript","requestStartTime":1517910207296}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction repeatedString(s, n) {\n    return s.\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":504,"fileType":"javascript","requestStartTime":1517910208869}}
{"body": {"column":9,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction repeatedString(s, n) {\n    Math.n / s\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":500,"fileType":"javascript","requestStartTime":1517910239851}}
{"body": {"column":8,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nfunction szinValtas (){\n    document.getElementById(\"focim\").style.color = \"rgb(\" + (Math.random() * 255).toFixed(0) + \",\" + (Math.random() * 255).toFixed(0) + \",\" + (Math.random() * 255).toFixed(0) + \")\";\n}\n\nfunction noveles() {\n    var kep = document.getElementById(\"kep\");\n    kep.\n}\n\n","offset":314,"fileType":"javascript","requestStartTime":1517910304728}}
{"body": {"column":25,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction repeatedString(s, n) {\n    const countInOne = s.\n    Math.floor(n / s)\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":516,"fileType":"javascript","requestStartTime":1517910350890}}
{"body": {"column":37,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction repeatedString(s, n) {\n    const countInOne = s.match(/a/g).;\n    Math.floor(n / s)\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":528,"fileType":"javascript","requestStartTime":1517910373847}}
{"body": {"column":47,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countAs(s) {\n    return s.match(/a/g).length;\n}\n\nfunction repeatedString(s, n) {\n    Math.floor(n / s) * countAs(s) + countAs(s.)\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":596,"fileType":"javascript","requestStartTime":1517910451168}}
{"body": {"column":21,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countAs(s) {\n    return s.match(/a/g).length;\n}\n\nfunction repeatedString(s, n) {\n    Math.floor(n / s.) * countAs(s) + countAs(s.substr(0, ))\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":570,"fileType":"javascript","requestStartTime":1517910459481}}
{"body": {"column":70,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countAs(s) {\n    return s.match(/a/g).length;\n}\n\nfunction repeatedString(s, n) {\n    Math.floor(n / s.length) * countAs(s) + countAs(s.substr(0, n & s.))\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":619,"fileType":"javascript","requestStartTime":1517910468404}}
{"body": {"column":70,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countAs(s) {\n    return s.match(/a/g).length;\n}\n\nfunction repeatedString(s, n) {\n    Math.floor(n / s.length) * countAs(s) + countAs(s.substr(0, n % s.))\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":619,"fileType":"javascript","requestStartTime":1517910471274}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countAs(s) {\n    console.\n    return s.match(/a/g).length;\n}\n\nfunction repeatedString(s, n) {\n    return Math.floor(n / s.length) * countAs(s) + countAs(s.substr(0, n % s.length));\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":493,"fileType":"javascript","requestStartTime":1517910524364}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countAs(s) {\n    try {\n        return s.match(/a/g).length;\n    } catch (e) {\n        console.\n    }\n}\n\nfunction repeatedString(s, n) {\n    return Math.floor(n / s.length) * countAs(s) + countAs(s.substr(0, n % s.length));\n}\n\nfunction main() {\n    var s = readLine();\n    var n = parseInt(readLine());\n    var result = repeatedString(s, n);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":562,"fileType":"javascript","requestStartTime":1517910617285}}
{"body": {"column":17,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    const dv = v1 - v2;\n    let cx1 = x1;\n    let cx2 = x2;\n\n    while (true) {\n        if (cx1 === cx2) {\n            return 'YES';\n        }\n        if (cx1 >)\n    }\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":655,"fileType":"javascript","requestStartTime":1517911140905}}
{"body": {"column":29,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    const dv = v1 - v2;\n    let cx1 = x1;\n    let cx2 = x2;\n\n    while (true) {\n        if (cx1 === cx2) {\n            return 'YES';\n        }\n        if (cx1 > cx2 && dv >)\n    }\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":667,"fileType":"javascript","requestStartTime":1517911146297}}
{"body": {"column":27,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n    for( i = 1; i < values.){}\n}\n\nfunction checkBalance(value){\n    var expectedBraces;\n    var temp_arr = [];\n    var arr_length = value.length\n    var openingBraces = ['(', '{', '['];\n    var closingBraces = [')', '}', ']'];\n    \n    for( i = 0; i < arr_length; i++ ){\n        if(openingBraces.indexOf(value[i]) > -1){\n            temp_arr.push(value[i]);\n        }else if ( closingBraces.indexOf(value[i]) > -1 ){\n            expectedBraces = openingBraces[closingBraces.indexOf(value[i])];\n            if(temp_arr.length === 0 ||){}\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517911548468}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n  class Polygon\n  {\n      constructor(obj)\n      {\n          this.\n      }\n      \n      \n      \n      perimeter : function()\n{\n    \n}\n  }\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":279,"fileType":"javascript","requestStartTime":1517911585289}}
{"body": {"column":10,"line":17,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n  class Polygon\n  {\n      constructor(obj)\n      {\n          this.sides = obj;\n      }\n      \n      \n      \n      perimeter : function()\n{\n    sides.\n}\n  }\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":362,"fileType":"javascript","requestStartTime":1517911611224}}
{"body": {"column":21,"line":17,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n  class Polygon\n  {\n      constructor(obj)\n      {\n          this.sides = obj;\n      }\n      \n      \n      \n      perimeter : function()\n{\n    for(let s of ths.sides)\n}\n  }\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":373,"fileType":"javascript","requestStartTime":1517911631354}}
{"body": {"column":28,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.;\n    for(let v of votes) {\n        vObj[v] = (vObj[v] || 0) + 1;\n    }\n    \n    let winners = [];\n    let maxVotes = 0;\n    \n    for(let name in vObj){\n        if (vObj[name] > maxVotes){\n            maxVotes = vObj[name];\n            winners = [name];\n        }\n    }\n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":425,"fileType":"javascript","requestStartTime":1517911927015}}
{"body": {"column":14,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.sort();\n    const mapVotes = {};\n    \n    sortVotes.\n    \n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":477,"fileType":"javascript","requestStartTime":1517911991782}}
{"body": {"column":26,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.sort();\n    const mapVotes = {};\n    \n    sortVotes.map(function(name){\n        if(!mapVotes[name]){\n            mapVotes[name] = 1;\n        }eles {\n            mapVotes[name] += 1;\n        }\n    })\n    \n    const result = object.\n    \n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":655,"fileType":"javascript","requestStartTime":1517912125336}}
{"body": {"column":48,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.sort();\n    const mapVotes = {};\n    \n    sortVotes.map(function(name){\n        if(!mapVotes[name]){\n            mapVotes[name] = 1;\n        }eles {\n            mapVotes[name] += 1;\n        }\n    })\n    \n    const result = object.keys(mapVotes[b] ? a :)\n    \n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":677,"fileType":"javascript","requestStartTime":1517912161802}}
{"body": {"column":41,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.sort();\n    const mapVotes = {};\n    \n    sortVotes.map(function(name){\n        if(!mapVotes[name]){\n            mapVotes[name] = 1;\n        }eles {\n            mapVotes[name] += 1;\n        }\n    })\n    \n    const result = object.keys(mapVotes).[b] ? a : b;)\n    \n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":670,"fileType":"javascript","requestStartTime":1517912191737}}
{"body": {"column":42,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.sort();\n    const mapVotes = {};\n    \n    sortVotes.map(function(name){\n        if(!mapVotes[name]){\n            mapVotes[name] = 1;\n        }eles {\n            mapVotes[name] += 1;\n        }\n    })\n    \n    const result = object.keys(mapVotes).reduce(funtion(a,b){\n     return mapVotes[a] > mapVotes[b] ? a:                                            \n    })\n    \n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":733,"fileType":"javascript","requestStartTime":1517912305243}}
{"body": {"column":43,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst votes [\"Alex\", \"Michael\", \"Harry\", \"Dave\", \"Michael\", \"Victore\", \"Harry\", \"Alex\", \"Mary\", \"Mary\"]\nfunction electionWinner(votes) {\n    const sortVotes = votes.sort();\n    const mapVotes = {};\n    \n    sortVotes.map(function(name){\n        if(!mapVotes[name]){\n            mapVotes[name] = 1;\n        }eles {\n            mapVotes[name] += 1;\n        }\n    })\n    \n    const result = object.keys(mapVotes).reduce(funtion(a,b){\n     return mapVotes[a] > mapVotes[b] ? a :                                            \n    })\n    \n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var votes;\n    var votes_size = 0;\n    votes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var votes = [];\n    var votes_item;\n    for (var votes_i = 0; votes_i < votes_size; votes_i++) {\n        var votes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        votes.push(votes_item);\n    }\n\n\n    res = electionWinner(votes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":734,"fileType":"javascript","requestStartTime":1517912308283}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = Math.\n    let r = readLine()\n    // Print the area of the circle:\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":559,"fileType":"javascript","requestStartTime":1517912418983}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n      const PI = Math.PI;\n      let r = readLine()\n    // Print the area of the circle:\n    console.    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":639,"fileType":"javascript","requestStartTime":1517912495331}}
{"body": {"column":21,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n      const PI = Math.PI;\n      let r = readLine()\n    // Print the area of the circle:\n    console.log(Math.)    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":648,"fileType":"javascript","requestStartTime":1517912524525}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n      const PI = Math.PI;\n      let r = readLine()\n    // Print the area of the circle:\n    console.log(PI * Math.pow(r,2));\n    // Print the perimeter of the circle:\n    console.\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":718,"fileType":"javascript","requestStartTime":1517912544668}}
{"body": {"column":31,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n}\n\nfunction is_balanced(expression) {\n    let s = [];\n    expression = expression.split('');\n    \n    for (let c = 0; c < expression.length; c++) {\n        if (expression[c] === '{') {\n            s.push('}');\n        } else if (expression[c] === '[') {\n            s.push(']');\n        } else if (expression[c] === '(') {\n            s.push(')');\n        } else {\n            if ((s.length === 0) || expression[c] !== s[s.length-1]) {\n                return console.;\n            }\n            s.pop();\n        }\n    };\n    return (s.length === 0);\n}\n\n\n","offset":1056,"fileType":"javascript","requestStartTime":1517912644418}}
{"body": {"column":18,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n        is_balanced(expression);\n    }\n}\n\nfunction is_balanced(expression) {\n    let s = [];\n    expression = expression.split('');\n    \n    if(expression.)\n    \n    for (let c = 0; c < expression.length; c++) {\n        if (expression[c] === '{') {\n            s.push('}');\n        } else if (expression[c] === '[') {\n            s.push(']');\n        } else if (expression[c] === '(') {\n            s.push(')');\n        } else {\n            if ((s.length === 0) || expression[c] !== s[s.length-1]) {\n                console.log('NO');\n                return;\n            }\n            s.pop();\n        }\n    };\n    console.log('YES');\n    return;\n}\n\n\n","offset":738,"fileType":"javascript","requestStartTime":1517912810457}}
{"body": {"column":16,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n        is_balanced(expression);\n    }\n}\n\nfunction is_balanced(expression) {\n    let s = [];\n    expression = expression.split('');\n    \n    if(expression.length === 1){\n        console.\n    }\n    \n    for (let c = 0; c < expression.length; c++) {\n        if (expression[c] === '{') {\n            s.push('}');\n        } else if (expression[c] === '[') {\n            s.push(']');\n        } else if (expression[c] === '(') {\n            s.push(')');\n        } else {\n            if ((s.length === 0) || expression[c] !== s[s.length-1]) {\n                console.log('NO');\n                return;\n            }\n            s.pop();\n        }\n    };\n    console.log('YES');\n    return;\n}\n\n\n","offset":769,"fileType":"javascript","requestStartTime":1517912822465}}
{"body": {"column":27,"line":27,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n/*\n * Create the function factorial here\n */const factorial = (n) =>\n\nfunction main() {\n    const n = +(readLine());\n    \n    console.log(factorial(n));\n}\n","offset":491,"fileType":"javascript","requestStartTime":1517913080410}}
{"body": {"column":27,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    for(var i = 0; i < arr.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":317,"fileType":"javascript","requestStartTime":1517913380920}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    let result = 0;\n    while (n <= ar.) {\n        result += n + ar;\n    }\n    return result;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":531,"fileType":"javascript","requestStartTime":1517913505365}}
{"body": {"column":30,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    for(var i = 0 ; i < doors.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":560,"fileType":"javascript","requestStartTime":1517913504689}}
{"body": {"column":23,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var j;\n    var x;\n    for(var i = 0 ; i < doors.length ; i++){\n        if(doors[i] == 1){\n            x += 1;\n        }else{\n            continue;\n        }\n    }\n    for(var i = 0 ; i >)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":720,"fileType":"javascript","requestStartTime":1517913633565}}
{"body": {"column":30,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var j;\n    var x;\n    for(var i = 0 ; i < doors.length ; i++){\n        if(doors[i] == 1){\n            x += 1;\n        }else{\n            continue;\n        }\n    }\n    for(var i = 0 ; i < doors.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":727,"fileType":"javascript","requestStartTime":1517913637734}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n        let radius = readLine();\n        const PI = Math.PI;\n    // Print the area of the circle:\n        console.\n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":653,"fileType":"javascript","requestStartTime":1517913733352}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"[1,2,3,4,5]\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    for(var i=1; i<k;i++){\n        a.push(a.shift());\n    }\n    console. a.join(\" \");\n\n}\n\n\n","offset":720,"fileType":"javascript","requestStartTime":1517913755030}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n        let radius = readLine();\n        const PI = Math.PI;\n    // Print the area of the circle:\n        console.log(PI*(Math.));\n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":666,"fileType":"javascript","requestStartTime":1517913787386}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var bigNumber = (l >)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":312,"fileType":"javascript","requestStartTime":1517913902420}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(acid_name) {\n    // Complete this function\n    if(acid_name.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":539,"fileType":"javascript","requestStartTime":1517913984443}}
{"body": {"column":12,"line":25,"wordToComplete":"acid_","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(acid_name) {\n    // Complete this function\n    if(acid_)\n    if(acid_name.startsWith(\"hydro\"))\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":534,"fileType":"javascript","requestStartTime":1517914011445}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(acid_name) {\n    // Complete this function\n    if(acid_name.)\n    if(acid_name.startsWith(\"hydro\"))\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":539,"fileType":"javascript","requestStartTime":1517914013522}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    console.\n}\n\n\n","offset":583,"fileType":"javascript","requestStartTime":1517914034135}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    console.log(arr.);\n}\n\n\n","offset":591,"fileType":"javascript","requestStartTime":1517914058104}}
{"body": {"column":28,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    console.log(arr.reverse.);\n}\n\n\n","offset":599,"fileType":"javascript","requestStartTime":1517914059897}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var bigNumber = (l > r) ? l : r;\n    var smallNumber = (l < r) ? l : r;\n    var targetNumber = smallNumber;\n    \n    while(isBigNumber) {\n        var isEven = ((targetNumber % 2) == 0);\n        if(!isEven) {\n            console.\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":520,"fileType":"javascript","requestStartTime":1517914079922}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    console.arr.reverse().join(\" \");\n}\n\n\n","offset":583,"fileType":"javascript","requestStartTime":1517914192409}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1517914336239}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var bigNumber = (l > r) ? l : r;\n    var smallNumber = (l < r) ? l : r;\n    var targetNumber = smallNumber;\n    var isBigNumber = false;\n    var resultArray = [];\n    \n    while(!isBigNumber) {\n        var isEven = ((targetNumber % 2) === 0) || (targetNumber === 0);\n        if (!isEven) {\n            console.log(targetNumber);\n            resultArray.\n        }\n        if (targetNumber == bigNumber) isBigNumber = true;\n        targetNumber++;\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":645,"fileType":"javascript","requestStartTime":1517914336472}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var arr = [];\n    for(arr_i = 0; arr_i < 6; arr_i++){\n       arr[arr_i] = readLine().split(' ');\n       arr[arr_i] = arr[arr_i].map(Number);\n    }\n    console.\n\n}\n\n\n","offset":640,"fileType":"javascript","requestStartTime":1517914368218}}
{"body": {"column":10,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    let min=0;\n    let max=1;\n    doors.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":570,"fileType":"javascript","requestStartTime":1517914438659}}
{"body": {"column":10,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    let min=0;\n    let max=1;\n    doors.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":570,"fileType":"javascript","requestStartTime":1517914485826}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"\n/* Node is defined as\nvar Node = function(data) {\n    this.data = data;\n    this.next = null;\n}\n*/\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction print(head) {\n    console.\n}\n\n\n","offset":218,"fileType":"javascript","requestStartTime":1517914637295}}
{"body": {"column":4,"line":21,"wordToComplete":"func","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunc findInMaze(grid,sym){\n    \n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    pos=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n   \n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":508,"fileType":"javascript","requestStartTime":1517914667242}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    console.\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    pos=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n   \n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":547,"fileType":"javascript","requestStartTime":1517914678683}}
{"body": {"column":9,"line":23,"wordToComplete":"","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    console.log(sym,grid);\n    grid.\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    pos=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n   \n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":571,"fileType":"javascript","requestStartTime":1517914751778}}
{"body": {"column":13,"line":23,"wordToComplete":"forEach","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    console.log(sym,grid);\n    grid.forEach(function(line){if})\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    pos=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n   \n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":575,"fileType":"javascript","requestStartTime":1517914781048}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n/* Node is defined as\nvar Node = function(data) {\n    this.data = data;\n    this.next = null;\n}\n*/\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction print(head) {\n    console.log(this.);\n}\n\n\n","offset":227,"fileType":"javascript","requestStartTime":1517914788875}}
{"body": {"column":21,"line":11,"wordToComplete":"","code":"\n/* Node is defined as\nvar Node = function(data) {\n    this.data = data;\n    this.next = null;\n}\n*/\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction print(head) {\n    console.log(head.);\n}\n\n\n","offset":227,"fileType":"javascript","requestStartTime":1517914842575}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    console.log(sym,grid);\n    grid.forEach(function(line,posY){posX= string.indexOf(substring);if(posX!==-1){return {x:posX,y:posY}; }})\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    pos=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n    console.\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":819,"fileType":"javascript","requestStartTime":1517914937657}}
{"body": {"column":7,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    ar.\n    // Complete this function\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":496,"fileType":"javascript","requestStartTime":1517915028302}}
{"body": {"column":10,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    // Complete this function\n    for(var i=1;i<d;i++){\n        a.\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":555,"fileType":"javascript","requestStartTime":1517915036066}}
{"body": {"column":20,"line":26,"wordToComplete":"0","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var min = 0;\n    var max = doors.0;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":567,"fileType":"javascript","requestStartTime":1517915079905}}
{"body": {"column":24,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var min = 0;\n    var max = 0;\n    \n    for(var i=0;i<doors.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":593,"fileType":"javascript","requestStartTime":1517915108558}}
{"body": {"column":11,"line":31,"wordToComplete":"","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    grid.forEach(function(line,posY){posX= line.indexOf(sym);if(posX!==-1){pos= {x:posX,y:posY}; }})\n    return pos;\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    hro=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n    console.log(hro,tgt);\n    if(hro.)\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":823,"fileType":"javascript","requestStartTime":1517915190274}}
{"body": {"column":17,"line":31,"wordToComplete":"","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    grid.forEach(function(line,posY){posX= line.indexOf(sym);if(posX!==-1){pos= {x:posX,y:posY}; }})\n    return pos;\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    hro=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n    console.log(hro,tgt);\n    if(hro.x>tgt.)\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":829,"fileType":"javascript","requestStartTime":1517915209464}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"function processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= dimension; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\nfunction findInMaze(grid,sym){\n    grid.forEach(function(line,posY){posX= line.indexOf(sym);if(posX!==-1){pos= {x:posX,y:posY}; }})\n    return pos;\n}\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    hro=findInMaze(grid,\"m\");\n    tgt=findInMaze(grid,\"p\");\n    console.log(hro,tgt);\n    if(hro.x>tgt.x){\n        console.\n    }\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\n\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":849,"fileType":"javascript","requestStartTime":1517915217383}}
{"body": {"column":20,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var j = 0;\n    var x = 0;\n    var i = 0;\n    var s = 0;\n    while(i < doors.)\n    for(var i = 0 ; i < doors.length ; i++){\n        if(doors[i] == 1){\n            x += 1;\n        }else{\n            continue;\n        }\n    }\n    for(var i = 0 ; i < doors.length ; i++){\n        if(doors[i] == 0){\n            continue;\n        }else if(doors[i] == 1 && doors[i+1] == 1){\n            j +=1;\n            continue;\n        }\n        if(doors[i + 1] == 1 && doors[1] == 1){\n            continue;\n        }\n    }\n    var a = [j, x];\n    return a;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":610,"fileType":"javascript","requestStartTime":1517915359286}}
{"body": {"column":20,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var j = 0;\n    var x = 0;\n    var i = 0;\n    var s = 0;\n    while(i < doors.length){\n        if(doors[i] == 1){\n            x += 1;\n        }else{\n            continue;\n        }\n        i++;\n    }\n    \n    while(i < doors.)\n    for(var i = 0 ; i < doors.length ; i++){\n        if(doors[i] == 1){\n            x += 1;\n        }else{\n            continue;\n        }\n    }\n    for(var i = 0 ; i < doors.length ; i++){\n        if(doors[i] == 0){\n            continue;\n        }else if(doors[i] == 1 && doors[i+1] == 1){\n            j +=1;\n            continue;\n        }\n        if(doors[i + 1] == 1 && doors[1] == 1){\n            continue;\n        }\n    }\n    var a = [j, x];\n    return a;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":757,"fileType":"javascript","requestStartTime":1517915413860}}
{"body": {"column":48,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    let min=0;\n    let max=0;\n    doors.forEach(function(item,i){\n        max+=item;\n       if(parseInt(doors[i])){\n            doors[i]=0;\n           if(parseInt(doors[i+1]) && i < doors.)\n            {\n                doors[i+1]=0;\n            }\n            min+=1\n            max+=1\n        }\n    })\n    return [min,max]\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":718,"fileType":"javascript","requestStartTime":1517915438968}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    var p = [];\n     for(var a0 = 0; a0 < n; a0++){\n         p[a0] = 0;\n     }\n    for(var a0 = 0; a0 < m; a0++){\n        var a_temp = readLine().split(' ');\n        var a = parseInt(a_temp[0]);\n        var b = parseInt(a_temp[1]);\n        var k = parseInt(a_temp[2]);\n      \n        for(var rowid = a-1;rowid<=b-1;rowid++){\n            p[rowid] = p[rowid] +k;\n        }\n    }\n    var max = p[0]\n    for(var i=0;i<n;i++){\n        if(max<p[i]){\n            max = p[i];\n        }\n    }\n    console.\n\n}\n\n\n","offset":1079,"fileType":"javascript","requestStartTime":1517915944987}}
{"body": {"column":8,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":298,"fileType":"javascript","requestStartTime":1517916024057}}
{"body": {"column":31,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    return arr.findIndex((n) =>k) !== undefined ? \"YES\" : \"NO\"\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":321,"fileType":"javascript","requestStartTime":1517916194541}}
{"body": {"column":42,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    return arr.findIndex((n) => n === k) > ? \"YES\" : \"NO\"\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":332,"fileType":"javascript","requestStartTime":1517916245270}}
{"body": {"column":6,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    l.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":294,"fileType":"javascript","requestStartTime":1517916289777}}
{"body": {"column":6,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    l.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":294,"fileType":"javascript","requestStartTime":1517916299738}}
{"body": {"column":6,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    l.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":294,"fileType":"javascript","requestStartTime":1517916301186}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var odd = []\n    for i = l; i <= r; i ++ {\n        if (i % 2 >)\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":354,"fileType":"javascript","requestStartTime":1517916384569}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var odd = []\n    for i = l; i <= r; i ++ {\n        if (i % 2 === 1) {\n            odd.\n        }\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":378,"fileType":"javascript","requestStartTime":1517916398610}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1517916439142}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    for(var i = 0;i<a.)\n    return ((a+b) <= c) ? \"Yes\" : \"No\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":316,"fileType":"javascript","requestStartTime":1517916483836}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var result=[];\n    for(var i = 0;i<a.length;i++)\n        {\n           if((a[i]+b[i]) <= c[i]){\n               result.\n           }\n            \n        }\n    return ((a+b) <= c) ? \"Yes\" : \"No\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":415,"fileType":"javascript","requestStartTime":1517916567762}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var result=[];\n    for(var i = 0;i<a.length;i++)\n        {\n           if((a[i]+b[i]) <= c[i]){\n               result.push('yes');\n           } else {\n               result.\n           }\n            \n        }\n    return ((a+b) <= c) ? \"Yes\" : \"No\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":470,"fileType":"javascript","requestStartTime":1517916580538}}
{"body": {"column":22,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var c1=0;\n    var c2=0;\n    var k=0;\n    var n = doors.length;\n    if(n == 1){\n        if(doors[0] == 1)\n            return {1;1};\n        else\n            return {0;0};\n    }\n    for(var i=0;i<n;i++){\n        if(doors[i]==1){\n            c1++;\n            c2++;\n            k++;\n            if(i>0){\n            \n                if(doors[i-1] == 1){\n                    if(k==2){\n                        c1--;\n                        k=0;\n                    }\n                }\n            }\n            \n        }\n\n    }\n    var c = {c1,c2};\n    return c;\n\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n}\n\n\n","offset":670,"fileType":"javascript","requestStartTime":1517916662984}}
{"body": {"column":28,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var c1=0;\n    var c2=0;\n    var k=0;\n    var n = doors.length;\n    if(n == 1){\n        var a = new Array(0;)\n        if(doors[0] == 1)\n            return {1;1};\n        else\n            return {0;0};\n    }\n    for(var i=0;i<n;i++){\n        if(doors[i]==1){\n            c1++;\n            c2++;\n            k++;\n            if(i>0){\n            \n                if(doors[i-1] == 1){\n                    if(k==2){\n                        c1--;\n                        k=0;\n                    }\n                }\n            }\n            \n        }\n\n    }\n    var c = {c1;c2};\n    return c;\n\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n}\n\n\n","offset":611,"fileType":"javascript","requestStartTime":1517916737202}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    // Write Your Code Here\n    \n    console.\n\n}\n\n\n","offset":610,"fileType":"javascript","requestStartTime":1517917038229}}
{"body": {"column":12,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    // Write Your Code Here\n    console.\n    console.log(a);\n\n}\n\n\n","offset":605,"fileType":"javascript","requestStartTime":1517917057480}}
{"body": {"column":12,"line":51,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    // Write Your Code Here\n    \n    for (int i = 0; i < n; i++) {\n        // Track number of elements swapped during a single array traversal\n        int numberOfSwaps = 0;\n\n        for (int j = 0; j < n - 1; j++) {\n            // Swap adjacent elements if they are in decreasing order\n            if (a[j] > a[j + 1]) {\n                // swap(a[j], a[j + 1]);\n                var mayor = a[j];\n                var minor = a[j+1];\n                a[j] = minor;\n                a[j+1] = mayor;\n                numberOfSwaps++;\n            }\n        }\n\n        // If no elements were swapped during a traversal, array is sorted\n        if (numberOfSwaps == 0) {\n            break;\n        }\n    }\n    \n    console.\n\n}\n\n\n","offset":1279,"fileType":"javascript","requestStartTime":1517917618606}}
{"body": {"column":12,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    // Write Your Code Here\n    \n    for (var i = 0; i < n; i++) {\n        // Track number of elements swapped during a single array traversal\n        var numberOfSwaps = 0;\n\n        for (var j = 0; j < n - 1; j++) {\n            // Swap adjacent elements if they are in decreasing order\n            if (a[j] > a[j + 1]) {\n                // swap(a[j], a[j + 1]);\n                var mayor = a[j];\n                var minor = a[j+1];\n                a[j] = minor;\n                a[j+1] = mayor;\n                numberOfSwaps++;\n            }\n        }\n\n        // If no elements were swapped during a traversal, array is sorted\n        if (numberOfSwaps == 0) {\n            break;\n        }\n    }\n    \n    console.log(a);\n    console.Array is sorted in 3 swaps.\nFirst Element: 1\nLast Element: 3\n\n}\n\n\n","offset":1299,"fileType":"javascript","requestStartTime":1517917736607}}
{"body": {"column":12,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    // Write Your Code Here\n    \n    for (var i = 0; i < n; i++) {\n        // Track number of elements swapped during a single array traversal\n        var numberOfSwaps = 0;\n\n        for (var j = 0; j < n - 1; j++) {\n            // Swap adjacent elements if they are in decreasing order\n            if (a[j] > a[j + 1]) {\n                // swap(a[j], a[j + 1]);\n                var mayor = a[j];\n                var minor = a[j+1];\n                a[j] = minor;\n                a[j+1] = mayor;\n                numberOfSwaps++;\n            }\n        }\n\n        // If no elements were swapped during a traversal, array is sorted\n        if (numberOfSwaps == 0) {\n            break;\n        }\n    }\n    \n    console.log('Array is sorted in ' + numberOfSwaps + ' swaps.');\n    console.\nFirst Element: 1\nLast Element: 3\n\n}\n\n\n","offset":1347,"fileType":"javascript","requestStartTime":1517917789847}}
{"body": {"column":39,"line":53,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    // Write Your Code Here\n    \n    for (var i = 0; i < n; i++) {\n        // Track number of elements swapped during a single array traversal\n        var numberOfSwaps = 0;\n\n        for (var j = 0; j < n - 1; j++) {\n            // Swap adjacent elements if they are in decreasing order\n            if (a[j] > a[j + 1]) {\n                // swap(a[j], a[j + 1]);\n                var mayor = a[j];\n                var minor = a[j+1];\n                a[j] = minor;\n                a[j+1] = mayor;\n                numberOfSwaps++;\n            }\n        }\n\n        // If no elements were swapped during a traversal, array is sorted\n        if (numberOfSwaps == 0) {\n            break;\n        }\n    }\n    \n    console.log('Array is sorted in ' + numberOfSwaps + ' swaps.');\n    console.log('First Element: ' + a[0]);\n    console.log('Last Element: ' + a[a.]);\n\n}\n\n\n","offset":1417,"fileType":"javascript","requestStartTime":1517917864637}}
{"body": {"column":21,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\n\nfunction getMovieTitles(substr) {\n    let currentPage = 1;\n    let titles = [];\n    \n    getRequest(substr);\n    \n    function getRequest(substr) {\n        https.get(`https://jsonmock.hackerrank.com/api/movies/search/?Title=${substr}&page=${currentPage}`, function (response) {\n            let body = '';\n            \n            response.on('data', function (chunk) {\n                body += chunk;\n            });\n            \n            let json;\n            \n            response.\n        });\n    }\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":859,"fileType":"javascript","requestStartTime":1517918313400}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517918345154}}
{"body": {"column":37,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\n\nfunction getMovieTitles(substr) {\n    let currentPage = 1;\n    let titles = [];\n    \n    getRequest(substr);\n    \n    function getRequest(substr) {\n        https.get(`https://jsonmock.hackerrank.com/api/movies/search/?Title=${substr}&page=${currentPage}`, function (response) {\n            let body = '';\n            \n            response.on('data', function (chunk) {\n                body += chunk;\n            });\n            \n            let json;\n            \n            response.on('end', function () {\n                json = JSON.parse(body);\n                \n                for(let i = 0; i < json.data.length; i++) {\n                    titles.push(json.)\n                }\n            });\n        });\n    }\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1038,"fileType":"javascript","requestStartTime":1517918374776}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":504,"fileType":"javascript","requestStartTime":1517918586450}}
{"body": {"column":7,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    console.log(n, ar);\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":523,"fileType":"javascript","requestStartTime":1517918623115}}
{"body": {"column":22,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    const alice = [a0, a1, a2];\n    const bob = [b0, b1, b2];\n    const score = {\n        alice: 0,\n        bob: 0\n    };\n    \n    function compare(.) {\n        \n    }\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":678,"fileType":"javascript","requestStartTime":1517918893445}}
{"body": {"column":23,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    const alice = [a0, a1, a2];\n    const bob = [b0, b1, b2];\n    const score = {\n        alice: 0,\n        bob: 0\n    };\n    \n    function compare(..) {\n        \n    }\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":679,"fileType":"javascript","requestStartTime":1517918893626}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    const alice = [a0, a1, a2];\n    const bob = [b0, b1, b2];\n    const score = {\n        alice: 0,\n        bob: 0\n    };\n    \n    function compare(...) {\n        \n    }\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":680,"fileType":"javascript","requestStartTime":1517918893792}}
{"body": {"column":6,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction isBalanced(s) {\n    let conf = {\n        '{': '}',\n        '(': ')',\n        '[': ']'\n    };\n    let stack = [];\n    s.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":587,"fileType":"javascript","requestStartTime":1517918991816}}
{"body": {"column":26,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction isBalanced(s) {\n    let conf = {\n        '{': '}',\n        '(': ')',\n        '[': ']'\n    };\n    let stack = [];\n    for( let i = 0, n = s.)\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":607,"fileType":"javascript","requestStartTime":1517919001604}}
{"body": {"column":17,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction isBalanced(s) {\n    let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = [\n        '}': 1,\n        ')': 1,\n        ']': 1\n    ];\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        if( open.)\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":713,"fileType":"javascript","requestStartTime":1517919108438}}
{"body": {"column":18,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction isBalanced(s) {\n    let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = [\n        '}': '{',\n        ')': '(',\n        ']': '['\n    ];\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        let c = s[i];\n        if( open.hasOwnProperty(c) )\n            stack.\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":779,"fileType":"javascript","requestStartTime":1517919141545}}
{"body": {"column":23,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction isBalanced(s) {\n    let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = [\n        '}': '{',\n        ')': '(',\n        ']': '['\n    ];\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        let c = s[i];\n        if( open.hasOwnProperty(c) )\n            stack.push(c);\n        else if( close.)\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":811,"fileType":"javascript","requestStartTime":1517919149717}}
{"body": {"column":31,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction checkBalance(s) {\n     let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = [\n        '}': '{',\n        ')': '(',\n        ']': '['\n    ];\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        let c = s[i];\n        if( open.hasOwnProperty(c) )\n            stack.push(c);\n        else if( close.hasOwnProperty(c) ) {\n            if( close[c] === s.)\n        }\n    }\n}\n\nfunction isBalanced(s) {\n    if( checkBalance(s) )\n        return 'YES';\n    else\n        return 'NO';\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":867,"fileType":"javascript","requestStartTime":1517919208952}}
{"body": {"column":41,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction checkBalance(s) {\n     let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = [\n        '}': '{',\n        ')': '(',\n        ']': '['\n    ];\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        let c = s[i];\n        if( open.hasOwnProperty(c) )\n            stack.push(c);\n        else if( close.hasOwnProperty(c) ) {\n            if( close[c] === stack[stack.])\n        }\n    }\n}\n\nfunction isBalanced(s) {\n    if( checkBalance(s) )\n        return 'YES';\n    else\n        return 'NO';\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":877,"fileType":"javascript","requestStartTime":1517919216047}}
{"body": {"column":22,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction checkBalance(s) {\n     let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = [\n        '}': '{',\n        ')': '(',\n        ']': '['\n    ];\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        let c = s[i];\n        if( open.hasOwnProperty(c) )\n            stack.push(c);\n        else if( close.hasOwnProperty(c) ) {\n            if( close[c] === stack[stack.length-1] )\n                stack.\n        }\n    }\n}\n\nfunction isBalanced(s) {\n    if( checkBalance(s) )\n        return 'YES';\n    else\n        return 'NO';\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":911,"fileType":"javascript","requestStartTime":1517919232710}}
{"body": {"column":14,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction checkBalance(s) {\n     let open = {\n        '{': 1,\n        '(': 1,\n        '[': 1\n    };\n    let close = {\n        '}': '{',\n        ')': '(',\n        ']': '['\n    };\n    let stack = [];\n    for( let i = 0, n = s.length; i < n; ++i ) {\n        let c = s[i];\n        if( open.hasOwnProperty(c) )\n            stack.push(c);\n        else if( close.hasOwnProperty(c) ) {\n            if( close[c] === stack[stack.length-1] )\n                stack.pop();\n            else\n                return false;\n        }\n    }\n    if( stack.)\n    return true;\n}\n\nfunction isBalanced(s) {\n    if( checkBalance(s) )\n        return 'YES';\n    else\n        return 'NO';\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var s = readLine();\n        var result = isBalanced(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":995,"fileType":"javascript","requestStartTime":1517919273677}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.\n}\n\n\n","offset":56,"fileType":"javascript","requestStartTime":1517919530681}}
{"body": {"column":19,"line":4,"wordToComplete":"li>'","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.map('<li>')\n}\n\n\n","offset":65,"fileType":"javascript","requestStartTime":1517919534655}}
{"body": {"column":22,"line":4,"wordToComplete":"li></>'","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.map('<li></>')\n}\n\n\n","offset":68,"fileType":"javascript","requestStartTime":1517919536900}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.map(() =>'<li>${}</li>')\n}\n\n\n","offset":65,"fileType":"javascript","requestStartTime":1517919551908}}
{"body": {"column":35,"line":4,"wordToComplete":"li><span>${","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.map((note) => `<li><span>${note}</li>`)\n}\n\n\n","offset":81,"fileType":"javascript","requestStartTime":1517919576435}}
{"body": {"column":49,"line":4,"wordToComplete":"span></li>`","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.map((note) => `<li><span>${note}</span></li>`)\n}\n\n\n","offset":95,"fileType":"javascript","requestStartTime":1517919581788}}
{"body": {"column":58,"line":4,"wordToComplete":"span> <button></li>`","code":"\nconst notes = [];\n\nfunction renderNotes() {\n    notes.map((note) => `<li><span>${note}</span> <button></li>`)\n}\n\n\n","offset":104,"fileType":"javascript","requestStartTime":1517919591366}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.)\n}\n\nfunction renderNotes() {\n    notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`)\n}\n\n\n","offset":65,"fileType":"javascript","requestStartTime":1517919685387}}
{"body": {"column":48,"line":4,"wordToComplete":"","code":"\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].}\"`))\n}\n\nfunction renderNotes() {\n    notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`)\n}\n\n\n","offset":98,"fileType":"javascript","requestStartTime":1517919716983}}
{"body": {"column":11,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n/*\n * Create the function factorial here\n */\n\nfunction factorial (n) {\n    if (n >)\n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    console.log(factorial(n));\n}\n","offset":505,"fileType":"javascript","requestStartTime":1517919724764}}
{"body": {"column":13,"line":5,"wordToComplete":"","code":"\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        noes.\n    }\n}\n\nfunction renderNotes() {\n    notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`)\n}\n\n\n","offset":136,"fileType":"javascript","requestStartTime":1517919743348}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.\n    }\n}\n\nfunction renderNotes() {\n    notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`)\n}\n\n\n","offset":137,"fileType":"javascript","requestStartTime":1517919745443}}
{"body": {"column":20,"line":2,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.()\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    \n}\n\n\n","offset":45,"fileType":"javascript","requestStartTime":1517919852174}}
{"body": {"column":19,"line":14,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.')\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    \n}\n\n\n","offset":276,"fileType":"javascript","requestStartTime":1517920036701}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.')\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    \n}\n\n\n","offset":309,"fileType":"javascript","requestStartTime":1517920052897}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517920096720}}
{"body": {"column":11,"line":24,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.\n    \n    \n}\n\n\n","offset":574,"fileType":"javascript","requestStartTime":1517920137806}}
{"body": {"column":33,"line":24,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.\n    \n    \n}\n\n\n","offset":596,"fileType":"javascript","requestStartTime":1517920148008}}
{"body": {"column":14,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    // Complete this function\n    return ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":533,"fileType":"javascript","requestStartTime":1517920166673}}
{"body": {"column":6,"line":27,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.\n\n\n","offset":615,"fileType":"javascript","requestStartTime":1517920165573}}
{"body": {"column":43,"line":27,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.addEventListener('submit', (event) =>)\n\n\n","offset":652,"fileType":"javascript","requestStartTime":1517920179860}}
{"body": {"column":10,"line":28,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.\n})\n\n\n","offset":665,"fileType":"javascript","requestStartTime":1517920190126}}
{"body": {"column":31,"line":32,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.addEventListener('submit', (event) => {\n    \n    notes.push($newNoteContent.)\n})\n\n\n","offset":743,"fileType":"javascript","requestStartTime":1517920248519}}
{"body": {"column":37,"line":32,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.addEventListener('submit', (event) => {\n    \n    notes.push($newNoteContent.value.)\n})\n\n\n","offset":749,"fileType":"javascript","requestStartTime":1517920250359}}
{"body": {"column":8,"line":8,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\nconsole.\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    \n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNoteContent.value.trim());\n    renderNotes();\n})\n\n\n","offset":203,"fileType":"javascript","requestStartTime":1517920339953}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\nconsole.log($notes, $form, $newNote);\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes.map((note, i) => `<li>\n        <span>${note}</span> \n        <button onclick=\"deleteNote(${i})\">del</button> \n        <button onclick=\"editNote(${i})\">edit</button>\n    </li>`);\n    console.\n    $notes.innerHtml = notesHtml.join('');\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n})\n\n\n","offset":660,"fileType":"javascript","requestStartTime":1517920385194}}
{"body": {"column":18,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    var p = [];\n     for(var a0 = 0; a0 < n; a0++){\n         p[a0] = 0;\n     }\n    for(var a0 = 0; a0 < m; a0++){\n        var a_temp = readLine().split(' ');\n        var a = parseInt(a_temp[0]);\n        var b = parseInt(a_temp[1]);\n        var k = parseInt(a_temp[2]);\n      \n        for(var rowid = a-1;rowid<=b-1;rowid++){\n            p[rowid] = p[rowid] +k;\n        }\n    }\n    p.sort(function(a, b){return a-b});\n    var max = p[p.]\n    for(var i=0;i<n;i++){\n        if(max<p[i]){\n            max = p[i];\n        }\n    }\n    console.log(max);\n\n}\n\n\n","offset":1018,"fileType":"javascript","requestStartTime":1517920418988}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\n  var button = document.createElement('button');\nbutton.id = 'btn';\nbutton.innerHTML = \"0\";\n\nbutton.onClick(function() {\n\n})\ndocument.\n\n","offset":136,"fileType":"javascript","requestStartTime":1517920481724}}
{"body": {"column":27,"line":31,"wordToComplete":"b>'","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    console.log($notes)\n    $notes.innerHtml = '<b>';\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n})\n\n\n","offset":742,"fileType":"javascript","requestStartTime":1517920560079}}
{"body": {"column":31,"line":31,"wordToComplete":"b></b>'","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    console.log($notes)\n    $notes.innerHtml = '<b></b>';\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n})\n\n\n","offset":746,"fileType":"javascript","requestStartTime":1517920561889}}
{"body": {"column":10,"line":12,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction noteAdd(note) {\n    notes.\n}\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n});\n\n\n","offset":250,"fileType":"javascript","requestStartTime":1517920668405}}
{"body": {"column":10,"line":36,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n    event.\n});\n\n\n","offset":842,"fileType":"javascript","requestStartTime":1517920687370}}
{"body": {"column":4,"line":2,"wordToComplete":"","code":"\nvar btn = document.getElementById('btn');\nbtn.\n\n","offset":48,"fileType":"javascript","requestStartTime":1517920699659}}
{"body": {"column":7,"line":40,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[i].substring(0, 20)}\"?`)) {\n        notes.splice(i, 1);\n        renderNotes();\n    }\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n    event.preventDefault();\n});\n\n\nwindow.\n\n","offset":873,"fileType":"javascript","requestStartTime":1517920721569}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\nvar btn = document.getElementById('btn');\nbtn.onclick = function()\n{\n    btn.\n}\n\n","offset":79,"fileType":"javascript","requestStartTime":1517920738880}}
{"body": {"column":6,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    a.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":528,"fileType":"javascript","requestStartTime":1517920779358}}
{"body": {"column":23,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    var t = a.split('\\n');\n    var i = parseInt(t.);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":572,"fileType":"javascript","requestStartTime":1517920845622}}
{"body": {"column":33,"line":4,"wordToComplete":"","code":"\nvar btn = document.getElementById('btn');\nbtn.onclick = function()\n{\n    btn.innerHTML = parseInt(btn.;\n}\n\n","offset":104,"fileType":"javascript","requestStartTime":1517920859768}}
{"body": {"column":28,"line":19,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":440,"fileType":"javascript","requestStartTime":1517920864280}}
{"body": {"column":68,"line":19,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes.)\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":480,"fileType":"javascript","requestStartTime":1517920885404}}
{"body": {"column":28,"line":20,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNote = $('[name=\"addNoteContent\"]')[0];\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index]);\n    notes[index] = newValue.\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push($newNote.value.trim());\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":517,"fileType":"javascript","requestStartTime":1517920907329}}
{"body": {"column":8,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\nconsole.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":530,"fileType":"javascript","requestStartTime":1517921080365}}
{"body": {"column":29,"line":44,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNoteText = $('[name=\"addNoteText\"]')[0];\nconst $newNoteColor = $('[name=\"addNoteColor\"]')[0];\n\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index]);\n    notes[index] = newValue.trim();\n    renderNotes();\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push({\n        text: $newNoteText.value.trim()),\n        color: $newNoteColor.\n    };\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":1087,"fileType":"javascript","requestStartTime":1517921304924}}
{"body": {"column":29,"line":32,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNoteText = $('[name=\"addNoteText\"]')[0];\nconst $newNoteColor = $('[name=\"addNoteColor\"]')[0];\n\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index]);\n    notes[index] = newValue.trim();\n    renderNotes();\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note.}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push({\n        text: $newNoteText.value.trim()),\n        color: $newNoteColor.value,\n    };\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":731,"fileType":"javascript","requestStartTime":1517921312122}}
{"body": {"column":75,"line":21,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNoteText = $('[name=\"addNoteText\"]')[0];\nconst $newNoteColor = $('[name=\"addNoteColor\"]')[0];\n\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index].);\n    notes[index] = newValue.trim();\n    renderNotes();\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note.text}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push({\n        text: $newNoteText.value.trim()),\n        color: $newNoteColor.value,\n    };\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":542,"fileType":"javascript","requestStartTime":1517921317110}}
{"body": {"column":17,"line":22,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNoteText = $('[name=\"addNoteText\"]')[0];\nconst $newNoteColor = $('[name=\"addNoteColor\"]')[0];\n\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index].text);\n    notes[index]. = newValue.trim();\n    renderNotes();\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note.text}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push({\n        text: $newNoteText.value.trim()),\n        color: $newNoteColor.value,\n    };\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":566,"fileType":"javascript","requestStartTime":1517921321770}}
{"body": {"column":52,"line":14,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNoteText = $('[name=\"addNoteText\"]')[0];\nconst $newNoteColor = $('[name=\"addNoteColor\"]')[0];\n\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index]..substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index].text);\n    notes[index].text = newValue.trim();\n    renderNotes();\n}\n\n\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li>\n                <span>${note.text}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push({\n        text: $newNoteText.value.trim()),\n        color: $newNoteColor.value,\n    };\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":351,"fileType":"javascript","requestStartTime":1517921329750}}
{"body": {"column":30,"line":29,"wordToComplete":"","code":"\nfunction $(selector) {\n    return document.querySelectorAll(selector);\n}\n\nconst $notes = $('.js-notes')[0];\nconst $form = $('.js-addForm')[0];\nconst $newNoteText = $('[name=\"addNoteText\"]')[0];\nconst $newNoteColor = $('[name=\"addNoteColor\"]')[0];\n\n\nconst notes = [];\n\nfunction deleteNote(index) {\n    if (window.confirm(`Delete note \"${notes[index].text.substring(0, 20)}\"?`)) {\n        notes.splice(index, 1);\n        renderNotes();\n    }\n}\n\nfunction editNote(index) {\n    const newValue = window.prompt('Enter new note content:', notes[index].text);\n    notes[index].text = newValue.trim();\n    renderNotes();\n}\n\nfunction renderNotes() {\n    const notesHtml = notes\n        .map((note, i) => `\n            <li class=\"${note.}\">\n                <span>${note.text}</span> \n                <button onclick=\"deleteNote(${i})\">del</button> \n                <button onclick=\"editNote(${i})\">edit</button>\n            </li>`\n        )\n        .join('');\n    $notes.innerHTML = notesHtml;\n}\n\n$form.addEventListener('submit', (event) => {\n    notes.push({\n        text: $newNoteText.value.trim()),\n        color: $newNoteColor.value,\n    };\n    renderNotes();\n    event.preventDefault();\n});\n\n","offset":728,"fileType":"javascript","requestStartTime":1517921508273}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1517921921065}}
{"body": {"column":30,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction isOdd(num) {\n    return num % 2 === 1;\n}\n\nfunction isBeatiful(arr, m) {\n    const count = 0;\n    for (let i = 0, len = arr.)\n    return arr.filter(isOdd).length === m;\n}\n\n/*\n * Complete the function below.\n */\nfunction beautifulSubarrays(a, m) {\n    let beatifulsAmount = 0;\n    for(let i = 0; i < a.length; i++) {\n        for (let j = i + m - 1; j < a.length; j++) {            \n            const subArray = a.slice(i, j + 1);\n            if (subArray.length !== 0 && isBeatiful(subArray, m)) {\n                beatifulsAmount++;\n            }\n        }\n    }\n    \n    return beatifulsAmount;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = beautifulSubarrays(a, m);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":352,"fileType":"javascript","requestStartTime":1517921931364}}
{"body": {"column":10,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n\n$(\"#one\").\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":905,"fileType":"javascript","requestStartTime":1517922068064}}
{"body": {"column":37,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction isOdd(num) {\n    return num % 2 === 1;\n}\n\nfunction isBeatiful(arr, m) {\n    return arr.filter(isOdd).length === m;\n}\n\n/*\n * Complete the function below.\n */\nfunction beautifulSubarrays(a, m) {\n    let beatifulsAmount = 0;\n    for(let i = 0; i < a.length; i++) {\n        for (let j = i + m; j < Math.a.length; j++) {            \n            const subArray = a.slice(i, j + 1);\n            if (subArray.length !== 0 && isBeatiful(subArray, m)) {\n                beatifulsAmount++;\n            }\n        }\n    }\n    \n    return beatifulsAmount;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = beautifulSubarrays(a, m);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":528,"fileType":"javascript","requestStartTime":1517922071831}}
{"body": {"column":11,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n\n(\"button\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":884,"fileType":"javascript","requestStartTime":1517922132421}}
{"body": {"column":13,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n\n(\"button\").click(function) {\n    $(\"div\").\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":915,"fileType":"javascript","requestStartTime":1517922160264}}
{"body": {"column":58,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction isOdd(num) {\n    return num % 2 === 1;\n}\n\nfunction isBeatiful(arr, m) {\n    return arr.filter(isOdd).length === m;\n}\n\n/*\n * Complete the function below.\n */\nfunction beautifulSubarrays(a, m) {\n    let beatifulsAmount = 0;\n    for(let i = 0; i < a.length; i++) {\n        for (let j = i + m; j < a.length; j++) {            \n            const subArray = a.slice(i, j + 1);\n            if (subArray.length !== 0 && subArray.length > && isBeatiful(subArray, m)) {\n                beatifulsAmount++;\n            }\n        }\n    }\n    \n    return beatifulsAmount;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = beautifulSubarrays(a, m);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":658,"fileType":"javascript","requestStartTime":1517922158823}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1517922168552}}
{"body": {"column":19,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction isOdd(num) {\n    return num % 2 === 1;\n}\n\nfunction isBeatiful(arr, m) {\n    return arr.filter(isOdd).length === m;\n}\n\n/*\n * Complete the function below.\n */\nfunction beautifulSubarrays(a, m) {\n    let beatifulsAmount = 0;\n    for(let i = 0; i < a.length; i++) {\n        for (let j = i + m; j < a.length; j++) {         \n            if (m > j - i) {\n                continue;\n            }\n            const subArray = a.slice(i, j + 1);\n            if (subArray.length !== 0 && isBeatiful(subArray, m)) {\n                beatifulsAmount++;\n            }\n        }\n    }\n    \n    return beatifulsAmount;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = beautifulSubarrays(a, m);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":568,"fileType":"javascript","requestStartTime":1517922230947}}
{"body": {"column":9,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1071,"fileType":"javascript","requestStartTime":1517922273444}}
{"body": {"column":13,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n\n$(\"div\").click(function() {\n    $(\"div\").\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1103,"fileType":"javascript","requestStartTime":1517922304453}}
{"body": {"column":14,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n\n$(\"div\").click(function() {\n    $(\"div\")..\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1104,"fileType":"javascript","requestStartTime":1517922304545}}
{"body": {"column":4,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$().\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":898,"fileType":"javascript","requestStartTime":1517922339806}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1517922350809}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1517922376019}}
{"body": {"column":8,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$().click(function(){\n    $().\n});\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":924,"fileType":"javascript","requestStartTime":1517922383683}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction isOdd(num) {\n    return num % 2 === 1;\n}\n\nfunction isBeatiful(arr, m) {\n    if (arr.)\n    return arr.filter(isOdd).length === m;\n}\n\n/*\n * Complete the function below.\n */\nfunction beautifulSubarrays(a, m) {\n    let beatifulsAmount = 0;\n    for(let i = 0; i < a.length; i++) {\n        for (let j = i + m - 1; j < a.length; j++) {         \n            const subArray = a.slice(i, j + 1);\n            if (subArray.length && isBeatiful(subArray, m)) {\n                beatifulsAmount++;\n            }\n        }\n    }\n    \n    return beatifulsAmount;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = beautifulSubarrays(a, m);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":313,"fileType":"javascript","requestStartTime":1517922416352}}
{"body": {"column":13,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").click(function(){\n    (\"#one\").\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":935,"fileType":"javascript","requestStartTime":1517922418416}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1517922442230}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1517922507652}}
{"body": {"column":14,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"div\").click(function(){\n    $(\"#one\").\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":935,"fileType":"javascript","requestStartTime":1517922603647}}
{"body": {"column":14,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").click(function(){\n    $(\"#one\").\n}\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":936,"fileType":"javascript","requestStartTime":1517922615556}}
{"body": {"column":13,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"#button\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":885,"fileType":"javascript","requestStartTime":1517922629315}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    var t = [0, 0], i = 2;\n    [ [ 11, 2, 4 ], [ 4, 5, 6 ], [ 10, 8, -12 ] ].forEach((a,b) => {\n        t[0] += a[b]; \n        t[1] += a[i];\n        i--;\n    })\n    return Math.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":699,"fileType":"javascript","requestStartTime":1517922648113}}
{"body": {"column":14,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"#button\").click(function(){\n    $(\"#div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":917,"fileType":"javascript","requestStartTime":1517922687916}}
{"body": {"column":4,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$().\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1065,"fileType":"javascript","requestStartTime":1517922784917}}
{"body": {"column":8,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$().click(function(){\n    $().\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1091,"fileType":"javascript","requestStartTime":1517922804366}}
{"body": {"column":25,"line":44,"wordToComplete":"","code":"\nlet res = document.getElementById(\"res\");\nfunction checkLast(){\n    if(res.innerHTML.endsWith('+') || res.innerHTML.endsWith('-') || res.innerHTML.endsWith('*') || res.innerHTML.endsWith('/')){\n      return true;\n    }\n}\n\nfunction clickZero() {\n    res.innerHTML +='0';\n}\n  \nfunction clickOne() {\n    res.innerHTML +='1';\n}\n  function clickSum() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +='+';\n       }\n  }  \n  \n  function clickSub() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +='-';\n       }\n  }\n\n  function clickMul() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +=\"*\";\n       }\n  }\n\n  function clickDiv() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +=\"/\";\n      }\n  }\n function clickClr() {\n    res.innerHTML = '';\n  }\n function clickEql() {\n    val a,b;\n    val i = 0;\n    val eq=res.innerHTML. \n    while()\n    res.innerHTML = '';\n  }\n\n","offset":919,"fileType":"javascript","requestStartTime":1517922849063}}
{"body": {"column":26,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    var t = [0, 0], i = a.;\n    a.forEach((a,b) => {\n        t[0] += a[b]; \n        t[1] += a[i];\n        i--;\n    })\n    return Math.abs(t[0] - t[1]);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":548,"fileType":"javascript","requestStartTime":1517922852324}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"body\").\n$(\"#one\").append(\"World\");\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1517922926296}}
{"body": {"column":7,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(div).\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":879,"fileType":"javascript","requestStartTime":1517923071667}}
{"body": {"column":11,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(button).click(function(){\n    $(div).hide()\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":911,"fileType":"javascript","requestStartTime":1517923117210}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":527,"fileType":"javascript","requestStartTime":1517923123401}}
{"body": {"column":8,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    p = 0, n = 0, z = 0;\n    arr.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":548,"fileType":"javascript","requestStartTime":1517923249346}}
{"body": {"column":9,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1070,"fileType":"javascript","requestStartTime":1517923299700}}
{"body": {"column":13,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"div\").click(function(){\n    $(\"div\").\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1101,"fileType":"javascript","requestStartTime":1517923320291}}
{"body": {"column":10,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    p = 0, n = 0, z = 0;\n    arr.forEach(a => {\n        if (a === 0) z++;\n        a.\n    });\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":599,"fileType":"javascript","requestStartTime":1517923400059}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    p = 0, n = 0, z = 0;\n    arr.forEach(a => {\n        a>0? p++ : a==0 ? z++ : n++;\n    });\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":620,"fileType":"javascript","requestStartTime":1517923489907}}
{"body": {"column":18,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    console.log(doors)\n    var toOpen = 0;\n    var total = 0;\n    for (var i = 0; i < doors.length; i++){\n        if (doors[i]) {toOpen++;i++} \n    }\n    total = doors.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":698,"fileType":"javascript","requestStartTime":1517923599320}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var l = arr.p = 0, n = 0, z = 0;\n    arr.forEach(a => {\n        a>0? p++ : a==0 ? z++ : n++;\n    });\n    console.log(p,n,z)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":531,"fileType":"javascript","requestStartTime":1517923552693}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"\nlet res = document.getElementById(\"res\");\n\nfunction checkLast(){\n    if(res.innerHTML.endsWith('+') || res.innerHTML.endsWith('-') || res.innerHTML.endsWith('*') || res.innerHTML.endsWith('/')){\n      return true;\n    }\n}\n\nfunction clickZero() {\n    res.innerHTML +='0';\n}\n  \nfunction clickOne() {\n    res.innerHTML +='1';\n}\n  function clickSum() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +='+';\n       }\n  }  \n  \n  function clickSub() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +='-';\n       }\n  }\n\n  function clickMul() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +=\"*\";\n       }\n  }\n\n  function clickDiv() {\n    if(res.innerHTML.length!=0 && !checkLast()){\n        res.innerHTML +=\"/\";\n      }\n  }\n function clickClr() {\n    res.innerHTML = '';\n  }\n function clickEql() {\n    var a='',b='';\n    var i = 0;\n    var eq=res.value; \n    var req = eq.toString();\n    console.\n    res.innerHTML = b;\n  }\n\n","offset":965,"fileType":"javascript","requestStartTime":1517923757559}}
{"body": {"column":8,"line":11,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon()\n{\n    \n}\n\nPolygon.\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":250,"fileType":"javascript","requestStartTime":1517924007635}}
{"body": {"column":18,"line":11,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon()\n{\n    \n}\n\nPolygon.prototype.\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":260,"fileType":"javascript","requestStartTime":1517924012674}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    \n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":248,"fileType":"javascript","requestStartTime":1517924201540}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    \n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":262,"fileType":"javascript","requestStartTime":1517924282114}}
{"body": {"column":22,"line":13,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.slice();\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    for(let i = sides.)\n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":359,"fileType":"javascript","requestStartTime":1517924307570}}
{"body": {"column":26,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following withtout using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    try {\n        if (Number.isNaN(S)) {\n            err = console.\n        }\n            error: console.log(S);\n    }\n    catch (err) {\n        console.log('Bad String');\n    }\n}\n\n","offset":1025,"fileType":"javascript","requestStartTime":1517924427129}}
{"body": {"column":21,"line":13,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.slice();\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    for(let i = this.sides.)\n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":358,"fileType":"javascript","requestStartTime":1517924327907}}
{"body": {"column":28,"line":13,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.slice();\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    for(let i = 0; i < this.)\n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":365,"fileType":"javascript","requestStartTime":1517924339586}}
{"body": {"column":34,"line":13,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.slice();\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    for(let i = 0; i < this.sides.)\n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":371,"fileType":"javascript","requestStartTime":1517924340626}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    console.\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1517924354285}}
{"body": {"column":13,"line":14,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.slice();\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    for(let i = 0; i < this.sides.length-1;i++){\n        this.\n    }\n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":399,"fileType":"javascript","requestStartTime":1517924356450}}
{"body": {"column":22,"line":14,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\nfunction Polygon(sides)\n{\n    this.sides = sides.slice();\n}\n\nPolygon.prototype.perimeter() = function(){\n    let perim = 0;\n    for(let i = 0; i < this.sides.length-1;i++){\n        perim += this.\n    }\n    return perim;\n}\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":408,"fileType":"javascript","requestStartTime":1517924364515}}
{"body": {"column":12,"line":49,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following withtout using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    // try {\n    //     if Number.isNaN(S)? error: console.log(S);\n    // }\n    // catch (err) {\n    //     console.log('Bad String');\n    // }\n    \n    console.\n}\n\n","offset":1119,"fileType":"javascript","requestStartTime":1517924663375}}
{"body": {"column":15,"line":49,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following withtout using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    // try {\n    //     if Number.isNaN(S)? error: console.log(S);\n    // }\n    // catch (err) {\n    //     console.log('Bad String');\n    // }\n    \n    if (Number.isNaN(S)){\n        console.log(\"ok\");\n    }\n}\n\n","offset":1122,"fileType":"javascript","requestStartTime":1517924909043}}
{"body": {"column":9,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":450,"fileType":"javascript","requestStartTime":1517926071275}}
{"body": {"column":12,"line":39,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    console.\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1249,"fileType":"javascript","requestStartTime":1517925973209}}
{"body": {"column":9,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.queue = [];\n    this.\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":471,"fileType":"javascript","requestStartTime":1517926081555}}
{"body": {"column":45,"line":39,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    console.log(firstInteger +secondInteger.,);\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1282,"fileType":"javascript","requestStartTime":1517925996689}}
{"body": {"column":44,"line":39,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    console.log(firstInteger +secondInteger. );\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1281,"fileType":"javascript","requestStartTime":1517926002015}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.queue = [];\n    this.pushCharacter = function(a) {\n        push.\n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":514,"fileType":"javascript","requestStartTime":1517926103262}}
{"body": {"column":22,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.queue = [];\n    this.pushCharacter = function(a) {\n        pushCharacter.\n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":523,"fileType":"javascript","requestStartTime":1517926107874}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.queue = [];\n    this.pushCharacter = function(a) {\n        this.\n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":514,"fileType":"javascript","requestStartTime":1517926114262}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.queue = [];\n    this.pushCharacter = function(a) {\n        this.stack.\n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":520,"fileType":"javascript","requestStartTime":1517926116509}}
{"body": {"column":19,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    let copy = [...doors];\n    function sum(a, b){ return a + b}\n    let maxUnlock = doors.reduce(sum);\n    for (let i = 0; i < doors.length; i++){\n        if (doors[i] == 1 && doors[i+1]){\n            if (doors[i+1]){\n                doors[i+1] = 0\n            }\n        }\n    }\n    console.log(\n    copy.reverse().\n    );\n\n    return [doors.reduce(sum), maxUnlock] ;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":816,"fileType":"javascript","requestStartTime":1517926065236}}
{"body": {"column":14,"line":39,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n    _input = _input.split(new RegExp('[ \\n]+'));\n    main();    \n});\nfunction read() { return _input[_index++]; }\n\n/**** Ignore above this line. ****/\n\nclass Person {\n    constructor(firstName, lastName, identification) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.idNumber = identification;\n    }\n    \n    printPerson() {\n        console.log(\n            \"Name: \" + this.lastName + \", \" + this.firstName \n            + \"\\nID: \" + this.idNumber\n        )\n    }\n}\nclass Student extends Person {\n    /*\t\n    *   Class Constructor\n    *   \n    *   @param firstName - A string denoting the Person's first name.\n    *   @param lastName - A string denoting the Person's last name.\n    *   @param id - An integer denoting the Person's ID number.\n    *   @param scores - An array of integers denoting the Person's test scores.\n    */\n    // Write your constructor here\n     constructor(firstName, lastName, id, scores){\n         super(firstName, lastName, id);\n         this.\n     }\n    /*\t\n    *   Method Name: calculate\n    *   @return A character denoting the grade.\n    */\n    // Write your method here\n    \n}\nfunction main() {\n    let firstName = read()\n    let lastName = read()\n    let id = +read()\n    let numScores = +read()\n    let testScores = new Array(numScores)\n    \n    for (var i = 0; i < numScores; i++) {\n        testScores[i] = +read()  \n    }\n\n    let s = new Student(firstName, lastName, id, testScores)\n    s.printPerson()\n    s.calculate()\n    console.log('Grade: ' + s.calculate())\n}\n\n","offset":1145,"fileType":"javascript","requestStartTime":1517926225288}}
{"body": {"column":22,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction rightTriangle(rows) {\n//first row will be # in * \n    var arr = [];\n    for (var i = 0; i <= rows; i++){\n        arr.push('*').;\n    }\nreturn arr; \n} \n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = rightTriangle(_rows);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":396,"fileType":"javascript","requestStartTime":1517926426595}}
{"body": {"column":25,"line":15,"wordToComplete":"varr array = fractions.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\n/*function ReduceFraction(fractions) {\n  varr array = fractions.\n\n\n}*/\nfunction ReduceFraction(numerator,denominator){\n  var gcd = function gcd(a,b){\n    return b ? gcd(b, a%b) : a;\n  };\n  gcd = gcd(numerator,denominator);\n  return [numerator/gcd, denominator/gcd];\n}\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _fractions_size = 0;\n    _fractions_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _fractions = [];\n    var _fractions_item;\n    for(var _fractions_i = 0; _fractions_i < _fractions_size; _fractions_i++) {\n        var _fractions_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _fractions.push(_fractions_item);\n    }\n    \n    res = ReduceFraction(_fractions);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":324,"fileType":"javascript","requestStartTime":1517926781304}}
{"body": {"column":17,"line":22,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nconst sum(a, b)=> a + b}\n\nfunction filterMagicClose(acc, door, idx, pool){\n    if(door === 1 && acc[acc.length - 1] === 1) {\n        acc.push(0); \n        return acc\n    }\n    acc.push(door);\n    return acc;\n}\nfunction revisedRussianRoulette(doors) {\n    \n    return [doors.reduceRight(filterMagicClose, []).reduce(sum), doors.reduce(sum)] ;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":475,"fileType":"javascript","requestStartTime":1517926978257}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    thi.stack = [];\n    var queue = [];\n    \n    var pushCharacter = function(c) {\n        \n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":449,"fileType":"javascript","requestStartTime":1517927286517}}
{"body": {"column":9,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.stack = [];\n    var queue = [];\n    \n    var pushCharacter = function(c) {\n        \n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":450,"fileType":"javascript","requestStartTime":1517927288931}}
{"body": {"column":9,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.stack = [];\n    this.queue = [];\n    \n    var pushCharacter = function(c) {\n        \n    }\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":471,"fileType":"javascript","requestStartTime":1517927293803}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":50,"fileType":"javascript","requestStartTime":1517927371543}}
{"body": {"column":30,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":152,"fileType":"javascript","requestStartTime":1517927435404}}
{"body": {"column":22,"line":12,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.\n                res += s;\n                break;\n            case 2:\n                break;\n            case 3:\n                break;\n            case 4:\n                break;\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":273,"fileType":"javascript","requestStartTime":1517927533116}}
{"body": {"column":20,"line":16,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                res.\n                break;\n            case 3:\n                break;\n            case 4:\n                break;\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":373,"fileType":"javascript","requestStartTime":1517927547038}}
{"body": {"column":33,"line":16,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                res.length = res.\n                break;\n            case 3:\n                break;\n            case 4:\n                break;\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":386,"fileType":"javascript","requestStartTime":1517927550192}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.\n                res.length = res.length-s;\n                break;\n            case 3:\n                break;\n            case 4:\n                break;\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":375,"fileType":"javascript","requestStartTime":1517927560723}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction bestAverageGrade(scores) {\n    names = [\"\"];\n    \n    for(i = 0; i < scores.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _scores_rows = 0;\n    var _scores_cols = 0;\n    var _scores_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _scores_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _scores = Array(_scores_rows);\n    for(var _scores_i=0; _scores_i<_scores_rows; _scores_i++) {\n      _scores[_scores_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n    }\n    \n    res = bestAverageGrade(_scores);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":345,"fileType":"javascript","requestStartTime":1517923968812}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res.length = res.length-s;\n                break;\n            case 3:\n                console.\n                break;\n            case 4:\n                break;\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":496,"fileType":"javascript","requestStartTime":1517927573165}}
{"body": {"column":28,"line":23,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res.length = res.length-s;\n                break;\n            case 3:\n                console.log(res, s);\n                break;\n            case 4:\n                res = stack.\n                break;\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":580,"fileType":"javascript","requestStartTime":1517927584487}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res.length = res.length-s;\n                break;\n            case 3:\n                console.log(res[s]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":636,"fileType":"javascript","requestStartTime":1517927612390}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var semiPerimeter = (a+b+c)/2;\n    \n    var size = Math.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":354,"fileType":"javascript","requestStartTime":1517927614615}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res.length = res.length-s;\n                console.\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":453,"fileType":"javascript","requestStartTime":1517927658563}}
{"body": {"column":32,"line":18,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res.length = res.length-s;\n                console.log(res.)\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":461,"fileType":"javascript","requestStartTime":1517927660540}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                console.\n                res.length = res.length-s;\n                console.log(res.length);\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":410,"fileType":"javascript","requestStartTime":1517927663696}}
{"body": {"column":32,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                console.log(res.)\n                res.length = res.length-s;\n                console.log(res.length);\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":418,"fileType":"javascript","requestStartTime":1517927664853}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res.\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":406,"fileType":"javascript","requestStartTime":1517927703078}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":412,"fileType":"javascript","requestStartTime":1517927704484}}
{"body": {"column":18,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction bestAverageGrade(scores) {\n    names = [\"\"];\n    \n    for(i = 0; i < scores.length; i++) {\n        if((names.indexOf(i[0]) > -1)) {\n            names.\n        }\n    }\n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _scores_rows = 0;\n    var _scores_cols = 0;\n    var _scores_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _scores_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _scores = Array(_scores_rows);\n    for(var _scores_i=0; _scores_i<_scores_rows; _scores_i++) {\n      _scores[_scores_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n    }\n    \n    res = bestAverageGrade(_scores);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":419,"fileType":"javascript","requestStartTime":1517924104088}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var S = (a+b+c)/2;\n    var value = S*(S-a)*(S-b)*(S-c);\n    \n    var size = Math.sqrt(value);\n    \n    console.\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":409,"fileType":"javascript","requestStartTime":1517927717240}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.slice(-s);\n                console.\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":447,"fileType":"javascript","requestStartTime":1517927720301}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        console.\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.slice(-s);\n                console.log(res);\n                break;\n            case 3:\n                console.log(res[s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":227,"fileType":"javascript","requestStartTime":1517927733651}}
{"body": {"column":9,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":450,"fileType":"javascript","requestStartTime":1517927880264}}
{"body": {"column":9,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Solution(){\n  //Write your code here\n    this.stack = [];\n    this.\n}\nfunction main(){\n    // read the string s\n    var s=readLine();\n    var len=s.length;\n    // create the Solution class object p\n    var obj=new Solution();\n    //push/enqueue all the characters of string s to stack\n    for(var i=0;i<len;i++){\n        obj.pushCharacter(s.charAt(i));\n        obj.enqueueCharacter(s.charAt(i));\n    }\n  \n    var isPalindrome=true;\n    /*\n    pop the top character from stack\n    dequeue the first character from queue\n    compare both the characters*/\n\n    for(var i=0;i<len/2;i++){\n        if(obj.popCharacter()!=obj.dequeueCharacter()){\n            isPalindrome=false;\n          \tbreak;\n        }\n    }\n    //finally print whether string s is palindrome or not\n\n    if(isPalindrome)\n        console.log(\"The word, \"+s+\", is a palindrome.\");    \n    else\n        console.log(\"The word, \"+s+\", is not a palindrome.\");\n}\n","offset":471,"fileType":"javascript","requestStartTime":1517927892539}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\nlet stack = [];\nlet res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.slice(-(+s));\n                console.log(res);\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":310,"fileType":"javascript","requestStartTime":1517927800106}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\nlet stack = [];\nlet res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.concat(s.);\n                break;\n            case 2:\n                stack.push(res);\n                res = res.slice(-(+s));\n                console.log(res);\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":319,"fileType":"javascript","requestStartTime":1517927802443}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nlet res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.concat(s.split(''));\n                break;\n            case 2:\n                stack.push(res);\n                res.\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":427,"fileType":"javascript","requestStartTime":1517927807909}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nlet stack = [];\nlet res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.concat(s.split(''));\n                break;\n            case 2:\n                stack.push(res);\n                res.length -= +s;\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n        console.\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":677,"fileType":"javascript","requestStartTime":1517927834982}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nlet res = '';\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.;\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":412,"fileType":"javascript","requestStartTime":1517927982317}}
{"body": {"column":7,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"#\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":791,"fileType":"javascript","requestStartTime":1517928035802}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    \n    for (var i =0; i<a.) {\n        \n    }\n    var S = (a+b+c)/2;\n    var value = S*(S-a)*(S-b)*(S-c);\n    \n    var size = Math.sqrt(value);\n   \n    if(size>0) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":322,"fileType":"javascript","requestStartTime":1517928056169}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var lenght = a.\n    for (var i =0; i<) {\n        \n    }\n    var S = (a+b+c)/2;\n    var value = S*(S-a)*(S-b)*(S-c);\n    \n    var size = Math.sqrt(value);\n   \n    if(size>0) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":313,"fileType":"javascript","requestStartTime":1517928068749}}
{"body": {"column":31,"line":1,"wordToComplete":"n]{3}\\./g","code":"\nvar Regex_Pattern = /[^\\n]{3}\\./g; //Do not delete '/' and 'g'. Replace __________ with your regex. \n\nfunction processData(Test_String) {\n    var matches = Test_String.match(Regex_Pattern);\n    var match = matches != null && matches.length > 0;\n    console.log(match);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input.trim();\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":33,"fileType":"javascript","requestStartTime":1517928113754}}
{"body": {"column":31,"line":12,"wordToComplete":"","code":"\nlet stack = [];\nvar res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res.);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.substr(-3);\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":282,"fileType":"javascript","requestStartTime":1517928120782}}
{"body": {"column":25,"line":13,"wordToComplete":"","code":"\nlet stack = [];\nvar res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s.;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.substr(-3);\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":309,"fileType":"javascript","requestStartTime":1517928123917}}
{"body": {"column":26,"line":13,"wordToComplete":"","code":"\nlet stack = [];\nvar res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.;\n                break;\n            case 2:\n                stack.push(res);\n                res = res.substr(-3);\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":310,"fileType":"javascript","requestStartTime":1517928128283}}
{"body": {"column":35,"line":13,"wordToComplete":"","code":"\nlet stack = [];\nvar res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.concat(s.);\n                break;\n            case 2:\n                stack.push(res);\n                res = res.substr(-3);\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":319,"fileType":"javascript","requestStartTime":1517928130897}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nlet stack = [];\nvar res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.concat(s.split(''));\n                break;\n            case 2:\n                stack.push(res);\n                res.\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":427,"fileType":"javascript","requestStartTime":1517928138430}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nlet stack = [];\nvar res = [];\n\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res = res.concat(s.split(''));\n                break;\n            case 2:\n                stack.push(res);\n                res.length -= 3;\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n        console.\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":676,"fileType":"javascript","requestStartTime":1517928144896}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var lenght = a.length;\n    for (var i =0; i<lenght; i++) {\n        var S = (a+b+c)/2;\n        var value = S*(S-a)*(S-b)*(S-c);\n\n        var size = Math.sqrt(value);\n\n        if(size>0) {\n            \n        } else {\n            res.\n        }\n        return \"Yes\"\n        return \"No\";\n    } \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":531,"fileType":"javascript","requestStartTime":1517928149846}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var lenght = a.length;\n    var res = [];\n    \n    for (var i =0; i<lenght; i++) {\n        var S = (a+b+c)/2;\n        var value = S*(S-a)*(S-b)*(S-c);\n\n        var size = Math.sqrt(value);\n\n        if(size>0) {\n            \n        } else {\n            res.\n        }\n        return \"Yes\"\n        return \"No\";\n    } \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":554,"fileType":"javascript","requestStartTime":1517928167273}}
{"body": {"column":10,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"#h1\").click(function)\n$(\"text\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":819,"fileType":"javascript","requestStartTime":1517928245880}}
{"body": {"column":8,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"h1\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":792,"fileType":"javascript","requestStartTime":1517928295107}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    let n = +input[0];\n    var res = '';\n    var stack = [];\n    for( let i = 1; i <= n; ++i ) {\n        let [t, s] = input[i].split(' ');\n        t = +t;\n        switch(t) {\n            case 1:\n                stack.push(res);\n                res += s;\n                break;\n            case 2:\n                stack.push(res);\n                var foo = res.substr(-3);\n                console.\n                break;\n            case 3:\n                console.log(res[+s-1]);\n                break;\n            case 4:\n                res = stack.pop();\n                break;\n        }\n        console.log(res);\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":459,"fileType":"javascript","requestStartTime":1517928305188}}
{"body": {"column":8,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"h1\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":792,"fileType":"javascript","requestStartTime":1517928374454}}
{"body": {"column":12,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"h1\").click(function() {\n    $(\"h1\").\n})\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":823,"fileType":"javascript","requestStartTime":1517928397520}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n    i *= i;\n    d += d;\n    s += is the best place to learn and practice coding!;\n    \n    console.\n    // Declare second integer, double, and String variables.\n\n    // Read and save an integer, double, and String to your variables.\n\n    // Print the sum of both integer variables on a new line.\n\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":604,"fileType":"javascript","requestStartTime":1517928644446}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction lowestTriangle(base, area){\n    return Math. 2 * area / base\n}\n\nfunction main() {\n    var base_temp = readLine().split(' ');\n    var base = parseInt(base_temp[0]);\n    var area = parseInt(base_temp[1]);\n    var height = lowestTriangle(base, area);\n    process.stdout.write(\"\"+height+\"\\n\");\n\n}\n\n\n","offset":512,"fileType":"javascript","requestStartTime":1517928709403}}
{"body": {"column":22,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var testNumber = 2;\n    var length = nums.\n    for (var i = 0;) {\n        \n    }\n    \n    for (var i=0; ; i++) {\n        if(testNumber === nums) {\n            return \"1\";\n        }\n        \n        testNumber = testNumber * 2;\n    }\n    return \"0\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":334,"fileType":"javascript","requestStartTime":1517928730392}}
{"body": {"column":23,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n    i *= i;\n    d += d;\n    s += \"is the best place to learn and practice coding!\";\n    \n    console.log(i);\n    console.log(String.d);\n    console.log(s);\n\n    // Declare second integer, double, and String variables.\n\n    // Read and save an integer, double, and String to your variables.\n\n    // Print the sum of both integer variables on a new line.\n\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":637,"fileType":"javascript","requestStartTime":1517928731773}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var testNumber = 2;\n    var length = nums.length;\n    for (var i = 0;i < nums.) {\n        \n    }\n    \n    for (var i=0; ; i++) {\n        if(testNumber === nums) {\n            return \"1\";\n        }\n        \n        testNumber = testNumber * 2;\n    }\n    return \"0\";\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":370,"fileType":"javascript","requestStartTime":1517928738424}}
{"body": {"column":20,"line":92,"wordToComplete":"","code":"\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Takes a model and view and acts as the controller between them\n\t *\n\t * @constructor\n\t * @param {object} model The model instance\n\t * @param {object} view The view instance\n\t */\n\tfunction Controller(model, view) {\n\t\tvar that = this;\n\t\tthat.model = model;\n\t\tthat.view = view;\n\n\t\tthat.view.bind('newTodo', function (title) {\n\t\t\tthat.addItem(title);\n\t\t});\n\n\t\tthat.view.bind('itemToggle', function (item) {\n\t\t\tthat.toggleComplete(item.id, item.completed);\n\t\t});\n\n\t\tthat.view.bind('toggleAll', function (status) {\n\t\t\tthat.toggleAll(status.completed);\n\t\t});\n\t}\n\n\t/**\n\t * Loads and initialises the view\n\t *\n\t * @param {string} '' | 'active' | 'completed'\n\t */\n\tController.prototype.setView = function (locationHash) {\n\t\tvar route = locationHash.split('/')[1];\n\t\tvar page = route || '';\n\t\tthis._updateFilterState(page);\n\t};\n\n\t/**\n\t * An event to fire on load. Will get all items and display them in the\n\t * todo-list\n\t */\n\tController.prototype.showAll = function () {\n\t\tvar that = this;\n\t\tthat.model.read(function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all active tasks\n\t */\n\tController.prototype.showActive = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: false }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all completed tasks\n\t */\n\tController.prototype.showCompleted = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: true }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * An event to fire whenever you want to add an item. Simply pass in the event\n\t * object and it'll handle the DOM insertion and saving of the new item.\n\t */\n\tController.prototype.addItem = function (title) {\n\t\tvar that = this;\n\n\t\tif (title.trim() === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tthat.model.create(title, function () {\n\t\t\tthat.view.render('clearNewTodo');\n\t\t\tthat._filter(true);\n\t\t});\n\t};\n    \n    Controller.prototype.deleteItem = function (index) {\n\t\tvar that = this;\n\n\t\tthat.model.read(function (data) {\n            console.\n\t\t\t//that.view.render('showEntries', data);\n\t\t});\n\t};\n\n\n\t/**\n\t * Give it an ID of a model and a checkbox and it will update the item\n\t * in storage based on the checkbox's state.\n\t *\n\t * @param {number} id The ID of the element to complete or uncomplete\n\t * @param {object} checkbox The checkbox to check the state of complete\n\t *                          or not\n\t * @param {boolean|undefined} silent Prevent re-filtering the todo items\n\t */\n\tController.prototype.toggleComplete = function (id, completed, silent) {\n\t\tvar that = this;\n\t\tthat.model.update(id, { completed: completed }, function () {\n\t\t\tthat.view.render('elementComplete', {\n\t\t\t\tid: id,\n\t\t\t\tcompleted: completed\n\t\t\t});\n\t\t});\n\n\t\tif (!silent) {\n\t\t\tthat._filter();\n\t\t}\n\t};\n\n\t/**\n\t * Will toggle ALL checkboxe's on/off state and completeness of models.\n\t * Just pass in the event object.\n\t */\n\tController.prototype.toggleAll = function (completed) {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: !completed }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tthat.toggleComplete(item.id, completed, true);\n\t\t\t});\n\t\t});\n\n\t\tthat._filter();\n\t};\n\n\t/**\n\t * Updates the pieces of the page which change depending on the remaining\n\t * number of todos.\n\t */\n\tController.prototype._updateCount = function () {\n\t\tvar that = this;\n\t\tthat.model.getCount(function (todos) {\n\t\t\tthat.view.render('updateElementCount', todos.active);\n\n\t\t\tthat.view.render('toggleAll', {checked: todos.completed === todos.total});\n\t\t\tthat.view.render('contentBlockVisibility', {visible: todos.total > 0});\n\t\t});\n\t};\n\n\t/**\n\t * Re-filters the todo items, based on the active route.\n\t * @param {boolean|undefined} force  forces a re-painting of todo items.\n\t */\n\tController.prototype._filter = function (force) {\n\t\tvar activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n\t\t// Update the elements on the page, which change with each completed todo\n\t\tthis._updateCount();\n\n\t\t// If the last active route isn't \"All\", or we're switching routes, we\n\t\t// re-create the todo item elements, calling:\n\t\t//   this.show[All|Active|Completed]();\n\t\tif (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n\t\t\tthis['show' + activeRoute]();\n\t\t}\n\n\t\tthis._lastActiveRoute = activeRoute;\n\t};\n\n\t/**\n\t * Simply updates the filter nav's selected states\n\t */\n\tController.prototype._updateFilterState = function (currentPage) {\n\t\t// Store a reference to the active route, allowing us to re-filter todo\n\t\t// items as they are marked complete or incomplete.\n\t\tthis._activeRoute = currentPage;\n\n\t\tif (currentPage === '') {\n\t\t\tthis._activeRoute = 'All';\n\t\t}\n\n\t\tthis._filter();\n\n\t\tthis.view.render('setFilter', currentPage);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Controller = Controller;\n})(window);\n\n\n","offset":2085,"fileType":"javascript","requestStartTime":1517928747172}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n    let c = [];\n    for(var i=0; i<a.length; ++i) {\n        for(var j=i+1; j<b.length; ++j) {\n            if(a[i] < a[j])\n                c.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":429,"fileType":"javascript","requestStartTime":1517928787556}}
{"body": {"column":27,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var length = nums.length;\n    var res = [];\n    \n    for (var i = 0;i < nums.length; i++) {\n        var testNumber = 2;\n        \n        for (var i=0; ; i++) {\n            if(testNumber === nums) {\n                return res.;\n            }\n\n            testNumber = testNumber * 2;\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":517,"fileType":"javascript","requestStartTime":1517928818201}}
{"body": {"column":6,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n    a.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":295,"fileType":"javascript","requestStartTime":1517928841108}}
{"body": {"column":27,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var length = nums.length;\n    var res = [];\n    \n    for (var i = 0;i < nums.length; i++) {\n        var testNumber = 2;\n        \n        for (var i=0; ; i++) {\n            if(testNumber === nums) {\n                return res.push(\"1\");\n            } else if (testNumber > nums) {\n                return res.\n            }\n            \n            \n\n            testNumber = testNumber * 2;\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":599,"fileType":"javascript","requestStartTime":1517928857210}}
{"body": {"column":15,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<div id =\"one\">\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":909,"fileType":"javascript","requestStartTime":1517928870125}}
{"body": {"column":11,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n   console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":300,"fileType":"javascript","requestStartTime":1517928874077}}
{"body": {"column":33,"line":43,"wordToComplete":"div>","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<div id =\"one\">Hello World </div>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":927,"fileType":"javascript","requestStartTime":1517928894889}}
{"body": {"column":23,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n    i *= i;\n    d += d;\n    s += \"is the best place to learn and practice coding!\";\n    \n    console.log(i);\n    console.log(Number.);\n    console.log(s);\n\n    // Declare second integer, double, and String variables.\n\n    // Read and save an integer, double, and String to your variables.\n\n    // Print the sum of both integer variables on a new line.\n\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":637,"fileType":"javascript","requestStartTime":1517928904627}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    for(let i=0;i<ar.;i++){\n       sum= \n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":543,"fileType":"javascript","requestStartTime":1517928936952}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n   process.stdout.write(a.);\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":315,"fileType":"javascript","requestStartTime":1517929026357}}
{"body": {"column":59,"line":112,"wordToComplete":"If an ID was actually given, find the item and delete.","code":"\n/*jshint eqeqeq:false */\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Creates a new client side storage object and will create an empty\n\t * collection if no collection already exists.\n\t *\n\t * @param {string} name The name of our DB we want to use\n\t * @param {function} callback Our fake DB uses callbacks because in\n\t * real life you probably would be making AJAX calls\n\t */\n\tfunction Store(name, callback) {\n\t\tcallback = callback || function () {};\n\n\t\tthis._dbName = name;\n\n\t\tif (!localStorage[name]) {\n\t\t\tvar data = {\n\t\t\t\ttodos: []\n\t\t\t};\n\n\t\t\tlocalStorage[name] = JSON.stringify(data);\n\t\t}\n\n\t\tcallback.call(this, JSON.parse(localStorage[name]));\n\t}\n\n\t/**\n\t * Finds items based on a query given as a JS object\n\t *\n\t * @param {object} query The query to match against (i.e. {foo: 'bar'})\n\t * @param {function} callback\t The callback to fire when the query has\n\t * completed running\n\t *\n\t * @example\n\t * db.find({foo: 'bar', hello: 'world'}, function (data) {\n\t *\t // data will return any items that have foo: bar and\n\t *\t // hello: world in their properties\n\t * });\n\t */\n\tStore.prototype.find = function (query, callback) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar todos = JSON.parse(localStorage[this._dbName]).todos;\n\n\t\tcallback.call(this, todos.filter(function (todo) {\n\t\t\tfor (var q in query) {\n\t\t\t\tif (query[q] !== todo[q]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}));\n\t};\n\n\t/**\n\t * Will retrieve all data from the collection\n\t *\n\t * @param {function} callback The callback to fire upon retrieving data\n\t */\n\tStore.prototype.findAll = function (callback) {\n\t\tcallback = callback || function () {};\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t/**\n\t * Will save the given data to the DB. If no item exists it will create a new\n\t * item, otherwise it'll simply update an existing item's properties\n\t *\n\t * @param {object} updateData The data to save back into the DB\n\t * @param {function} callback The callback to fire after saving\n\t * @param {number} id An optional param to enter an ID of an item to update\n\t */\n\tStore.prototype.save = function (updateData, callback, id) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\n\t\tcallback = callback || function () {};\n\n\t\t// If an ID was actually given, find the item and update each property\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i][key] = updateData[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t};\n    \n    Store.prototype.delete = function (id) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\n\t\tcallback = callback || function () {};\n\n\t\t// If an ID was actually given, find the item and delete.\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i][key] = updateData[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t};\n\n\t/**\n\t * Will drop all storage and start fresh\n\t *\n\t * @param {function} callback The callback to fire after dropping the data\n\t */\n\tStore.prototype.drop = function (callback) {\n\t\tlocalStorage[this._dbName] = JSON.stringify({todos: []});\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Store = Store;\n})(window);\n\n\n","offset":3063,"fileType":"javascript","requestStartTime":1517929073615}}
{"body": {"column":10,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"#div\").\n$\n});\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1071,"fileType":"javascript","requestStartTime":1517929109357}}
{"body": {"column":11,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n   console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":300,"fileType":"javascript","requestStartTime":1517929132557}}
{"body": {"column":15,"line":117,"wordToComplete":"","code":"\n/*jshint eqeqeq:false */\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Creates a new client side storage object and will create an empty\n\t * collection if no collection already exists.\n\t *\n\t * @param {string} name The name of our DB we want to use\n\t * @param {function} callback Our fake DB uses callbacks because in\n\t * real life you probably would be making AJAX calls\n\t */\n\tfunction Store(name, callback) {\n\t\tcallback = callback || function () {};\n\n\t\tthis._dbName = name;\n\n\t\tif (!localStorage[name]) {\n\t\t\tvar data = {\n\t\t\t\ttodos: []\n\t\t\t};\n\n\t\t\tlocalStorage[name] = JSON.stringify(data);\n\t\t}\n\n\t\tcallback.call(this, JSON.parse(localStorage[name]));\n\t}\n\n\t/**\n\t * Finds items based on a query given as a JS object\n\t *\n\t * @param {object} query The query to match against (i.e. {foo: 'bar'})\n\t * @param {function} callback\t The callback to fire when the query has\n\t * completed running\n\t *\n\t * @example\n\t * db.find({foo: 'bar', hello: 'world'}, function (data) {\n\t *\t // data will return any items that have foo: bar and\n\t *\t // hello: world in their properties\n\t * });\n\t */\n\tStore.prototype.find = function (query, callback) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar todos = JSON.parse(localStorage[this._dbName]).todos;\n\n\t\tcallback.call(this, todos.filter(function (todo) {\n\t\t\tfor (var q in query) {\n\t\t\t\tif (query[q] !== todo[q]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}));\n\t};\n\n\t/**\n\t * Will retrieve all data from the collection\n\t *\n\t * @param {function} callback The callback to fire upon retrieving data\n\t */\n\tStore.prototype.findAll = function (callback) {\n\t\tcallback = callback || function () {};\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t/**\n\t * Will save the given data to the DB. If no item exists it will create a new\n\t * item, otherwise it'll simply update an existing item's properties\n\t *\n\t * @param {object} updateData The data to save back into the DB\n\t * @param {function} callback The callback to fire after saving\n\t * @param {number} id An optional param to enter an ID of an item to update\n\t */\n\tStore.prototype.save = function (updateData, callback, id) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\n\t\tcallback = callback || function () {};\n\n\t\t// If an ID was actually given, find the item and update each property\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i][key] = updateData[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t};\n    \n    Store.prototype.delete = function (id) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\n\t\tcallback = callback || function () {};\n\n\t\t// If an ID was actually given, find the item and delete.\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i].[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t};\n\n\t/**\n\t * Will drop all storage and start fresh\n\t *\n\t * @param {function} callback The callback to fire after dropping the data\n\t */\n\tStore.prototype.drop = function (callback) {\n\t\tlocalStorage[this._dbName] = JSON.stringify({todos: []});\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Store = Store;\n})(window);\n\n\n","offset":3200,"fileType":"javascript","requestStartTime":1517929140070}}
{"body": {"column":9,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":881,"fileType":"javascript","requestStartTime":1517929201216}}
{"body": {"column":8,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    const arr=[a0, a1, a2, b0, b1, b2];\n    arr.\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":577,"fileType":"javascript","requestStartTime":1517929227013}}
{"body": {"column":4,"line":47,"wordToComplete":"box\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"#div\").click(function(){\n$(\".box\")\n});\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1093,"fileType":"javascript","requestStartTime":1517929254688}}
{"body": {"column":15,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"div\").click(function()\n     $(\"div\") .         \n              )}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":913,"fileType":"javascript","requestStartTime":1517929274916}}
{"body": {"column":9,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"#div\").click(function(){\n$(\"box\").\n});\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1098,"fileType":"javascript","requestStartTime":1517929277253}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n   let c = []; \n   for(var i=0; i<a.length; ++i) {\n        for(var j=i+1; j<b.length; ++j) {\n            if(a[i] < b[j])\n                c.;\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":428,"fileType":"javascript","requestStartTime":1517929287582}}
{"body": {"column":20,"line":117,"wordToComplete":"","code":"\n/*jshint eqeqeq:false */\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Creates a new client side storage object and will create an empty\n\t * collection if no collection already exists.\n\t *\n\t * @param {string} name The name of our DB we want to use\n\t * @param {function} callback Our fake DB uses callbacks because in\n\t * real life you probably would be making AJAX calls\n\t */\n\tfunction Store(name, callback) {\n\t\tcallback = callback || function () {};\n\n\t\tthis._dbName = name;\n\n\t\tif (!localStorage[name]) {\n\t\t\tvar data = {\n\t\t\t\ttodos: []\n\t\t\t};\n\n\t\t\tlocalStorage[name] = JSON.stringify(data);\n\t\t}\n\n\t\tcallback.call(this, JSON.parse(localStorage[name]));\n\t}\n\n\t/**\n\t * Finds items based on a query given as a JS object\n\t *\n\t * @param {object} query The query to match against (i.e. {foo: 'bar'})\n\t * @param {function} callback\t The callback to fire when the query has\n\t * completed running\n\t *\n\t * @example\n\t * db.find({foo: 'bar', hello: 'world'}, function (data) {\n\t *\t // data will return any items that have foo: bar and\n\t *\t // hello: world in their properties\n\t * });\n\t */\n\tStore.prototype.find = function (query, callback) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar todos = JSON.parse(localStorage[this._dbName]).todos;\n\n\t\tcallback.call(this, todos.filter(function (todo) {\n\t\t\tfor (var q in query) {\n\t\t\t\tif (query[q] !== todo[q]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}));\n\t};\n\n\t/**\n\t * Will retrieve all data from the collection\n\t *\n\t * @param {function} callback The callback to fire upon retrieving data\n\t */\n\tStore.prototype.findAll = function (callback) {\n\t\tcallback = callback || function () {};\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t/**\n\t * Will save the given data to the DB. If no item exists it will create a new\n\t * item, otherwise it'll simply update an existing item's properties\n\t *\n\t * @param {object} updateData The data to save back into the DB\n\t * @param {function} callback The callback to fire after saving\n\t * @param {number} id An optional param to enter an ID of an item to update\n\t */\n\tStore.prototype.save = function (updateData, callback, id) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\n\t\tcallback = callback || function () {};\n\n\t\t// If an ID was actually given, find the item and update each property\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i][key] = updateData[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t};\n    \n    Store.prototype.delete = function (id, callback) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\t\tcallback = callback || function () {};\n\t\t// If an ID was actually given, find the item and delete.\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t      todos.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n            console.\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t}\n\t};\n\n\t/**\n\t * Will drop all storage and start fresh\n\t *\n\t * @param {function} callback The callback to fire after dropping the data\n\t */\n\tStore.prototype.drop = function (callback) {\n\t\tlocalStorage[this._dbName] = JSON.stringify({todos: []});\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Store = Store;\n})(window);\n\n\n","offset":3218,"fileType":"javascript","requestStartTime":1517929394820}}
{"body": {"column":26,"line":115,"wordToComplete":"","code":"\n/*jshint eqeqeq:false */\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Creates a new client side storage object and will create an empty\n\t * collection if no collection already exists.\n\t *\n\t * @param {string} name The name of our DB we want to use\n\t * @param {function} callback Our fake DB uses callbacks because in\n\t * real life you probably would be making AJAX calls\n\t */\n\tfunction Store(name, callback) {\n\t\tcallback = callback || function () {};\n\n\t\tthis._dbName = name;\n\n\t\tif (!localStorage[name]) {\n\t\t\tvar data = {\n\t\t\t\ttodos: []\n\t\t\t};\n\n\t\t\tlocalStorage[name] = JSON.stringify(data);\n\t\t}\n\n\t\tcallback.call(this, JSON.parse(localStorage[name]));\n\t}\n\n\t/**\n\t * Finds items based on a query given as a JS object\n\t *\n\t * @param {object} query The query to match against (i.e. {foo: 'bar'})\n\t * @param {function} callback\t The callback to fire when the query has\n\t * completed running\n\t *\n\t * @example\n\t * db.find({foo: 'bar', hello: 'world'}, function (data) {\n\t *\t // data will return any items that have foo: bar and\n\t *\t // hello: world in their properties\n\t * });\n\t */\n\tStore.prototype.find = function (query, callback) {\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar todos = JSON.parse(localStorage[this._dbName]).todos;\n\n\t\tcallback.call(this, todos.filter(function (todo) {\n\t\t\tfor (var q in query) {\n\t\t\t\tif (query[q] !== todo[q]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}));\n\t};\n\n\t/**\n\t * Will retrieve all data from the collection\n\t *\n\t * @param {function} callback The callback to fire upon retrieving data\n\t */\n\tStore.prototype.findAll = function (callback) {\n\t\tcallback = callback || function () {};\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t/**\n\t * Will save the given data to the DB. If no item exists it will create a new\n\t * item, otherwise it'll simply update an existing item's properties\n\t *\n\t * @param {object} updateData The data to save back into the DB\n\t * @param {function} callback The callback to fire after saving\n\t * @param {number} id An optional param to enter an ID of an item to update\n\t */\n\tStore.prototype.save = function (updateData, callback, id) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\n\t\tcallback = callback || function () {};\n\n\t\t// If an ID was actually given, find the item and update each property\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t\t\tfor (var key in updateData) {\n\t\t\t\t\t\ttodos[i][key] = updateData[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t} else {\n\t\t\t// Generate an ID\n\t\t\tupdateData.id = new Date().getTime();\n\n\t\t\ttodos.push(updateData);\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, [updateData]);\n\t\t}\n\t};\n    \n    Store.prototype.delete = function (id, callback) {\n\t\tvar data = JSON.parse(localStorage[this._dbName]);\n\t\tvar todos = data.todos;\n\t\tcallback = callback || function () {};\n\t\t// If an ID was actually given, find the item and delete.\n\t\tif (id) {\n\t\t\tfor (var i = 0; i < todos.length; i++) {\n\t\t\t\tif (todos[i].id === id) {\n\t\t\t      todos.splice(i, 1);\n                  console.\n\t\t\t\t}\n\t\t\t}\n            console.log()\n\t\t\tlocalStorage[this._dbName] = JSON.stringify(data);\n\t\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\t}\n\t};\n\n\t/**\n\t * Will drop all storage and start fresh\n\t *\n\t * @param {function} callback The callback to fire after dropping the data\n\t */\n\tStore.prototype.drop = function (callback) {\n\t\tlocalStorage[this._dbName] = JSON.stringify({todos: []});\n\t\tcallback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Store = Store;\n})(window);\n\n\n","offset":3213,"fileType":"javascript","requestStartTime":1517929408612}}
{"body": {"column":8,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var res = [1,1,1];\n    res.  \n  \n    var numLength = nums.length;\n    \n    return res;\n    \n    for (var i = 0;i < nums.length - 1; i++) {\n        var testNumber = 2;\n        \n        for (var i=0; ; i++) {\n            if(testNumber === nums[i]) {\n                res.push(1);\n                break;\n            } else if (testNumber > nums[i]) {\n                res.push(0);\n                break;\n            }\n            testNumber *= 2;\n        }\n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":319,"fileType":"javascript","requestStartTime":1517929466432}}
{"body": {"column":9,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1070,"fileType":"javascript","requestStartTime":1517929475580}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    let alice=0;\n    let bob=0;\n    const arr=[a0, a1, a2, b0, b1, b2];\n    for(let i=0;i<3i++){\n      if(arr[i]>arr[i+3]){\n        alice= alice+1;  \n      }else if(arr[i]<arr[i+3]){\n        bob=bob+1;  \n      }  \n    }\n    console.\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":761,"fileType":"javascript","requestStartTime":1517929484316}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n   let c = []; \n   for(var i=0; i<a.length; ++i) {\n        for(var j=0; j<b.length; j++) {\n            if(a[i] < b[j])\n                c.push(a[i]);\n        }\n    }\n    console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":466,"fileType":"javascript","requestStartTime":1517929515807}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517929534836}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n  let c = concat.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1517929545344}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n  let c = a.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":301,"fileType":"javascript","requestStartTime":1517929547416}}
{"body": {"column":10,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n  let c = a.concat(b)\n  console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":321,"fileType":"javascript","requestStartTime":1517929552072}}
{"body": {"column":20,"line":118,"wordToComplete":"","code":"\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Takes a model and view and acts as the controller between them\n\t *\n\t * @constructor\n\t * @param {object} model The model instance\n\t * @param {object} view The view instance\n\t */\n\tfunction Controller(model, view) {\n\t\tvar that = this;\n\t\tthat.model = model;\n\t\tthat.view = view;\n\n\t\tthat.view.bind('newTodo', function (title) {\n\t\t\tthat.addItem(title);\n\t\t});\n\n\t\tthat.view.bind('itemToggle', function (item) {\n\t\t\tthat.toggleComplete(item.id, item.completed);\n\t\t});\n\n\t\tthat.view.bind('toggleAll', function (status) {\n\t\t\tthat.toggleAll(status.completed);\n\t\t});\n\t}\n\n\t/**\n\t * Loads and initialises the view\n\t *\n\t * @param {string} '' | 'active' | 'completed'\n\t */\n\tController.prototype.setView = function (locationHash) {\n\t\tvar route = locationHash.split('/')[1];\n\t\tvar page = route || '';\n\t\tthis._updateFilterState(page);\n\t};\n\n\t/**\n\t * An event to fire on load. Will get all items and display them in the\n\t * todo-list\n\t */\n\tController.prototype.showAll = function () {\n\t\tvar that = this;\n\t\tthat.model.read(function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all active tasks\n\t */\n\tController.prototype.showActive = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: false }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all completed tasks\n\t */\n\tController.prototype.showCompleted = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: true }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * An event to fire whenever you want to add an item. Simply pass in the event\n\t * object and it'll handle the DOM insertion and saving of the new item.\n\t */\n\tController.prototype.addItem = function (title) {\n\t\tvar that = this;\n\n\t\tif (title.trim() === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tthat.model.create(title, function () {\n\t\t\tthat.view.render('clearNewTodo');\n\t\t\tthat._filter(true);\n\t\t});\n\t};\n\n\n\t/**\n\t * Give it an ID of a model and a checkbox and it will update the item\n\t * in storage based on the checkbox's state.\n\t *\n\t * @param {number} id The ID of the element to complete or uncomplete\n\t * @param {object} checkbox The checkbox to check the state of complete\n\t *                          or not\n\t * @param {boolean|undefined} silent Prevent re-filtering the todo items\n\t */\n\tController.prototype.toggleComplete = function (id, completed, silent) {\n\t\tvar that = this;\n\t\tthat.model.update(id, { completed: completed }, function () {\n\t\t\tthat.view.render('elementComplete', {\n\t\t\t\tid: id,\n\t\t\t\tcompleted: completed\n\t\t\t});\n\t\t});\n\n\t\tif (!silent) {\n\t\t\tthat._filter();\n\t\t}\n\t};\n    \n    Controller.prototype.deleteItem = function (id) {\n\t\tvar that = this;\n        console.log('DATA FROM VIEW:', id);\n        // Happens in the destroy model method: \n        // callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\tthat.model.destroy(id, function() {\n            console.\n        });\n\t};\n\n\t/**\n\t * Will toggle ALL checkboxe's on/off state and completeness of models.\n\t * Just pass in the event object.\n\t */\n\tController.prototype.toggleAll = function (completed) {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: !completed }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tthat.toggleComplete(item.id, completed, true);\n\t\t\t});\n\t\t});\n\n\t\tthat._filter();\n\t};\n\n\t/**\n\t * Updates the pieces of the page which change depending on the remaining\n\t * number of todos.\n\t */\n\tController.prototype._updateCount = function () {\n\t\tvar that = this;\n\t\tthat.model.getCount(function (todos) {\n\t\t\tthat.view.render('updateElementCount', todos.active);\n\n\t\t\tthat.view.render('toggleAll', {checked: todos.completed === todos.total});\n\t\t\tthat.view.render('contentBlockVisibility', {visible: todos.total > 0});\n\t\t});\n\t};\n\n\t/**\n\t * Re-filters the todo items, based on the active route.\n\t * @param {boolean|undefined} force  forces a re-painting of todo items.\n\t */\n\tController.prototype._filter = function (force) {\n\t\tvar activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n\t\t// Update the elements on the page, which change with each completed todo\n\t\tthis._updateCount();\n\n\t\t// If the last active route isn't \"All\", or we're switching routes, we\n\t\t// re-create the todo item elements, calling:\n\t\t//   this.show[All|Active|Completed]();\n\t\tif (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n\t\t\tthis['show' + activeRoute]();\n\t\t}\n\n\t\tthis._lastActiveRoute = activeRoute;\n\t};\n\n\t/**\n\t * Simply updates the filter nav's selected states\n\t */\n\tController.prototype._updateFilterState = function (currentPage) {\n\t\t// Store a reference to the active route, allowing us to re-filter todo\n\t\t// items as they are marked complete or incomplete.\n\t\tthis._activeRoute = currentPage;\n\n\t\tif (currentPage === '') {\n\t\t\tthis._activeRoute = 'All';\n\t\t}\n\n\t\tthis._filter();\n\n\t\tthis.view.render('setFilter', currentPage);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Controller = Controller;\n})(window);\n\n\n","offset":2935,"fileType":"javascript","requestStartTime":1517929593016}}
{"body": {"column":10,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n  console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":299,"fileType":"javascript","requestStartTime":1517929610168}}
{"body": {"column":12,"line":48,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + parseInt(secondInteger));\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1724,"fileType":"javascript","requestStartTime":1517929639443}}
{"body": {"column":12,"line":49,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + parseInt(secondInteger));\n    console.log(firstDecimal + parseFloat(secondDecimal));\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1783,"fileType":"javascript","requestStartTime":1517929685931}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var res = [];\n    var numLength = nums.length;\n    \n    for (var i = 0;i < numLength; i++) {\n        var testNumber = 2;\n        var isPowerOf2 = false;\n        \n        for (var j=0; testNumber <= nums[i]; i++) {\n            if(testNumber === nums[i]) {\n                res.push(1);\n            }\n            testNumber = testNumber * 2;\n        }\n        if (isPowerOf2) {\n            res.\n        }\n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":683,"fileType":"javascript","requestStartTime":1517929751769}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var res = [];\n    var numLength = nums.length;\n    \n    for (var i = 0;i < numLength; i++) {\n        var testNumber = 2;\n        var isPowerOf2 = false;\n        \n        for (var j=0; testNumber <= nums[i]; i++) {\n            if(testNumber === nums[i]) {\n                res.push(1);\n            }\n            testNumber = testNumber * 2;\n        }\n        if (isPowerOf2) {\n            res.push(1);\n        } else {\n            res.\n        }\n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":725,"fileType":"javascript","requestStartTime":1517929760506}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction sortNumber(a,b) {\n    return a - b;\n}\nfunction mergeArrays(a, b) {\n  let c = a.\n}\n\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":348,"fileType":"javascript","requestStartTime":1517929765217}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Takes a model and view and acts as the controller between them\n\t *\n\t * @constructor\n\t * @param {object} model The model instance\n\t * @param {object} view The view instance\n\t */\n\tfunction Controller(model, view) {\n\t\tvar that = this;\n\t\tthat.model = model;\n\t\tthat.view = view;\n\n\t\tthat.view.bind('newTodo', function (title) {\n\t\t\tthat.addItem(title);\n\t\t});\n        \n        that.\n\n\t\tthat.view.bind('itemToggle', function (item) {\n\t\t\tthat.toggleComplete(item.id, item.completed);\n\t\t});\n\n\t\tthat.view.bind('toggleAll', function (status) {\n\t\t\tthat.toggleAll(status.completed);\n\t\t});\n\t}\n\n\t/**\n\t * Loads and initialises the view\n\t *\n\t * @param {string} '' | 'active' | 'completed'\n\t */\n\tController.prototype.setView = function (locationHash) {\n\t\tvar route = locationHash.split('/')[1];\n\t\tvar page = route || '';\n\t\tthis._updateFilterState(page);\n\t};\n\n\t/**\n\t * An event to fire on load. Will get all items and display them in the\n\t * todo-list\n\t */\n\tController.prototype.showAll = function () {\n\t\tvar that = this;\n\t\tthat.model.read(function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all active tasks\n\t */\n\tController.prototype.showActive = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: false }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all completed tasks\n\t */\n\tController.prototype.showCompleted = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: true }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * An event to fire whenever you want to add an item. Simply pass in the event\n\t * object and it'll handle the DOM insertion and saving of the new item.\n\t */\n\tController.prototype.addItem = function (title) {\n\t\tvar that = this;\n\n\t\tif (title.trim() === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tthat.model.create(title, function () {\n\t\t\tthat.view.render('clearNewTodo');\n\t\t\tthat._filter(true);\n\t\t});\n\t};\n\n\n\t/**\n\t * Give it an ID of a model and a checkbox and it will update the item\n\t * in storage based on the checkbox's state.\n\t *\n\t * @param {number} id The ID of the element to complete or uncomplete\n\t * @param {object} checkbox The checkbox to check the state of complete\n\t *                          or not\n\t * @param {boolean|undefined} silent Prevent re-filtering the todo items\n\t */\n\tController.prototype.toggleComplete = function (id, completed, silent) {\n\t\tvar that = this;\n\t\tthat.model.update(id, { completed: completed }, function () {\n\t\t\tthat.view.render('elementComplete', {\n\t\t\t\tid: id,\n\t\t\t\tcompleted: completed\n\t\t\t});\n\t\t});\n\n\t\tif (!silent) {\n\t\t\tthat._filter();\n\t\t}\n\t};\n    \n    Controller.prototype.deleteItem = function (id) {\n\t\tvar that = this;\n        console.log('DATA FROM VIEW:', id);\n        // Happens in the destroy model method: \n        // callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\tthat.model.delete(id, function(data) {\n            console.log('DESTROYED AND NEW DATA?', data);\n            // that.view.render('showEntries', data);\n        });\n\t};\n\n\t/**\n\t * Will toggle ALL checkboxe's on/off state and completeness of models.\n\t * Just pass in the event object.\n\t */\n\tController.prototype.toggleAll = function (completed) {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: !completed }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tthat.toggleComplete(item.id, completed, true);\n\t\t\t});\n\t\t});\n\n\t\tthat._filter();\n\t};\n\n\t/**\n\t * Updates the pieces of the page which change depending on the remaining\n\t * number of todos.\n\t */\n\tController.prototype._updateCount = function () {\n\t\tvar that = this;\n\t\tthat.model.getCount(function (todos) {\n\t\t\tthat.view.render('updateElementCount', todos.active);\n\n\t\t\tthat.view.render('toggleAll', {checked: todos.completed === todos.total});\n\t\t\tthat.view.render('contentBlockVisibility', {visible: todos.total > 0});\n\t\t});\n\t};\n\n\t/**\n\t * Re-filters the todo items, based on the active route.\n\t * @param {boolean|undefined} force  forces a re-painting of todo items.\n\t */\n\tController.prototype._filter = function (force) {\n\t\tvar activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n\t\t// Update the elements on the page, which change with each completed todo\n\t\tthis._updateCount();\n\n\t\t// If the last active route isn't \"All\", or we're switching routes, we\n\t\t// re-create the todo item elements, calling:\n\t\t//   this.show[All|Active|Completed]();\n\t\tif (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n\t\t\tthis['show' + activeRoute]();\n\t\t}\n\n\t\tthis._lastActiveRoute = activeRoute;\n\t};\n\n\t/**\n\t * Simply updates the filter nav's selected states\n\t */\n\tController.prototype._updateFilterState = function (currentPage) {\n\t\t// Store a reference to the active route, allowing us to re-filter todo\n\t\t// items as they are marked complete or incomplete.\n\t\tthis._activeRoute = currentPage;\n\n\t\tif (currentPage === '') {\n\t\t\tthis._activeRoute = 'All';\n\t\t}\n\n\t\tthis._filter();\n\n\t\tthis.view.render('setFilter', currentPage);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Controller = Controller;\n})(window);\n\n\n","offset":422,"fileType":"javascript","requestStartTime":1517929795203}}
{"body": {"column":18,"line":20,"wordToComplete":"","code":"\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Takes a model and view and acts as the controller between them\n\t *\n\t * @constructor\n\t * @param {object} model The model instance\n\t * @param {object} view The view instance\n\t */\n\tfunction Controller(model, view) {\n\t\tvar that = this;\n\t\tthat.model = model;\n\t\tthat.view = view;\n\n\t\tthat.view.bind('newTodo', function (title) {\n\t\t\tthat.addItem(title);\n\t\t});\n        \n        that.view.\n\n\t\tthat.view.bind('itemToggle', function (item) {\n\t\t\tthat.toggleComplete(item.id, item.completed);\n\t\t});\n\n\t\tthat.view.bind('toggleAll', function (status) {\n\t\t\tthat.toggleAll(status.completed);\n\t\t});\n\t}\n\n\t/**\n\t * Loads and initialises the view\n\t *\n\t * @param {string} '' | 'active' | 'completed'\n\t */\n\tController.prototype.setView = function (locationHash) {\n\t\tvar route = locationHash.split('/')[1];\n\t\tvar page = route || '';\n\t\tthis._updateFilterState(page);\n\t};\n\n\t/**\n\t * An event to fire on load. Will get all items and display them in the\n\t * todo-list\n\t */\n\tController.prototype.showAll = function () {\n\t\tvar that = this;\n\t\tthat.model.read(function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all active tasks\n\t */\n\tController.prototype.showActive = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: false }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all completed tasks\n\t */\n\tController.prototype.showCompleted = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: true }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * An event to fire whenever you want to add an item. Simply pass in the event\n\t * object and it'll handle the DOM insertion and saving of the new item.\n\t */\n\tController.prototype.addItem = function (title) {\n\t\tvar that = this;\n\n\t\tif (title.trim() === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tthat.model.create(title, function () {\n\t\t\tthat.view.render('clearNewTodo');\n\t\t\tthat._filter(true);\n\t\t});\n\t};\n\n\n\t/**\n\t * Give it an ID of a model and a checkbox and it will update the item\n\t * in storage based on the checkbox's state.\n\t *\n\t * @param {number} id The ID of the element to complete or uncomplete\n\t * @param {object} checkbox The checkbox to check the state of complete\n\t *                          or not\n\t * @param {boolean|undefined} silent Prevent re-filtering the todo items\n\t */\n\tController.prototype.toggleComplete = function (id, completed, silent) {\n\t\tvar that = this;\n\t\tthat.model.update(id, { completed: completed }, function () {\n\t\t\tthat.view.render('elementComplete', {\n\t\t\t\tid: id,\n\t\t\t\tcompleted: completed\n\t\t\t});\n\t\t});\n\n\t\tif (!silent) {\n\t\t\tthat._filter();\n\t\t}\n\t};\n    \n    Controller.prototype.deleteItem = function (id) {\n\t\tvar that = this;\n        console.log('DATA FROM VIEW:', id);\n        // Happens in the destroy model method: \n        // callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\tthat.model.delete(id, function(data) {\n            console.log('DESTROYED AND NEW DATA?', data);\n            // that.view.render('showEntries', data);\n        });\n\t};\n\n\t/**\n\t * Will toggle ALL checkboxe's on/off state and completeness of models.\n\t * Just pass in the event object.\n\t */\n\tController.prototype.toggleAll = function (completed) {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: !completed }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tthat.toggleComplete(item.id, completed, true);\n\t\t\t});\n\t\t});\n\n\t\tthat._filter();\n\t};\n\n\t/**\n\t * Updates the pieces of the page which change depending on the remaining\n\t * number of todos.\n\t */\n\tController.prototype._updateCount = function () {\n\t\tvar that = this;\n\t\tthat.model.getCount(function (todos) {\n\t\t\tthat.view.render('updateElementCount', todos.active);\n\n\t\t\tthat.view.render('toggleAll', {checked: todos.completed === todos.total});\n\t\t\tthat.view.render('contentBlockVisibility', {visible: todos.total > 0});\n\t\t});\n\t};\n\n\t/**\n\t * Re-filters the todo items, based on the active route.\n\t * @param {boolean|undefined} force  forces a re-painting of todo items.\n\t */\n\tController.prototype._filter = function (force) {\n\t\tvar activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n\t\t// Update the elements on the page, which change with each completed todo\n\t\tthis._updateCount();\n\n\t\t// If the last active route isn't \"All\", or we're switching routes, we\n\t\t// re-create the todo item elements, calling:\n\t\t//   this.show[All|Active|Completed]();\n\t\tif (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n\t\t\tthis['show' + activeRoute]();\n\t\t}\n\n\t\tthis._lastActiveRoute = activeRoute;\n\t};\n\n\t/**\n\t * Simply updates the filter nav's selected states\n\t */\n\tController.prototype._updateFilterState = function (currentPage) {\n\t\t// Store a reference to the active route, allowing us to re-filter todo\n\t\t// items as they are marked complete or incomplete.\n\t\tthis._activeRoute = currentPage;\n\n\t\tif (currentPage === '') {\n\t\t\tthis._activeRoute = 'All';\n\t\t}\n\n\t\tthis._filter();\n\n\t\tthis.view.render('setFilter', currentPage);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Controller = Controller;\n})(window);\n\n\n","offset":427,"fileType":"javascript","requestStartTime":1517929796123}}
{"body": {"column":17,"line":21,"wordToComplete":"","code":"\n(function (window) {\n\t'use strict';\n\n\t/**\n\t * Takes a model and view and acts as the controller between them\n\t *\n\t * @constructor\n\t * @param {object} model The model instance\n\t * @param {object} view The view instance\n\t */\n\tfunction Controller(model, view) {\n\t\tvar that = this;\n\t\tthat.model = model;\n\t\tthat.view = view;\n\n\t\tthat.view.bind('newTodo', function (title) {\n\t\t\tthat.addItem(title);\n\t\t});\n        \n        that.view.bind('deleteTodo', function (id) {\n            that.\n        })\n\n\t\tthat.view.bind('itemToggle', function (item) {\n\t\t\tthat.toggleComplete(item.id, item.completed);\n\t\t});\n\n\t\tthat.view.bind('toggleAll', function (status) {\n\t\t\tthat.toggleAll(status.completed);\n\t\t});\n\t}\n\n\t/**\n\t * Loads and initialises the view\n\t *\n\t * @param {string} '' | 'active' | 'completed'\n\t */\n\tController.prototype.setView = function (locationHash) {\n\t\tvar route = locationHash.split('/')[1];\n\t\tvar page = route || '';\n\t\tthis._updateFilterState(page);\n\t};\n\n\t/**\n\t * An event to fire on load. Will get all items and display them in the\n\t * todo-list\n\t */\n\tController.prototype.showAll = function () {\n\t\tvar that = this;\n\t\tthat.model.read(function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all active tasks\n\t */\n\tController.prototype.showActive = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: false }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * Renders all completed tasks\n\t */\n\tController.prototype.showCompleted = function () {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: true }, function (data) {\n\t\t\tthat.view.render('showEntries', data);\n\t\t});\n\t};\n\n\t/**\n\t * An event to fire whenever you want to add an item. Simply pass in the event\n\t * object and it'll handle the DOM insertion and saving of the new item.\n\t */\n\tController.prototype.addItem = function (title) {\n\t\tvar that = this;\n\n\t\tif (title.trim() === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tthat.model.create(title, function () {\n\t\t\tthat.view.render('clearNewTodo');\n\t\t\tthat._filter(true);\n\t\t});\n\t};\n\n\n\t/**\n\t * Give it an ID of a model and a checkbox and it will update the item\n\t * in storage based on the checkbox's state.\n\t *\n\t * @param {number} id The ID of the element to complete or uncomplete\n\t * @param {object} checkbox The checkbox to check the state of complete\n\t *                          or not\n\t * @param {boolean|undefined} silent Prevent re-filtering the todo items\n\t */\n\tController.prototype.toggleComplete = function (id, completed, silent) {\n\t\tvar that = this;\n\t\tthat.model.update(id, { completed: completed }, function () {\n\t\t\tthat.view.render('elementComplete', {\n\t\t\t\tid: id,\n\t\t\t\tcompleted: completed\n\t\t\t});\n\t\t});\n\n\t\tif (!silent) {\n\t\t\tthat._filter();\n\t\t}\n\t};\n    \n    Controller.prototype.deleteItem = function (id) {\n\t\tvar that = this;\n        console.log('DATA FROM VIEW:', id);\n        // Happens in the destroy model method: \n        // callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n\t\tthat.model.delete(id, function(data) {\n            console.log('DESTROYED AND NEW DATA?', data);\n            // that.view.render('showEntries', data);\n        });\n\t};\n\n\t/**\n\t * Will toggle ALL checkboxe's on/off state and completeness of models.\n\t * Just pass in the event object.\n\t */\n\tController.prototype.toggleAll = function (completed) {\n\t\tvar that = this;\n\t\tthat.model.read({ completed: !completed }, function (data) {\n\t\t\tdata.forEach(function (item) {\n\t\t\t\tthat.toggleComplete(item.id, completed, true);\n\t\t\t});\n\t\t});\n\n\t\tthat._filter();\n\t};\n\n\t/**\n\t * Updates the pieces of the page which change depending on the remaining\n\t * number of todos.\n\t */\n\tController.prototype._updateCount = function () {\n\t\tvar that = this;\n\t\tthat.model.getCount(function (todos) {\n\t\t\tthat.view.render('updateElementCount', todos.active);\n\n\t\t\tthat.view.render('toggleAll', {checked: todos.completed === todos.total});\n\t\t\tthat.view.render('contentBlockVisibility', {visible: todos.total > 0});\n\t\t});\n\t};\n\n\t/**\n\t * Re-filters the todo items, based on the active route.\n\t * @param {boolean|undefined} force  forces a re-painting of todo items.\n\t */\n\tController.prototype._filter = function (force) {\n\t\tvar activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n\t\t// Update the elements on the page, which change with each completed todo\n\t\tthis._updateCount();\n\n\t\t// If the last active route isn't \"All\", or we're switching routes, we\n\t\t// re-create the todo item elements, calling:\n\t\t//   this.show[All|Active|Completed]();\n\t\tif (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n\t\t\tthis['show' + activeRoute]();\n\t\t}\n\n\t\tthis._lastActiveRoute = activeRoute;\n\t};\n\n\t/**\n\t * Simply updates the filter nav's selected states\n\t */\n\tController.prototype._updateFilterState = function (currentPage) {\n\t\t// Store a reference to the active route, allowing us to re-filter todo\n\t\t// items as they are marked complete or incomplete.\n\t\tthis._activeRoute = currentPage;\n\n\t\tif (currentPage === '') {\n\t\t\tthis._activeRoute = 'All';\n\t\t}\n\n\t\tthis._filter();\n\n\t\tthis.view.render('setFilter', currentPage);\n\t};\n\n\t// Export to window\n\twindow.app = window.app || {};\n\twindow.app.Controller = Controller;\n})(window);\n\n\n","offset":479,"fileType":"javascript","requestStartTime":1517929809998}}
{"body": {"column":10,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction sortNumber(a,b) {\n    return a - b;\n}\nfunction mergeArrays(a, b) {\n  let c = a.concat(b);\n  c.sort(sortNumber);\n  console.\n}\n\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":391,"fileType":"javascript","requestStartTime":1517929840794}}
{"body": {"column":21,"line":102,"wordToComplete":"","code":"\n/*global qs, qsa, $on, $parent, $live */\n\n(function (window) {\n    'use strict';\n\n    /**\n     * View that abstracts away the browser's DOM completely.\n     * It has two simple entry points:\n     *\n     *   - bind(eventName, handler)\n     *     Takes a todo application event and registers the handler\n     *   - render(command, parameterObject)\n     *     Renders the given command with the options\n     */\n    function View(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs('#todo-list');\n        this.$todoItemCounter = qs('#todo-count');\n        this.$main = qs('#main');\n        this.$footer = qs('#footer');\n        this.$toggleAll = qs('#toggle-all');\n        this.$newTodo = qs('#new-todo');\n    }\n\n    View.prototype._setFilter = function (currentPage) {\n        qs('#filters .selected').className = '';\n        qs('#filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n    };\n\n    View.prototype._elementComplete = function (id, completed) {\n        var listItem = qs('[data-id=\"' + id + '\"]');\n\n        if (!listItem) {\n            return;\n        }\n\n        listItem.className = completed ? 'completed' : '';\n\n        // In case it was toggled from an event and not by clicking the checkbox\n        qs('input', listItem).checked = completed;\n    };\n\n    View.prototype.render = function (viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                that._setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = '';\n            },\n            elementComplete: function () {\n                that._elementComplete(parameter.id, parameter.completed);\n            }\n        };\n\n        viewCommands[viewCmd]();\n    };\n\n    View.prototype._itemId = function (element) {\n        var li = $parent(element, 'li');\n        return parseInt(li.dataset.id, 10);\n    };\n\n    View.prototype.bind = function (event, handler) {\n        var that = this;\n        if (event === 'newTodo') {\n            $on(that.$newTodo, 'change', function () {\n                handler(that.$newTodo.value);\n            });\n\n        } else if (event === 'toggleAll') {\n            $on(that.$toggleAll, 'click', function () {\n                handler({completed: this.checked});\n            });\n\n        } else if (event === 'itemToggle') {\n            $live('#todo-list .toggle', 'click', function () {\n                handler({\n                    id: that._itemId(this),\n                    completed: this.checked\n                });\n            });\n\n        } else if (event === 'deleteItem') {\n            $on(that.)\n        }\n    };\n\n    // Export to window\n    window.app = window.app || {};\n    window.app.View = View;\n}(window));\n\n\n","offset":3286,"fileType":"javascript","requestStartTime":1517929890568}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction degreeOfArray(arr) {\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = degreeOfArray(arr);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":302,"fileType":"javascript","requestStartTime":1517929895859}}
{"body": {"column":8,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction bigSorting(arr) {\n    // Complete this function\n    arr.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var arr = [];\n    for(var arr_i = 0; arr_i < n; arr_i++){\n       arr[arr_i] = readLine();\n    }\n    var result = bigSorting(arr);\n    console.log(result.join(\"\\n\"));\n\n\n\n}\n\n\n","offset":524,"fileType":"javascript","requestStartTime":1517929911023}}
{"body": {"column":20,"line":103,"wordToComplete":"","code":"\n/*global qs, qsa, $on, $parent, $live */\n\n(function (window) {\n    'use strict';\n\n    /**\n     * View that abstracts away the browser's DOM completely.\n     * It has two simple entry points:\n     *\n     *   - bind(eventName, handler)\n     *     Takes a todo application event and registers the handler\n     *   - render(command, parameterObject)\n     *     Renders the given command with the options\n     */\n    function View(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs('#todo-list');\n        this.$todoItemCounter = qs('#todo-count');\n        this.$main = qs('#main');\n        this.$footer = qs('#footer');\n        this.$toggleAll = qs('#toggle-all');\n        this.$newTodo = qs('#new-todo');\n    }\n\n    View.prototype._setFilter = function (currentPage) {\n        qs('#filters .selected').className = '';\n        qs('#filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n    };\n\n    View.prototype._elementComplete = function (id, completed) {\n        var listItem = qs('[data-id=\"' + id + '\"]');\n\n        if (!listItem) {\n            return;\n        }\n\n        listItem.className = completed ? 'completed' : '';\n\n        // In case it was toggled from an event and not by clicking the checkbox\n        qs('input', listItem).checked = completed;\n    };\n\n    View.prototype.render = function (viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                that._setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = '';\n            },\n            elementComplete: function () {\n                that._elementComplete(parameter.id, parameter.completed);\n            }\n        };\n\n        viewCommands[viewCmd]();\n    };\n\n    View.prototype._itemId = function (element) {\n        var li = $parent(element, 'li');\n        return parseInt(li.dataset.id, 10);\n    };\n\n    View.prototype.bind = function (event, handler) {\n        var that = this;\n        if (event === 'newTodo') {\n            $on(that.$newTodo, 'change', function () {\n                handler(that.$newTodo.value);\n            });\n\n        } else if (event === 'toggleAll') {\n            $on(that.$toggleAll, 'click', function () {\n                handler({completed: this.checked});\n            });\n\n        } else if (event === 'itemToggle') {\n            $live('#todo-list .toggle', 'click', function () {\n                handler({\n                    id: that._itemId(this),\n                    completed: this.checked\n                });\n            });\n\n        } else if (event === 'deleteItem') {\n            // $on(that.$deleteTodo, )\n            console.\n        }\n    };\n\n    // Export to window\n    window.app = window.app || {};\n    window.app.View = View;\n}(window));\n\n\n","offset":3324,"fileType":"javascript","requestStartTime":1517929916811}}
{"body": {"column":8,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction degreeOfArray(arr) {\n    arr.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = degreeOfArray(arr);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":298,"fileType":"javascript","requestStartTime":1517929933050}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"\n/*global qs, qsa, $on, $parent, $live */\n\n(function (window) {\n    'use strict';\n\n    /**\n     * View that abstracts away the browser's DOM completely.\n     * It has two simple entry points:\n     *\n     *   - bind(eventName, handler)\n     *     Takes a todo application event and registers the handler\n     *   - render(command, parameterObject)\n     *     Renders the given command with the options\n     */\n    function View(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs('#todo-list');\n        this.\n        this.$todoItemCounter = qs('#todo-count');\n        this.$main = qs('#main');\n        this.$footer = qs('#footer');\n        this.$toggleAll = qs('#toggle-all');\n        this.$newTodo = qs('#new-todo');\n    }\n\n    View.prototype._setFilter = function (currentPage) {\n        qs('#filters .selected').className = '';\n        qs('#filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n    };\n\n    View.prototype._elementComplete = function (id, completed) {\n        var listItem = qs('[data-id=\"' + id + '\"]');\n\n        if (!listItem) {\n            return;\n        }\n\n        listItem.className = completed ? 'completed' : '';\n\n        // In case it was toggled from an event and not by clicking the checkbox\n        qs('input', listItem).checked = completed;\n    };\n\n    View.prototype.render = function (viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                that._setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = '';\n            },\n            elementComplete: function () {\n                that._elementComplete(parameter.id, parameter.completed);\n            }\n        };\n\n        viewCommands[viewCmd]();\n    };\n\n    View.prototype._itemId = function (element) {\n        var li = $parent(element, 'li');\n        return parseInt(li.dataset.id, 10);\n    };\n\n    View.prototype.bind = function (event, handler) {\n        var that = this;\n        if (event === 'newTodo') {\n            $on(that.$newTodo, 'change', function () {\n                handler(that.$newTodo.value);\n            });\n\n        } else if (event === 'toggleAll') {\n            $on(that.$toggleAll, 'click', function () {\n                handler({completed: this.checked});\n            });\n\n        } else if (event === 'itemToggle') {\n            $live('#todo-list .toggle', 'click', function () {\n                handler({\n                    id: that._itemId(this),\n                    completed: this.checked\n                });\n            });\n\n        } else if (event === 'deleteItem') {\n            // $on(that.$deleteTodo, )\n            console.log('EVENT DELETE ITEM:', event)\n        }\n    };\n\n    // Export to window\n    window.app = window.app || {};\n    window.app.View = View;\n}(window));\n\n\n","offset":591,"fileType":"javascript","requestStartTime":1517929951642}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var res = [];\n    var numLength = nums.length;\n    \n    for (var i = 0; i < numLength; i++) {\n        var testNumber = 2;\n        var isPowerOf2 = false;\n        \n        for (var j=0; testNumber <= nums[i]; i++) {\n            if(testNumber == nums[i]) {\n                isPowerOf2 = true;\n            }\n            testNumber = testNumber * 2;\n        }\n        res.\n        if (isPowerOf2) {\n            res.push(\"1\");\n        } else {\n            res.push(\"0\");\n        }\n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":659,"fileType":"javascript","requestStartTime":1517929994132}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction degreeOfArray(arr) {\n    let times;\n    arr.forEach(function(element) {\n        if(arr.)\n    });\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = degreeOfArray(arr);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":356,"fileType":"javascript","requestStartTime":1517930137180}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction isPowerOf2(nums) {\n    var res = [];\n    var numLength = nums.length;\n    \n    for (var i = 0; i < numLength; i++) {\n        var testNumber = 2;\n        var isPowerOf2 = false;\n        \n        for (var j=0; testNumber <= nums[i]; i++) {\n           if(Marh.)\n        }\n        res.push(nums[i]);\n        if (isPowerOf2) {\n            res.push(\"1\");\n        } else {\n            res.push(\"0\");\n        }\n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nums;\n    var nums_size = 0;\n    nums_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var nums = [];\n    var nums_item;\n    for (var nums_i = 0; nums_i < nums_size; nums_i++) {\n        var nums_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        nums.push(nums_item);\n    }\n\n\n    res = isPowerOf2(nums);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":526,"fileType":"javascript","requestStartTime":1517930172211}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    var matrix = a;\n    var n = matrix.length;\n    var diag1 = 0;\n    var diag2 = 0;\n    \n    for(var i=0; i<n; i++){\n        for(var j=0; j<n; j++){\n            // an element from the main diagonal\n            if(i === j) { \n                diag1 += matrix[i][j];\n            }\n            // an element from the counterdiagonal\n            if(i + j === n - 1){\n                diag2 += matrix[i][j];\n            }\n        }\n    }\n    console.\n    return Math.abs(diag1 - diag2);\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":966,"fileType":"javascript","requestStartTime":1517930179914}}
{"body": {"column":18,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    var matrix = a;\n    var n = matrix.length;\n    var diag1 = 0;\n    var diag2 = 0;\n    \n    for(var i=0; i<n; i++){\n        for(var j=0; j<n; j++){\n            // an element from the main diagonal\n            if(i === j) { \n                diag1 += matrix[i][j];\n            }\n            // an element from the counterdiagonal\n            if(i + j === n - 1){\n                diag2 += matrix[i][j];\n            }\n        }\n    }\n    console.log().\n    return Math.abs(diag1 - diag2);\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":972,"fileType":"javascript","requestStartTime":1517930183951}}
{"body": {"column":24,"line":104,"wordToComplete":"","code":"\n/*global qs, qsa, $on, $parent, $live */\n\n(function (window) {\n    'use strict';\n\n    /**\n     * View that abstracts away the browser's DOM completely.\n     * It has two simple entry points:\n     *\n     *   - bind(eventName, handler)\n     *     Takes a todo application event and registers the handler\n     *   - render(command, parameterObject)\n     *     Renders the given command with the options\n     */\n    function View(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs('#todo-list');\n        this.$deleteItem = qs('#delete-item');\n        this.$todoItemCounter = qs('#todo-count');\n        this.$main = qs('#main');\n        this.$footer = qs('#footer');\n        this.$toggleAll = qs('#toggle-all');\n        this.$newTodo = qs('#new-todo');\n    }\n\n    View.prototype._setFilter = function (currentPage) {\n        qs('#filters .selected').className = '';\n        qs('#filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n    };\n\n    View.prototype._elementComplete = function (id, completed) {\n        var listItem = qs('[data-id=\"' + id + '\"]');\n\n        if (!listItem) {\n            return;\n        }\n\n        listItem.className = completed ? 'completed' : '';\n\n        // In case it was toggled from an event and not by clicking the checkbox\n        qs('input', listItem).checked = completed;\n    };\n\n    View.prototype.render = function (viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                that._setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = '';\n            },\n            elementComplete: function () {\n                that._elementComplete(parameter.id, parameter.completed);\n            }\n        };\n\n        viewCommands[viewCmd]();\n    };\n\n    View.prototype._itemId = function (element) {\n        var li = $parent(element, 'li');\n        return parseInt(li.dataset.id, 10);\n    };\n\n    View.prototype.bind = function (event, handler) {\n        var that = this;\n        if (event === 'newTodo') {\n            $on(that.$newTodo, 'change', function () {\n                handler(that.$newTodo.value);\n            });\n\n        } else if (event === 'toggleAll') {\n            $on(that.$toggleAll, 'click', function () {\n                handler({completed: this.checked});\n            });\n\n        } else if (event === 'itemToggle') {\n            $live('#todo-list .toggle', 'click', function () {\n                handler({\n                    id: that._itemId(this),\n                    completed: this.checked\n                });\n            });\n\n        } else if (event === 'deleteItem') {\n            $on(that.$deleteTodo, 'click', function () {\n                console.\n            } )\n        }\n    };\n\n    // Export to window\n    window.app = window.app || {};\n    window.app.View = View;\n}(window));\n\n\n","offset":3393,"fileType":"javascript","requestStartTime":1517930199327}}
{"body": {"column":18,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    \n    let numberOfItems = origItems.length > items.length ? origItems.length-1 : items.length-1;\n    let errors = 0;\n    let item = origItems[numberOfItems];\n    \n    while(numberOfItems >= 0)\n    {\n        \n        if( items. != prices[numberOfItems]){\n            errors++;\n        }\n        numberOfItems--;\n    }\n    \n    return errors;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":550,"fileType":"javascript","requestStartTime":1517930260960}}
{"body": {"column":20,"line":103,"wordToComplete":"","code":"\n/*global qs, qsa, $on, $parent, $live */\n\n(function (window) {\n    'use strict';\n\n    /**\n     * View that abstracts away the browser's DOM completely.\n     * It has two simple entry points:\n     *\n     *   - bind(eventName, handler)\n     *     Takes a todo application event and registers the handler\n     *   - render(command, parameterObject)\n     *     Renders the given command with the options\n     */\n    function View(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs('#todo-list');\n        this.$deleteItem = qs('#delete-item');\n        this.$todoItemCounter = qs('#todo-count');\n        this.$main = qs('#main');\n        this.$footer = qs('#footer');\n        this.$toggleAll = qs('#toggle-all');\n        this.$newTodo = qs('#new-todo');\n    }\n\n    View.prototype._setFilter = function (currentPage) {\n        qs('#filters .selected').className = '';\n        qs('#filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n    };\n\n    View.prototype._elementComplete = function (id, completed) {\n        var listItem = qs('[data-id=\"' + id + '\"]');\n\n        if (!listItem) {\n            return;\n        }\n\n        listItem.className = completed ? 'completed' : '';\n\n        // In case it was toggled from an event and not by clicking the checkbox\n        qs('input', listItem).checked = completed;\n    };\n\n    View.prototype.render = function (viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                that._setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = '';\n            },\n            elementComplete: function () {\n                that._elementComplete(parameter.id, parameter.completed);\n            }\n        };\n\n        viewCommands[viewCmd]();\n    };\n\n    View.prototype._itemId = function (element) {\n        var li = $parent(element, 'li');\n        return parseInt(li.dataset.id, 10);\n    };\n\n    View.prototype.bind = function (event, handler) {\n        var that = this;\n        if (event === 'newTodo') {\n            $on(that.$newTodo, 'change', function () {\n                handler(that.$newTodo.value);\n            });\n\n        } else if (event === 'toggleAll') {\n            $on(that.$toggleAll, 'click', function () {\n                handler({completed: this.checked});\n            });\n\n        } else if (event === 'itemToggle') {\n            $live('#todo-list .toggle', 'click', function () {\n                handler({\n                    id: that._itemId(this),\n                    completed: this.checked\n                });\n            });\n\n        } else if (event === 'deleteItem') {\n            console.\n            $on(that.$deleteTodo, 'click', function () {\n                console.log('CLICKED ON TODO:', this);\n            });\n        }\n    };\n\n    // Export to window\n    window.app = window.app || {};\n    window.app.View = View;\n}(window));\n\n\n","offset":3332,"fileType":"javascript","requestStartTime":1517930285121}}
{"body": {"column":12,"line":57,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var swapsToZero = swapToZeroWithAutomation(n, doors);\n    var swapsToOne = swapToZero(n, doors);  \n}\n\nfunction swapToZeroWithAutomation(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if (doors[i] == 1){\n            numberOfSwaps++;\n            if(doors[i+1] == 1 ){\n                i++;\n            };\n        };\n    };\n    return numberOfSwaps;\n};\n\nfunction swapToZero(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if(doors[i] == 1){\n            numberOfSwaps++;\n        };\n    };\n    return numberOfSwaps;\n};\n\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    console.\n    var result = revisedRussianRoulette(n, doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":1244,"fileType":"javascript","requestStartTime":1517930333260}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction degreeOfArray(arr) {\n    let times;\n    let count = (input, arr) => arr.filter(x => x === input).length;\n    let exists;\n    arr.forEach(function(arr) {\n        count(element, liste));\n        if(count > 2)\n            times +=1;\n    });\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = degreeOfArray(arr);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":519,"fileType":"javascript","requestStartTime":1517930339709}}
{"body": {"column":42,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var min = doors.toString().split(\"0\").\n    var maxReg = /1/ig;\n    // Complete this function\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":542,"fileType":"javascript","requestStartTime":1517930341445}}
{"body": {"column":31,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var length = a.length || b.;\n    var res = [];\n    \n    if(length) {\n        for (var i =0; i < length; i++) {\n            var S = (a[i] + b[i] + c[i])/2;\n            var value = S*(S - a[i]) * (S - b[i]) * (S - c[i]);\n\n            var size = Math.sqrt(value);\n\n            if(size > 0) {\n                res.push(\"Yes\");\n            } else {\n                res.push(\"No\");\n            }\n        } \n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":325,"fileType":"javascript","requestStartTime":1517930382436}}
{"body": {"column":43,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction triangleOrNot(a, b, c) {\n    var length = a.length || b.length || c.;\n    var res = [];\n    \n    if(length) {\n        for (var i =0; i < length; i++) {\n            var S = (a[i] + b[i] + c[i])/2;\n            var value = S*(S - a[i]) * (S - b[i]) * (S - c[i]);\n\n            var size = Math.sqrt(value);\n\n            if(size > 0) {\n                res.push(\"Yes\");\n            } else {\n                res.push(\"No\");\n            }\n        } \n    }\n    \n    return res;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n    var c;\n    var c_size = 0;\n    c_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var c = [];\n    var c_item;\n    for (var c_i = 0; c_i < c_size; c_i++) {\n        var c_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        c.push(c_item);\n    }\n\n\n    res = triangleOrNot(a, b, c);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":337,"fileType":"javascript","requestStartTime":1517930389723}}
{"body": {"column":12,"line":58,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var swapsToZero = swapToZeroWithAutomation(n, doors);\n    var swapsToOne = swapToZero(n, doors);  \n}\n\nfunction swapToZeroWithAutomation(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if (doors[i] == 1){\n            numberOfSwaps++;\n            if(doors[i+1] == 1 ){\n                i++;\n            };\n        };\n    };\n    return numberOfSwaps;\n};\n\nfunction swapToZero(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if(doors[i] == 1){\n            numberOfSwaps++;\n        };\n    };\n    return numberOfSwaps;\n};\n\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    console.log(doors);\n    console.\n    var result = revisedRussianRoulette(n, doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":1268,"fileType":"javascript","requestStartTime":1517930423552}}
{"body": {"column":12,"line":59,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var swapsToZero = swapToZeroWithAutomation(n, doors);\n    var swapsToOne = swapToZero(n, doors);  \n}\n\nfunction swapToZeroWithAutomation(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if (doors[i] == 1){\n            numberOfSwaps++;\n            if(doors[i+1] == 1 ){\n                i++;\n            };\n        };\n    };\n    return numberOfSwaps;\n};\n\nfunction swapToZero(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if(doors[i] == 1){\n            numberOfSwaps++;\n        };\n    };\n    return numberOfSwaps;\n};\n\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    console.log(doors);\n    console.log(doors[1]);\n    console.\n    var result = revisedRussianRoulette(n, doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":1295,"fileType":"javascript","requestStartTime":1517930458224}}
{"body": {"column":22,"line":59,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var swapsToZero = swapToZeroWithAutomation(n, doors);\n    var swapsToOne = swapToZero(n, doors);  \n}\n\nfunction swapToZeroWithAutomation(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if (doors[i] == 1){\n            numberOfSwaps++;\n            if(doors[i+1] == 1 ){\n                i++;\n            };\n        };\n    };\n    return numberOfSwaps;\n};\n\nfunction swapToZero(n, doors){\n    var numberOfSwaps = 0;\n    for(var i = 0 ; i < n ; i++){\n        if(doors[i] == 1){\n            numberOfSwaps++;\n        };\n    };\n    return numberOfSwaps;\n};\n\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    console.log(doors);\n    console.log(doors[1]);\n    console.log(doors.);\n    var result = revisedRussianRoulette(n, doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":1305,"fileType":"javascript","requestStartTime":1517930462128}}
{"body": {"column":16,"line":83,"wordToComplete":"","code":"\n/*global qs, qsa, $on, $parent, $live */\n\n(function (window) {\n    'use strict';\n\n    /**\n     * View that abstracts away the browser's DOM completely.\n     * It has two simple entry points:\n     *\n     *   - bind(eventName, handler)\n     *     Takes a todo application event and registers the handler\n     *   - render(command, parameterObject)\n     *     Renders the given command with the options\n     */\n    function View(template) {\n        this.template = template;\n\n        this.ENTER_KEY = 13;\n        this.ESCAPE_KEY = 27;\n\n        this.$todoList = qs('#todo-list');\n        this.$deleteItem = qs('#delete-item');\n        this.$todoItemCounter = qs('#todo-count');\n        this.$main = qs('#main');\n        this.$footer = qs('#footer');\n        this.$toggleAll = qs('#toggle-all');\n        this.$newTodo = qs('#new-todo');\n    }\n\n    View.prototype._setFilter = function (currentPage) {\n        qs('#filters .selected').className = '';\n        qs('#filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n    };\n\n    View.prototype._elementComplete = function (id, completed) {\n        var listItem = qs('[data-id=\"' + id + '\"]');\n\n        if (!listItem) {\n            return;\n        }\n\n        listItem.className = completed ? 'completed' : '';\n\n        // In case it was toggled from an event and not by clicking the checkbox\n        qs('input', listItem).checked = completed;\n    };\n\n    View.prototype.render = function (viewCmd, parameter) {\n        var that = this;\n        var viewCommands = {\n            showEntries: function () {\n                that.$todoList.innerHTML = that.template.show(parameter);\n            },\n            updateElementCount: function () {\n                that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n            },\n            contentBlockVisibility: function () {\n                that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n            },\n            toggleAll: function () {\n                that.$toggleAll.checked = parameter.checked;\n            },\n            setFilter: function () {\n                that._setFilter(parameter);\n            },\n            clearNewTodo: function () {\n                that.$newTodo.value = '';\n            },\n            elementComplete: function () {\n                that._elementComplete(parameter.id, parameter.completed);\n            }\n        };\n\n        viewCommands[viewCmd]();\n    };\n\n    View.prototype._itemId = function (element) {\n        var li = $parent(element, 'li');\n        return parseInt(li.dataset.id, 10);\n    };\n\n    View.prototype.bind = function (event, handler) {\n        console.\n        var that = this;\n        if (event === 'newTodo') {\n            $on(that.$newTodo, 'change', function () {\n                handler(that.$newTodo.value);\n            });\n\n        } else if (event === 'toggleAll') {\n            $on(that.$toggleAll, 'click', function () {\n                handler({completed: this.checked});\n            });\n\n        } else if (event === 'itemToggle') {\n            $live('#todo-list .toggle', 'click', function () {\n                handler({\n                    id: that._itemId(this),\n                    completed: this.checked\n                });\n            });\n\n        } else if (event === 'deleteItem') {\n            console.log('EVENT DELETE ITEM:', event);\n            $on(that.$deleteItem, 'click', function () {\n                console.log('CLICKED ON TODO:', this);\n            });\n        }\n    };\n\n    // Export to window\n    window.app = window.app || {};\n    window.app.View = View;\n}(window));\n\n\n","offset":2677,"fileType":"javascript","requestStartTime":1517930467612}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":418,"fileType":"javascript","requestStartTime":1517930510063}}
{"body": {"column":28,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount - arr.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":543,"fileType":"javascript","requestStartTime":1517930550917}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount - arr.length;\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":563,"fileType":"javascript","requestStartTime":1517930557847}}
{"body": {"column":25,"line":19,"wordToComplete":"jsonmock.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.get(\n        https;//jsonmock.\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":448,"fileType":"javascript","requestStartTime":1517930562668}}
{"body": {"column":36,"line":19,"wordToComplete":"jsonmock.hackerrank.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.get(\n        https;//jsonmock.hackerrank.\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":459,"fileType":"javascript","requestStartTime":1517930570097}}
{"body": {"column":40,"line":19,"wordToComplete":"jsonmock.hackerrank.com.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.get(\n        https;//jsonmock.hackerrank.com.\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":463,"fileType":"javascript","requestStartTime":1517930573769}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction icecreamParlor(m, arr) {\n    for (i=0; i<arr.)\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var m = parseInt(readLine());\n        var n = parseInt(readLine());\n        arr = readLine().split(' ');\n        arr = arr.map(Number);\n        var result = icecreamParlor(m, arr);\n        console.log(result.join(\" \"));\n    }\n\n}\n\n\n","offset":513,"fileType":"javascript","requestStartTime":1517930606988}}
{"body": {"column":6,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.get(\n        'https;//jsonmock.hackerrank.com/api/movies/search/?Title=' + substr,\n    ).\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":507,"fileType":"javascript","requestStartTime":1517930621741}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction icecreamParlor(m, arr) {\n    for (i=0; i<arr.length; i++){\n        for (j=1; j<arr.)\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var m = parseInt(readLine());\n        var n = parseInt(readLine());\n        arr = readLine().split(' ');\n        arr = arr.map(Number);\n        var result = icecreamParlor(m, arr);\n        console.log(result.join(\" \"));\n    }\n\n}\n\n\n","offset":551,"fileType":"javascript","requestStartTime":1517930627526}}
{"body": {"column":20,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.get(\n        'https;//jsonmock.hackerrank.com/api/movies/search/?Title=' + substr,\n    ).then(\n        response => {\n            console.\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":555,"fileType":"javascript","requestStartTime":1517930631854}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n\n    https.get(\n        'https;//jsonmock.hackerrank.com/api/movies/search/?Title=' + substr,\n        function(response) {\n            console.\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":550,"fileType":"javascript","requestStartTime":1517930702356}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var T = parseInt(readLine());\n    for(var a0 = 0; a0 < T; a0++){\n        var L_temp = readLine().split(' ');\n        var L = parseInt(L_temp[0]);\n        var A = parseInt(L_temp[1]);\n        var N = parseInt(L_temp[2]);\n        var D = parseInt(L_temp[3]);\n        \n        if(A<D){\n            console.\n        }\n    }\n\n}\n\n\n","offset":784,"fileType":"javascript","requestStartTime":1517930712218}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction icecreamParlor(m, arr) {\n    console.\n    for (i=0; i<arr.length; i++){\n        for (j=1; j<arr.length; j++){\n            if(arr[i]+arr[j]=== m){\n                return [arr[i], arr[j]]\n            }\n        }\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var m = parseInt(readLine());\n        var n = parseInt(readLine());\n        arr = readLine().split(' ');\n        arr = arr.map(Number);\n        var result = icecreamParlor(m, arr);\n        console.log(result.join(\" \"));\n    }\n\n}\n\n\n","offset":505,"fileType":"javascript","requestStartTime":1517930762982}}
{"body": {"column":33,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n\n    https.get(\n        url,\n        function(response) {\n            console.log(response.)\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":581,"fileType":"javascript","requestStartTime":1517930832187}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n\n    https.get(\n        url,\n        function(response) {\n            console.log(response.data)\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":419,"fileType":"javascript","requestStartTime":1517930848879}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n    console.\n    https.get(\n        url,\n        function(response) {\n            console.log(response.data)\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":527,"fileType":"javascript","requestStartTime":1517930862819}}
{"body": {"column":7,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction preventDefDrop(ev){\n    ev.\n}\n\n","offset":66,"fileType":"javascript","requestStartTime":1517930888834}}
{"body": {"column":21,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var T = parseInt(readLine());\n    for(var a0 = 0; a0 < T; a0++){\n        var L_temp = readLine().split(' ');\n        var L = parseInt(L_temp[0]);\n        var A = parseInt(L_temp[1]);\n        var N = parseInt(L_temp[2]);\n        var D = parseInt(L_temp[3]);\n        var totalPrice = 0;\n        \n        if(A<D){\n            console.log(SAD);\n        }\n        else {\n            (for var i = A, i--, i<=N) {\n                totalPrice = totalPrice + (A * D);\n            }\n            c onsole.\n        }\n    }\n\n}\n\n\n","offset":974,"fileType":"javascript","requestStartTime":1517930921867}}
{"body": {"column":33,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n    console.log(url);\n    https.get(\n        url,\n        function(response) {\n            console.log(response.)\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":627,"fileType":"javascript","requestStartTime":1517931005684}}
{"body": {"column":20,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var pos = 0;\n    var neg = 0;\n    var zer = 0;\n    \n    for (i=0; i<arr.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":591,"fileType":"javascript","requestStartTime":1517931022217}}
{"body": {"column":94,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var str = doors.join(\"\");\n    var runs = str.split(\"0\").filter(el => el.length > 0).map(el => Math.floor(el.length / 2).);\n    console.log(runs);\n    var max = str.match(/1/g).length;\n    \n    return [min, max];\n    // Complete this function\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":624,"fileType":"javascript","requestStartTime":1517931085465}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n    console.log(url);\n    https.get(\n        url,\n        (res) => {\n            res.\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":600,"fileType":"javascript","requestStartTime":1517931171281}}
{"body": {"column":28,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n    console.log(url);\n    https.get(\n        url,\n        (res) => {\n            res.on(\n                'data',\n                (data) => {\n                    console.\n                }\n            )\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":684,"fileType":"javascript","requestStartTime":1517931193923}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var newArr = [];\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        if(Number.isInteger(currentNumber) && currentNumber > 0){\n            console.\n        }\n    }\n    \n    console.log(2 / arrTotalCount)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":730,"fileType":"javascript","requestStartTime":1517931276187}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    \n    var options = {\n        hostname: 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr,\n        method: 'GET'\n    }\n    \n    req = https.\n    console.log(substr);\n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr\n    console.log(url);\n    https.get(\n        url,\n        (res) => {\n            res.on(\n                'data',\n                (d) => {\n                    console.log(d)\n                }\n            )\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":569,"fileType":"javascript","requestStartTime":1517931333506}}
{"body": {"column":11,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var str = doors.join(\"\");\n    \n    var runs = str.split(\"0\").filter(el => el.length > 0);  // create array of runs of 1's\n    var min = runs.map(el => Math.ceil(el.length / 2)).reduce(function(a, b){ return a + b}, 0); // count min number of opens and sum (open forwards)\n    \n    if(str.)\n    var max = str.match(/1/g).length; // count max number of opens (open backwards)\n    \n    return [min, max];\n    // Complete this function\n}\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":792,"fileType":"javascript","requestStartTime":1517931409885}}
{"body": {"column":41,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var str = doors.join(\"\");\n    \n    var runs = str.split(\"0\").filter(el => el.length > 0);  // create array of runs of 1's\n    var min = runs.map(el => Math.ceil(el.length / 2)).reduce(function(a, b){ return a + b}, 0); // count min number of opens and sum (open forwards)\n    \n    var onesCount = str.match(/1/g); // count max number of opens (open backwards)\n    var max = (onesCount > 0 ? onesCount.\n    \n    return [min, max];\n    // Complete this function\n}\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":905,"fileType":"javascript","requestStartTime":1517931453899}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var newArr = [];\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        \n        console.\n        Math.sign(currentNumber);\n        \n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":669,"fileType":"javascript","requestStartTime":1517931501721}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar clickEvnt = function() {\n    alert(this.)\n}\n\n","offset":75,"fileType":"javascript","requestStartTime":1517931498971}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar clickEvnt = function() {\n    alert(this.id);\n}\n\ndocument.\n\n","offset":92,"fileType":"javascript","requestStartTime":1517931503076}}
{"body": {"column":32,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar clickEvnt = function() {\n    alert(this.id);\n}\n\ndocument.getElementById('Div1').\n\n","offset":115,"fileType":"javascript","requestStartTime":1517931555357}}
{"body": {"column":25,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var movieStrings = [];\n    \n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            console.log('statusCode:', res.statusCode);\n              console.log('headers:', res.headers);\n\n              res.on('data', (d) => {\n                 console.process.stdout.write(d);\n             });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":772,"fileType":"javascript","requestStartTime":1517931574557}}
{"body": {"column":37,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var movieStrings = [];\n    \n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n              res.on('data', (d) => {\n                 console.log(process.(d));\n             });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":675,"fileType":"javascript","requestStartTime":1517931610282}}
{"body": {"column":44,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    console.log(substr);\n    var movieStrings = [];\n    \n    var url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n              res.on('data', (d) => {\n                 console.log(process.stdout.(d));\n             });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":682,"fileType":"javascript","requestStartTime":1517931614419}}
{"body": {"column":32,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar clickEvnt = function() {\n    alert(this.id);\n}\n\ndocument.getElementById('Div1').\n\n","offset":115,"fileType":"javascript","requestStartTime":1517931656648}}
{"body": {"column":15,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar clickEvnt = function() {\n    alert(this.);\n}\n\ndocument.getElementById('Div1').onclick = clickEvnt;\ndocument.getElementById('Div2').onclick = clickEvnt;\ndocument.getElementById('Div3').onclick = clickEvnt;\n\n","offset":75,"fileType":"javascript","requestStartTime":1517931681991}}
{"body": {"column":28,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n   var mek = simpleArraySum.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":520,"fileType":"javascript","requestStartTime":1517931758752}}
{"body": {"column":9,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let largestDifference = 0;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tfor (let j = i, difference; j < a.length; j++) {\n\t\t\tdifference = a[j] - a[i];\n\t\t\tif (difference > largestDifference) {\n\t\t\t\tlargestDifference = difference;\n\t\t\t}\n\t\t}\n\t}\n\tconsole.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":535,"fileType":"javascript","requestStartTime":1517931802178}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n   var mek = ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":508,"fileType":"javascript","requestStartTime":1517931804807}}
{"body": {"column":34,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let movieStrings = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                console.log(body);\n            });\n            \n            for(let i = 0; i<body.)\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":879,"fileType":"javascript","requestStartTime":1517931885669}}
{"body": {"column":39,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let movieStrings = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                console.log(body);\n            });\n            \n            for(let i = 0; i<body.data.)\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":884,"fileType":"javascript","requestStartTime":1517931886807}}
{"body": {"column":29,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let movieStrings = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                console.log(body);\n            });\n            \n            for(let i = 0; i<body.data.length; i++) {\n                movieStrings.\n            }\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":928,"fileType":"javascript","requestStartTime":1517931910231}}
{"body": {"column":39,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let movieStrings = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                console.log(body);\n            });\n            \n            for(let i = 0; i<body.data.length; i++) {\n                movieStrings.push(body.)\n            }\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":938,"fileType":"javascript","requestStartTime":1517931915264}}
{"body": {"column":20,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let movieStrings = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                console.log(body);\n            });\n            \n            for(let i = 0; i<body.data.length; i++) {\n                movieStrings.push(body.data[i]);\n            }\n            console.\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":982,"fileType":"javascript","requestStartTime":1517931925690}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    for (var =  i, i <= arr.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":318,"fileType":"javascript","requestStartTime":1517932023838}}
{"body": {"column":51,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let movieStrings = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    movieStrings.push(body.data[i].);\n                }\n                \n                console.log(movieStrings);\n            });\n            \n            \n            \n             \n            \n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":907,"fileType":"javascript","requestStartTime":1517932045929}}
{"body": {"column":35,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                \n                \n                console.log(titles.);\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1007,"fileType":"javascript","requestStartTime":1517932221096}}
{"body": {"column":31,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                \n                title = titles.\n                console.log(titles.sort());\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":986,"fileType":"javascript","requestStartTime":1517932241239}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    var mek = 0;\n   for(var i = 0;i > ar;i++){\n       var mek = ar.\n   }\n    return mek;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":559,"fileType":"javascript","requestStartTime":1517932254359}}
{"body": {"column":26,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var count = 0;\n    for(var i = 0 ; i < s.)\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":598,"fileType":"javascript","requestStartTime":1517932263013}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var count = 0;\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        console.\n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":634,"fileType":"javascript","requestStartTime":1517932280714}}
{"body": {"column":38,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                var totalPages = body.\n                \n                \n                \n                console.log(titles.sort());\n                //return title = titles.sort();\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":976,"fileType":"javascript","requestStartTime":1517932288805}}
{"body": {"column":13,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var count = 0;\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.)\n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":631,"fileType":"javascript","requestStartTime":1517932293224}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(a) {\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":300,"fileType":"javascript","requestStartTime":1517932346273}}
{"body": {"column":26,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                var totalPages = body.total_pages;\n                \n                for(let j = 0; j < totalPages; j++) {\n                    https.\n                }\n                \n                \n                \n                console.log(titles.sort());\n                //return title = titles.sort();\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1086,"fileType":"javascript","requestStartTime":1517932353074}}
{"body": {"column":37,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var arr = [];\n    for(arr_i = 0; arr_i < 6; arr_i++){\n       arr[arr_i] = readLine().split(' ');\n       arr[arr_i] = arr[arr_i].map(Number);\n    }\n    \n    function hourglass(array, rowIndex, colIndex) {\n        for(let row = 0; row < array.)\n    }\n\n}\n\n\n","offset":722,"fileType":"javascript","requestStartTime":1517932375824}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.)\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.charAt(i))\n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":582,"fileType":"javascript","requestStartTime":1517932462597}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.charAt(i) == a ||\n           s.)\n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":681,"fileType":"javascript","requestStartTime":1517932489902}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"\n// inputに標準入力全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");  // inputを分割し、各要素に入力の各行が格納された配列として再代入\n  var line1 = input[0];  // 標準入力の1行目(input[0])を格納\n  var line1 = line1.split(\" \") // line1の文字列を\" \"(半角スペース)で分割した結果を配列として再代入\n  var N = parseInt(line1[0]); // 1行目の1要素目を整数型に変換\n  var Q = parseInt(line1[1]); // 1行目の2要素目を整数型に変換\n    \n  height = []  // N個の身長を格納する空配列を作成\n  for(var i = 0; i < N; i++){  //  N回処理を繰り返す\n    height[i] = parseInt(input[i+1])  // heightに身長(inputのi+2行目=input[i+1])をint型に変換して追加\n  }\n  \n  for(var i = 0; i < Q; i++){  //  Q回処理を繰り返す\n    query = input[N+i+1]  // inputのN+i+2行目をqueryに代入\n    query = query.\n    answer = 0\n    for(var i = 0; i < N; i++){\n        if(height[i] >=)\n    }\n    console.log(answer)  // 答えを出力\n  }\n}\n\n//*以下の行は編集しないでください*\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n","offset":625,"fileType":"javascript","requestStartTime":1517932572069}}
{"body": {"column":22,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        output[i] = s.\n        if(s.charAt(i) == 'a' ||\n           s.charAt(i) == 'e' ||\n           s.charAt(i) == 'i' ||\n           s.charAt(i) == 'o' ||\n           s.charAt(i) == 'u'\n          )\n            \n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":659,"fileType":"javascript","requestStartTime":1517932646237}}
{"body": {"column":26,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n        output[i] = s.charAt(i);\n    for(var i = 0 ; i < s.)\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":690,"fileType":"javascript","requestStartTime":1517932681474}}
{"body": {"column":44,"line":56,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                var totalPages = body.total_pages;\n                \n                if(totalPages > 1) {\n                    for(let pageNumber = 2; pageNumber <= totalPages; pageNumber++) {\n                        let pageUrl = url + '&page=' + pageNumber;\n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n                                \n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                    console.\n                                });\n                            }\n                        )\n                    }\n                }    \n                console.log(titles.sort());\n                //return title = titles.sort();\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1916,"fileType":"javascript","requestStartTime":1517932682090}}
{"body": {"column":20,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var arrPercOutput = [0,0,0];\n        \n    var valuePositive = 0;\n    var valueNegative = 0;\n    var valueZero = 0;\n\n    var valuePositivePerc = 0;\n    var valueNegativePerc = 0;\n    var valueZeroPerc = 0;\n    \n    function convertToFraction(val){\n        val / arrTotalCount\n    }\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        numberValueCheck = Math.sign(currentNumber);\n        \n        if(numberValueCheck == 1){\n            valuePositive ++;\n            valuePositivePerc = convertToFraction(valueZero);\n            console.\n            arrPercOutput.splice(0, 0, valuePositivePerc);\n        };\n        if(numberValueCheck == -1){\n            valueNegative ++;\n            valueNegativePerc = convertToFraction(valueZero);\n            arrPercOutput.splice(1, 1, valueNegativePerc);\n        };\n        if(numberValueCheck == 0){\n            valueZero ++;\n            valueZeroPerc = convertToFraction(valueZero);\n            arrPercOutput.splice(2, 2, valueZeroPerc);\n        };\n    }\n    \n    return(arrPercOutput);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":1117,"fileType":"javascript","requestStartTime":1517932743997}}
{"body": {"column":18,"line":66,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                var totalPages = body.total_pages;\n                \n                if(totalPages > 1) {\n                    for(let pageNumber = 2; pageNumber <= totalPages; pageNumber++) {\n                        let pageUrl = url + '&page=' + pageNumber;\n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n                                \n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                });\n                            }\n                        )\n                    }\n                }\n                titles = titles.sort();\n            });\n        }\n    )\n    \n    return titles.;\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2099,"fileType":"javascript","requestStartTime":1517932792665}}
{"body": {"column":20,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(output[i] == 'a' ||\n           output[i] == 'e' ||\n           output[i] == 'i' ||\n           output[i] == 'o' ||\n           output[i] == 'u'\n          )\n            console.\n        else\n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":821,"fileType":"javascript","requestStartTime":1517932884928}}
{"body": {"column":26,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(output[i] == 'a' ||\n           output[i] == 'e' ||\n           output[i] == 'i' ||\n           output[i] == 'o' ||\n           output[i] == 'u'\n          )\n            console.log(s.)\n        else\n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":827,"fileType":"javascript","requestStartTime":1517932894844}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n            });\n        }\n    )\n    \n    console.\n    \n    if(totalPages > 1) {\n        for(let pageNumber = 2; pageNumber <= totalPages; pageNumber++) {\n            let pageUrl = url + '&page=' + pageNumber;\n            https.get(\n                pageUrl,\n                (res) => {\n                    let body = '';\n\n                    res.on(\"data\", data => {\n                        body += data;\n                    });\n\n                    res.on(\"end\", () => {\n                        body = JSON.parse(body);\n\n                        for(let i = 0; i<body.data.length; i++) {\n                            titles.push(body.data[i].Title);\n                        }\n                    });\n                }\n            )\n        }\n    }\n    \n    return titles.sort();\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1056,"fileType":"javascript","requestStartTime":1517932922243}}
{"body": {"column":20,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.charAt(i) == 'a' ||\n           s.charAt(i) == 'e' ||\n           s.charAt(i) == 'i' ||\n           s.charAt(i) == 'o' ||\n           s.charAt(i) == 'u'\n          ){\n            console.\n        }\n            \n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":832,"fileType":"javascript","requestStartTime":1517932929120}}
{"body": {"column":26,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.charAt(i) == 'a' ||\n           s.charAt(i) == 'e' ||\n           s.charAt(i) == 'i' ||\n           s.charAt(i) == 'o' ||\n           s.charAt(i) == 'u'\n          ){\n            console.log(s.)\n        }\n            \n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":838,"fileType":"javascript","requestStartTime":1517932933098}}
{"body": {"column":32,"line":42,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    var counter = 0;\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.charAt(i) == 'a' ||\n           s.charAt(i) == 'e' ||\n           s.charAt(i) == 'i' ||\n           s.charAt(i) == 'o' ||\n           s.charAt(i) == 'u'\n          )\n            console.log(s.charAt(i));\n        else\n        {\n            output[counter] = s.\n        }\n            \n    }\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":925,"fileType":"javascript","requestStartTime":1517932982178}}
{"body": {"column":20,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var arrPercOutput = [0,0,0];\n        \n    var valuePositive = 0;\n    var valueNegative = 0;\n    var valueZero = 0;\n\n    var valuePositivePerc = 0;\n    var valueNegativePerc = 0;\n    var valueZeroPerc = 0;\n    \n    function convertToFraction(val){\n        return val / arrTotalCount\n    }\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        numberValueCheck = Math.sign(currentNumber);\n        \n        if(numberValueCheck == 1){\n            valuePositive ++;\n            valuePositivePerc = convertToFraction(valueZero);\n            arrPercOutput.splice(0, 0, valuePositivePerc);\n        };\n        if(numberValueCheck == -1){\n            valueNegative ++;\n            valueNegativePerc = convertToFraction(valueZero);\n            console.\n            arrPercOutput.splice(0, 1, valueNegativePerc);\n        };\n        if(numberValueCheck == 0){\n            valueZero ++;\n            valueZeroPerc = convertToFraction(valueZero);\n            arrPercOutput.splice(0, 2, valueZeroPerc);\n        };\n    }\n    \n    return(arrPercOutput);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":1322,"fileType":"javascript","requestStartTime":1517932985004}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    \n \n       var mek = ar.\n   \n    return mek;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":519,"fileType":"javascript","requestStartTime":1517932988883}}
{"body": {"column":34,"line":62,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    for(let pageNumber = 2; pageNumber <= totalPages; pageNumber++) {\n                        let pageUrl = url + '&page=' + pageNumber;\n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    return titles.\n                }\n    \n                    return titles.sort();\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1994,"fileType":"javascript","requestStartTime":1517933006429}}
{"body": {"column":27,"line":6,"wordToComplete":"","code":"\nfunction findDay(myDate) {\n    // Return day for date myDate(MM/DD/YYYY)\n    // Note that myDate contains the date in string format\n    if(myDate == -1) return;\n    else{\n        console.log(myDate.)\n    }\n} \n\n// tail starts here\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n    var dates = _input.split('\\n');\n\n    for (var i = 0; i < dates.length; i++) {\n        findDay(dates[i]);\n    }\n});\n\n// tail starts here\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n    var dates = _input.split('\\n');\n\n    for (var i = 0; i < dates.length - 1; i++) {\n        findDay(dates[i]);\n    }\n});\n","offset":200,"fileType":"javascript","requestStartTime":1517933048953}}
{"body": {"column":54,"line":58,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                        let pageUrl = url + '&page=' + pageNumber;\n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                    if(pageNumber == pageCount) {\n                                        return titles.\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    return titles.sort();\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1940,"fileType":"javascript","requestStartTime":1517933065901}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var arrPercOutput = [0,0,0];\n    console.\n        \n    var valuePositive = 0;\n    var valueNegative = 0;\n    var valueZero = 0;\n\n    var valuePositivePerc = 0;\n    var valueNegativePerc = 0;\n    var valueZeroPerc = 0;\n    \n    function convertToFraction(val){\n        return val / arrTotalCount\n    }\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        numberValueCheck = Math.sign(currentNumber);\n        \n        if(numberValueCheck == 1){\n            valuePositive ++;\n            valuePositivePerc = convertToFraction(valuePositive);\n            arrPercOutput.splice(0, 0, valuePositivePerc);\n        };\n        if(numberValueCheck == -1){\n            valueNegative ++;\n            valueNegativePerc = convertToFraction(valueNegative);\n            arrPercOutput.splice(0, 1, valueNegativePerc);\n        };\n        if(numberValueCheck == 0){\n            valueZero ++;\n            valueZeroPerc = convertToFraction(valueZero);\n            arrPercOutput.splice(0, 2, valueZeroPerc);\n        };\n    }\n    \n    return(arrPercOutput);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":596,"fileType":"javascript","requestStartTime":1517933075670}}
{"body": {"column":24,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                console.\n                if(pageCount > 1) {\n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                        let pageUrl = url + '&page=' + pageNumber;\n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                    if(pageNumber == pageCount) {\n                                        return titles.sort();\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    return titles.sort();\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1031,"fileType":"javascript","requestStartTime":1517933084147}}
{"body": {"column":16,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    var output = new Array(s.length);\n    var counter = 0;\n    for(var i = 0 ; i < s.length ; i++)\n    {\n        if(s.charAt(i) == 'a' ||\n           s.charAt(i) == 'e' ||\n           s.charAt(i) == 'i' ||\n           s.charAt(i) == 'o' ||\n           s.charAt(i) == 'u'\n          )\n            console.log(s.charAt(i));\n        else\n        {\n            output[counter] = s.charAt(i);\n            counter++;\n        }\n    }\n    for(var i = 0 ; i < counter ; i++)\n        console.\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":1030,"fileType":"javascript","requestStartTime":1517933105904}}
{"body": {"column":16,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = 0;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n}\n\nfunction isCroissant(arr){\n    \n    return true;\n}\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":746,"fileType":"javascript","requestStartTime":1517933254970}}
{"body": {"column":8,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = 0;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n}\n\nfunction isCroissant(arr){\n    arr.\n    return true;\n}\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":733,"fileType":"javascript","requestStartTime":1517933259102}}
{"body": {"column":55,"line":61,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                    console.log(titles.);\n                                    if(pageNumber == pageCount) {\n                                        return titles.sort();\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    return titles.sort();\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1983,"fileType":"javascript","requestStartTime":1517933265665}}
{"body": {"column":18,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = 0;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; )\n    return true;\n}\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":743,"fileType":"javascript","requestStartTime":1517933272636}}
{"body": {"column":32,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = 0;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length; )\n    return true;\n}\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":757,"fileType":"javascript","requestStartTime":1517933274989}}
{"body": {"column":25,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = 0;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":819,"fileType":"javascript","requestStartTime":1517933302716}}
{"body": {"column":28,"line":70,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n                                    console.log(titles.sort());\n                                    if(pageNumber == pageCount) {\n                                        return titles.sort();\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    console.titles.sort();\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2325,"fileType":"javascript","requestStartTime":1517933336313}}
{"body": {"column":20,"line":58,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var arrPercOutput = [0,0,0];\n        \n    var valuePositive = 0;\n    var valueNegative = 0;\n    var valueZero = 0;\n\n    var valuePositivePerc = 0;\n    var valueNegativePerc = 0;\n    var valueZeroPerc = 0;\n    \n    function convertToFraction(val){\n        return val / arrTotalCount\n    }\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        numberValueCheck = Math.sign(currentNumber);\n        \n        if(numberValueCheck == 1){\n            valuePositive ++;\n            valuePositivePerc = convertToFraction(valuePositive);\n            arrPercOutput.splice(0, 0, valuePositivePerc);\n        };\n        if(numberValueCheck == -1){\n            valueNegative ++;\n            valueNegativePerc = convertToFraction(valueNegative);\n            arrPercOutput.splice(0, 1, valueNegativePerc);\n        };\n        if(numberValueCheck == 0){\n            valueZero ++;\n            valueZeroPerc = convertToFraction(valueZero);\n            arrPercOutput.splice(0, 2, valueZeroPerc);\n            console.\n        };\n    }\n    \n    return(arrPercOutput);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":1574,"fileType":"javascript","requestStartTime":1517933352288}}
{"body": {"column":27,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":742,"fileType":"javascript","requestStartTime":1517933386883}}
{"body": {"column":15,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":758,"fileType":"javascript","requestStartTime":1517933388029}}
{"body": {"column":66,"line":64,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n\n                                    if(pageNumber == pageCount) {\n                                        \n                                        for(let a = 0; a < titles.)\n                                        console.log(titles.sort());\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    console.log(titles.sort());\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2102,"fileType":"javascript","requestStartTime":1517933417941}}
{"body": {"column":52,"line":65,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n\n                                    if(pageNumber == pageCount) {\n                                        \n                                        for(let a = 0; a < titles.length; a++) {\n                                            console.\n                                        }\n                                        console.log(titles.sort());\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    console.log(titles.sort());\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2169,"fileType":"javascript","requestStartTime":1517933427269}}
{"body": {"column":63,"line":65,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n\n                                    if(pageNumber == pageCount) {\n                                        \n                                        for(let a = 0; a < titles.length; a++) {\n                                            console.log(titles.)\n                                        }\n                                        console.log(titles.sort());\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    console.log(titles.sort());\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2180,"fileType":"javascript","requestStartTime":1517933430868}}
{"body": {"column":47,"line":63,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n\n                                    if(pageNumber == pageCount) {\n                                        titles.\n                                        for(let a = 0; a < titles.length; a++) {\n                                            console.log(titles.)\n                                        }\n                                        console.log(titles.sort());\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    console.log(titles.sort());\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2042,"fileType":"javascript","requestStartTime":1517933436426}}
{"body": {"column":56,"line":63,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = [];\n    let pageCount = 1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr;\n    \n    https.get(\n        url,\n        (res) => {\n            let body = '';\n            \n            res.on(\"data\", data => {\n                body += data;\n            });\n            \n            res.on(\"end\", () => {\n                body = JSON.parse(body);\n                \n                for(let i = 0; i<body.data.length; i++) {\n                    titles.push(body.data[i].Title);\n                }\n                \n                pageCount = body.total_pages;\n                \n                if(pageCount > 1) {\n                    \n                    for(let pageNumber = 2; pageNumber <= pageCount; pageNumber++) {\n                       \n                        let pageUrl = url + '&page=' + pageNumber;\n                         \n                        https.get(\n                            pageUrl,\n                            (res) => {\n                                let body = '';\n\n                                res.on(\"data\", data => {\n                                    body += data;\n                                });\n\n                                res.on(\"end\", () => {\n                                    body = JSON.parse(body);\n                                    \n\n                                    for(let i = 0; i<body.data.length; i++) {\n                                        titles.push(body.data[i].Title);\n                                    }\n\n                                    if(pageNumber == pageCount) {\n                                        titles = titles.\n                                        for(let a = 0; a < titles.length; a++) {\n                                            console.log(titles.)\n                                        }\n                                        console.log(titles.sort());\n                                    }\n                                });\n                            }\n                        )\n                    }\n                } else {\n                    console.log(titles.sort());\n                }\n            });\n        }\n    )\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":2051,"fileType":"javascript","requestStartTime":1517933439266}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    \n \n       var mek = ar.reduce(function(total,num){\n           return total.\n       }\n\n   \n    return mek;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":571,"fileType":"javascript","requestStartTime":1517933462582}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var BLOCKED = 0,\n\tAVAILABLE = 1,\n\tSTART_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":424,"fileType":"javascript","requestStartTime":1517933545889}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var numList = []; \n    \n    for (var i = l; i <= r; i++) {\n        numList.\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":367,"fileType":"javascript","requestStartTime":1517933551457}}
{"body": {"column":18,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 0;\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":788,"fileType":"javascript","requestStartTime":1517933556164}}
{"body": {"column":17,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = ;\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":787,"fileType":"javascript","requestStartTime":1517933557568}}
{"body": {"column":18,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":788,"fileType":"javascript","requestStartTime":1517933558261}}
{"body": {"column":12,"line":61,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n    var arrPercOutput = [0,0,0];\n        \n    var valuePositive = 0;\n    var valueNegative = 0;\n    var valueZero = 0;\n\n    var valuePositivePerc = 0;\n    var valueNegativePerc = 0;\n    var valueZeroPerc = 0;\n    \n    function convertToFraction(val){\n        return val / arrTotalCount\n    }\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        numberValueCheck = Math.sign(currentNumber);\n        \n        if(numberValueCheck == 1){\n            valuePositive ++;\n            valuePositivePerc = convertToFraction(valuePositive);\n            arrPercOutput.splice(0, 1, valuePositivePerc);\n        };\n        if(numberValueCheck == -1){\n            valueNegative ++;\n            valueNegativePerc = convertToFraction(valueNegative);\n            arrPercOutput.splice(1, 1, valueNegativePerc);\n        };\n        if(numberValueCheck == 0){\n            valueZero ++;\n            valueZeroPerc = convertToFraction(valueZero);\n            arrPercOutput.splice(2, 1, valueZeroPerc);\n        };\n    }\n    \n    console.(valuePositivePerc);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":1588,"fileType":"javascript","requestStartTime":1517933598947}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while[arr[start+range] < arr[start]]{\n        \n        range++;\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":856,"fileType":"javascript","requestStartTime":1517933601029}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while[arr[start+range] < arr[start] && start+range < arr.length]{ \n        range++;\n    }\n    console.\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":895,"fileType":"javascript","requestStartTime":1517933640708}}
{"body": {"column":23,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    let end = 0;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while[arr[start+range] < arr[start] && start+range < arr.length]{ \n        range++;\n    }\n    console.log(range);\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":906,"fileType":"javascript","requestStartTime":1517933646284}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    console.\n    return 0;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":305,"fileType":"javascript","requestStartTime":1517933704000}}
{"body": {"column":20,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+i]){\n            start = i;\n            console.\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start] && start+range < arr.length){ \n        range++;\n    }\n    console.log(range);\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":656,"fileType":"javascript","requestStartTime":1517933727711}}
{"body": {"column":28,"line":30,"wordToComplete":"a.a$|^e*e$|^i*i$|^o*o$|^u*u$'","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n    \n    let re = new RegExp('^a.a$|^e*e$|^i*i$|^o*o$|^u*u$');\n\n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":638,"fileType":"javascript","requestStartTime":1517933740971}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517933787219}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var ii, dd, ss;\n    // Read and save an integer, double, and String to your variables.\n    var ii = prompt();\n    var dd = prompt();\n    var ss = prompt();\n    // Print the sum of both integer variables on a new line.\n    console.\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":801,"fileType":"javascript","requestStartTime":1517933886742}}
{"body": {"column":57,"line":53,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var arrTotalCount = arr.length;\n        \n    var valuePositive = 0;\n    var valueNegative = 0;\n    var valueZero = 0;\n\n    var valuePositivePerc = 0;\n    var valueNegativePerc = 0;\n    var valueZeroPerc = 0;\n    \n    function convertToFraction(val){\n        return val / arrTotalCount\n    }\n    \n    for (i=0;i<arrTotalCount;i++){\n        currentNumber = arr[i];\n        numberValueCheck = Math.sign(currentNumber);\n        \n        if(numberValueCheck == 1){\n            valuePositive ++;\n            valuePositivePerc = convertToFraction(valuePositive);\n        };\n        if(numberValueCheck == -1){\n            valueNegative ++;\n            valueNegativePerc = convertToFraction(valueNegative);\n        };\n        if(numberValueCheck == 0){\n            valueZero ++;\n            valueZeroPerc = convertToFraction(valueZero).;\n        };\n    }\n    \n    console.log(valuePositivePerc + '\\n' + valueNegativePerc + '\\n' + valueZeroPerc);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":1347,"fileType":"javascript","requestStartTime":1517933967906}}
{"body": {"column":13,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (next.)\n    console.log(availableAdjacentLocations(matrix, START_LOC));\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1010,"fileType":"javascript","requestStartTime":1517933987097}}
{"body": {"column":18,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (nextMoves.)\n    console.log(availableAdjacentLocations(matrix, START_LOC));\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1015,"fileType":"javascript","requestStartTime":1517933988329}}
{"body": {"column":6,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    var sequense = \"aeiou\"\n    var isMagic = false\n    \n    s.\n    console.log( s )\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":355,"fileType":"javascript","requestStartTime":1517934063046}}
{"body": {"column":24,"line":50,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n    \n    if(range>2){\n        if(start >0){\n            if(arr[start+range] > arr[start-1]){\n                \n            }\n            else{\n                console.\n            }\n        //reverse de start à start+range et check\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1045,"fileType":"javascript","requestStartTime":1517934067498}}
{"body": {"column":34,"line":50,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n    \n    if(range>2){\n        if(start >0){\n            if(arr[start+range] > arr[start-1]){\n                \n            }\n            else{\n                console.log('no');\n            }\n        //reverse de start à start+range et check\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1055,"fileType":"javascript","requestStartTime":1517934072376}}
{"body": {"column":23,"line":51,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n    \n    if(range>2){\n        if(start >0){\n            if(arr[start+range] > arr[start-1]){\n                \n            }\n            else{\n                console.log('no');\n                return;\n            }\n        //reverse de start à start+range et check\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1079,"fileType":"javascript","requestStartTime":1517934083971}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction staircase(n) {\n    // Complete this function\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    staircase(n);\n\n}\n\n\n","offset":525,"fileType":"javascript","requestStartTime":1517934214947}}
{"body": {"column":9,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\nfunction move(path, currentLoc, nextLoc) {\n    path.\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (nextMoves.length === 0) {\n        return 0;\n    }\n    var paths = findPathsFrom(matrix, START_LOC, END_LOC);\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":821,"fileType":"javascript","requestStartTime":1517934229598}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    var sequense = \"aeiou\"\n    var isMagic = false\n    \n    for( let i = 0; i < s.length; i++ ) {\n        console.s.charAt(i)\n    }\n    console.log( s )\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":407,"fileType":"javascript","requestStartTime":1517934232878}}
{"body": {"column":19,"line":59,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nconst COLOR_BINARY_WIDTH = 8;\nconst defaultColor = {\n    red: 0,\n    green: 0,\n    blue: 0\n};\nconst ambiguousResult = 'Ambiguous';\nconst searchColors = {\n    Black: {red: 0, green: 0, blue: 0},\n    White: {red: 255, green: 255, blue: 255},\n    Red: {red: 255, green: 0, blue: 0},\n    Green: {red: 0, green: 255, blue: 0},\n    Blue: {red: 0, green: 0, blue: 255}\n};\n\nfunction binaryAsNumber(binary) {\n    return parseInt(binary.split('').join(''), 2);\n}\n\nfunction getDiffOperand(operand1, operand2) {\n    return Math.pow(operand1 - operand2, 2);\n}\n\nfunction getColorDistance(color1, color2) {\n    const preCalcResult = Object.keys(defaultColor)\n        .map(key => [color1[key], color2[key]])\n        .map(colorUnits => getDiffOperand(colorUnits[0], colorUnits[1]))\n        .reduce((accum, element) => accum + element);\n    return Math.sqrt(preCalcResult);\n}\n\nfunction binaryAsColor(binaryString) {\n    const color = Object.assign({}, defaultColor);\n    const colorKeys = Object.keys(defaultColor);\n    let index = 0;\n    \n    while(binaryString.length > index * COLOR_BINARY_WIDTH) {\n        const startPos = index * COLOR_BINARY_WIDTH;\n        const colorBinary = binaryString.substring(startPos, startPos + COLOR_BINARY_WIDTH);\n        const colorKey = colorKeys[index];\n        color[colorKey] = binaryAsNumber(colorBinary), 2;\n        index += 1;\n    }\n    \n    return color;\n}\n\nfunction printResult(result) {\n    process.stdout.(result);\n}\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n    const _ = null;\n    \n    const result = pixels\n        .map(pixel => binaryAsColor(pixel))\n        .map(color => {\n            const distances = [];\n            for (const colorName in searchColors) {\n                const targetColor = searchColors[colorName];\n                const colorDistancePair = {\n                    color: colorName,\n                    distance: getColorDistance(color, targetColor)\n                };\n                distances.push(colorDistancePair);\n            }\n            distances.sort((a, b) => a.distance - b.distance);\n            const expectedColor = distances.shift();\n            \n            if (distances.filter(element => element.distance === expectedColor.distance).length > 0)\n                return ambiguousResult;\n            \n            return expectedColor\n                ? expectedColor.color\n                : ambiguousResult;\n        })\n        .forEach(result => printResult(result));\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1653,"fileType":"javascript","requestStartTime":1517934247663}}
{"body": {"column":32,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\nfunction move(path, currentLoc, nextLoc) {\n    path.push(nextLoc);\n    return currentLoc;\n}\n\nfunction findPath(matrix, startLoc, endLoc) {\n    var options = availableAdjacentLocations(matrix, startLoc);\n    for (var i = 0; i < options.)\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (nextMoves.length === 0) {\n        return 0;\n    }\n    var paths = findPathsFrom(matrix, START_LOC, END_LOC);\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1004,"fileType":"javascript","requestStartTime":1517934302913}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const max = doors.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":522,"fileType":"javascript","requestStartTime":1517934313122}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const max = doors.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":522,"fileType":"javascript","requestStartTime":1517934314489}}
{"body": {"column":38,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const max = doors.filter(Boolean).\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":538,"fileType":"javascript","requestStartTime":1517934321145}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n    console.\n    if(range>2){\n        if(start >0){\n            if(arr[start+range] < arr[start-1]){\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length-1){\n             if(arr[start] > arr[start+range+1]){\n                console.log('no');\n                return;\n             }\n        }\n        //reverse de start à start+range et check\n    }\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":891,"fileType":"javascript","requestStartTime":1517934323883}}
{"body": {"column":9,"line":90,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nconst COLOR_BINARY_WIDTH = 8;\nconst defaultColor = {\n    red: 0,\n    green: 0,\n    blue: 0\n};\nconst ambiguousResult = 'Ambiguous';\nconst searchColors = {\n    Black: {red: 0, green: 0, blue: 0},\n    White: {red: 255, green: 255, blue: 255},\n    Red: {red: 255, green: 0, blue: 0},\n    Green: {red: 0, green: 255, blue: 0},\n    Blue: {red: 0, green: 0, blue: 255}\n};\n\nfunction binaryAsNumber(binary) {\n    return parseInt(binary.split('').join(''), 2);\n}\n\nfunction getDiffOperand(operand1, operand2) {\n    return Math.pow(operand1 - operand2, 2);\n}\n\nfunction getColorDistance(color1, color2) {\n    const preCalcResult = Object.keys(defaultColor)\n        .map(key => [color1[key], color2[key]])\n        .map(colorUnits => getDiffOperand(colorUnits[0], colorUnits[1]))\n        .reduce((accum, element) => accum + element);\n    return Math.sqrt(preCalcResult);\n}\n\nfunction binaryAsColor(binaryString) {\n    const color = Object.assign({}, defaultColor);\n    const colorKeys = Object.keys(defaultColor);\n    let index = 0;\n    \n    while(binaryString.length > index * COLOR_BINARY_WIDTH) {\n        const startPos = index * COLOR_BINARY_WIDTH;\n        const colorBinary = binaryString.substring(startPos, startPos + COLOR_BINARY_WIDTH);\n        const colorKey = colorKeys[index];\n        color[colorKey] = binaryAsNumber(colorBinary), 2;\n        index += 1;\n    }\n    \n    return color;\n}\n\nfunction printResult(result) {\n    process.stdout.write(result);\n}\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n    const _ = null;\n    \n    const result = pixels\n        .map(pixel => binaryAsColor(pixel))\n        .map(color => {\n            const distances = [];\n            for (const colorName in searchColors) {\n                const targetColor = searchColors[colorName];\n                const colorDistancePair = {\n                    color: colorName,\n                    distance: getColorDistance(color, targetColor)\n                };\n                distances.push(colorDistancePair);\n            }\n            distances.sort((a, b) => a.distance - b.distance);\n            const expectedColor = distances.shift();\n            \n            if (distances.filter(element => element.distance === expectedColor.distance).length > 0)\n                return ambiguousResult;\n            \n            return expectedColor\n                ? expectedColor.color\n                : ambiguousResult;\n        })\n        .;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":2650,"fileType":"javascript","requestStartTime":1517934323279}}
{"body": {"column":33,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    console.log(\"Hello, World.\");\n} \nScanner scan= new Scanner(System.)\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":108,"fileType":"javascript","requestStartTime":1517934358038}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const min = doors.\n    const max = doors.filter(Boolean).length;\n    \n    return [min, max];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":522,"fileType":"javascript","requestStartTime":1517934384730}}
{"body": {"column":55,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const min = doors.reduce((res, door, index, arr) =.)\n    const max = doors.filter(Boolean).length;\n    \n    return [min, max];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":555,"fileType":"javascript","requestStartTime":1517934414643}}
{"body": {"column":55,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const min = doors.reduce((res, door, index, arr) =.)\n    const max = doors.filter(Boolean).length;\n    \n    return [min, max];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":555,"fileType":"javascript","requestStartTime":1517934416555}}
{"body": {"column":16,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\nfunction move(path, matrix, currentLoc, nextLoc) {\n    path.push(nextLoc);\n    var options = availableAdjacentLocations(matrix, nextLoc);\n    if (options.)\n    return currentLoc;\n}\n\nfunction findPath(matrix, startLoc, endLoc) {\n    var options = availableAdjacentLocations(matrix, startLoc);\n    for (var i = 0; i < options.length; i++) {\n    }\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (nextMoves.length === 0) {\n        return 0;\n    }\n    var paths = findPathsFrom(matrix, START_LOC, END_LOC);\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":923,"fileType":"javascript","requestStartTime":1517934519775}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s:\n    }\n    \n    var isMagic = false\n    var count = 0\n    \n    while( i < s.length ) {\n        if(sequense.charAt(indexMagic) === s.charAt(i) ){\n            count++\n        }\n        else {\n            index\n        }\n    }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1517934531547}}
{"body": {"column":32,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\nfunction move(path, matrix, currentLoc, nextLoc, endLoc) {\n    path.push(nextLoc);\n    var options = availableAdjacentLocations(matrix, nextLoc);\n    if (options.length === 0) {\n        return path;\n    }\n    for (var i = 0; i < options.)\n    return currentLoc;\n}\n\nfunction findPath(matrix, startLoc, endLoc) {\n    var options = availableAdjacentLocations(matrix, startLoc);\n    for (var i = 0; i < options.length; i++) {\n    }\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (nextMoves.length === 0) {\n        return 0;\n    }\n    var paths = findPathsFrom(matrix, START_LOC, END_LOC);\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1006,"fileType":"javascript","requestStartTime":1517934564732}}
{"body": {"column":17,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nvar BLOCKED = 0,\n\tAVAILABLE = 1;\n\nfunction availableAdjacentLocations(matrix, currentLocation) {\n\tvar locations = [],\n        currentX = currentLocation[0],\n        currentY = currentLocation[1];\n\t[\n\t\t[currentX + 1, currentY],\n\t\t[currentX, currentY + 1]\n\t].forEach(function(proposedLocation) {\n        let proposedX = proposedLocation[0],\n            proposedY = proposedLocation[1];\n\t\tif (matrix[currentY][proposedX] === AVAILABLE && matrix[proposedY][currentX] === AVAILABLE) {\n\t\t\tlocations.push(proposedLocation);\n\t\t}\n\t});\n\treturn locations;\n}\n\nfunction move(path, matrix, currentLoc, nextLoc, endLoc) {\n    path.push(nextLoc);\n    var options = availableAdjacentLocations(matrix, nextLoc);\n    if (options.length === 0) {\n        return path;\n    }\n    for (var i = 0; i < options.length; i++) {\n        if (options[i][0] === endLoc[0] && options[i][1] === endLoc[1]) {\n            path.\n        }\n    }\n    return currentLoc;\n}\n\nfunction findPath(matrix, startLoc, endLoc) {\n    var options = availableAdjacentLocations(matrix, startLoc);\n    for (var i = 0; i < options.length; i++) {\n    }\n}\n\n/*\n * Complete the function below.\n */\nfunction numberOfPaths(matrix) {\n    var START_LOC = [0, 0],\n\tEND_LOC = [\n\t\tmatrix[0].length - 1,\n\t\tmatrix.length - 1\n\t];\n    var nextMoves = availableAdjacentLocations(matrix, START_LOC);\n    if (nextMoves.length === 0) {\n        return 0;\n    }\n    var paths = findPathsFrom(matrix, START_LOC, END_LOC);\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_rows = 0;\n    var a_cols = 0;\n    var a_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var a_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = Array(a_rows);\n    for(var a_i = 0; a_i < a_rows; a_i++) {\n      a[a_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      a[a_i] = a[a_i].map(Number);\n    }\n\n\n    res = numberOfPaths(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1112,"fileType":"javascript","requestStartTime":1517934594467}}
{"body": {"column":22,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction staircase(n) {\n    // Complete this function\n    var arrStairs = [];\n    \n    for (i=0;i<n;i++){\n        var currentCount = i + 1;\n        \n        for (j=0;j<i;j++){\n            arrStairs.\n        }\n        \n    console.log(currentCount)\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    staircase(n);\n\n}\n\n\n","offset":657,"fileType":"javascript","requestStartTime":1517934600433}}
{"body": {"column":10,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    while( i <= (s.length - 1) ) {\n        s.\n    }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":445,"fileType":"javascript","requestStartTime":1517934644083}}
{"body": {"column":8,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    arr.\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":494,"fileType":"javascript","requestStartTime":1517934651170}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    while( i <= (s.length - 1) ) {\n        console.s.chatAt(i)\n    }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":451,"fileType":"javascript","requestStartTime":1517934653063}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    \n    var sortedArr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    \n    console.\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":584,"fileType":"javascript","requestStartTime":1517934698059}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    \n    while( i <= (s.length - 1) ) {\n        if(sequense. .charAt(indexMagic) === s.charAt(i) ){\n            count++\n        }\n        else {\n            sequense.i++\n        }\n    }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":460,"fileType":"javascript","requestStartTime":1517934769139}}
{"body": {"column":30,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    \n    var sortedArr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    var firstFour = sortedArr.\n    \n    console.log(sortedArr + ' ' + x);\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":597,"fileType":"javascript","requestStartTime":1517934769631}}
{"body": {"column":19,"line":13,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nfunction printResult(result) {\n    process.stdout.\n}\n\n/*\n * Complete the function below.\n */\nfunction reducedFractionSums(expressions) {\n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var expressions;\n    var expressions_size = 0;\n    expressions_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var expressions = [];\n    var expressions_item;\n    for (var expressions_i = 0; expressions_i < expressions_size; expressions_i++) {\n        var expressions_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        expressions.push(expressions_item);\n    }\n\n\n    res = reducedFractionSums(expressions);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":271,"fileType":"javascript","requestStartTime":1517934780253}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    \n    var sortedArr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    var firstFour = sortedArr.slice(0, 5);\n    var lastFour = sortedArr.\n    \n    console.log(sortedArr + ' ' + x);\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":639,"fileType":"javascript","requestStartTime":1517934820121}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    \n    while( i <= (s.length - 1) ) {\n        if(sequense.s.charAt(sequense.i) === s.charAt(i) ){\n            countMagic++\n        }\n        else {\n            sequense.\n        }\n    }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":571,"fileType":"javascript","requestStartTime":1517934847932}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    \n    var sortedArr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    var firstFour = sortedArr.slice(0, 4);\n    var lastFour = sortedArr.slice(-3);\n    \n    console.\n    \n    // console.log(sortedArr + ' ' + x);\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":667,"fileType":"javascript","requestStartTime":1517934875302}}
{"body": {"column":18,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction staircase(n) {\n    // Complete this function\n    var arrStairs = [];\n    var valStair = '#';\n    \n    for (i=0;i<n;i++){\n        var currentCount = i + 1;\n        var currentStair = 0;\n        \n        for (j=0;j<i;j++){\n            currentStair += valStair\n        }\n        arrStairs.\n    console.log(currentCount)\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    staircase(n);\n\n}\n\n\n","offset":754,"fileType":"javascript","requestStartTime":1517934905996}}
{"body": {"column":24,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    \n    var sortedArr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    var firstFour = sortedArr.slice(0, 4);\n    var lastFour = sortedArr.slice(-4);\n    var min = firstFour.\n    \n    console.log(firstFour, lastFour);\n    \n    // console.log(sortedArr + ' ' + x);\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":674,"fileType":"javascript","requestStartTime":1517934928390}}
{"body": {"column":23,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n    \n    var sortedArr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    var firstFour = sortedArr.slice(0, 4);\n    var lastFour = sortedArr.slice(-4);\n    var min = firstFour.reduce();\n    var max = lastFour.\n    \n    console.log(firstFour, lastFour);\n    \n    // console.log(sortedArr + ' ' + x);\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":707,"fileType":"javascript","requestStartTime":1517934938437}}
{"body": {"column":13,"line":2,"wordToComplete":"r","code":"\n// Add your javascript here\n$(document).r\n\n","offset":43,"fileType":"javascript","requestStartTime":1517934946554}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n$(document).ready(() => {\n    console.\n})\n\n","offset":68,"fileType":"javascript","requestStartTime":1517934952585}}
{"body": {"column":31,"line":59,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   // if(range==2){ //on doit swap\n        \n    //}\n    //else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){\n                console.log('no');\n                return;\n             }\n            if(isCroissant(arr.))\n        }\n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1307,"fileType":"javascript","requestStartTime":1517934958320}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n$(document).ready(() => {\n    console.$(\"div\")\n})\n\n","offset":68,"fileType":"javascript","requestStartTime":1517934964903}}
{"body": {"column":24,"line":60,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   // if(range==2){ //on doit swap\n        \n    //}\n    //else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){\n                console.log('no');\n                return;\n             }\n            if(isCroissant(arr.subarray())==false){\n                console.\n            }\n        }\n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1352,"fileType":"javascript","requestStartTime":1517934988932}}
{"body": {"column":34,"line":60,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   // if(range==2){ //on doit swap\n        \n    //}\n    //else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){\n                console.log('no');\n                return;\n             }\n            if(isCroissant(arr.subarray())==false){\n                console.log('no');\n            }\n        }\n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1362,"fileType":"javascript","requestStartTime":1517934992311}}
{"body": {"column":23,"line":61,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    \n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   // if(range==2){ //on doit swap\n        \n    //}\n    //else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){\n                console.log('no');\n                return;\n             }\n            if(isCroissant(arr.subarray())==false){\n                console.log('no');\n                return;\n            }\n        }\n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1386,"fileType":"javascript","requestStartTime":1517934994425}}
{"body": {"column":17,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    var isMagic = false\n    \n    while( i <= (s.length - 1) ) {\n        if(sequense.s.charAt(sequense.i) === s.charAt(i) ){\n            countMagic++\n            i++\n        }\n        else {\n            sequense.i++\n        }\n    }\n    \n    if( sequense. )\n    console.log( countMagic )\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":653,"fileType":"javascript","requestStartTime":1517935045070}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\nfunction bootstrap() {\n    console.log(\"I am executing on load\");\n}\n\ndocument.\n\n","offset":108,"fileType":"javascript","requestStartTime":1517935130979}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    var isMagic = false\n    \n    while( i <= (s.length - 1) ) {\n        console.\n        /*\n        if(sequense.s.charAt(sequense.i) === s.charAt(i) ){\n            countMagic++\n            i++\n        }\n        else {\n            sequense.i++\n        }\n        */\n    }\n    \n    // console.log( sequense.i === 4 ? countMagic : 0 )\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":480,"fileType":"javascript","requestStartTime":1517935362612}}
{"body": {"column":27,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    return isCroissant(arr.)\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   // if(range==2){ //on doit swap\n        \n    //}\n    //else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":565,"fileType":"javascript","requestStartTime":1517935455280}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    console. isCroissant(arr.slice(5))\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   // if(range==2){ //on doit swap\n        \n    //}\n    //else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i]+1){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":550,"fileType":"javascript","requestStartTime":1517935472528}}
{"body": {"column":9,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction DOMNode(domElement) {\n    this.\n}\nfunction elementFinder(selectorString) {\n    var elements = document.querySelector(selectorString);\n    for (var i = 0; i < elements.length; i++) {\n        console.log(element.prototype);\n    }\n    return elements;\n}\n\nfunction bootstrap() {\n    window.$ = elementFinder;\n    $(\"#tooltip\");\n}\n\ndocument.body.onload = bootstrap;\n\n","offset":71,"fileType":"javascript","requestStartTime":1517935525761}}
{"body": {"column":12,"line":11,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    process.stdout.write(isFibo(input,0,1));\n});\n\nfunction isFibo(valueToCheck, previousValue, currentValue) {\n    console.\n    return currentValue > valueToCheck ? false : valueToCheck == currentValue ? true : isFibo(valueToCheck, previousValue + currentValue, currentValue);\n}\n    \n\n","offset":306,"fileType":"javascript","requestStartTime":1517935555871}}
{"body": {"column":33,"line":11,"wordToComplete":"prev","code":"process.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    process.stdout.write(isFibo(input,0,1));\n});\n\nfunction isFibo(valueToCheck, previousValue, currentValue) {\n    console.log(valueToCheck,prev)\n    return currentValue > valueToCheck ? false : valueToCheck == currentValue ? true : isFibo(valueToCheck, previousValue + currentValue, currentValue);\n}\n    \n\n","offset":327,"fileType":"javascript","requestStartTime":1517935563574}}
{"body": {"column":16,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.\n    \n    \n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1584,"fileType":"javascript","requestStartTime":1517935725924}}
{"body": {"column":27,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n    \n    \n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1595,"fileType":"javascript","requestStartTime":1517935730398}}
{"body": {"column":16,"line":64,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.\n    \n    \n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1612,"fileType":"javascript","requestStartTime":1517935733214}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517935837471}}
{"body": {"column":63,"line":64,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n    \n    \n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1659,"fileType":"javascript","requestStartTime":1517935839963}}
{"body": {"column":15,"line":65,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    \n    \n   // }\n        //reverse de start à start+range et check}\n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1675,"fileType":"javascript","requestStartTime":1517935845112}}
{"body": {"column":12,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n    var sequense = {\n        s: \"aeiou\",\n        i: 0\n    }\n    \n    var countMagic = 0\n    var i = 0\n    var isMagic = false\n    \n    while( i <= (s.length - 1) ) {\n        \n        if(sequense.s.charCodeAt(sequense.i) === s.charCodeAt(i) ){\n            countMagic++\n            i++\n        }\n        else if( sequense.s.charCodeAt(sequense.i) > s.charCodeAt(i) ) {\n            i++\n        }\n        else {\n            sequense.i++\n        }\n        \n    }\n    \n    console.\n    return sequense.i === 4 ? countMagic : 0\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":773,"fileType":"javascript","requestStartTime":1517935933752}}
{"body": {"column":23,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        min = Math.min.\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":916,"fileType":"javascript","requestStartTime":1517936021571}}
{"body": {"column":55,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        min = Math.min.apply(Math, arr.slice(start+1));\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":948,"fileType":"javascript","requestStartTime":1517936042099}}
{"body": {"column":55,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        min = Math.min.apply(Math, arr.slice(start+1));\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":948,"fileType":"javascript","requestStartTime":1517936043119}}
{"body": {"column":15,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n        min = Math.min.apply(Math, arr.slice(start+1));\n       console.\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":964,"fileType":"javascript","requestStartTime":1517936045358}}
{"body": {"column":12,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction libraryFine(d1, m1, y1, d2, m2, y2) {\n    // Complete this function\n}\n\nfunction main() {\n    var d1_temp = readLine().split(' ');\n    var d1 = parseInt(d1_temp[0]);\n    var m1 = parseInt(d1_temp[1]);\n    var y1 = parseInt(d1_temp[2]);\n    var d2_temp = readLine().split(' ');\n    var d2 = parseInt(d2_temp[0]);\n    var m2 = parseInt(d2_temp[1]);\n    var y2 = parseInt(d2_temp[2]);\n    var result = libraryFine(d1, m1, y1, d2, m2, y2);\n    \n    var fee = 0;\n    \n    if(y1 > y2) {\n       fee = 10000;\n       }\n    \n    console.\n\n}\n\n\n","offset":994,"fileType":"javascript","requestStartTime":1517936144117}}
{"body": {"column":27,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var mymap= new Map();\n    myMap.set(1,[]);\n    myMap.set(2,[]);\n    for(var i=0;i<doors.length;i++){\n      if(i!=0 && i!=doors.length-1){\n        if(doors[i]==1){\n          var count=0;\n          if(doors[i-1]==doors[i])count++;\n          if(doors[i+1]==doors[i])count++;\n          mymap.get(count).\n        }\n      }\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":833,"fileType":"javascript","requestStartTime":1517936157451}}
{"body": {"column":23,"line":6,"wordToComplete":"","code":"\n\n/*\n * Complete the function below.\n */\nfunction Sum() {\n    const args = Array.arguments\n}\n\n\n","offset":82,"fileType":"javascript","requestStartTime":1517936179069}}
{"body": {"column":33,"line":6,"wordToComplete":"","code":"\n\n/*\n * Complete the function below.\n */\nfunction Sum() {\n    const args = Array.prototype.arguments\n}\n\n\n","offset":92,"fileType":"javascript","requestStartTime":1517936181684}}
{"body": {"column":39,"line":6,"wordToComplete":"","code":"\n\n/*\n * Complete the function below.\n */\nfunction Sum() {\n    const args = Array.prototype.slice.arguments\n}\n\n\n","offset":98,"fileType":"javascript","requestStartTime":1517936182620}}
{"body": {"column":21,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       for(let i =0; )\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":922,"fileType":"javascript","requestStartTime":1517936187658}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\n\n/*\n * Complete the function below.\n */\nfunction Sum() {\n    const args = Array.prototype.slice.call(arguments);\n    args.\n}\n\n\n","offset":124,"fileType":"javascript","requestStartTime":1517936191356}}
{"body": {"column":26,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       for(let i=start+1; )\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":927,"fileType":"javascript","requestStartTime":1517936203849}}
{"body": {"column":40,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       for(let i=start+1; i<arr.length; )\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":941,"fileType":"javascript","requestStartTime":1517936208815}}
{"body": {"column":19,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = 0;\n       for(let i=start+1; i<arr.length; i++){\n           \n       }\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":920,"fileType":"javascript","requestStartTime":1517936221752}}
{"body": {"column":21,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction libraryFine(d1, m1, y1, d2, m2, y2) {\n    // Complete this function\n}\n\nfunction main() {\n    var d1_temp = readLine().split(' ');\n    var d1 = parseInt(d1_temp[0]);\n    var m1 = parseInt(d1_temp[1]);\n    var y1 = parseInt(d1_temp[2]);\n    var d2_temp = readLine().split(' ');\n    var d2 = parseInt(d2_temp[0]);\n    var m2 = parseInt(d2_temp[1]);\n    var y2 = parseInt(d2_temp[2]);\n    var result = libraryFine(d1, m1, y1, d2, m2, y2);\n    \n    var fee = 0;\n    \n    if(y1 > y2) {\n       fee = 10000;\n       } else if(m1 > m2) {\n           fee = 500;\n       } else if(d1 >) {\n                 \n                 }\n    \n    console.log(fee);\n\n}\n\n\n","offset":1039,"fileType":"javascript","requestStartTime":1517936223797}}
{"body": {"column":28,"line":48,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = 0;\n       for(let i=start+1; i<arr.length; i++){\n           if(arr[i]<min)\n               min = arr[i];\n       }\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1021,"fileType":"javascript","requestStartTime":1517936239257}}
{"body": {"column":11,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\nlet string_1;\n\nfunction M_G() {\n    //Start your code below this line\n    //We will need to take in 3 string integers\n    const readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n/* rl.question('What do you think of Node.js? ', (answer) => {\n   string_1 = answer;\n\n  rl.close();\n}); */\n    \n    \n    let string_1 = rl.question('', answer) => {\n        rl.\n    };\n    console.log(string_1);\n    let string_2 = rl.question('', answer);\n    let string_3 = rl.question('', answer);\n    //Convert\n    let a = parseInt(string_1);\n    let b = parseInt(string_2);\n    let c = parseInt(string_3);\n    //Add\n    let d = a + b + c;\n    //Return\n    return d;\n}\n\nfunction answer(response) {\n    console.log(response)\n}\n    res = M_G();\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1266,"fileType":"javascript","requestStartTime":1517936249201}}
{"body": {"column":28,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start];\n       for(let i=start+1; i<arr.length; i++){\n           if(arr[i]<min)\n               min = arr[i];\n       }\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":929,"fileType":"javascript","requestStartTime":1517936304468}}
{"body": {"column":25,"line":49,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               index = i;\n       }\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1059,"fileType":"javascript","requestStartTime":1517936358354}}
{"body": {"column":25,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       let indexMin = -1;\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               index = i;\n           }\n       }\n        min = Math.min.apply(Math, arr.slice(start+1));\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":957,"fileType":"javascript","requestStartTime":1517936367757}}
{"body": {"column":18,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\nlet string_1;\n\nfunction M_G() {\n    //Start your code below this line\n    //We will need to take in 3 string integers\n    const readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n/* rl.question('What do you think of Node.js? ', (answer) => {\n   string_1 = answer;\n\n  rl.close();\n}); */\n    \n    \n    let string_1;\n    string_1 = rl.readline(); \n    console.log(string_1);\n    let string_2 = rl.question('', answer);\n    let string_3 = rl.question('', answer);\n    //Convert\n    let a = parseInt(string_1);\n    let b = parseInt(string_2);\n    let c = parseInt(string_3);\n    //Add\n    let d = a + b + c;\n    //Return\n    return d;\n}\n\nfunction answer(response) {\n    console.log(response)\n}\n    res = M_G();\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1243,"fileType":"javascript","requestStartTime":1517936421955}}
{"body": {"column":9,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nfunction printResult(result) {\n    process.stdout.write(result);\n}\n\n/*\n * Complete the function below.\n */\nfunction reducedFractionSums(expressions) {\n    // this is only for test that output is valid when we tried via stdout\n    return expressions\n        .map(expression => parseExpression(expression))\n        .\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var expressions;\n    var expressions_size = 0;\n    expressions_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var expressions = [];\n    var expressions_item;\n    for (var expressions_i = 0; expressions_i < expressions_size; expressions_i++) {\n        var expressions_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        expressions.push(expressions_item);\n    }\n\n\n    res = reducedFractionSums(expressions);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":535,"fileType":"javascript","requestStartTime":1517936432211}}
{"body": {"column":16,"line":69,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       let indexMin = -1;\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               indexMin = i;\n           }\n       }\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n       if(indexMin<arr.length-1){\n           if(arr[start]>arr[indexMin +1]){\n               console.log('no');\n                return;\n           }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n       }\n        console.  \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1637,"fileType":"javascript","requestStartTime":1517936493538}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517936494794}}
{"body": {"column":27,"line":69,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       let indexMin = -1;\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               indexMin = i;\n           }\n       }\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n       if(indexMin<arr.length-1){\n           if(arr[start]>arr[indexMin +1]){\n               console.log('no');\n                return;\n           }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n       }\n        console.log('yes');  \n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1648,"fileType":"javascript","requestStartTime":1517936497097}}
{"body": {"column":15,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       let indexMin = -1;\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               indexMin = i;\n           }\n       }\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n       if(indexMin<arr.length-1){\n           if(arr[start]>arr[indexMin +1]){\n               console.log('no');\n                return;\n           }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n       }\n        console.log('yes');\n       console.\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1664,"fileType":"javascript","requestStartTime":1517936499008}}
{"body": {"column":57,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       let indexMin = -1;\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               indexMin = i;\n           }\n       }\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n       if(indexMin<arr.length-1){\n           if(arr[start]>arr[indexMin +1]){\n               console.log('no');\n                return;\n           }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n       }\n        console.log('yes');\n       console.log('swap ' + (start+1) + ' ' + indexMin);\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1706,"fileType":"javascript","requestStartTime":1517936527853}}
{"body": {"column":14,"line":71,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction almostSorted(arr) {\n    // Complete this function\n    let start = -1;\n    for(let i = 0; i<arr.length-1; i++){\n        if(arr[i]>arr[i+1]){\n            start = i;\n            break;\n        }\n            \n    }\n    if(start==-1){\n        console.log('yes');\n        return;\n    }\n    \n    let range = 1;\n    while(arr[start+range] < arr[start+range-1] && start+range < arr.length){ \n        range++;\n    }\n\n   if(range==2){ \n       \n       let min = arr[start+1];\n       let indexMin = -1;\n       for(let i=start+2; i<arr.length; i++){\n           if(arr[i]<min){\n               min = arr[i];\n               indexMin = i;\n           }\n       }\n        if(start>0){\n            if(min < arr[start-1]){\n                 console.log('no');\n                return;\n            }\n        }\n       if(indexMin<arr.length-1){\n           if(arr[start]>arr[indexMin +1]){\n               console.log('no');\n                return;\n           }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n       }\n        console.log('yes');\n       console.log('swap ' + (start+1) + ' ' + indexMin);\n       return;\n    }\n    else{ //on doit reverse\n        if(start >0){\n            if(arr[start+range-1] < arr[start-1]){ ////si le dernier est plus petit que celui d'avant\n                console.log('no');\n                return;\n            }\n        }\n        if(start+range<arr.length){\n             if(arr[start] > arr[start+range]){ //si le premier est plus grand que le suivant\n                console.log('no');\n                return;\n             }\n            if(start+range-1<arr.length-1 && isCroissant(arr.slice(start+range-1))==false){ //si le tableau qui reste n'est pas croissant\n                console.log('no');\n                return;\n            }\n        }\n        console.log('yes');\n        console.log('reverse '+(start+1)+ ' ' + (start+range));\n        return;\n    }\n \n}\n\nfunction isCroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] > arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction isDecroissant(arr){\n    for(let i =0; i<arr.length-1; i++){\n        if(arr[i] < arr[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    almostSorted(arr);\n\n}\n\n\n","offset":1721,"fileType":"javascript","requestStartTime":1517936530030}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\nfunction Sum() {\n    const args = Array.prototype.slice.call(arguments);\n    const sum = args.reduce((acc, i) => {\n        const num = parseInt(i, 10);\n        if(isNaN(num)){\n            throw new Error(\"Not a number\");\n        }\n        \n        return acc + num;\n    }, 0);\n    \n    console.\n}\n\n","offset":296,"fileType":"javascript","requestStartTime":1517936581131}}
{"body": {"column":34,"line":14,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nfunction parseExpression(expression) {\n    return expression.split('+')\n        .map(fraction => fraction.)\n}\n\n/*\n * Complete the function below.\n */\nfunction reducedFractionSums(expressions) {\n    // this is only for test that output is valid when we tried via stdout\n    return expressions\n        .map(expression => parseExpression(expression))\n        .map()\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var expressions;\n    var expressions_size = 0;\n    expressions_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var expressions = [];\n    var expressions_item;\n    for (var expressions_i = 0; expressions_i < expressions_size; expressions_i++) {\n        var expressions_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        expressions.push(expressions_item);\n    }\n\n\n    res = reducedFractionSums(expressions);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":327,"fileType":"javascript","requestStartTime":1517936648256}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517936686403}}
{"body": {"column":12,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger);\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1869,"fileType":"javascript","requestStartTime":1517936726326}}
{"body": {"column":12,"line":53,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger);\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal);\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.\n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2096,"fileType":"javascript","requestStartTime":1517936740193}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.on('data', _ => {});\nprocess.stdin.on('end', _ => main());\n\n\nfunction Sum() {\n    const args = Array.prototype.slice.call(arguments);\n    console.\n    return args.reduce((acc, i) => {\n        const num = parseInt(i, 10);\n        if(isNaN(num)){\n            throw new Error(\"Not a number\");\n        }\n        \n        return acc + num;\n    }, 0);\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let res = Sum();\n\n    ws.write(res + \"\\n\");\n\n    ws.end();\n}\n\n","offset":203,"fileType":"javascript","requestStartTime":1517936827732}}
{"body": {"column":16,"line":10,"wordToComplete":"","code":"'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.on('data', _ => {});\nprocess.stdin.on('end', _ => main());\n\n\nfunction Sum() {\n    const args = Array.from(arguments);\n    return args.;\n    return args.reduce((acc, i) => {\n        const num = parseInt(i, 10);\n        if(isNaN(num)){\n            throw new Error(\"Not a number\");\n        }\n        \n        return acc + num;\n    }, 0);\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    let res = Sum();\n\n    ws.write(res + \"\\n\");\n\n    ws.end();\n}\n\n","offset":191,"fileType":"javascript","requestStartTime":1517936949660}}
{"body": {"column":24,"line":1,"wordToComplete":"","code":"\n  var button = document.\n\n","offset":26,"fileType":"javascript","requestStartTime":1517937170279}}
{"body": {"column":11,"line":3,"wordToComplete":"","code":"\n  var button = document.getElementById('btn');\n\n    button.\n\n","offset":61,"fileType":"javascript","requestStartTime":1517937181047}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\n  var button = document.getElementById('btn');\n\n    button.onClick(function(el) {\n        el.\n    })\n\n","offset":95,"fileType":"javascript","requestStartTime":1517937211463}}
{"body": {"column":26,"line":4,"wordToComplete":"","code":"\n  var button = document.getElementById('btn');\n\n    button.onClick(function(el) {\n        el.innerHTML = el.\n    })\n\n","offset":110,"fileType":"javascript","requestStartTime":1517937218528}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\nfunction parseExpression(expression) {\n    return expression.split('+')\n        .map(fraction => fraction.split('/'));\n}\n\nfunction sumFraction(fractions) {\n    return fractions\n        .map((fraction, index) => {\n            const targetMultipler = index? 0 : 1;\n            return fraction.map(operand => operand * fraction[targetMultipler][1]);\n        });\n}\n\nfunction minimizeFraction(fraction) {\n    const gcd = getGcd(fraction[0], fraction[1]);\n    return fraction.\n}\n\nfunction getGcd(operand1, operand2) {\n    if (operand2) return NaN;\n    \n    const preGcd = operand2 % operand1;\n    \n    return !preGcd\n        ? operand1\n        : getGcd(preGcd, operand1);\n}\n\n/*\n * Complete the function below.\n */\nfunction reducedFractionSums(expressions) {\n    // this is only for test that output is valid when we tried via stdout\n    return expressions\n        .map(expression => parseExpression(expression))\n        .map(fractions => sumFraction(fractions))\n        .map(fraction => minimizeFraction(fraction));\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var expressions;\n    var expressions_size = 0;\n    expressions_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var expressions = [];\n    var expressions_item;\n    for (var expressions_i = 0; expressions_i < expressions_size; expressions_i++) {\n        var expressions_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        expressions.push(expressions_item);\n    }\n\n\n    res = reducedFractionSums(expressions);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":691,"fileType":"javascript","requestStartTime":1517937247006}}
{"body": {"column":45,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction reverseWords(input) {\n   var rtn = \"\";\n    var Words = input.split(\" \");\n    Words.forEach(word =>\n    {\n        if(word.length>1)\n            {\n                var specialChar = \"\";\n                var specialNum-1;\n                for(var i = word.length; i > 0; i--)\n                    {\n                        if(word[i-1].toLowerCase() >= 'a' && word[i-1].toUpperCase() <= 'z')\n                            {\n                        rtn+=word[i-1];\n                            }\n                        else\n                            {\n                                specialChar = word[i-1];\n                                specialNum = i-1;\n                            }\n                    }if(specialNum>-1)\n                        {\n                            var substr = rtn.\n                rtn+=specialChar;\n                rtn+= \" \";\n                        }\n            }\n        else\n            {\n                rtn+= word+\" \";\n            }\n    });\n     console.log(rtn);\n    return rtn;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _input = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = reverseWords(_input);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":1060,"fileType":"javascript","requestStartTime":1517937286970}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":466,"fileType":"javascript","requestStartTime":1517937397475}}
{"body": {"column":8,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.log(num);\n    num.\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":484,"fileType":"javascript","requestStartTime":1517937434568}}
{"body": {"column":36,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction reverseWords(input) {\n   var rtn = \"\";\n    var Words = input.split(\" \");\n    Words.forEach(word =>\n    {\n        if(word.length>1)\n            {\n                var specialChar = \"\";\n                var specialNum=-1;\n                for(var i = word.length; i > 0; i--)\n                    {\n                        if(word[i-1].toLowerCase() >= 'a' && word[i-1].toUpperCase() <= 'z')\n                            {\n                        rtn+=word[i-1];\n                            }\n                        else\n                            {\n                                specialChar = word[i-1];\n                                specialNum = i-1;\n                            }\n                    }if(specialNum>-1)\n                        {\n                            var substr = rtn.slice(specialNum,word.length-specialNum);\n                            console.\n                            console.log('!!!!');\n                            console.log(substr);\n                rtn+=specialChar;\n              \n                        }\n                  rtn+= \" \";\n            }\n        else\n            {\n                rtn+= word+\" \";\n            }\n    });\n     console.log(rtn);\n    return rtn;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _input = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = reverseWords(_input);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":1139,"fileType":"javascript","requestStartTime":1517937437090}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.log(num);\n    num.reduce((prev, curr) => {\n        console.\n        totalCost += (prev + curr);\n        return prev + curr;\n    })\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":525,"fileType":"javascript","requestStartTime":1517937601742}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction squares(a, b) {\n    // Complete this function\n    return Math.\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var a_temp = readLine().split(' ');\n        var a = parseInt(a_temp[0]);\n        var b = parseInt(a_temp[1]);\n        var result = squares(a, b);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":530,"fileType":"javascript","requestStartTime":1517937610373}}
{"body": {"column":27,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction DOMNode(element) {\n    this.element = element;\n}\nDOMNode.prototype.showToolTip = function(options) {\n    console.log(options, \"tool tip options\");\n    var pos = this.element.getBoundingClientRect();\n    var tooltip = document.\n};\n\nfunction elementFinder(selectorString) {\n    return new DOMNode(document.querySelector(selectorString));\n}\n\nfunction bootstrap() {\n    window.$ = elementFinder;\n    $(\"#tooltip\").showToolTip({});\n}\n\ndocument.body.onload = bootstrap;\n\n","offset":266,"fileType":"javascript","requestStartTime":1517937629644}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    console.\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":635,"fileType":"javascript","requestStartTime":1517937725573}}
{"body": {"column":27,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    console.log(objects[0].)\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":650,"fileType":"javascript","requestStartTime":1517937749557}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    objects.\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":635,"fileType":"javascript","requestStartTime":1517937766725}}
{"body": {"column":22,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let result = 0\n    objects.forEach(val => {\n        result += val.\n    })\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":693,"fileType":"javascript","requestStartTime":1517937792813}}
{"body": {"column":8,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //arrange numbers smallest to largest?\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.log(num);\n    num.\n    num.reduce((prev, curr) => {\n        console.log(prev, curr);\n        totalCost += (prev + curr);\n        return prev + curr;\n    })\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":527,"fileType":"javascript","requestStartTime":1517937793823}}
{"body": {"column":32,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let result = 0\n    objects.forEach(val => {\n        result += val.x === val.\n    })\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":703,"fileType":"javascript","requestStartTime":1517937794788}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let result = 0\n    objects.forEach(val => {\n        result += val.x === val.y ? 1 : 0\n    })\n    console.\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":732,"fileType":"javascript","requestStartTime":1517937800684}}
{"body": {"column":8,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //arrange numbers smallest to largest?\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.log(num);\n    num.\n    num.reduce((prev, curr) => {\n        console.log(prev, curr);\n        totalCost += (prev + curr);\n        return prev + curr;\n    })\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":527,"fileType":"javascript","requestStartTime":1517937812189}}
{"body": {"column":30,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //arrange numbers smallest to largest?\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.log(num);\n    num.sort(compare (a, b) =>)\n    num.reduce((prev, curr) => {\n        console.log(prev, curr);\n        totalCost += (prev + curr);\n        return prev + curr;\n    })\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":549,"fileType":"javascript","requestStartTime":1517937827897}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //arrange numbers smallest to largest?\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array reduce\n    console.log(num);\n    num.sort((a, b) => {return (a-b)});\n    console.\n    num.reduce((prev, curr) => {\n        console.log(prev, curr);\n        totalCost += (prev + curr);\n        return prev + curr;\n    })\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":571,"fileType":"javascript","requestStartTime":1517937858693}}
{"body": {"column":20,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var mymap= new Array(doors.length).fill(0);\n    var i=0;\n    var maxCount=0;\n    for( i=0;i<doors.length;i++){\n      if(doors[i]==1){\n        var count=1;\n        maxCount++;\n        if(i!=0 && i!=doors.length-1){\n          if(doors[i-1]==doors[i])count++;\n          if(doors[i+1]==doors[i])count++;\n        } else if(i==0){\n          if(doors[i]==doors[i+1])count++;\n        } else if(i==doors.length-1){\n          if(doors[i]==doors[i-1])count++;\n        }\n        mymap[i]=count;\n      }\n    }\n    var minCount=0;\n    for(i=0;i<doors.)\n    for(i=2;i>=0;i--){\n      var get_values = mymap.get(i);\n      for(var index of get_values){\n        if(doors[index]==1){\n          minCount++;\n          if(i==2){\n            doors[index]=0;\n            doors[index-1]=0;\n            doors[index+1]=0;\n          }else if(i==1){\n            doors[index]=0;\n            if(index==0){\n              doors[index+1]=0;\n            }else if(index==doors.length-1){\n              doors[index-1]=0;\n            }else{\n              if(doors[index+1]==1) doors[index+1]=0;\n              if(doors[index-1]==1) doors[index-1]=0;\n            }\n          }else if(i==0){\n            doors[index]=0;\n          }\n        }\n      }\n    }\n    return [minCount,maxCount];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":1071,"fileType":"javascript","requestStartTime":1517938084461}}
{"body": {"column":49,"line":12,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction DOMNode(element) {\n    this.element = element;\n}\nDOMNode.prototype.showToolTip = function(options) {\n    var pos = this.element.getBoundingClientRect();\n    document.querySelector(\"#tooltip h2\").innerHTML = options.Title;\n    document.querySelector(\"#tooltip .content\").innerHTML = options.Content;\n    document.querySelector(\"#tooltip button\").onclick = function() {\n        options.onApprove();\n        document.getElementById(\"tooltip\").style.display = \"none\";\n    }\n    var tooltip = document.getElementById(\"tooltip\");\n    tooltip.style.position = \"absolute\";\n    tooltip.style.top = (pos.top - 110) + \"px\";\n    tooltip.style.display = \"block\";\n    \n    console.log(pos);\n};\n\nfunction elementFinder(selectorString) {\n    return new DOMNode(document.querySelector(selectorString));\n}\n\nfunction bootstrap() {\n    window.$ = elementFinder;\n    $(\"button.hello\").showToolTip({\n        Title: \"This is a title\",\n        Content: \"This is the content\",\n        onApprove: function() {\n            console.log(\"someone approved me\");\n        }\n    });\n}\n\ndocument.body.onload = bootstrap;\n\n","offset":486,"fileType":"javascript","requestStartTime":1517938219571}}
{"body": {"column":11,"line":14,"wordToComplete":"prot","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n/*\n * Complete the function below.\n */\nfunction mySplitFactory() {\nString.prot\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _inputStr1 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n   \n    var _inputStr2 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    String.prototype.split = function(){\n        // I have been overwritten , you cannot use me\n    };\n    \n    String.split = mySplitFactory();\n    res = String.split(_inputStr1, _inputStr2 );\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":298,"fileType":"javascript","requestStartTime":1517938281788}}
{"body": {"column":25,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n   var magic = \"\"\n   \n   for( let i = 0; i < s. )\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":345,"fileType":"javascript","requestStartTime":1517938323269}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n\nclass Polygon {\n    constructor(arr) {\n        this.\n    }\n}\n    \n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":266,"fileType":"javascript","requestStartTime":1517938370631}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n   var magic = \"\"\n   \n   for( let i = 0; i < s.length; i++ ) {\n       if( s. )\n   }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":374,"fileType":"javascript","requestStartTime":1517938402013}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n\nclass Polygon {\n    constructor(arr) {\n        this.lengths = arr\n    }\n    perimeter() {\n        return this.\n    }\n}\n    \n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":324,"fileType":"javascript","requestStartTime":1517938403231}}
{"body": {"column":28,"line":12,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n\nclass Polygon {\n    constructor(arr) {\n        this.lengths = arr\n    }\n    perimeter() {\n        return this.lengths.\n    }\n}\n    \n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":332,"fileType":"javascript","requestStartTime":1517938410447}}
{"body": {"column":8,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction reductionCost(num) {\n    //arrange numbers smallest to largest?\n    //replace 2 numbers with 1 - work out cost\n    //repeat until array length = 1\n    //return sum total of costs\n    var totalCost = 0;\n    //use JS array map\n    console.log(num);\n    num.sort((a, b) => {return (a-b)});\n    console.log('sorted', num);\n    num.\n    return totalCost;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num;\n    var num_size = 0;\n    num_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num = [];\n    var num_item;\n    for (var num_i = 0; num_i < num_size; num_i++) {\n        var num_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        num.push(num_item);\n    }\n\n\n    res = reductionCost(num);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":596,"fileType":"javascript","requestStartTime":1517938488845}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n/*\n * Complete the function below.\n */\nfunction mySplitFactory() {\nreturn String.prototype.split=function(val,splitter)\n                      {\n    for(var = 0; i < val.length; i++)\n        {\n            console.log(val.)\n        }\n    \n};\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _inputStr1 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n   \n    var _inputStr2 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    String.prototype.split = function(){\n        // I have been overwritten , you cannot use me\n    };\n    \n    String.split = mySplitFactory();\n    res = String.split(_inputStr1, _inputStr2 );\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":440,"fileType":"javascript","requestStartTime":1517938526530}}
{"body": {"column":26,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n   var magic = \"\"\n   \n   for( let i = 0; i < s.length; i++ ) {\n       if( magic.length === 0 ) {\n           if( s.charCodeAt(i) === 97 ) {\n               magic += s.\n           }   \n       }\n       \n   }\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":463,"fileType":"javascript","requestStartTime":1517938568020}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n    console.\n}\n\n\n","offset":537,"fileType":"javascript","requestStartTime":1517938566898}}
{"body": {"column":18,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction longestSubsequence(s) {\n    \n   var magic = \"\"\n   \n   for( let i = 0; i < s.length; i++ ) {\n       if( magic.length === 0 ) {\n           if( s.charCodeAt(i) === 97 ) {\n               magic += s.charAt(i)\n           }   \n       }\n       else {\n            if( s. )           \n       }\n       \n   }\n    \n    console.log( magic )\n        \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = longestSubsequence(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":530,"fileType":"javascript","requestStartTime":1517938732555}}
{"body": {"column":14,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n/*\n * Complete the function below.\n */\nfunction mySplitFactory() {\nreturn String.prototype.split=function(val,splitter)\n                      {\n    val = val.\n    var arr=[];\n    console.log(val);\n    for(var i = 0; i < val.length; i++)\n        {\n            if(val.charAt(i)!=splitter && val.charAt(i) != \" \" && val.charAt(i) != \"\" && val.charAt(i) != null)\n                {\n                    arr.push(val.charAt(i))\n                }\n           \n        }\n    return arr;\n    \n};\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _inputStr1 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n   \n    var _inputStr2 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    String.prototype.split = function(){\n        // I have been overwritten , you cannot use me\n    };\n    \n    String.split = mySplitFactory();\n    res = String.split(_inputStr1, _inputStr2 );\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":378,"fileType":"javascript","requestStartTime":1517938732374}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    console.\n}\n\n\n","offset":650,"fileType":"javascript","requestStartTime":1517938763218}}
{"body": {"column":31,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\n\nfunction firstOccurrence(s, x) {\n    var counter = -1;\n    for(var i = 0 ; i<s.length ; i++){\n        \n        if(s[i]==x[0] || x[0]=='*'){\n            \n            for(var j = 1 ; j<x.length;j++){\n                 \n                if(s[i+j]==x[j] || x[j]=='*'){\n                    counter=i;\n                     console.log(counter);\n                    \n                }\n                else{\n                   \n                    counter=-1;\n                }\n                 if(counter !=-1 && j==x.length-1){\n                \n                return counter;\n            }\n               \n            }\n            if(counter !=-1){\n                \n                return counter;\n            }\n        }\n            \n        \n    }\n    \n  \n}\n\n   \n   \n    \n   \n    \n    \n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var x;\n    var x = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = firstOccurrence(s, x);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":710,"fileType":"javascript","requestStartTime":1517938823482}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    console.\n}\n\n\n","offset":650,"fileType":"javascript","requestStartTime":1517938829818}}
{"body": {"column":13,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    return a.\n}\n\n\n","offset":651,"fileType":"javascript","requestStartTime":1517938842801}}
{"body": {"column":13,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    return a.\n}\n\n\n","offset":651,"fileType":"javascript","requestStartTime":1517938848212}}
{"body": {"column":13,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    return a.a.splice(0, k);\n}\n\n\n","offset":651,"fileType":"javascript","requestStartTime":1517938860869}}
{"body": {"column":25,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    return a.splice(k, k.a.splice(0, k);\n}\n\n\n","offset":663,"fileType":"javascript","requestStartTime":1517938870893}}
{"body": {"column":33,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    return a.splice(k, k.length).a.splice(0, k);\n}\n\n\n","offset":671,"fileType":"javascript","requestStartTime":1517938878453}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    console.a.splice(k, k.length).concat(a.splice(0, k));\n}\n\n\n","offset":650,"fileType":"javascript","requestStartTime":1517938889703}}
{"body": {"column":3,"line":1,"wordToComplete":"","code":"\n  .\n\n","offset":5,"fileType":"javascript","requestStartTime":1517939060966}}
{"body": {"column":3,"line":1,"wordToComplete":"","code":"\n  .\n\n","offset":5,"fileType":"javascript","requestStartTime":1517939064717}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    console.\n}\n\n\n","offset":678,"fileType":"javascript","requestStartTime":1517939077829}}
{"body": {"column":22,"line":1,"wordToComplete":"","code":"\n  let button = button.\n\n","offset":24,"fileType":"javascript","requestStartTime":1517939083557}}
{"body": {"column":24,"line":1,"wordToComplete":"","code":"\n  let button = document.\n\n","offset":26,"fileType":"javascript","requestStartTime":1517939088805}}
{"body": {"column":44,"line":1,"wordToComplete":"","code":"\n  let button = document.getElementByClass('.')\n\n","offset":46,"fileType":"javascript","requestStartTime":1517939094781}}
{"body": {"column":22,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').\n})\n\n","offset":68,"fileType":"javascript","requestStartTime":1517939102458}}
{"body": {"column":35,"line":17,"wordToComplete":"inde","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n/*\n * Complete the function below.\n */\nfunction mySplitFactory() {\nreturn String.prototype.split=function(val,splitter)\n                      {\n    console.log(val.indexOf(splitter));\n    console.log(val.substr(val.inde))\n    var arr=[];\n    for(var i = 0; i < val.length; i++)\n        {\n            if(splitter==\"\" || splitter == null)\n                {\n                    arr.push(val.charAt(i));\n                }\n            else\n                {\n            if(val.charAt(i)!=splitter && val.charAt(i) != \" \" && val.charAt(i) != \"\" && val.charAt(i) != null)\n                {\n                    arr.push(val.charAt(i));\n                }\n                }\n           \n        }\n    return arr;\n    \n};\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _inputStr1 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n   \n    var _inputStr2 = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    String.prototype.split = function(){\n        // I have been overwritten , you cannot use me\n    };\n    \n    String.split = mySplitFactory();\n    res = String.split(_inputStr1, _inputStr2 );\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":439,"fileType":"javascript","requestStartTime":1517939093733}}
{"body": {"column":16,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change(() => {\n        console.\n    })\n})\n\n","offset":99,"fileType":"javascript","requestStartTime":1517939121781}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        console.log(e.)\n    })\n})\n\n","offset":106,"fileType":"javascript","requestStartTime":1517939171409}}
{"body": {"column":18,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    console.log(a.)\n}\n\n\n","offset":684,"fileType":"javascript","requestStartTime":1517939210368}}
{"body": {"column":29,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        var filename = $this.\n    })\n})\n\n","offset":113,"fileType":"javascript","requestStartTime":1517939236474}}
{"body": {"column":31,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        var filename = $(this).\n    })\n})\n\n","offset":115,"fileType":"javascript","requestStartTime":1517939240325}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.\n      buttons[i].addEventListener(\"click\", function() {\n        console.log(\"clicked\");\n      });\n    }\n\n\n","offset":71,"fileType":"javascript","requestStartTime":1517939240941}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        var filename = $(this).files;\n         console.\n    })\n})\n\n","offset":139,"fileType":"javascript","requestStartTime":1517939251873}}
{"body": {"column":11,"line":4,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.\n    })\n      buttons[i].addEventListener(\"click\", function() {\n        console.log(\"clicked\");\n      });\n    }\n\n\n","offset":97,"fileType":"javascript","requestStartTime":1517939256885}}
{"body": {"column":36,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    console.log(a.slice(rotation, a.))\n}\n\n\n","offset":702,"fileType":"javascript","requestStartTime":1517939281682}}
{"body": {"column":44,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    console.log(a.slice(rotation, a.length).)\n}\n\n\n","offset":710,"fileType":"javascript","requestStartTime":1517939284945}}
{"body": {"column":53,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    console.log(a.slice(rotation, a.length).concat(a.))\n}\n\n\n","offset":719,"fileType":"javascript","requestStartTime":1517939288973}}
{"body": {"column":19,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following withtout using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    let n;\n    try {\n        n = Number.\n    }\n}\n\n","offset":998,"fileType":"javascript","requestStartTime":1517939315472}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    const rotatedArr = a.slice(rotation, a.length).concat(a.slice(0, rotation)));\n    console.\n}\n\n\n","offset":760,"fileType":"javascript","requestStartTime":1517939325142}}
{"body": {"column":27,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n    const rotation = k % n;\n    const rotatedArr = a.slice(rotation, a.length).concat(a.slice(0, rotation)));\n    console.log(rotatedArr.)\n}\n\n\n","offset":775,"fileType":"javascript","requestStartTime":1517939327606}}
{"body": {"column":22,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        var filename = $(this).files;\n        $('filename').\n    })\n})\n\n","offset":144,"fileType":"javascript","requestStartTime":1517939328199}}
{"body": {"column":35,"line":5,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(el) {\n            let element = document.\n        });\n    })\n\n","offset":173,"fileType":"javascript","requestStartTime":1517939337989}}
{"body": {"column":52,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\n\nfunction firstOccurrence(s, x) {\n    var counter = -1;\n    var correction_for_wildcards= false\n    for(var i = 0 ; i<s.length ; i++){\n        \n        if(s[i]==x[0] || x[0]=='*'){\n            \n            for(var j = 1 ; j<x.length;j++){\n                 \n                if(s[i+j]==x[j] || x[j]=='*'){\n                    counter=i;\n                     console.log(counter);\n                    \n                }\n                else{\n                   \n                    counter=-1;\n                }\n                 if(counter !=-1 && j==x.length-1){\n                 if( x[0]=='*' && correction_for_wildcards==false){\n                     counter += 1;\n                     correction_for_wildcards==true;\n                 } \n                return counter;\n            }\n               \n            }\n            if(counter !=-1){\n                \n                return counter;\n            }\n        }\n            \n        \n    }\n    \n  \n}\n\n   \n   \n    \n   \n    \n    \n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var x;\n    var x = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = firstOccurrence(s, x);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":976,"fileType":"javascript","requestStartTime":1517939344551}}
{"body": {"column":20,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(el) {\n            let element = document.getElementById('btn-container');\n            element.\n        });\n    })\n\n","offset":226,"fileType":"javascript","requestStartTime":1517939353557}}
{"body": {"column":35,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(el) {\n            let element = document.getElementById('btn-container');\n            element.innerHTML = el.\n        });\n    })\n\n","offset":241,"fileType":"javascript","requestStartTime":1517939358005}}
{"body": {"column":35,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(el) {\n            let element = document.getElementById('btn-container');\n            element.innerHTML = el.\n        });\n    })\n\n","offset":241,"fileType":"javascript","requestStartTime":1517939370293}}
{"body": {"column":39,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(button) {\n            let element = document.getElementById('btn-container');\n            element.innerHTML = button.\n        });\n    })\n\n","offset":249,"fileType":"javascript","requestStartTime":1517939389429}}
{"body": {"column":27,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        var filename = $(this).files;\n        $('filename').html(filename);\n        $('image-preview').\n    })\n})\n\n","offset":187,"fileType":"javascript","requestStartTime":1517939397954}}
{"body": {"column":39,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    $('image-upload').change((e) => {\n        var filename = $(this).file[0].;\n        $('filename').html(filename);\n        $('image-preview').src(filename)\n    })\n})\n\n","offset":123,"fileType":"javascript","requestStartTime":1517939412077}}
{"body": {"column":16,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following withtout using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    let n;\n    try {\n        n = Number.parseInt(S, 10);\n        if (n === NaN) throw 'NaN error';\n    } catch(err) {\n        console.\n    }\n}\n\n","offset":1092,"fileType":"javascript","requestStartTime":1517939412488}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(button) {\n            let element = document.getElementById('btn-container');\n            el.\n        });\n    })\n\n","offset":225,"fileType":"javascript","requestStartTime":1517939421989}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(button) {\n            let element = document.getElementById('btn-container');\n            el.\n        });\n    })\n\n","offset":225,"fileType":"javascript","requestStartTime":1517939423749}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517939475757}}
{"body": {"column":24,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.);\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1679,"fileType":"javascript","requestStartTime":1517939482427}}
{"body": {"column":57,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.parseInt(firstInteger) + Integer.);\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1712,"fileType":"javascript","requestStartTime":1517939491494}}
{"body": {"column":12,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.parseInt(firstInteger) + Integer.parseInt(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1905,"fileType":"javascript","requestStartTime":1517939501685}}
{"body": {"column":22,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.parseInt(firstInteger) + Integer.parseInt(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(Floar.)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1915,"fileType":"javascript","requestStartTime":1517939504918}}
{"body": {"column":22,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.parseInt(firstInteger) + Integer.parseInt(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(Float.)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1915,"fileType":"javascript","requestStartTime":1517939505781}}
{"body": {"column":55,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.parseInt(firstInteger) + Integer.parseInt(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(Float.parseFloat(firstDecimal) + Float.)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1948,"fileType":"javascript","requestStartTime":1517939515790}}
{"body": {"column":12,"line":53,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(Integer.parseInt(firstInteger) + Integer.parseInt(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(Float.parseFloat(firstDecimal) + Float.parseFloat(secondDecimal));\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.\n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2168,"fileType":"javascript","requestStartTime":1517939526294}}
{"body": {"column":33,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(event) {\n            let element = document.getElementById('btn-container');\n            el.innerHTML = event.;\n        }, false);\n    })\n\n","offset":242,"fileType":"javascript","requestStartTime":1517939567037}}
{"body": {"column":40,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(event) {\n            let element = document.getElementById('btn-container');\n            el.innerHTML = event.target.;\n        }, false);\n    })\n\n","offset":249,"fileType":"javascript","requestStartTime":1517939569141}}
{"body": {"column":18,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", function(event) {\n            let element = document.getElementById('btn-container');\n            event..innerHTML = event.target.id;\n        }, false);\n    })\n\n","offset":227,"fileType":"javascript","requestStartTime":1517939601093}}
{"body": {"column":23,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    var fileReader = new FileReader();\n    $('image-upload').change((e) => {\n        var file = $(this).file[0];\n        if(file) {\n            $('filename').html(filename);\n            fileReader.\n            $('image-preview').src(filename);\n        }\n    })\n})\n\n","offset":243,"fileType":"javascript","requestStartTime":1517939660305}}
{"body": {"column":16,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n  lines = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":48,"fileType":"javascript","requestStartTime":1517939669060}}
{"body": {"column":46,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\n$(function () {\n    var fileReader = new FileReader();\n    $('image-upload').change((e) => {\n        var file = $(this).file[0];\n        if(file) {\n            $('filename').html(filename);\n            fileReader.readAsDataURL(file)\n            $('image-preview').src(fireReader.);\n        }\n    })\n})\n\n","offset":309,"fileType":"javascript","requestStartTime":1517939694435}}
{"body": {"column":44,"line":4,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", rotate.\n    })\n\n","offset":130,"fileType":"javascript","requestStartTime":1517939705317}}
{"body": {"column":21,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following withtout using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    let n;\n    try {\n        n = Number.parseInt(S, 10);\n        if (n === NaN) throw new Error('NaN error');\n        else console.\n    } catch(err) {\n        console.log(err);\n    }\n}\n\n","offset":1089,"fileType":"javascript","requestStartTime":1517939739219}}
{"body": {"column":25,"line":6,"wordToComplete":"","code":"\nfunction processData(input) {\n  const lines = input.split('\\n');\n  const n = lines[0];\n  let dict = {};\n  for(let i = 1; i <= n; i++) {\n    const kv = lines[i] .\n  }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":163,"fileType":"javascript","requestStartTime":1517939752392}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\nfunction processData(input) {\n  const lines = input.split('\\n');\n  const n = lines[0];\n  let dict = {};\n  for(let i = 1; i <= n; i++) {\n    const kv = lines[i].\n  }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":162,"fileType":"javascript","requestStartTime":1517939755832}}
{"body": {"column":42,"line":35,"wordToComplete":"","code":"\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    var i=0;\n    var maxCount=0,minCount=0;\n    for( i=0;i<doors.length;i++){\n      if(doors[i]==1){\n        maxCount++;\n      }\n    }\n    \n  // finding if 1 door can close consecutive two doors\n    for( i=1;i<doors.length-1 && maxCount>;i++){        \n      if(i!=0 && i!=doors.length-1){\n        if(doors[i]==1 && doors[i-1]==doors[i] && doors[i+1]==doors[i]){\n          minCount++;\n          doors[i]=0;\n          doors[i+1]=0;\n          doors[i-1]=0;\n        }\n      } \n    }\n    // finding if 1 door can close one consecutive  doors// since two consecutive doors has been cleared\n    for( i=0;i<doors.length;i++){\n      if(doors[i]==1){\n        minCount++;\n        if(i!=0 && i!=doors.length-1){\n          if(doors[i-1]==doors[i]) doors[i-1]=0;\n          else if(doors[i+1]==doors[i])doors[i+1]=0;\n        } else if(i==0){\n          if(doors[i]==doors[i+1])doors[i+1]=0;\n        } else if(i==doors.length-1){\n          if(doors[i]==doors[i-1])doors[i-1]=0;\n        }\n        doors[i]=0;\n      }\n    }\n      for( i=0;i<doors.length;i++){\n        if(doors[i]==1)minCount++;\n      }\n    // finding if 1 door can close only that  doors\n  \n   \n    return [minCount,maxCount];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":768,"fileType":"javascript","requestStartTime":1517939778412}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n  \n  function rotate(e) {\n      e.\n  }\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":93,"fileType":"javascript","requestStartTime":1517939832893}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n  \n  function rotate(e) {\n      e.target.\n  }\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":100,"fileType":"javascript","requestStartTime":1517939837229}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\nfunction processData(input) {\n  const lines = input.split('\\n');\n  const n = lines[0];\n  \n  let dict = {};\n  for(let i = 1; i <= n; i++) {\n    const kv = lines[i].split(' ');\n    dict[kv[0]] = kv[1];\n  }\n  let j = n + 1;\n  while(lines[j]) {\n    console.\n    j++;\n  }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":255,"fileType":"javascript","requestStartTime":1517939876469}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n  \n  function rotate(e) {\n      e.target. = 'clicked';\n  }\n\n    buttons.forEach(el=> {\n        el.addEventListener(\"click\", rotate);\n    })\n\n","offset":100,"fileType":"javascript","requestStartTime":1517939905924}}
{"body": {"column":32,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for (var i = 0; i < objects.)\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":655,"fileType":"javascript","requestStartTime":1517939946654}}
{"body": {"column":23,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for (var i = 0; i < objects.length; i++){\n        if (objects[i].)\n    }\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":692,"fileType":"javascript","requestStartTime":1517939956798}}
{"body": {"column":36,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for (var i = 0; i < objects.length; i++){\n        if (objects[i].x == objects.)\n    }\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":705,"fileType":"javascript","requestStartTime":1517939962183}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"\nfunction processData(input) {\n  const lines = input.split('\\n');\n  const n = lines[0];\n  \n  let dict = {};\n  for(let i = 1; i <= n; i++) {\n    const kv = lines[i].split(' ');\n    dict[kv[0]] = kv[1];\n  }\n  console. \n  let j = n + 1;\n  while(lines[j]) {\n    console.log(dict[lines[i]] || 'Not Found');\n    j++;\n  }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":216,"fileType":"javascript","requestStartTime":1517939981202}}
{"body": {"column":25,"line":5,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n  \n  function rotate(e) {\n      let div = document.\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":110,"fileType":"javascript","requestStartTime":1517940044964}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":144,"fileType":"javascript","requestStartTime":1517940063284}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n    document.\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.innerHTML = 'hi';\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":71,"fileType":"javascript","requestStartTime":1517940089428}}
{"body": {"column":10,"line":11,"wordToComplete":"","code":"\nfunction processData(input) {\n  const lines = input.split('\\n');\n  const n = lines[0];\n  \n  let dict = {};\n  for(let i = 1; i <= n; i++) {\n    const kv = lines[i].split(' ');\n    dict[kv[0]] = kv[1];\n  }\n  let j = n + 1;\n  console.\n  while(lines[j] != undefined) {\n    console.log(dict[lines[i]] || 'Not Found');\n    j++;\n  }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":233,"fileType":"javascript","requestStartTime":1517940094664}}
{"body": {"column":37,"line":2,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n    document.getElementById('btn-1').\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.innerHTML = 'hi';\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":95,"fileType":"javascript","requestStartTime":1517940100604}}
{"body": {"column":60,"line":2,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n    document.getElementById('btn-1').innerHTML = buttons[0].\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.innerHTML = 'hi';\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":118,"fileType":"javascript","requestStartTime":1517940114204}}
{"body": {"column":60,"line":2,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n    document.getElementById('btn-1').innerHTML = buttons[0].\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.innerHTML = 'hi';\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":118,"fileType":"javascript","requestStartTime":1517940130196}}
{"body": {"column":60,"line":2,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n    document.getElementById('btn-1').innerHTML = buttons[5].\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.innerHTML = 'hi';\n      e.target.innerHTML = 'clicked';\n  }\n\n    buttons.forEach(function(el){\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":118,"fileType":"javascript","requestStartTime":1517940135220}}
{"body": {"column":31,"line":10,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n    document.getElementById('btn-1').innerHTML = buttons[5].innerHTML;\n  \n  function rotate(e) {\n      let div = document.getElementById('test');\n      div.innerHTML = 'hi';\n      e.target.innerHTML = 'clicked';\n  }\n\n    for(let i = 0; i < buttons.)\n        el.addEventListener(\"click\", rotate, false);\n    })\n\n","offset":306,"fileType":"javascript","requestStartTime":1517940228852}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    return nums.\n}\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":628,"fileType":"javascript","requestStartTime":1517940373242}}
{"body": {"column":16,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n/*\n * You can use the following pseudocode:\n *\n * `S` = read string from stdin.\n * try {\n *     `N` = numeric value of `S`.\n *     \n *     If `N` is `NaN` or `undefined`, then some exception must be thrown,\n *     you can write the following without using conditional statement:\n *     <condition to return true when `N` is `NaN` or `undefined`> && an_undefined_function_call()\n *\n *     print `N`\n * } catch (err) {\n *     print `Bad String`.\n * }\n */\n\nfunction main() {\n    const S = readLine();\n    let n;\n    try {\n        n = Number.parseInt(S, 10);\n        isNaN(n) && undefined;\n        console.\n    } catch(err) {\n        console.log(err);\n    }\n}\n\n","offset":1061,"fileType":"javascript","requestStartTime":1517940386688}}
{"body": {"column":20,"line":12,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = [];\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            db.push(json);\n            return true;\n        } catch (e) {\n            console.\n        }\n        \n        return \n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        for(let i in db) {\n            if(contains(json, db[i])) {\n                matchArr.push(db[i]);\n            }\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        for(let i = db.length - 1; i >= 0; i--) {\n            if(contains(json, db[i])) {\n                db.splice(i, 1);\n            }\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if(o1[key] !== o2[key]){\n            return false;\n        }\n    }\n    return true;\n}\n\n//var test1 = JSON.parse('{\"id\":3,\"last\":\"Black\",\"first\":\"Jim\",\"location\":{\"city\":\"Spokane\",\"state\":\"WA\",\"postalCode\":\"99207\"},\"active\":true}');\n//var test2 = JSON.parse('{\"location\":{\"state\":\"WA\"},\"active\":true}');\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    \n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        let json = JSON.parse(line.substring(delimiterPos + 1));\n        let output = commands[command](json);\n        outputProcessor(output);\n        try {\n            \n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof myVar != 'undefined')\n    }\n}\n\n","offset":231,"fileType":"javascript","requestStartTime":1517940412483}}
{"body": {"column":7,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    return nums.map(val => {\n        if (val % 2 === 0) {\n            return val*2\n        } else {\n            return val*3\n        }\n    }).\n}\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":754,"fileType":"javascript","requestStartTime":1517940449338}}
{"body": {"column":28,"line":4,"wordToComplete":"","code":"\n  let buttons = document.getElementsByClassName('btn');\n  \n  function rotate(e) {\n      let number = e.target.;\n      // 0 1 2\n      // 3 4 5\n      // 6 7 8\n      \n      if(number)\n  }\n\n    for(let i = 0; i < buttons.length; i++) {\n        buttons[i].addEventListener(\"click\", rotate, false);\n    }\n\n","offset":112,"fileType":"javascript","requestStartTime":1517940509164}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    // Complete this function\n    for (i=0;i<ar.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":537,"fileType":"javascript","requestStartTime":1517940624392}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n\nfunction revisedRussianRoulette(doors) {\n    var min = 0; var max = 0;\n    for (i=0;i<doors.length;i++) {\n        if (doors[i]===1) {max++}}\n    if ((doors[0]===1) && (doors[1]===0)) {min++}\n    var j=0;\n    while (j<doors.length) {\n        console.log (j + \" \" + min);\n        if (doors[j]===1 && doors[j+1]===1) {min++; j+=2}\n        else {j++}\n    }\n    if (doors[doors.])\n    return min + \" \" + max;\n}\n\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result);\n}\n\n\n\n\n","offset":772,"fileType":"javascript","requestStartTime":1517940625592}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction countDuplicates(numbers) {\n    let set = new Set();\n    for (let num of numbers) {\n        if (set.)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var numbers;\n    var numbers_size = 0;\n    numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numbers = [];\n    var numbers_item;\n    for (var numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n        var numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        numbers.push(numbers_item);\n    }\n\n\n    res = countDuplicates(numbers);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":368,"fileType":"javascript","requestStartTime":1517940635444}}
{"body": {"column":21,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n//Write your code here\nfunction power(e, p) {\n    if (n < 0 || p < 0) throw 'n and p should be non-negative'\n    else return Math.\n}\nfunction main(){\n    var myCalculator=new Calculator();\n    var T=parseInt(readLine());\n    while(T-->0){\n        var num = (readLine().split(\" \"));\n        try{\n            var n=parseInt(num[0]);\n            var p=parseInt(num[1]);\n            var ans=myCalculator.power(n,p);\n            console.log(ans);\n        }\n        catch(e){\n            console.log(e);\n        }\n\n    }\n}\n","offset":525,"fileType":"javascript","requestStartTime":1517940656821}}
{"body": {"column":14,"line":4,"wordToComplete":"","code":"\n  let button4 = document.getElementsById('btn-4');\n  \n  function rotate(e) {\n      button4.\n      let index = e.target.innerHTML - 1;\n      // 0 1 2\n      // 3 4 5\n      // 6 7 8\n      \n      if(number <= 2)\n          \n  }\n    button4.addEventListener(\"click\", rotate, false);\n\n","offset":93,"fileType":"javascript","requestStartTime":1517940665613}}
{"body": {"column":9,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n    \n    var match = 0;\n    var count = 0;\n    \n    if(a.)\n\n    if(a.length >= b.length){\n      for(var i = 0; i < b.length; i++){\n        if(0 <= a.indexOf(b[i])){\n          match++;\n        }else{\n          match = match;\n        }\n      }\n    }else{\n      for(var i = 0; i < a.length; i++){\n        if(0 <= b.indexOf(a[i])){\n          match++;\n        }else{\n          match = match;\n        }\n      }\n    }\n\n    count = a.length - match;\n    count = count + (b.length-match);\n\n    console.log(count);\n}\n\n\n","offset":582,"fileType":"javascript","requestStartTime":1517940701611}}
{"body": {"column":9,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n//Write your code here\nclass Calculator {\n    \n    this. power(e, p) {\n        if (n < 0 || p < 0) throw 'n and p should be non-negative'\n        else return Math.pow(n, p);\n    }\n}\nfunction main(){\n    var myCalculator=new Calculator();\n    var T=parseInt(readLine());\n    while(T-->0){\n        var num = (readLine().split(\" \"));\n        try{\n            var n=parseInt(num[0]);\n            var p=parseInt(num[1]);\n            var ans=myCalculator.power(n,p);\n            console.log(ans);\n        }\n        catch(e){\n            console.log(e);\n        }\n\n    }\n}\n","offset":451,"fileType":"javascript","requestStartTime":1517940721324}}
{"body": {"column":5,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    // Complete this function\n    let total = 0;\n    for (i=0;i<ar.length;i++) {\n        total += ar[i];\n    }\n    .\n    return total;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":605,"fileType":"javascript","requestStartTime":1517940731495}}
{"body": {"column":6,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    // Complete this function\n    let total = 0;\n    for (i=0;i<ar.length;i++) {\n        total += ar[i];\n    }\n    ..\n    return total;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":606,"fileType":"javascript","requestStartTime":1517940731626}}
{"body": {"column":7,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    // Complete this function\n    let total = 0;\n    for (i=0;i<ar.length;i++) {\n        total += ar[i];\n    }\n    ...\n    return total;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":607,"fileType":"javascript","requestStartTime":1517940731777}}
{"body": {"column":39,"line":4,"wordToComplete":"","code":"\n  let button4 = document.getElementById('btn-4');\n  \n  function rotate(e) {\n      document.getElementById('btn-4').;\n\n      let index = e.target.innerHTML - 1;\n      // 0 1 2\n      // 3 4 5\n      // 6 7 8\n      \n      if(number <= 2)\n          \n  }\n    button4.addEventListener(\"click\", rotate, false);\n\n","offset":117,"fileType":"javascript","requestStartTime":1517940740628}}
{"body": {"column":26,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n    \n    var match = 0;\n    var count = 0;\n    \n    if(a.length == 0 || b.)\n\n    if(a.length >= b.length){\n      for(var i = 0; i < b.length; i++){\n        if(0 <= a.indexOf(b[i])){\n          match++;\n        }else{\n          match = match;\n        }\n      }\n    }else{\n      for(var i = 0; i < a.length; i++){\n        if(0 <= b.indexOf(a[i])){\n          match++;\n        }else{\n          match = match;\n        }\n      }\n    }\n\n    count = a.length - match;\n    count = count + (b.length-match);\n\n    console.log(count);\n}\n\n\n","offset":599,"fileType":"javascript","requestStartTime":1517940742002}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n    \n    var match = 0;\n    var count = 0;\n    \n    if(a.length == 0 || b.length == 0){\n        console.\n    }\n\n    if(a.length >= b.length){\n      for(var i = 0; i < b.length; i++){\n        if(0 <= a.indexOf(b[i])){\n          match++;\n        }else{\n          match = match;\n        }\n      }\n    }else{\n      for(var i = 0; i < a.length; i++){\n        if(0 <= b.indexOf(a[i])){\n          match++;\n        }else{\n          match = match;\n        }\n      }\n    }\n\n    count = a.length - match;\n    count = count + (b.length-match);\n\n    console.log(count);\n}\n\n\n","offset":629,"fileType":"javascript","requestStartTime":1517940749129}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction countDuplicates(numbers) {\n    let set = new Set();\n    let count = 0;\n    for (let num of numbers) {\n        if (set.has(num)) {\n            count++;\n        }\n        set.\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var numbers;\n    var numbers_size = 0;\n    numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numbers = [];\n    var numbers_item;\n    for (var numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n        var numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        numbers.push(numbers_item);\n    }\n\n\n    res = countDuplicates(numbers);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":442,"fileType":"javascript","requestStartTime":1517940754117}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxLength(a, k) {\n    var length;\n    for (var i = 0; i < a.)\n    \n    for(var i = 0; i < a.length; i++)\n        {\n            \n        }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = maxLength(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1517940799913}}
{"body": {"column":15,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.\n\n","offset":46,"fileType":"javascript","requestStartTime":1517940880690}}
{"body": {"column":7,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction bestAverageGrade(scores) {\n \nvar Avgmarks = 0, avg;\n\nscores.\n    \nfor (var i=0; i < scores.length; i++) {\n        Avgmarks +=scores[i][1];\n        avg = Math.floor((Avgmarks/scores.length));  \n}\n    return avg;\n    \n}\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _scores_rows = 0;\n    var _scores_cols = 0;\n    var _scores_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _scores_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _scores = Array(_scores_rows);\n    for(var _scores_i=0; _scores_i<_scores_rows; _scores_i++) {\n      _scores[_scores_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n    }\n    \n    res = bestAverageGrade(_scores);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1517940879424}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nconsole.\n\n","offset":66,"fileType":"javascript","requestStartTime":1517940892277}}
{"body": {"column":37,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction countDuplicates(numbers) {\n    let set = new Set();\n    let prevSet = new Set();\n    let count = 0;\n    for (let num of numbers) {\n        if (set.has(num) && !prevSet.) {\n            count++;\n        }\n        set.add(num);\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var numbers;\n    var numbers_size = 0;\n    numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numbers = [];\n    var numbers_item;\n    for (var numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n        var numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        numbers.push(numbers_item);\n    }\n\n\n    res = countDuplicates(numbers);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":437,"fileType":"javascript","requestStartTime":1517940913795}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":534,"fileType":"javascript","requestStartTime":1517940914988}}
{"body": {"column":15,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction countDuplicates(numbers) {\n    let set = new Set();\n    let prevSet = new Set();\n    let count = 0;\n    for (let num of numbers) {\n        if (set.has(num) && !prevSet.has(num)) {\n            count++;\n        }\n        set.add(num);\n        preSet.\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var numbers;\n    var numbers_size = 0;\n    numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numbers = [];\n    var numbers_item;\n    for (var numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n        var numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        numbers.push(numbers_item);\n    }\n\n\n    res = countDuplicates(numbers);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":517,"fileType":"javascript","requestStartTime":1517940922003}}
{"body": {"column":29,"line":22,"wordToComplete":"check","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxLength(a, k) {\n    \n    var length;\n    for (var i = 0; i < a.length, i+++)\n        {\n            for(var i = 1; i < a.length; i++)\n                 {\n                        check\n                 }\n        }\n    \n  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = maxLength(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":452,"fileType":"javascript","requestStartTime":1517940928120}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction countDuplicates(numbers) {\n    let set = new Set();\n    let oneSet = new Set();\n    let count = 0;\n    for (let num of numbers) {\n        if (set.has(num) && !oneSet.has(num)) {\n            count++;\n            oneSet.\n        }\n        set.add(num);\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var numbers;\n    var numbers_size = 0;\n    numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numbers = [];\n    var numbers_item;\n    for (var numbers_i = 0; numbers_i < numbers_size; numbers_i++) {\n        var numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        numbers.push(numbers_item);\n    }\n\n\n    res = countDuplicates(numbers);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":487,"fileType":"javascript","requestStartTime":1517940946465}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    console.log(a);\n    for (i=0;i<a.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":559,"fileType":"javascript","requestStartTime":1517940957711}}
{"body": {"column":24,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    console.log(a);\n    for (i=0;i<a.length.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":566,"fileType":"javascript","requestStartTime":1517940959523}}
{"body": {"column":11,"line":18,"wordToComplete":"","code":"\n  let button4 = document.getElementById('btn-5');\n  \n  function rotate(e) {\n      let index = e.target.innerHTML - 1;\n      // 0 1 2\n      // 3 4 5\n      // 6 7 8\n      \n      let btn1 = document.getElementById('btn-1');\n      let btn2 = document.getElementById('btn-2');\n      let btn3 = document.getElementById('btn-3');\n      let btn4 = document.getElementById('btn-4');\n      let btn6 = document.getElementById('btn-6');\n      let btn7 = document.getElementById('btn-7');\n      let btn8 = document.getElementById('btn-8');\n      let btn9 = document.getElementById('btn-9');\n      \n      btn1.\n          \n  }\n    button4.addEventListener(\"click\", rotate, false);\n\n","offset":598,"fileType":"javascript","requestStartTime":1517941019803}}
{"body": {"column":13,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction birthdayCakeCandles(n, ar) {\n    // Complete this function\n    arr = ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = birthdayCakeCandles(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":540,"fileType":"javascript","requestStartTime":1517941029621}}
{"body": {"column":11,"line":18,"wordToComplete":"","code":"\n  let button4 = document.getElementById('btn-5');\n  \n  function rotate(e) {\n      let index = e.target.innerHTML - 1;\n      // 0 1 2\n      // 3 4 5\n      // 6 7 8\n      \n      let btn1 = document.getElementById('btn-1');\n      let btn2 = document.getElementById('btn-2');\n      let btn3 = document.getElementById('btn-3');\n      let btn4 = document.getElementById('btn-4');\n      let btn6 = document.getElementById('btn-6');\n      let btn7 = document.getElementById('btn-7');\n      let btn8 = document.getElementById('btn-8');\n      let btn9 = document.getElementById('btn-9');\n      \n      btn2.btn1.innerHTML;\n          \n  }\n    button4.addEventListener(\"click\", rotate, false);\n\n","offset":598,"fileType":"javascript","requestStartTime":1517941032219}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction birthdayCakeCandles(n, ar) {\n    // Complete this function\n    arr = ar.sort((a,b) => )\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = birthdayCakeCandles(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":554,"fileType":"javascript","requestStartTime":1517941035573}}
{"body": {"column":21,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nconsole.log(w);\n\nlet cells = document.\n\n","offset":96,"fileType":"javascript","requestStartTime":1517941037989}}
{"body": {"column":21,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    let total = 0;\n    \n    for (i=0;i<a.length;i++) {\n        for (i=0;i<a.)\n        if (i=0) {\n            total += a[i][0];\n        } else if (i=1) {\n            \n        }\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":598,"fileType":"javascript","requestStartTime":1517941114709}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    let total = 0;\n    let leftRight = 0;\n    let rightLeft = 0;\n    \n    for (i=0;i<a.length;i++) {\n        leftRight += a[i][i];\n    }\n    \n    for (i=a.;i<a.length;i++) {\n        leftRight += a[i][i];\n    }\n    \n    return total;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":677,"fileType":"javascript","requestStartTime":1517941216603}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nlet cells = document.querySelectorAll('cell');\n\nconsole.\n\n\n","offset":114,"fileType":"javascript","requestStartTime":1517941224090}}
{"body": {"column":43,"line":4,"wordToComplete":"div.cell'","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nlet cells = document.querySelectorAll('div.cell');\n\nconsole.log(cells);\n\n\n","offset":101,"fileType":"javascript","requestStartTime":1517941284436}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a.){\n        \n    })\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517941286991}}
{"body": {"column":17,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    let total = 0;\n    let leftRight = 0;\n    let rightLeft = 0;\n    \n    for (i=0;i<a.length;i++) {\n        leftRight += a[i][i];\n    }\n    \n    for (i=a.length;i>0;i--) {\n        rightLeft += a[i][i];\n    }\n    \n    total = leftRight - rightLeft;\n    total = Math.abs\n    \n    return total;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":788,"fileType":"javascript","requestStartTime":1517941298474}}
{"body": {"column":14,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nlet cells = document.querySelectorAll('div.cell');\ncells = cells.\n\nconsole.log(cells);\n\n\n","offset":123,"fileType":"javascript","requestStartTime":1517941304011}}
{"body": {"column":23,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nlet cells = document.querySelectorAll('div.cell');\ncells = cells.map(e) +>\nconsole.log(cells);\n\n\n","offset":132,"fileType":"javascript","requestStartTime":1517941328952}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.\n    if(arr)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":366,"fileType":"javascript","requestStartTime":1517941331746}}
{"body": {"column":6,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet w = window.innerWidth;\nlet cells = document.querySelectorAll('div.cell');\ncells = cells.map(e) => {\n    e.\n}\nconsole.log(cells);\n\n\n","offset":141,"fileType":"javascript","requestStartTime":1517941334994}}
{"body": {"column":29,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.)\n    if(arr)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":376,"fileType":"javascript","requestStartTime":1517941338282}}
{"body": {"column":8,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth; = window.innerWidth/4;\nlet cells = document.querySelectorAll('div.cell');\ncells = cells.map(e) => {\n    e.width = w/4;\n}\nconsole.log(cells);\nconsole.\n\n\n","offset":195,"fileType":"javascript","requestStartTime":1517941369622}}
{"body": {"column":33,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.length/2);\n    if(arr[mid]===k){\n        alert('YES');\n    }else if(arr[mid] < k && arr.)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":464,"fileType":"javascript","requestStartTime":1517941409060}}
{"body": {"column":41,"line":1,"wordToComplete":"Mr|Mrs|Ms|Dr|Er]\\./","code":"\nvar Regex_Pattern = /^[Mr|Mrs|Ms|Dr|Er]\\./; //Do not delete '/'. Replace __________ with your regex. \n\n\nfunction processData(Test_String) {\n    //Enter your code here\n    \n    console.log(!!Test_String.match(Regex_Pattern));\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n","offset":43,"fileType":"javascript","requestStartTime":1517941424681}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":535,"fileType":"javascript","requestStartTime":1517941427598}}
{"body": {"column":9,"line":71,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = [];\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            db.push(json);\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        try {\n            for(let i in db) {\n                if(contains(json, db[i])) {\n                    matchArr.push(db[i]);\n                }\n            }\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        try {\n            for(let i = db.length - 1; i >= 0; i--) {\n                if(contains(json, db[i])) {\n                    db.splice(i, 1);\n                }\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if(o1[key] !== o2[key]){\n            return false;\n        }\n    }\n    return true;\n}\n\nvar test1 = JSON.parse('{\"type\":\"list\",\"list\":[1,2,3,4]}');\nvar test2 = JSON.parse('{\"type\":\"list\",\"list\":[3,4]}');\ncommands.\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    inputProcessor(input);\n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        let json = JSON.parse(line.substring(delimiterPos + 1));\n        let output = commands[command](json);\n        outputProcessor(output);\n        try {\n            \n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof output[i] != 'undefined' || output[i] !== true || output[i] !== false) {\n            let outputLine = JSON.stringify(output[i]);\n            console.log(outputLine);\n        }\n    }\n}\n\n","offset":1909,"fileType":"javascript","requestStartTime":1517941429998}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.length/2);\n    if(arr[mid]===k){\n        alert('YES');\n    }else if(arr[mid] < k && arr.length > 1){\n        arr.\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":489,"fileType":"javascript","requestStartTime":1517941443623}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    sonsole.    \n});\n// ********************\n\n\n\n","offset":231,"fileType":"javascript","requestStartTime":1517941454436}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    console.    \n});\n// ********************\n\n\n\n","offset":231,"fileType":"javascript","requestStartTime":1517941457656}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.length/2);\n    if(arr[mid]===k){\n        alert('YES');\n    }else if(arr[mid] < k && arr.length > 1){\n        return findNumber(arr.)\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":507,"fileType":"javascript","requestStartTime":1517941468642}}
{"body": {"column":8,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\nconsole.\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":808,"fileType":"javascript","requestStartTime":1517941478602}}
{"body": {"column":46,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.length/2);\n    if(arr[mid]===k){\n        alert('YES');\n    }else if(arr[mid] < k && arr.length > 1){\n        return findNumber(arr.splice(mid, arr.))\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":523,"fileType":"javascript","requestStartTime":1517941482733}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.slice(7)\n    console.\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":556,"fileType":"javascript","requestStartTime":1517941486917}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth/4;\nlet cells = document.querySelectorAll('div.cell');\nfor (let cell in cells) {\n    cell.\n}\ncells = cells.map(e) => {\n    return e.width = cellWidth/4;\n}\nconsole.log(cells);\nconsole.log(cellWidth);\n\n\n","offset":154,"fileType":"javascript","requestStartTime":1517941490752}}
{"body": {"column":33,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.length/2);\n    if(arr[mid]===k){\n        alert('YES');\n    }else if(arr[mid] < k && arr.length > 1){\n        return findNumber(arr.splice(mid, arr.length), i)\n    }else if(arr[mid] > k && arr.)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":568,"fileType":"javascript","requestStartTime":1517941514663}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.slice(8)\n    let hour = s.\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":561,"fileType":"javascript","requestStartTime":1517941526284}}
{"body": {"column":14,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    let total = 0;\n    let leftRight = 0;\n    let rightLeft = 0;\n    \n    for (x=0;x<a.length;x++) {\n        if (a.)\n        leftRight += a[x][x];\n    }\n    \n    for (y=a.length-1;y>-1;y--) {\n        rightLeft += a[y][y];\n    }\n    \n    total = leftRight - rightLeft;\n    total = Math.abs(total);\n    \n    return total;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":637,"fileType":"javascript","requestStartTime":1517941529829}}
{"body": {"column":21,"line":21,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.readline(), 10);\n}\n\n\n","offset":436,"fileType":"javascript","requestStartTime":1517941552246}}
{"body": {"column":8,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth;\nlet cells = document.querySelectorAll('div.cell');\nfor (let cell in cells) {\n    cell.width = cellWidth;\n}\nconsole.\n\n\n","offset":181,"fileType":"javascript","requestStartTime":1517941556161}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth;\nlet cells = document.querySelectorAll('div.cell');\nfor (let cell in cells) {\n    cell.width = cellWidth;\n}\nconsole.log(window.)\n\n\n","offset":192,"fileType":"javascript","requestStartTime":1517941557623}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readline(), 10);\n    \n    console.\n}\n\n\n","offset":479,"fileType":"javascript","requestStartTime":1517941571131}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction cutSticks(lengths) {\n    let res = [];\n    let shortest = Number.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var lengths;\n    var lengths_size = 0;\n    lengths_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var lengths = [];\n    var lengths_item;\n    for (var lengths_i = 0; lengths_i < lengths_size; lengths_i++) {\n        var lengths_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        lengths.push(lengths_item);\n    }\n\n\n    res = cutSticks(lengths);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":334,"fileType":"javascript","requestStartTime":1517941593909}}
{"body": {"column":28,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.slice(8)\n    let hour = s.slice(0,2).\n    if (AmPm === \"PM\") {\n        hour\n    }\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":572,"fileType":"javascript","requestStartTime":1517941594973}}
{"body": {"column":16,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.sort(function(a, b){\n        return a -b;\n    })\n    let mid = Math.floor(arr.length/2);\n    if(arr[mid]===k){\n        console.('YES');\n    }else if(arr[mid] > k && arr.length > 1){\n        return findNumber(arr.splice(mid, arr.length), k);\n    }else if(arr[mid] < k && arr.lenth > 1){\n        return findNumber(arr.splice(0, mid), k);\n    }else{\n        alert('NO');\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":425,"fileType":"javascript","requestStartTime":1517941631436}}
{"body": {"column":57,"line":2,"wordToComplete":"a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\./g","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\./g\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":89,"fileType":"javascript","requestStartTime":1517941642974}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.slice(8)\n    let hour = parseInt(s.slice(0,2))\n    if (AmPm === \"PM\") {\n        hour += 12\n    }\n    return hour.\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":648,"fileType":"javascript","requestStartTime":1517941652357}}
{"body": {"column":24,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let matches = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":137,"fileType":"javascript","requestStartTime":1517941652349}}
{"body": {"column":28,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    \n}\n\nfunction print_arr(arr) {\n    for (let i = 0; i < arr.)\n}\n\n","offset":529,"fileType":"javascript","requestStartTime":1517941654864}}
{"body": {"column":31,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.slice(8)\n    let hour = parseInt(s.slice(0,2))\n    if (AmPm === \"PM\") {\n        hour += 12\n    }\n    return hour.toString() + s.\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":663,"fileType":"javascript","requestStartTime":1517941662246}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let matches = input.match(re);\n    console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":160,"fileType":"javascript","requestStartTime":1517941661364}}
{"body": {"column":24,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let matches = input.match(re);\n    console.log(matches.)\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":172,"fileType":"javascript","requestStartTime":1517941663507}}
{"body": {"column":14,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    \n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.\n}\n\n","offset":611,"fileType":"javascript","requestStartTime":1517941679194}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth/4;\ndocument.querySelectorAll('.cell').forEach(function(cell) {\n    cell.\n});\nlet cells = document.querySelectorAll('div.cell');\nfor (let cell in cells) {\n    cell.width = cellWidth;\n}\nconsole.log(window.innerWidth);\n\n\n","offset":137,"fileType":"javascript","requestStartTime":1517941689622}}
{"body": {"column":30,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction cutSticks(lengths) {\n    let res = [];\n    let shortest = Number.MAX_VALUE;\n    while(!allZero(lengths)) {\n        let shortest = Number.\n    }\n}\n\nfunction allZero(lengths) {\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var lengths;\n    var lengths_size = 0;\n    lengths_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var lengths = [];\n    var lengths_item;\n    for (var lengths_i = 0; lengths_i < lengths_size; lengths_i++) {\n        var lengths_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        lengths.push(lengths_item);\n    }\n\n\n    res = cutSticks(lengths);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":406,"fileType":"javascript","requestStartTime":1517941699950}}
{"body": {"column":31,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    \n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.)\n}\n\n","offset":628,"fileType":"javascript","requestStartTime":1517941700359}}
{"body": {"column":9,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth/4;\ndocument.querySelectorAll('.cell').forEach(function(cell) {\n    cell.width = cellWidth;\n    cell.\n});\nlet cells = document.querySelectorAll('div.cell');\nfor (let cell in cells) {\n    cell.width = cellWidth;\n}\nconsole.log(window.innerWidth);\n\n\n","offset":165,"fileType":"javascript","requestStartTime":1517941700524}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth/4;\ndocument.querySelectorAll('.cell').forEach(function(cell) {\n    cell.width = cellWidth;\n    cell.style.\n});\nlet cells = document.querySelectorAll('div.cell');\nfor (let cell in cells) {\n    cell.width = cellWidth;\n}\nconsole.log(window.innerWidth);\n\n\n","offset":171,"fileType":"javascript","requestStartTime":1517941701075}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    \n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.\n}\n\n","offset":653,"fileType":"javascript","requestStartTime":1517941715442}}
{"body": {"column":36,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction cutSticks(lengths) {\n    let res = [];\n    while(!allZero(lengths)) {\n        let shortest = Number.MAX_VALUE;\n        for (let i = 0; i < lengths.)\n    }\n}\n\nfunction allZero(lengths) {\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var lengths;\n    var lengths_size = 0;\n    lengths_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var lengths = [];\n    var lengths_item;\n    for (var lengths_i = 0; lengths_i < lengths_size; lengths_i++) {\n        var lengths_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        lengths.push(lengths_item);\n    }\n\n\n    res = cutSticks(lengths);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":416,"fileType":"javascript","requestStartTime":1517941724566}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    for (i=0;i<a.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":539,"fileType":"javascript","requestStartTime":1517941760899}}
{"body": {"column":18,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    for (i=0;i<a.length;i++) {\n        if (a[i]).\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":571,"fileType":"javascript","requestStartTime":1517941781005}}
{"body": {"column":17,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    for (i=0;i<a.length;i++) {\n        if (a[i].)\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":570,"fileType":"javascript","requestStartTime":1517941783097}}
{"body": {"column":36,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction cutSticks(lengths) {\n    let res = [];\n    while(!allZero(lengths)) {\n        let shortest = Number.MAX_VALUE;\n        for (let i = 0; i < lengths.length; i++) {\n            if (lengths[i] > 0 && lengths[i] < shortest) {\n                shortest = lengths[i];\n            }\n        }\n        for (let i = 0; i < lengths.)\n    }\n}\n\nfunction allZero(lengths) {\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var lengths;\n    var lengths_size = 0;\n    lengths_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var lengths = [];\n    var lengths_item;\n    for (var lengths_i = 0; lengths_i < lengths_size; lengths_i++) {\n        var lengths_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        lengths.push(lengths_item);\n    }\n\n\n    res = cutSticks(lengths);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":589,"fileType":"javascript","requestStartTime":1517941803534}}
{"body": {"column":30,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    \n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":530,"fileType":"javascript","requestStartTime":1517941813107}}
{"body": {"column":15,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nlet cellWidth = window.innerWidth/4;\ndocument.querySelectorAll('.cell').forEach(function(cell) {\n    cell.style.width = cellWidth;\n});\n\nconsole.log(window.innerWidth);\n\n\n","offset":143,"fileType":"javascript","requestStartTime":1517941859320}}
{"body": {"column":34,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let matches = input.match(re).;\n    console.log(matches.join(';'));\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":147,"fileType":"javascript","requestStartTime":1517941876185}}
{"body": {"column":40,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let result = input.match(re).sort().;\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":153,"fileType":"javascript","requestStartTime":1517941884255}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction cutSticks(lengths) {\n    let res = [];\n    while(!allZero(lengths)) {\n        let shortest = Number.MAX_VALUE;\n        for (let i = 0; i < lengths.length; i++) {\n            if (lengths[i] > 0 && lengths[i] < shortest) {\n                shortest = lengths[i];\n            }\n        }\n        let count = 0;\n        for (let i = 0; i < lengths.length; i++) {\n            if (lengths[i] > 0) {\n                lengths[i] -= shortest;\n                count++;\n            }\n        }\n        res.\n    }\n}\n\nfunction allZero(lengths) {\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var lengths;\n    var lengths_size = 0;\n    lengths_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var lengths = [];\n    var lengths_item;\n    for (var lengths_i = 0; lengths_i < lengths_size; lengths_i++) {\n        var lengths_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        lengths.push(lengths_item);\n    }\n\n\n    res = cutSticks(lengths);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":762,"fileType":"javascript","requestStartTime":1517941890775}}
{"body": {"column":18,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let arr = get_luckys(line[0], line[1]);\n        print_arr(arr);\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    \n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let arr = num.\n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":740,"fileType":"javascript","requestStartTime":1517941892231}}
{"body": {"column":28,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let arr = get_luckys(line[0], line[1]);\n        print_arr(arr);\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    \n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let arr = num.split('');\n    for (let i = 0; i < arr.)\n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":779,"fileType":"javascript","requestStartTime":1517941901259}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let result = input.match(re).sort();\n    console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":166,"fileType":"javascript","requestStartTime":1517941908099}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let result = input.match(re).sort();\n    console..\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":167,"fileType":"javascript","requestStartTime":1517941908264}}
{"body": {"column":20,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\nconsole.log(process.);\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":820,"fileType":"javascript","requestStartTime":1517941928157}}
{"body": {"column":26,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\nconsole.log(process.stdin.);\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":826,"fileType":"javascript","requestStartTime":1517941930821}}
{"body": {"column":27,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let arr = get_luckys(line[0], line[1]);\n        print_arr(arr);\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    \n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let arr = num.split('');\n    for (let i = 0; i < arr.length; i++) {\n        let digit = Number.\n    }\n}\n\nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":821,"fileType":"javascript","requestStartTime":1517941930954}}
{"body": {"column":19,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\nconsole.log(string.);\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":819,"fileType":"javascript","requestStartTime":1517941974329}}
{"body": {"column":24,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\nconsole.log(inputString.;\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":824,"fileType":"javascript","requestStartTime":1517942008076}}
{"body": {"column":18,"line":26,"wordToComplete":"","code":"\n\n/*\n  Node is defined as\n  var Node = function(data) {\n      this.data = data;\n      this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data) {\n    \n    let newNode = new Node(data);\n    let tmp;\n    \n    if(head==null){\n    \n       head = new Node(data);\n       \n    }else{\n     \n        tmp = head;\n        \n        while(tmp.)\n        \n        head = head.next;\n    }\n    \n    \n    \n    return head;\n    \n    \n}\n\n\n\n","offset":409,"fileType":"javascript","requestStartTime":1517942025758}}
{"body": {"column":22,"line":27,"wordToComplete":"","code":"\n\n/*\n  Node is defined as\n  var Node = function(data) {\n      this.data = data;\n      this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data) {\n    \n    let newNode = new Node(data);\n    let tmp;\n    \n    if(head==null){\n    \n       head = new Node(data);\n       \n    }else{\n     \n        tmp = head;\n        \n        while(tmp.next!=null){\n            tmp = tmp.\n        }\n        \n        head = head.next;\n    }\n    \n    \n    \n    return head;\n    \n    \n}\n\n\n\n","offset":444,"fileType":"javascript","requestStartTime":1517942055419}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\n\n/*\n  Node is defined as\n  var Node = function(data) {\n      this.data = data;\n      this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data) {\n    \n    let newNode = new Node(data);\n    let tmp;\n    \n    if(head==null){\n    \n       head = new Node(data);\n       \n    }else{\n     \n        tmp = head;\n        \n        while(tmp.next!=null){\n            tmp = tmp.next;\n        }\n        \n        tmp. = head.next;\n    }\n    \n    \n    \n    return head;\n    \n    \n}\n\n\n\n","offset":481,"fileType":"javascript","requestStartTime":1517942070130}}
{"body": {"column":26,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction timeConversion(s) {\n    // Complete this function\n    let AmPm = s.slice(8)\n    let hour = parseInt(s.slice(0,2))\n    if (AmPm === \"PM\" && hour !== 12) {\n        hour += 12\n    } else if (AmPm === \"AM\" && hour === 12) {\n        hour = '00'\n    } else {\n        hour = '0' + hour.\n    }\n    return hour.toString() + s.slice(2,8)\n}\n\nfunction main() {\n    var s = readLine();\n    var result = timeConversion(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":747,"fileType":"javascript","requestStartTime":1517942091446}}
{"body": {"column":28,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let arr = get_luckys(line[0], line[1]);\n        print_arr(arr);\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.\n    }\n    return arr;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let arr = num.split('');\n    let lucky = true;\n    for (let i = 0; i < arr.length; i++) {\n        let digit = Number.parseInt(arr[i]);\n        lucky = lucky && is_prime_single_digit(digit);\n    }\n    return lucky;\n}\n\nfunction is_prime_single_digit(n) {\n    return n == 2 || n == 3 || n == 5 || n == 7;\n}\n    \nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":750,"fileType":"javascript","requestStartTime":1517942145529}}
{"body": {"column":15,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let arr = get_luckys(line[0], line[1]);\n        print_arr(arr);\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let arr = num.split('');\n    let lucky = true;\n    for (let i = 0; i < arr.length; i++) {\n        let digit = Number.parseInt(arr[i]);\n        lucky = lucky && is_prime_single_digit(digit);\n    }\n    return lucky;\n}\n\nfunction is_prime_single_digit(n) {\n    return n == 2 || n == 3 || n == 5 || n == 7;\n}\n    \nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":780,"fileType":"javascript","requestStartTime":1517942151147}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.get_luckys(start, finish);\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.split(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let arr = num.split('');\n    let lucky = true;\n    for (let i = 0; i < arr.length; i++) {\n        let digit = Number.parseInt(arr[i]);\n        lucky = lucky && is_prime_single_digit(digit);\n    }\n    return lucky;\n}\n\nfunction is_prime_single_digit(n) {\n    return n == 2 || n == 3 || n == 5 || n == 7;\n}\n    \nfunction print_arr(arr) {\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i] + ' ';\n    }\n    str = str.substring(0, str.length - 2);\n    console.log(str);\n}\n\n","offset":617,"fileType":"javascript","requestStartTime":1517942186351}}
{"body": {"column":22,"line":44,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.\n        }\n    })\n}\n\n\n","offset":1052,"fileType":"javascript","requestStartTime":1517942266457}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (map.)\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":359,"fileType":"javascript","requestStartTime":1517942282497}}
{"body": {"column":41,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance >= 4; myBankBalance++) {\n    if (myBankBalance === 5) { \n      break; \n      }\n    output = \"My bank balance is now $\" + myBankBalance + \"<br>\";\n  }\n    \n    return output\n    \n}\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":365,"fileType":"javascript","requestStartTime":1517942313572}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let cellWidth = window.innerWidth/4;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    cell.style.width = cellWidth-10;\n    });\n    console.\n}\nwindow.addEventListener(\"resize\", resizeCells());\nresizeCells();\n\n\n","offset":217,"fileType":"javascript","requestStartTime":1517942314885}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    let arr=[];\n    for(i=l; i<=r; i++){\n        if(i%2==1){\n            arr.\n        }\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":365,"fileType":"javascript","requestStartTime":1517942328528}}
{"body": {"column":40,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let result = input.match(re).sort().;\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":153,"fileType":"javascript","requestStartTime":1517942328184}}
{"body": {"column":11,"line":48,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.\n}\n\n\n","offset":1114,"fileType":"javascript","requestStartTime":1517942330223}}
{"body": {"column":23,"line":49,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.)\n    })\n}\n\n\n","offset":1161,"fileType":"javascript","requestStartTime":1517942344083}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqmap.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":395,"fileType":"javascript","requestStartTime":1517942349219}}
{"body": {"column":20,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":395,"fileType":"javascript","requestStartTime":1517942351243}}
{"body": {"column":37,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.)\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":412,"fileType":"javascript","requestStartTime":1517942360787}}
{"body": {"column":38,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            lastButtonVals[lastButton.]\n        }\n    })\n}\n\n\n","offset":1216,"fileType":"javascript","requestStartTime":1517942368438}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":464,"fileType":"javascript","requestStartTime":1517942372292}}
{"body": {"column":31,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.)\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    \n}\n\n\n","offset":974,"fileType":"javascript","requestStartTime":1517942382874}}
{"body": {"column":23,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.digits[i], 10)\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    \n}\n\n\n","offset":1012,"fileType":"javascript","requestStartTime":1517942403514}}
{"body": {"column":35,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton. \n        }\n    })\n}\n\n\n","offset":1213,"fileType":"javascript","requestStartTime":1517942408177}}
{"body": {"column":38,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton.id. \n        }\n    })\n}\n\n\n","offset":1216,"fileType":"javascript","requestStartTime":1517942412788}}
{"body": {"column":51,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton.id.split('')[id.] \n        }\n    })\n}\n\n\n","offset":1229,"fileType":"javascript","requestStartTime":1517942419708}}
{"body": {"column":12,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let cellWidth = window.innerWidth/4;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    cell.style.width = cellWidth-10;\n    });\n    console.log(\"RESIZING\");\n    console.\n}\nwindow.addEventListener(\"resize\", resizeCells());\nresizeCells();\n\n\n","offset":246,"fileType":"javascript","requestStartTime":1517942420850}}
{"body": {"column":59,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton.id.split('')[lastButton.] \n        }\n    })\n}\n\n\n","offset":1237,"fileType":"javascript","requestStartTime":1517942422891}}
{"body": {"column":62,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton.id.split('')[lastButton.id.] \n        }\n    })\n}\n\n\n","offset":1240,"fileType":"javascript","requestStartTime":1517942423555}}
{"body": {"column":72,"line":50,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton.id.split('')[lastButton.id.split('').] \n        }\n    })\n}\n\n\n","offset":1250,"fileType":"javascript","requestStartTime":1517942426772}}
{"body": {"column":47,"line":51,"wordToComplete":"","code":"\nlet lastButtonChart = {\n    1: 4,\n    2: 1,\n    3: 2,\n    4: 7,\n    6: 3,\n    7: 8,\n    8: 9,\n    9: 6\n}\n\nlet lastButtonVals = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n}\n\nlet clickButton = document.getElementById('btn5');\nclickButton.onclick = () => {\n    let newButtons = document.querySelectorAll('.btn');\n    \n    let sorted = [];\n    \n    newButtons.forEach(btn => {\n        sorted.push(btn);\n    })\n    \n    sorted.forEach(newButton => {\n        if (newButton.id !== 'btn5') {\n            let number = Number(newButton.innerHTML);\n            let id = newButton.id;\n            let idNumber = id.split('')[id.split('').length - 1];\n            let lastButtonId = 'btn' + (lastButtonChart[idNumber]);\n            //let lastButton = document.getElementById(`${lastButtonId}`);\n            //let lastButtonValue = lastButton.innerHTML;\n            //newButton.innerHTML = `${lastButton.innerHTML}`;\n            let lastButtonValue = lastButtonVals[lastButtonChart[idNumber]];\n            newButton.innerHTML = lastButtonValue;\n        }\n    })\n    \n    sorted.forEach(lastButton => {\n        if (lastButton.id !== 'btn5') {\n            let idNum = lastButton.id.split('')[lastButton.id.split('').length - 1];\n            lastButtonVals[idNum] = lastButton.\n        }\n    })\n}\n\n\n","offset":1310,"fileType":"javascript","requestStartTime":1517942442881}}
{"body": {"column":21,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    sort(arr, 0, arr.)\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":514,"fileType":"javascript","requestStartTime":1517942467062}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"\n\n/*\n  Insert Node at the beginning of a linked list\n  head pointer input could be NULL as well for empty list\n  Node is defined as\n  var Node = function(data) {\n      this.data = data;\n      this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data) {\n    \n    let newHead = new Node(data);\n    \n    if(head == null){\n       head = newHead;\n    }else{\n        \n        newHead.\n        \n    }\n}\n\n\n","offset":456,"fileType":"javascript","requestStartTime":1517942502482}}
{"body": {"column":26,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    sort(arr, 0, arr.length - 1, freqMap);\n    return arr;\n}\n\nfunction sort(arr, left, right, map) {\n    let mid = left + Math.\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":620,"fileType":"javascript","requestStartTime":1517942505599}}
{"body": {"column":34,"line":56,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.]\n}\n\n\n","offset":1232,"fileType":"javascript","requestStartTime":1517942542321}}
{"body": {"column":36,"line":57,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    if(n < max_prime) return primes.\n}\n\n\n","offset":1281,"fileType":"javascript","requestStartTime":1517942562597}}
{"body": {"column":49,"line":57,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    if(n < max_prime) return primes.indexOf(n) > \n}\n\n\n","offset":1294,"fileType":"javascript","requestStartTime":1517942577986}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction deDupe(arr, propertyName) {\n    var result = [];\n    var idCounter = 1;\n    for (var i = 0; i < arr.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var propertyName;\n    var propertyName = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    arr = JSON.parse(arr);\n    res = deDupe(arr, propertyName);\n    res = JSON.stringify(res);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":369,"fileType":"javascript","requestStartTime":1517942586698}}
{"body": {"column":90,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9]*@[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*/g;\n    let result = input.match(re).sort().reduce( (a,b) => a == b ? a : (a + \";\" + b), \"\" ).;\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":203,"fileType":"javascript","requestStartTime":1517942613282}}
{"body": {"column":19,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction deDupe(arr, propertyName) {\n    var result = [];\n    var idCounter = 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i][propertyName] >= idCounter) {\n            result.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var propertyName;\n    var propertyName = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    arr = JSON.parse(arr);\n    res = deDupe(arr, propertyName);\n    res = JSON.stringify(res);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":452,"fileType":"javascript","requestStartTime":1517942621093}}
{"body": {"column":6,"line":11,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let cellWidth = window.innerWidth/4;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    cell.style.width = cellWidth-10;\n    });\n    console.log(\"RESIZING\");\n    console.log(cellWidth);\n}\nresizeCells();\nwindo.\nwindow.addEventListener(\"resize\", resizeCells());\n\n\n\n","offset":285,"fileType":"javascript","requestStartTime":1517942659625}}
{"body": {"column":7,"line":11,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let cellWidth = window.innerWidth/4;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    cell.style.width = cellWidth-10;\n    });\n    console.log(\"RESIZING\");\n    console.log(cellWidth);\n}\nresizeCells();\nwindow.\nwindow.addEventListener(\"resize\", resizeCells());\n\n\n\n","offset":286,"fileType":"javascript","requestStartTime":1517942660120}}
{"body": {"column":26,"line":67,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    if(n < max_prime) return primes.indexOf(n) !== -1;\n    else {\n        while (n < max_prime) {\n            max_prime = primes[primes.length - 1];\n            add_prime();\n        }\n    }\n}\n\nfunction add_prime() {\n    let i = primes[primes.]\n}\n\n","offset":1487,"fileType":"javascript","requestStartTime":1517942695407}}
{"body": {"column":24,"line":2,"wordToComplete":"a-zA-Z](.[a-zA-Z0-9_\\-])*@[a-zA-Z][a-zA-Z0-9_\\-]*\\.[a-zA-Z][a-zA-Z0-9_\\-]*/g","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z](.[a-zA-Z0-9_\\-])*@[a-zA-Z][a-zA-Z0-9_\\-]*\\.[a-zA-Z][a-zA-Z0-9_\\-]*/g;\n    let result = input.match(re).sort().reduce( (a,b) => a == b ? a : (a + \";\" + b), \"\" ).slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":56,"fileType":"javascript","requestStartTime":1517942711352}}
{"body": {"column":28,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.)\n    sort(arr, 0, arr.length - 1, freqMap);\n    return arr;\n}\n\nfunction sort(arr, left, right, map) {\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map);\n    sort(arr, mid + 1, right, map);\n    merge()\n}\n\nfunction merge(arr, left, mid, right, map) {\n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":542,"fileType":"javascript","requestStartTime":1517942718908}}
{"body": {"column":15,"line":10,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = {};\nvar indices = {};\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            db.\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        try {\n            for(let i in db) {\n                if(contains(json, db[i])) {\n                    matchArr.push(db[i]);\n                }\n            }\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        try {\n            for(let i = db.length - 1; i >= 0; i--) {\n                if(contains(json, db[i])) {\n                    db.splice(i, 1);\n                }\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if(String(o1[key]) !== String(o2[key])){\n            return false;\n        }\n    }\n    return true;\n}\n\n//var test1 = JSON.parse('{\"type\":\"list\",\"list\":[1,2,3,4],\"location\":{\"city\":\"Spokane\",\"state\":\"WA\",\"postalCode\":\"99207\"}}');\n//var test2 = JSON.parse('{\"type\":\"list\",\"location\":{\"city\":\"Spokane\"}, \"list\":[3,4]}');\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    inputProcessor(input);\n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        let json = JSON.parse(line.substring(delimiterPos + 1));\n        let output = commands[command](json);\n        outputProcessor(output);\n        try {\n            \n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof output[i] != 'undefined' || output[i] !== true || output[i] !== false) {\n            let outputLine = JSON.stringify(output[i]);\n            console.log(outputLine);\n        }\n    }\n}\n\n","offset":170,"fileType":"javascript","requestStartTime":1517942754819}}
{"body": {"column":19,"line":23,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head;\n        while( tmp.){\n              \n        }\n    }\n    \n    \n}\n\n\n","offset":509,"fileType":"javascript","requestStartTime":1517942764234}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"\n//Write your code below this line.\nconst PI = Math.PI;\nconst EULER = Math.\n\n\n","offset":76,"fileType":"javascript","requestStartTime":1517942785426}}
{"body": {"column":30,"line":69,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    if(n < max_prime) return primes.indexOf(n) !== -1;\n    else {\n        while (n < max_prime) {\n            max_prime = primes[primes.length - 1];\n            add_prime();\n        }\n    }\n}\n\nfunction add_prime() {\n    let i = primes[primes.length - 1] + 2;\n    let isPrime = true;\n    for(let i = 0; i < primes.)\n}\n\n","offset":1558,"fileType":"javascript","requestStartTime":1517942807937}}
{"body": {"column":28,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = 0;\n    }\n    sort(arr, 0, arr.length - 1, freqMap, helper);\n    return arr;\n}\n\nfunction sort(arr, left, right, map, helper) {\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map, helper);\n    sort(arr, mid + 1, right, map, helper);\n    merge(arr, left, mid, right, map, helper);\n}\n\nfunction merge(arr, left, mid, right, map, helper) {\n    for (let i = 0; i < arr.)\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":970,"fileType":"javascript","requestStartTime":1517942807967}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\n//Write your code below this line.\nconst PI = Math.PI;\nconst EULER = Math.E;\nconst SQRT2 = Math.SQRT2;\n\nconsole.\n\n\n","offset":114,"fileType":"javascript","requestStartTime":1517942857075}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        while( tmp.next!=null){\n              if(position==counter){\n                 tmp. \n              }\n        }\n    }\n    \n    \n}\n\n\n","offset":589,"fileType":"javascript","requestStartTime":1517942919690}}
{"body": {"column":24,"line":72,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    if(n < max_prime) return primes.indexOf(n) !== -1;\n    else {\n        while (n < max_prime) {\n            max_prime = primes[primes.length - 1];\n            add_prime();\n        }\n    }\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1] + 2;\n    let notPrime = true;\n    for(let i = 0; i < primes.length; i++) {\n        notPrime = notPrime && num % i > 0;\n    }\n    if(notPrime) primes.\n}\n\n","offset":1650,"fileType":"javascript","requestStartTime":1517942924824}}
{"body": {"column":12,"line":51,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = 0;\n    }\n    sort(arr, 0, arr.length - 1, freqMap, helper);\n    return arr;\n}\n\nfunction sort(arr, left, right, map, helper) {\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map, helper);\n    sort(arr, mid + 1, right, map, helper);\n    merge(arr, left, mid, right, map, helper);\n}\n\nfunction merge(arr, left, mid, right, map, helper) {\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = arr[i];\n    }\n    let l = left, r = mid + 1;\n    let idx = 0;\n    while (l <= mid && r <= right) {\n        if (helper[])\n    }\n}\n    \nfunction compare(a, b, map) {\n    if (map.)\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":1181,"fileType":"javascript","requestStartTime":1517943009365}}
{"body": {"column":27,"line":51,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = 0;\n    }\n    sort(arr, 0, arr.length - 1, freqMap, helper);\n    return arr;\n}\n\nfunction sort(arr, left, right, map, helper) {\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map, helper);\n    sort(arr, mid + 1, right, map, helper);\n    merge(arr, left, mid, right, map, helper);\n}\n\nfunction merge(arr, left, mid, right, map, helper) {\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = arr[i];\n    }\n    let l = left, r = mid + 1;\n    let idx = 0;\n    while (l <= mid && r <= right) {\n        if (helper[])\n    }\n}\n    \nfunction compare(a, b, map) {\n    if (map.get(a) === map.)\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":1196,"fileType":"javascript","requestStartTime":1517943017070}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        if(position==0){\n           newNode.\n        }\n        while( tmp.next!=null){\n              if(position==counter){\n                 tmp.next=newNode;\n                 \n              }\n        }\n    }\n    \n    \n}\n\n\n","offset":543,"fileType":"javascript","requestStartTime":1517943056162}}
{"body": {"column":18,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth >)    \n    cell.style.width = cellWidth-10;\n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":175,"fileType":"javascript","requestStartTime":1517943058736}}
{"body": {"column":19,"line":57,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = 0;\n    }\n    sort(arr, 0, arr.length - 1, freqMap, helper);\n    return arr;\n}\n\nfunction sort(arr, left, right, map, helper) {\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map, helper);\n    sort(arr, mid + 1, right, map, helper);\n    merge(arr, left, mid, right, map, helper);\n}\n\nfunction merge(arr, left, mid, right, map, helper) {\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = arr[i];\n    }\n    let l = left, r = mid + 1;\n    let idx = 0;\n    while (l <= mid && r <= right) {\n        if (helper[])\n    }\n}\n    \nfunction compare(a, b, map) {\n    if (map.get(a) === map.get(b)) {\n        if (a === b) {\n            return 0;\n        }\n        return a < b ? -1 : 1;\n    } else {\n        return map.\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":1324,"fileType":"javascript","requestStartTime":1517943070687}}
{"body": {"column":32,"line":57,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = 0;\n    }\n    sort(arr, 0, arr.length - 1, freqMap, helper);\n    return arr;\n}\n\nfunction sort(arr, left, right, map, helper) {\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map, helper);\n    sort(arr, mid + 1, right, map, helper);\n    merge(arr, left, mid, right, map, helper);\n}\n\nfunction merge(arr, left, mid, right, map, helper) {\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = arr[i];\n    }\n    let l = left, r = mid + 1;\n    let idx = 0;\n    while (l <= mid && r <= right) {\n        if (helper[])\n    }\n}\n    \nfunction compare(a, b, map) {\n    if (map.get(a) === map.get(b)) {\n        if (a === b) {\n            return 0;\n        }\n        return a < b ? -1 : 1;\n    } else {\n        return map.get(a) < map.\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":1337,"fileType":"javascript","requestStartTime":1517943075415}}
{"body": {"column":24,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth)/4-10;\n    } else if(docWidth >)   \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":254,"fileType":"javascript","requestStartTime":1517943103659}}
{"body": {"column":14,"line":8,"wordToComplete":"s","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth)/4-10;\n    } else if(docWidth > 320px) {\n        cell.s\n    }   \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":278,"fileType":"javascript","requestStartTime":1517943106931}}
{"body": {"column":19,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth)/4-10;\n    } else if(docWidth > 320px) {\n        cell.style.\n    }   \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":283,"fileType":"javascript","requestStartTime":1517943108147}}
{"body": {"column":35,"line":30,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        if(position==0){\n           newNode.next=tmp;\n           return newNode;\n        }else{\n            \n            while( tmp.next!=null){\n                  if(position==counter){\n                     tmpNext = tmp.\n                     tmp.next=newNode;\n\n                  }\n            }\n            \n        }\n        \n    }\n    \n    \n}\n\n\n","offset":720,"fileType":"javascript","requestStartTime":1517943131890}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth/4)-10;\n    } else if(docWidth > 360px) {\n        cell.style.width = (docWidth/2)-10;\n    } else {\n        cell.\n    }  \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":334,"fileType":"javascript","requestStartTime":1517943140997}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth/4)-10;\n    } else if(docWidth > 360px) {\n        cell.style.width = (docWidth/2)-10;\n    } else {\n        cell.style.\n    }  \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":340,"fileType":"javascript","requestStartTime":1517943141615}}
{"body": {"column":29,"line":32,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        if(position==0){\n           newNode.next=tmp;\n           return newNode;\n        }else{\n            \n            while( tmp.next!=null){\n                  if(position==counter){\n                     tmpNext = tmp.next;\n                     tmp.next=newNode;\n                     newNode.\n                  }\n            }\n            \n        }\n        \n    }\n    \n    \n}\n\n\n","offset":794,"fileType":"javascript","requestStartTime":1517943148058}}
{"body": {"column":13,"line":11,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth/4)-10;\n    } else if(docWidth > 360px) {\n        cell.style.width = (docWidth/2)-10;\n    } else {\n        cell.style.width = docWidth;\n        cell.\n    }  \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":371,"fileType":"javascript","requestStartTime":1517943150650}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth/4)-10;\n    } else if(docWidth > 360px) {\n        cell.style.width = (docWidth/2)-10;\n    } else {\n        cell.style.width = docWidth;\n        cell.style.\n    }  \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":377,"fileType":"javascript","requestStartTime":1517943151258}}
{"body": {"column":14,"line":10,"wordToComplete":"s","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth/4)-10;\n    } else if(docWidth > 360px) {\n        cell.style.width = (docWidth/2)-10;\n    } else {\n        cell.s\n        cell.style.width = docWidth;\n        cell.style.\n    }  \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":335,"fileType":"javascript","requestStartTime":1517943154171}}
{"body": {"column":19,"line":10,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n    if (docWidth > 720px) {\n         cell.style.width = (docWidth/4)-10;\n    } else if(docWidth > 360px) {\n        cell.style.width = (docWidth/2)-10;\n    } else {\n        cell.style.\n        cell.style.width = docWidth;\n        cell.style.\n    }  \n   \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":340,"fileType":"javascript","requestStartTime":1517943154812}}
{"body": {"column":38,"line":32,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        if(position==0){\n           newNode.next=tmp;\n           return newNode;\n        }else{\n            \n            while( tmp.next!=null){\n                  if(position==counter){\n                     tmpNext = tmp.next;\n                     tmp.next=newNode;\n                     newNode.next=tmp.\n                  }\n            }\n            \n        }\n        \n    }\n    \n    \n}\n\n\n","offset":803,"fileType":"javascript","requestStartTime":1517943155913}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        console.\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n < max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length; i++) {\n            found = notPrime && num % i > 0;\n        }\n    }\n    primes.push(num);\n}\n\n","offset":805,"fileType":"javascript","requestStartTime":1517943198276}}
{"body": {"column":12,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum;\n    let sumSquared;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    console.\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n < max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length; i++) {\n            found = notPrime && num % i > 0;\n        }\n    }\n    primes.push(num);\n}\n\n","offset":1134,"fileType":"javascript","requestStartTime":1517943216362}}
{"body": {"column":25,"line":3,"wordToComplete":"","code":"\nfunction btnClicked() {\n    let btn = document.getElementById('btn');\n    let num = Number(btn.)\n}\n\n","offset":97,"fileType":"javascript","requestStartTime":1517943253587}}
{"body": {"column":26,"line":34,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        if(position==0){\n           newNode.next=tmp;\n           return newNode;\n        }else{\n            \n            while( tmp.next!=null){\n                  if(position-1==counter){\n                     tmpNext = tmp.next;\n                     tmp.next=newNode;\n                     newNode.next=tmpNext;\n                  }else{\n                      tmp.\n                  }\n            }\n            \n        }\n        \n    }\n    \n    \n}\n\n\n","offset":861,"fileType":"javascript","requestStartTime":1517943282074}}
{"body": {"column":30,"line":34,"wordToComplete":"","code":"\n/*\n  Insert Node at a given position in a linked list \n  head can be NULL \n  First element in the linked list is at position 0\n  Node is defined as\n  var Node = function(data) {\n    this.data = data;\n    this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data, position) {\n    \n    let newNode = new Node(data), counter=0;\n    \n    if(head == null){\n        head = newNode;\n    }else{\n        let tmp = head, tmpNext;\n        if(position==0){\n           newNode.next=tmp;\n           return newNode;\n        }else{\n            \n            while( tmp.next!=null){\n                  if(position-1==counter){\n                     tmpNext = tmp.next;\n                     tmp.next=newNode;\n                     newNode.next=tmpNext;\n                  }else{\n                      tmp=tmp.\n                  }\n            }\n            \n        }\n        \n    }\n    \n    \n}\n\n\n","offset":865,"fileType":"javascript","requestStartTime":1517943288546}}
{"body": {"column":16,"line":61,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    console.log(`${num} --> ${sum}, ${sumSquared}`);\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n < max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n        console.\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length; i++) {\n            found = found && num % i > 0;\n        }\n    }\n    primes.push(num);\n}\n\n","offset":1418,"fileType":"javascript","requestStartTime":1517943367281}}
{"body": {"column":14,"line":58,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    console.log(`${num} --> ${sum}, ${sumSquared}`);\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        console.log(primes);\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length; i++) {\n            found = found && num % i > 0;\n        }\n    }\n    primes.push(num);\n}\n\n","offset":1320,"fileType":"javascript","requestStartTime":1517943416839}}
{"body": {"column":34,"line":89,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = {};\nvar indices = {};\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            let id = db.size();\n            db[id] = {\n                \"json\" : json,\n                \"deleted\" : false\n            }\n            createIndices(json, id);\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        try {\n            for(let i in db) {\n                if(contains(json, db[i])) {\n                    matchArr.push(db[i]);\n                }\n            }\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        try {\n            for(let i = db.length - 1; i >= 0; i--) {\n                if(contains(json, db[i])) {\n                    db.splice(i, 1);\n                }\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if(String(o1[key]) !== String(o2[key])){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction createIndices(o, id) {\n    for(let key in o) {\n        if(Array.isArray(o[key])) {\n            for(let i in o[key]) {\n                if(!indices.hasOwnProperty({key, o[key][i]})) {\n                    indices[{key, o[key][i]}] = new Set();\n                }\n                indices[{key, o[key][i]}].add(id);\n            }\n        } else if (typeof o[key] === \"object\") {\n            if(!indices.hasOwnProperty({key, o[key]})) {\n                indices[{key, o[key]}] = new Set();\n            }\n            indices[{key, o[key]}].add(id);\n            createIndices(o[key]).\n        }\n    }\n}\n\n//var test1 = JSON.parse('{\"type\":\"list\",\"list\":[1,2,3,4],\"location\":{\"city\":\"Spokane\",\"state\":\"WA\",\"postalCode\":\"99207\"}}');\n//var test2 = JSON.parse('{\"type\":\"list\",\"location\":{\"city\":\"Spokane\"}, \"list\":[3,4]}');\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    inputProcessor(input);\n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        let json = JSON.parse(line.substring(delimiterPos + 1));\n        let output = commands[command](json);\n        outputProcessor(output);\n        try {\n            \n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof output[i] != 'undefined' || output[i] !== true || output[i] !== false) {\n            let outputLine = JSON.stringify(output[i]);\n            console.log(outputLine);\n        }\n    }\n}\n\n","offset":2545,"fileType":"javascript","requestStartTime":1517943432509}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    let freqMap = new Map();\n    for (let num of arr) {\n        if (freqMap.has(num)) {\n            freqMap.set(num, freqMap.get(num) + 1);\n        } else {\n            freqMap.set(num, 1);\n        }\n    }\n    let helper = [];\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = 0;\n    }\n    sort(arr, 0, arr.length - 1, freqMap, helper);\n    for (let num of arr) {\n        console.\n    }\n}\n\nfunction sort(arr, left, right, map, helper) {\n    if (left >= right) {\n        return;\n    }\n    let mid = left + Math.floor((right - left) / 2);\n    sort(arr, left, mid, map, helper);\n    sort(arr, mid + 1, right, map, helper);\n    merge(arr, left, mid, right, map, helper);\n}\n\nfunction merge(arr, left, mid, right, map, helper) {\n    for (let i = 0; i < arr.length; i++) {\n        helper[i] = arr[i];\n    }\n    let l = left, r = mid + 1;\n    let idx = 0;\n    while (l <= mid && r <= right) {\n        if (compare(helper[l], helper[r], map) <= 0) {\n            arr[idx++] = helper[l++];\n        } else {\n            arr[idx++] = helper[r++];\n        }\n    }\n    while (l <= mid) {\n        arr[idx++] = helper[l++];\n    }\n}\n    \nfunction compare(a, b, map) {\n    if (map.get(a) === map.get(b)) {\n        if (a === b) {\n            return 0;\n        }\n        return a < b ? -1 : 1;\n    } else {\n        return map.get(a) < map.get(b) ? -1 : 1;\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":680,"fileType":"javascript","requestStartTime":1517943450256}}
{"body": {"column":39,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = {};\nvar indices = {};\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            let id = db.size();\n            db[id] = {\n                \"json\" : json,\n                \"deleted\" : false\n            }\n            createIndices(json, id);\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        try {\n            for(let item in db) {\n                if(contains(json, item.)) {\n                    matchArr.push(db[i]);\n                }\n            }\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        try {\n            for(let i = db.length - 1; i >= 0; i--) {\n                if(contains(json, db[i])) {\n                    db.splice(i, 1);\n                }\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if(String(o1[key]) !== String(o2[key])){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction createIndices(o, id) {\n    for(let key in o) {\n        if(Array.isArray(o[key])) {\n            for(let i in o[key]) {\n                if(!indices.hasOwnProperty({key, o[key][i]})) {\n                    indices[{key, o[key][i]}] = new Set();\n                }\n                indices[{key, o[key][i]}].add(id);\n            }\n        } else if (typeof o[key] === \"object\") {\n            if(!indices.hasOwnProperty({key, o[key]})) {\n                indices[{key, o[key]}] = new Set();\n            }\n            indices[{key, o[key]}].add(id);\n            createIndices(o[key]).add(id);\n        } else {\n            if(!indices.hasOwnProperty({key, o[key]})) {\n                indices[{key, o[key]}] = new Set();\n            }\n            indices[{key, o[key]}].add(id);\n        }\n    }\n}\n\n//var test1 = JSON.parse('{\"type\":\"list\",\"list\":[1,2,3,4],\"location\":{\"city\":\"Spokane\",\"state\":\"WA\",\"postalCode\":\"99207\"}}');\n//var test2 = JSON.parse('{\"type\":\"list\",\"location\":{\"city\":\"Spokane\"}, \"list\":[3,4]}');\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    inputProcessor(input);\n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        let json = JSON.parse(line.substring(delimiterPos + 1));\n        let output = commands[command](json);\n        outputProcessor(output);\n        try {\n            \n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof output[i] != 'undefined' || output[i] !== true || output[i] !== false) {\n            let outputLine = JSON.stringify(output[i]);\n            console.log(outputLine);\n        }\n    }\n}\n\n","offset":607,"fileType":"javascript","requestStartTime":1517943479558}}
{"body": {"column":12,"line":76,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7, 11];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let arr = [];\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) arr.push(i);\n    }\n    return arr.join(' ');\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    console.log(`${num} --> ${sum}, ${sumSquared}`);\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length; i++) {\n            found = found && num % i > 0;\n        }\n    }\n    primes.push(num);\n    console.\n}\n\n","offset":1736,"fileType":"javascript","requestStartTime":1517943492006}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"\n// Add your javascript here\nfunction resizeCells() {\n    let docWidth = window.innerWidth;\n    document.querySelectorAll('.cell').forEach(function(cell) {\n        if (docWidth > 720px) {\n             cell.style.width = (docWidth/4)-10;\n        } else if (docWidth > 360px) {\n            cell.style.width = (docWidth/2)-10;\n        } else {\n            console.\n            cell.style.display = \"block\";\n            cell.style.width = docWidth;\n        }  \n    });    \n}\n\nwindow.onload = function() {\n    resizeCells();\n    window.addEventListener(\"resize\", resizeCells);\n}\n\n\n\n\n","offset":362,"fileType":"javascript","requestStartTime":1517943528285}}
{"body": {"column":60,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /[a-zA-Z][a-zA-Z0-9_\\-]*@[a-zA-Z][a-zA-Z0-9_\\-]*\\.[a-zA-Z][a-zA-Z0-9_\\-]*/g;\n    let result = input.match(re).sort().reduce( (a, b) => a. == b ? a : (a + \";\" + b), \"\").slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":182,"fileType":"javascript","requestStartTime":1517943564202}}
{"body": {"column":9,"line":39,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction Rectangle(length, width) {\n    //Start your code below this line\n    this.length = length;\n    this.width = width;\n    this.calcArea = function(){\n        return this.length*this.width;\n    }\n    this.\n}\n\n\nfunction main() {\n    const length = +(readLine());\n    const width = +(readLine());\n    \n    const rec = new Rectangle(length, width);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":1073,"fileType":"javascript","requestStartTime":1517943769523}}
{"body": {"column":21,"line":40,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction Rectangle(length, width) {\n    //Start your code below this line\n    this.length = length;\n    this.width = width;\n    this.calcArea = function(){\n        return this.length*this.width;\n    }\n    this.calcPerimeter = function(){\n        return (this.)\n    }\n}\n\n\nfunction main() {\n    const length = +(readLine());\n    const width = +(readLine());\n    \n    const rec = new Rectangle(length, width);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":1122,"fileType":"javascript","requestStartTime":1517943823080}}
{"body": {"column":18,"line":67,"wordToComplete":"get","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getStrH(h){\n    var strH;\n    switch(h){\n        case 1:\n            strH = 'one';\n            break;\n        case 2:\n            strH = 'two';\n            break;\n        case 3:\n            strH = 'three';\n            break;\n        case 4:\n            strH = 'four';\n            break;\n        case 5:\n            strH = 'five';\n            break;\n        case 6:\n            strH = 'six';\n            break;\n        case 7:\n            strH = 'seven';\n            break;\n        case 8:\n            strH = 'eight';\n            break;\n        case 9:\n            strH = 'nine';\n            break;\n        case 10:\n            strH = 'ten';\n            break;\n        case 11:\n            strH = 'eleven';\n            break;\n        case 12:\n            strH = 'twelve';\n            break;\n            \n    }\n}\n\nfunction timeInWords(h, m) {\n    var strH = get\n}\n\nfunction main() {\n    var h = parseInt(readLine());\n    var m = parseInt(readLine());\n    var result = timeInWords(h, m);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1328,"fileType":"javascript","requestStartTime":1517943909811}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\nlet ids = [1,2,3,6,9,8,7,4];\nlet nums = ids.slice();\n\nfunction rotateBtns() {\n    // rotate nums array\n    nums = [nums.pop()].concat(nums);\n    // assign to ids\n    for (var i=0; i<ids.)\n}\n\n","offset":188,"fileType":"javascript","requestStartTime":1517943912815}}
{"body": {"column":48,"line":9,"wordToComplete":"","code":"\nlet ids = [1,2,3,6,9,8,7,4];\nlet nums = ids.slice();\n\nfunction rotateBtns() {\n    // rotate nums array\n    nums = [nums.pop()].concat(nums);\n    // assign to ids\n    for (var i=0; i<ids.length; i++) {\n        document.getElementById('btn' + ids[i]).\n    }\n}\n\n","offset":251,"fileType":"javascript","requestStartTime":1517943927526}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalances(val)) {\n            res.\n        }\n    }\n}\n            \nfunction isBalanced(str) {\n            \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":381,"fileType":"javascript","requestStartTime":1517943968936}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.\n        }\n    }\n}\n            \nfunction isBalanced(str) {\n            \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":427,"fileType":"javascript","requestStartTime":1517943983936}}
{"body": {"column":14,"line":54,"wordToComplete":"str","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getStrH(h){\n    switch(h){\n        case 1:\n            return 'one';\n        case 2:\n            return 'two';\n        case 3:\n            return 'three';\n        case 4:\n            return 'four';\n        case 5:\n            return 'five';\n        case 6:\n            return 'six';\n        case 7:\n            return 'seven';\n        case 8:\n            return 'eight';\n        case 9:\n            return 'nine';\n        case 10:\n            return 'ten';\n        case 11:\n            return 'eleven';\n        case 12:\n            return 'twelve';\n    }\n}\n\nfunction timeInWords(h, m) {\n    var strH = getStrH(h);\n    return str\n}\n\nfunction main() {\n    var h = parseInt(readLine());\n    var m = parseInt(readLine());\n    var result = timeInWords(h, m);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1096,"fileType":"javascript","requestStartTime":1517943994347}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.) \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":533,"fileType":"javascript","requestStartTime":1517944029018}}
{"body": {"column":8,"line":1,"wordToComplete":"","code":"\nconsole.\n\n","offset":10,"fileType":"javascript","requestStartTime":1517944049235}}
{"body": {"column":8,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nconst first = 2;\nconst seconde = 3;\n\nconsole.\n\nfunction main() {\n    var a = parseInt(readLine());\n    var b = parseInt(readLine());;\n\n    var res = solveMeFirst(a, b);\n    console.log(res);\n}\n","offset":442,"fileType":"javascript","requestStartTime":1517944161978}}
{"body": {"column":12,"line":75,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) count++;\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    console.\n    primes.push(num);\n}\n\n","offset":1684,"fileType":"javascript","requestStartTime":1517944164257}}
{"body": {"column":61,"line":71,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) count++;\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length && primes[i] < Math.; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    console.log(num);\n    primes.push(num);\n}\n\n","offset":1618,"fileType":"javascript","requestStartTime":1517944231605}}
{"body": {"column":61,"line":71,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) count++;\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        for(let i = 0; i < primes.length && primes[i] < Math.; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    console.log(num);\n    primes.push(num);\n}\n\n","offset":1618,"fileType":"javascript","requestStartTime":1517944238722}}
{"body": {"column":24,"line":71,"wordToComplete":"s","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n    \n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) count++;\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.s\n        for(let i = 0; i < primes.length && primes[i] < Math.sqrt(num); i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    console.log(num);\n    primes.push(num);\n}\n\n","offset":1581,"fileType":"javascript","requestStartTime":1517944247859}}
{"body": {"column":28,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    for (let i = 0; i < atr.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":625,"fileType":"javascript","requestStartTime":1517944273082}}
{"body": {"column":28,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    for (let i = 0; i < str.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":625,"fileType":"javascript","requestStartTime":1517944275329}}
{"body": {"column":55,"line":2,"wordToComplete":"https?:\\/\\/(ww(w|[1-9]))?)[a-zA-Z]+\\./","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-zA-Z]+\\./;\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":87,"fileType":"javascript","requestStartTime":1517944334561}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    consolr.\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1517944351556}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    console.\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1517944352561}}
{"body": {"column":24,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) { \n    let title = [];\n    https.get(`https://jsonmock.hackerrank.com/api/movies/search/?Title=${substr}`, (res) => {\n        console.log(res.data)\n\n\n}).on('error', (e) => {\n  console.error(e);\n});\n    \n    title.sort((a, b) => a.length - b.length);\n    return title;\n\n    \n    \n\n\n\n    \n    \n    \n}\n\n\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":547,"fileType":"javascript","requestStartTime":1517944373036}}
{"body": {"column":23,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-z]+(\\.[a-z]+)+$/gi;\n    let result = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":122,"fileType":"javascript","requestStartTime":1517944374076}}
{"body": {"column":33,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-z]+(\\.[a-z]+)+$/gi;\n    let result = input.match(re).\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":132,"fileType":"javascript","requestStartTime":1517944378421}}
{"body": {"column":40,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-z]+(\\.[a-z]+)+$/gi;\n    let result = input.match(re).sort().\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":139,"fileType":"javascript","requestStartTime":1517944382385}}
{"body": {"column":60,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-z]+(\\.[a-z]+)+$/gi;\n    let result = input.match(re).sort().reduce((a,b) => {}).\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":159,"fileType":"javascript","requestStartTime":1517944394989}}
{"body": {"column":18,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":723,"fileType":"javascript","requestStartTime":1517944395584}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-z]+(\\.[a-z]+)+$/gi;\n    let result = input.match(re).sort().reduce((a,b) => {}).slice(1);\n    console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":181,"fileType":"javascript","requestStartTime":1517944397970}}
{"body": {"column":58,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /^(?:https?:\\/\\/(ww(w|[1-9]))?)[a-z]+(\\.[a-z]+)+$/gi;\n    let result = input.match(re).sort().reduce((a,b) => a.).slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":157,"fileType":"javascript","requestStartTime":1517944407272}}
{"body": {"column":8,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    mao.\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if ()\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":632,"fileType":"javascript","requestStartTime":1517944489603}}
{"body": {"column":8,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if ()\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":632,"fileType":"javascript","requestStartTime":1517944490947}}
{"body": {"column":8,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if ()\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":655,"fileType":"javascript","requestStartTime":1517944505843}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1517944517543}}
{"body": {"column":8,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.set(']', '[');\n    map.\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if ()\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":678,"fileType":"javascript","requestStartTime":1517944516572}}
{"body": {"column":23,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.set(']', '[');\n    map.set('}', '{');\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if (map.)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":856,"fileType":"javascript","requestStartTime":1517944537188}}
{"body": {"column":51,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.set(']', '[');\n    map.set('}', '{');\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if (map.get(str[i]) === stack[stack.])\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":884,"fileType":"javascript","requestStartTime":1517944560509}}
{"body": {"column":18,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.set(']', '[');\n    map.set('}', '{');\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if (map.get(str[i]) === stack[stack.length - 1]) {\n            stack.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":917,"fileType":"javascript","requestStartTime":1517944569389}}
{"body": {"column":14,"line":60,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) count++;\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let str = num + '';\n    let digits = str.split('');\n    let sum = 0;\n    let sumSquared = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let d = Number.parseInt(digits[i], 10);\n        sum += d;\n        sumSquared += d * d;\n    }\n    return is_prime(sum) && is_prime(sumSquared);\n}\n\nfunction sum_digits_and_squares(num) {\n    let n = num;\n    let sum = 0; \n    let squared = 0;\n    \n    while(n > )\n    \n    return [sum, squared];\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.sqrt(num);\n        for(let i = 0; i < primes.length && primes[i] < max; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    console.log(num);\n    primes.push(num);\n}\n\n","offset":1307,"fileType":"javascript","requestStartTime":1517944590878}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n    console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":44,"fileType":"javascript","requestStartTime":1517944618893}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517944627306}}
{"body": {"column":25,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.set(']', '[');\n    map.set('}', '{');\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if (stack.map.get(str[i]) === stack[stack.length - 1]) {\n            stack.pop();\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":858,"fileType":"javascript","requestStartTime":1517944634071}}
{"body": {"column":17,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    let res = [];\n    for (let val of values) {\n        if (isBalanced(val)) {\n            res.push(\"YES\");\n        } else {\n            res.push(\"NO\");\n        }\n    }\n    return res;\n}\n            \nfunction isBalanced(str) {\n    if (!str || str.length === 0) {\n        return true;\n    } \n    let stack = [];\n    const map = new Map();\n    map.set(')', '(');\n    map.set(']', '[');\n    map.set('}', '{');\n    for (let i = 0; i < str.length; i++) {\n        if(str[i] === '(' || str[i] === '[' || str[i] === '(') {\n            stack.push(str[i]);\n        } else if (stack.length > 0 && map.get(str[i]) === stack[stack.length - 1]) {\n            stack.pop();\n        } else {\n            return false;\n        }\n    }\n    return stack.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1020,"fileType":"javascript","requestStartTime":1517944659706}}
{"body": {"column":47,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInterger + secondInterger.)\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1702,"fileType":"javascript","requestStartTime":1517944680680}}
{"body": {"column":12,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInterger + secondInterger.toInt())\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1878,"fileType":"javascript","requestStartTime":1517944735359}}
{"body": {"column":13,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInterger + secondInterger.toInt())\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console..\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1879,"fileType":"javascript","requestStartTime":1517944735544}}
{"body": {"column":28,"line":88,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = {};\nvar indices = {};\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            let id = Object.keys(db).length;\n            db[id] = {\n                \"json\" : json,\n                \"deleted\" : false\n            }\n            createIndices(json, id);\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        try {\n            for(let id in db) {\n                if(!db[id].deleted && contains(json, db[id].json)) {\n                    matchArr.push(db[id].json);\n                }\n            }\n        } catch (e) {\n            console.log(\"Error in get : \" + e);\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        try {\n            for(let id in db) {\n                if(contains(json, db[id].json)) {\n                    db[id].deleted = true;\n                }\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Error in delete : \" + e);\n            return false;\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if(String(o1[key]) !== String(o2[key])){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction createIndices(o, id) {\n    for(let key in o) {\n        if(Array.isArray(o[key])) {\n            for(let i in o[key]) {\n                indices\n            }\n        } else if (typeof o[key] === \"object\") {\n            createIndices(o[key], id);\n        } else {\n            if(!indices.hashOwnProperty(o[key])) {\n                indices[o[key]] = new Set();\n            }\n            indices[o[key]].\n        }\n    }\n}\n\nvar test1 = JSON.parse('{\"type\":\"list\",\"list\":[1,2,3,4],\"location\":{\"city\":\"Spokane\",\"state\":\"WA\",\"postalCode\":\"99207\"}}');\ncommands.add(test1);\nconsole.log(indices);\n//var test2 = JSON.parse('{\"type\":\"list\",\"location\":{\"city\":\"Spokane\"}, \"list\":[3,4]}');\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    inputProcessor(input);\n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        try {\n            let json = JSON.parse(line.substring(delimiterPos + 1));\n            let output = commands[command](json);\n            outputProcessor(output);\n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof output[i] != 'undefined' || output[i] !== true || output[i] !== false) {\n            let outputLine = JSON.stringify(output[i]);\n            console.log(outputLine);\n        }\n    }\n}\n\n","offset":2409,"fileType":"javascript","requestStartTime":1517944763691}}
{"body": {"column":12,"line":53,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger.toInt())\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.\n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2102,"fileType":"javascript","requestStartTime":1517944797455}}
{"body": {"column":28,"line":53,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger.toInt())\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.log(firstString.)\n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2118,"fileType":"javascript","requestStartTime":1517944809397}}
{"body": {"column":42,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) {count++; console.\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let arr = sum_digits_and_squares(num);\n    return is_prime(arr[0]) && is_prime(arr[1]);\n}\n\nfunction sum_digits_and_squares(num) {\n    let n = num;\n    let sum = 0; \n    let squared = 0;\n    let digit;\n    while(n > 10) {\n        digit = n % 10;\n        digit -= digit % 1;\n        sum += digit;\n        squared += digit * digit;\n        n /= 10;\n    }\n    sum += n;\n    squared += n * n;\n    return [sum, squared];\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.sqrt(num);\n        for(let i = 0; i < primes.length && primes[i] < max; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    // console.log(num);\n    primes.push(num);\n}\n\n","offset":853,"fileType":"javascript","requestStartTime":1517944904119}}
{"body": {"column":12,"line":64,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = line[0];\n        let finish = line[1];\n        console.log(get_luckys(start, finish));\n    }\n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) {\n            count++; \n            console.log(i);\n        }\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let arr = sum_digits_and_squares(num);\n    return is_prime(arr[0]) && is_prime(arr[1]);\n}\n\nfunction sum_digits_and_squares(num) {\n    let n = num;\n    let sum = 0; \n    let squared = 0;\n    let digit;\n    while(n > 10) {\n        digit = n % 10;\n        digit -= digit % 1;\n        sum += digit;\n        squared += digit * digit;\n        n /= 10;\n    }\n    sum += n;\n    squared += n * n;\n    console.\n    return [sum, squared];\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.sqrt(num);\n        for(let i = 0; i < primes.length && primes[i] < max; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    // console.log(num);\n    primes.push(num);\n}\n\n","offset":1353,"fileType":"javascript","requestStartTime":1517944996008}}
{"body": {"column":45,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger.parseInt())\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal.)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.log(firstString + secondString)\n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1912,"fileType":"javascript","requestStartTime":1517945012185}}
{"body": {"column":28,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = Number.line[0];\n        let finish = Number.line[1];\n        console.log(get_luckys(start, finish));\n    }\n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) {\n            count++; \n            console.log(i);\n        }\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let arr = sum_digits_and_squares(num);\n    return is_prime(arr[0]) && is_prime(arr[1]);\n}\n\nfunction sum_digits_and_squares(num) {\n    let n = num;\n    let sum = 0; \n    let squared = 0;\n    let digit;\n    while(n > 10) {\n        digit = n % 10;\n        digit -= digit % 1;\n        sum += digit;\n        squared += digit * digit;\n        n /= 10;\n    }\n    sum += n;\n    squared += n * n;\n    console.log(`${num} --> ${sum}, ${squared}`);\n    return [sum, squared];\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.sqrt(num);\n        for(let i = 0; i < primes.length && primes[i] < max; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    // console.log(num);\n    primes.push(num);\n}\n\n","offset":664,"fileType":"javascript","requestStartTime":1517945065728}}
{"body": {"column":20,"line":1,"wordToComplete":"","code":"\nlet grid = document.\n\n","offset":22,"fileType":"javascript","requestStartTime":1517945066317}}
{"body": {"column":27,"line":5,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n        let btn = document.\n    }\n}\n\n","offset":150,"fileType":"javascript","requestStartTime":1517945143068}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.\n    }\n}\n\n","offset":187,"fileType":"javascript","requestStartTime":1517945154389}}
{"body": {"column":12,"line":7,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + i;\n        btn.\n    }\n}\n\n","offset":215,"fileType":"javascript","requestStartTime":1517945163907}}
{"body": {"column":12,"line":5,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    let script = (\"Hello, World\");\n    console.log(script);\n    let otherScript = (\"Welcome to 30 Days of Code!\");\n    console.\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":165,"fileType":"javascript","requestStartTime":1517945172656}}
{"body": {"column":17,"line":60,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = Number.parseInt(line[0], 10);\n        let finish = Number.parseInt(line[1], 10);\n        console.log(get_luckys(start, finish));\n    }\n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) {\n            count++; \n            console.log(i);\n        }\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let arr = sum_digits_and_squares(num);\n    return is_prime(arr[0]) && is_prime(arr[1]);\n}\n\nfunction sum_digits_and_squares(num) {\n    let n = num;\n    let sum = 0; \n    let squared = 0;\n    let digit;\n    while(n > 10) {\n        digit = n % 10;\n        digit -= digit % 1;\n        sum += digit;\n        squared += digit * digit;\n        n = Math.;\n    }\n    sum += n;\n    squared += n * n;\n    console.log(`${num} --> ${sum}, ${squared}`);\n    return [sum, squared];\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.sqrt(num);\n        for(let i = 0; i < primes.length && primes[i] < max; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    // console.log(num);\n    primes.push(num);\n}\n\n","offset":1341,"fileType":"javascript","requestStartTime":1517945178552}}
{"body": {"column":27,"line":60,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nlet primes = [2, 3, 5, 7];\n\nfunction main() {\n    const n = Number.parseInt(readLine(), 10);\n    \n    // for each line in stdin\n    for(let i = 0; i < n; i++) {\n        let line = readLine().split(' ');\n        let start = Number.parseInt(line[0], 10);\n        let finish = Number.parseInt(line[1], 10);\n        console.log(get_luckys(start, finish));\n    }\n}\n\nfunction get_luckys(start, finish) {\n    let count = 0;\n    for(i = start; i <= finish; i++) {\n        if(is_lucky(i)) {\n            count++; \n            console.log(i);\n        }\n    }\n    return count;\n}\n\nfunction is_lucky(num) {\n    let arr = sum_digits_and_squares(num);\n    return is_prime(arr[0]) && is_prime(arr[1]);\n}\n\nfunction sum_digits_and_squares(num) {\n    let n = num;\n    let sum = 0; \n    let squared = 0;\n    let digit;\n    while(n > 10) {\n        digit = n % 10;\n        digit -= digit % 1;\n        sum += digit;\n        squared += digit * digit;\n        n = Math.floor(n . ;\n    }\n    sum += n;\n    squared += n * n;\n    console.log(`${num} --> ${sum}, ${squared}`);\n    return [sum, squared];\n}\n\nfunction is_prime(n) {\n    let max_prime = primes[primes.length - 1];\n    while (n > max_prime) {\n        max_prime = primes[primes.length - 1];\n        add_prime();\n    }\n    return primes.indexOf(n) !== -1;\n}\n\nfunction add_prime() {\n    let num = primes[primes.length - 1];\n    let found = false;\n    while(!found) {\n        num += 2;\n        found = true;\n        let max = Math.sqrt(num);\n        for(let i = 0; i < primes.length && primes[i] < max; i++) {\n            found = found && num % primes[i] > 0;\n        }\n    }\n    // console.log(num);\n    primes.push(num);\n}\n\n","offset":1351,"fileType":"javascript","requestStartTime":1517945183040}}
{"body": {"column":32,"line":2,"wordToComplete":"Hello, World.\"","code":"\nfunction processData(inputString) {\n    let script = (\"Hello, World.\");\n    console.log(script);\n    let otherScript = (\"Welcome to 30 Days of Code!\");\n    console.log(otherScript);\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":70,"fileType":"javascript","requestStartTime":1517945201930}}
{"body": {"column":25,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// The days of the week are: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\nfunction getDayName(dateString) {\n    let dayName;\n    // Write your code here\n  \n    let date = new Date(dateString);\n    let dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n    return dayNames(date.;\n}\n\nfunction main() {\n    const d = +(readLine());\n    \n    for (let i = 0; i < d; i++) {\n        const date = readLine();\n        \n        console.log(getDayName(date));\n    }\n}\n","offset":774,"fileType":"javascript","requestStartTime":1517945223180}}
{"body": {"column":7,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":529,"fileType":"javascript","requestStartTime":1517945243084}}
{"body": {"column":7,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":529,"fileType":"javascript","requestStartTime":1517945257156}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origPrices; i++) {\n        pricesMap.\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":415,"fileType":"javascript","requestStartTime":1517945270178}}
{"body": {"column":13,"line":11,"wordToComplete":"a","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nlet table = document.createElement(\"Table\");\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"tr\");\n    for (let j = 0; j < 3; j++) {\n        let column = document.createElement(\"td\");\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.a\n    }\n    \n}\n\n","offset":389,"fileType":"javascript","requestStartTime":1517945297987}}
{"body": {"column":35,"line":32,"wordToComplete":"","code":"\nlet resString = '';\nlet currOp = null;\n\nfunction addOperator(op) {\n    currOp = op;\n    resString += op;\n    updateDisplay();\n}\n\nfunction addNumber(num) {\n    resString += num;\n    updateDisplay();\n}\n\nfunction clear() {\n    currOp = null;\n    resString = '';\n    updateDisplay();\n}\n\nfunction calculate() {\n    if (currOp) {\n        let arr = resString.split(currOp);\n        arr = arr.map(a => parseInt(a,2).toString(10)).reduce((a,b) => eval(a + currOp + b));\n        resString = parseInt(arr, 10).toString(2);\n        currOp = null;\n        updateDisplay();\n    }\n}\n\nfunction updateDisplay() {\n    document.getElementById('res').\n}\n\n\n","offset":633,"fileType":"javascript","requestStartTime":1517945308977}}
{"body": {"column":15,"line":11,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nlet table = document.createElement(\"Table\");\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"tr\");\n    for (let j = 0; j < 3; j++) {\n        let column = document.createElement(\"td\");\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        column.\n        row.appendChild(column);\n    }\n    \n}\n\n","offset":391,"fileType":"javascript","requestStartTime":1517945312846}}
{"body": {"column":30,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":503,"fileType":"javascript","requestStartTime":1517945337852}}
{"body": {"column":7,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    let sum == 0;\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":547,"fileType":"javascript","requestStartTime":1517945341107}}
{"body": {"column":35,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (prices[i] != pricesMap.)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":553,"fileType":"javascript","requestStartTime":1517945360477}}
{"body": {"column":32,"line":90,"wordToComplete":"second","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getStrH(h){\n    switch(h){\n        case 1:\n            return 'one';\n        case 2:\n            return 'two';\n        case 3:\n            return 'three';\n        case 4:\n            return 'four';\n        case 5:\n            return 'five';\n        case 6:\n            return 'six';\n        case 7:\n            return 'seven';\n        case 8:\n            return 'eight';\n        case 9:\n            return 'nine';\n        case 10:\n            return 'ten';\n        case 11:\n            return 'eleven';\n        case 12:\n            return 'twelve';\n        default:\n            return 'one';\n    }\n}\n\nfunction getSrtM(m){\n    var arr = [\n        'some shit',\n        'one',\n        'two',\n        'three',\n        'four',\n        'five',\n        'six',\n        'seven',\n        'eight',\n        'nine',\n        'ten',\n        'eleven',\n        'twelve',\n        'thirteen',\n        'fourteen',\n        'fifteen',\n        'sixteen',\n        'seventeen',\n        'eighteen',\n        'nineteen',\n        'twenty',\n        'twenty one',\n        'twenty two',\n        'twenty three',\n        'twenty four',\n        'twenty five',\n        'twenty six',\n        'twenty seven',\n        'twenty eight',\n        'twenty nine'];\n    \n    var secondWord = (m > 30) ? 'to' : 'past';\n    if (m > 30)\n        m = 60 - m;\n    return arr[m] + ' ' + second\n}\n\nfunction timeInWords(h, m) {\n    var h1 = (m > 30) ? h + 1 : h;\n    var strH = getStrH(h1);\n    \n    if (m === 0)\n        return strH + ' o\\'clock';\n    if (m === 15)\n        return 'quarter past ' + strH;\n    if (m === 30)\n        return 'half past ' + strH;\n    if (m === 45)\n        return 'quarter to ' + strH;\n    \n    var strM = getStrM(m);\n    \n    return strM + ' ' + strH;\n}\n\nfunction main() {\n    var h = parseInt(readLine());\n    var m = parseInt(readLine());\n    var result = timeInWords(h, m);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1807,"fileType":"javascript","requestStartTime":1517945363480}}
{"body": {"column":41,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input.match(re).sort()..reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\").slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":136,"fileType":"javascript","requestStartTime":1517945523907}}
{"body": {"column":46,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input.match(re).sort().map().reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\").slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":141,"fileType":"javascript","requestStartTime":1517945527797}}
{"body": {"column":15,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n    let re = /./\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":620,"fileType":"javascript","requestStartTime":1517945530777}}
{"body": {"column":17,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (Math. {\n            count++;\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":535,"fileType":"javascript","requestStartTime":1517945532181}}
{"body": {"column":33,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input.match(re).(a => a[1]).sort().reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\").slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":128,"fileType":"javascript","requestStartTime":1517945570609}}
{"body": {"column":25,"line":29,"wordToComplete":"a.+a$|^e.)/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n    let re = /(^a.+a$|^e.)/\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":630,"fileType":"javascript","requestStartTime":1517945577150}}
{"body": {"column":43,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (Math.abs(prices[i] - pricesMap.)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":561,"fileType":"javascript","requestStartTime":1517945590015}}
{"body": {"column":29,"line":29,"wordToComplete":"a.+a$|e.+e|i.)$/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n    let re = /^(a.+a$|e.+e|i.)$/\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":634,"fileType":"javascript","requestStartTime":1517945593556}}
{"body": {"column":34,"line":29,"wordToComplete":"a.+a$|e.+e|i.*i|o.)$/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n    let re = /^(a.+a$|e.+e|i.*i|o.)$/\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":639,"fileType":"javascript","requestStartTime":1517945605358}}
{"body": {"column":63,"line":22,"wordToComplete":"0.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (Math.abs(prices[i] - pricesMap.get(items[i])) >= 0.) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":581,"fileType":"javascript","requestStartTime":1517945614152}}
{"body": {"column":5,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input\n        .match(re)\n    .\n        .sort()\n        .reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\")\n        .slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":142,"fileType":"javascript","requestStartTime":1517945615573}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input\n        .match(re)\n        .\n        .sort()\n        .reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\")\n        .slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":146,"fileType":"javascript","requestStartTime":1517945616353}}
{"body": {"column":39,"line":29,"wordToComplete":"a.*a$|e.*e|i.*i|o.*o|u.)$/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n    let re = /^(a.*a$|e.*e|i.*i|o.*o|u.)$/\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":644,"fileType":"javascript","requestStartTime":1517945619428}}
{"body": {"column":22,"line":8,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n    let Polygon  = class Polygon {\n        constructor(arr){};\n       perimeter(this.arr) {\n           let value=0;\n           for(var i=0;i<arr.length;i++){\n               value+=arr[i];\n           }\n           return value;\n           \n       }\n    }\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":298,"fileType":"javascript","requestStartTime":1517945645311}}
{"body": {"column":36,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (prices[i] !== pricesmap.) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":554,"fileType":"javascript","requestStartTime":1517945648313}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\n/*\n * Implement a Polygon class with the following properties:\n * 1. A constructor that takes an array of integer side lengths.\n * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.\n */\n    let Polygon  = class Polygon {\n        constructor(arr){};\n       perimeter(this.arr) {\n           let value=0;\n           for(var i=0;i<this.arr.length;i++){\n               value+=arr[i];\n           }\n           return value;\n           \n       }\n    }\n\nconst rectangle = new Polygon([10, 20, 10, 20]);\nconst square = new Polygon([10, 10, 10, 10]);\nconst pentagon = new Polygon([10, 20, 30, 40, 43]);\n\nconsole.log(rectangle.perimeter());\nconsole.log(square.perimeter());\nconsole.log(pentagon.perimeter());\n","offset":359,"fileType":"javascript","requestStartTime":1517945649463}}
{"body": {"column":36,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (prices[i] !== pricesMap.) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":554,"fileType":"javascript","requestStartTime":1517945650713}}
{"body": {"column":11,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    var result = \"NO\";\n    var n = arr.lenght;\n\n    for (i = 0; i < n; i++){\n        if (arr[i] == k){\n            result = \"YES\";\n        }\n    }\n    consol.\n    return result;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":448,"fileType":"javascript","requestStartTime":1517945700378}}
{"body": {"column":30,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input\n        .match(re)\n        .forEach(a => console.)\n        .sort()\n        .reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\")\n        .slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":167,"fileType":"javascript","requestStartTime":1517945717020}}
{"body": {"column":31,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n    let re = /(?:https?:\\/\\/(ww(w|0-9))?)[a-z]+(\\.[a-z]+)+/gi;\n    let result = input\n        .match(re)\n        .forEach(a => console..)\n        .sort()\n        .reduce((a,b) => a.match(new RegExp(b + '$', 'i')) ? a : a + ';' + b, \"\")\n        .slice(1);\n    console.log(result);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":168,"fileType":"javascript","requestStartTime":1517945717295}}
{"body": {"column":10,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1517945728959}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    let arr = [];\n    if(a0 > b0){\n        arr.\n    }\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":576,"fileType":"javascript","requestStartTime":1517945746727}}
{"body": {"column":25,"line":14,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"div\");\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.appendChild(btn);\n    }\n    btns.appendChild(row);\n}\n\nlet middleBtn = document.\n\n","offset":372,"fileType":"javascript","requestStartTime":1517945772692}}
{"body": {"column":19,"line":30,"wordToComplete":"Mr.[a-Z]+$/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.', \n     * followed by one or more letters.\n     */\n    let re = /^(Mr.[a-Z]+$/\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(!!s.match(re));\n}\n","offset":656,"fileType":"javascript","requestStartTime":1517945784825}}
{"body": {"column":10,"line":15,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"div\");\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.appendChild(btn);\n    }\n    btns.appendChild(row);\n}\n\nlet middleBtn = document.getElementById(\"btn5\");\nmiddleBtn.\n\n","offset":406,"fileType":"javascript","requestStartTime":1517945791259}}
{"body": {"column":34,"line":30,"wordToComplete":"Mr|Mrs|Ms|Dr|Er)\\.[a-Z]+$/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.', \n     * followed by one or more letters.\n     */\n    let re = /^(Mr|Mrs|Ms|Dr|Er)\\.[a-Z]+$/\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(!!s.match(re));\n}\n","offset":671,"fileType":"javascript","requestStartTime":1517945814289}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"div\");\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.appendChild(btn);\n    }\n    btns.appendChild(row);\n}\n\nlet middleBtn = document.getElementById(\"btn5\");\nmiddleBtn.onClick = function() {\n    let temp = document.\n}\n\n","offset":453,"fileType":"javascript","requestStartTime":1517945850434}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction SExpression(nodes) {\n    var data = nodes.split(' ');;\n    \n    for(var i = 0; i < data.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nodes;\n    var nodes = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = SExpression(nodes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":357,"fileType":"javascript","requestStartTime":1517945872098}}
{"body": {"column":28,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction SExpression(nodes) {\n    var data = nodes.split(' ');;\n    \n    var length = data.length;\n    var groups = []\n    \n    for(var i = 0; i < length; i++){\n        var group = data[i].\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var nodes;\n    var nodes = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = SExpression(nodes);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":449,"fileType":"javascript","requestStartTime":1517945916010}}
{"body": {"column":16,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction customSort(arr) {\n    // sanity check\n    if (arr === undefined || arr === null || arr.length === 0) {\n        return arr;\n    }\n    let map = new Map();\n    for (let n of arr) {\n        if (map.has(n)) {\n            map.set(n, map.get(n) + 1);\n        } else {\n            map.set(n, 1);\n        }\n    }\n    let newArray = [];\n    map.forEach(function(value, key, map) {\n        newArray.push([key, value]);\n    });\n    newArray.sort(function(a, b) {\n        if (a[1] === b[1]) {\n            return a[0] - b[0];\n        }\n        return a[1] - b[1];\n    });\n    let res = [];\n    \n    for (let obj of newArray) {\n        for (let i = 0; i < obj[1]; i++) {\n            res.push(obj[0]);\n        }\n    }\n    for (let n of res) {\n        console.\n    }\n    return res;\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = customSort(arr);\n    \n});\n\n","offset":1013,"fileType":"javascript","requestStartTime":1517945925730}}
{"body": {"column":34,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction verifyItems(origItems, origPrices, items, prices) {\n    const pricesMap = new Map();\n    for (let i = 0; i < origItems.; i++) {\n        pricesMap.set(origItems[i], origPrices[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < items.length; i++) {\n        if (prices[i] !== pricesMap.get(items[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var origItems;\n    var origItems_size = 0;\n    origItems_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origItems = [];\n    var origItems_item;\n    for (var origItems_i = 0; origItems_i < origItems_size; origItems_i++) {\n        var origItems_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        origItems.push(origItems_item);\n    }\n\n    var origPrices;\n    var origPrices_size = 0;\n    origPrices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var origPrices = [];\n    var origPrices_item;\n    for (var origPrices_i = 0; origPrices_i < origPrices_size; origPrices_i++) {\n        var origPrices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        origPrices.push(origPrices_item);\n    }\n\n    var items;\n    var items_size = 0;\n    items_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var items = [];\n    var items_item;\n    for (var items_i = 0; items_i < items_size; items_i++) {\n        var items_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        items.push(items_item);\n    }\n\n    var prices;\n    var prices_size = 0;\n    prices_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var prices = [];\n    var prices_item;\n    for (var prices_i = 0; prices_i < prices_size; prices_i++) {\n        var prices_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        prices.push(prices_item);\n    }\n\n\n    res = verifyItems(origItems, origPrices, items, prices);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":388,"fileType":"javascript","requestStartTime":1517945946074}}
{"body": {"column":19,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    let arrA= [a0, a1, a2];\n    let arrB= [b0, b1, b2];\n    \n    let output=[];\n    for(let i=0; i<3; i++){\n        if(arrA[i] > arrB[i] || arrA[i] < arrB[i]){\n            output.   \n        }\n    }\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":708,"fileType":"javascript","requestStartTime":1517945958889}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  return arr.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":309,"fileType":"javascript","requestStartTime":1517945977605}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  return arr.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":309,"fileType":"javascript","requestStartTime":1517945992647}}
{"body": {"column":15,"line":29,"wordToComplete":"0-9]+/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = /.[0-9]+/;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":586,"fileType":"javascript","requestStartTime":1517945998261}}
{"body": {"column":23,"line":29,"wordToComplete":"0-9]+./","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = /.*[0-9]+./;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":594,"fileType":"javascript","requestStartTime":1517946001528}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  return arr.split(' ').;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":320,"fileType":"javascript","requestStartTime":1517946008702}}
{"body": {"column":33,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  return arr.split(' ').join('').;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1517946012044}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var result = [];\n    while (l <= r) {\n        if (l % 2 != 0) {\n            result.\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":375,"fileType":"javascript","requestStartTime":1517946065475}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  const arr = arr.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517946074201}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  arr = arr.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":308,"fileType":"javascript","requestStartTime":1517946081405}}
{"body": {"column":36,"line":35,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction getCount(objects) {\n    //Start your code below this line\n    for (var i=0; i>=1;i++){\n        if objects[p].x= objects[p].\n    }\n    \n}\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":995,"fileType":"javascript","requestStartTime":1517946122316}}
{"body": {"column":15,"line":29,"wordToComplete":"d+/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = /.\\d+/;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":586,"fileType":"javascript","requestStartTime":1517946167026}}
{"body": {"column":20,"line":29,"wordToComplete":"d+./","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = /.*\\d+./;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":591,"fileType":"javascript","requestStartTime":1517946169894}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  for (let i = 0; i < arr.)\n  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":322,"fileType":"javascript","requestStartTime":1517946184165}}
{"body": {"column":35,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  for (let i = arr[0]; i < arr[arr.]; i++) {\n    \n  }\n  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":331,"fileType":"javascript","requestStartTime":1517946203015}}
{"body": {"column":15,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = \\./\\d*/;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":586,"fileType":"javascript","requestStartTime":1517946216422}}
{"body": {"column":21,"line":29,"wordToComplete":"d*\\./","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = /\\.\\d*\\./;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":592,"fileType":"javascript","requestStartTime":1517946231621}}
{"body": {"column":43,"line":18,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"div\");\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.appendChild(btn);\n    }\n    btns.appendChild(row);\n}\n\nlet middleBtn = document.getElementById(\"btn5\");\nmiddleBtn.onClick = function() {\n    for (let i = 1; i < 4; i++) {\n        let temp = document.getElementById(\"btn\" + i);\n        document.getElementById(\"btn\" + i).\n    }\n}\n\n","offset":561,"fileType":"javascript","requestStartTime":1517946242262}}
{"body": {"column":90,"line":18,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"div\");\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.appendChild(btn);\n    }\n    btns.appendChild(row);\n}\n\nlet middleBtn = document.getElementById(\"btn5\");\nmiddleBtn.onClick = function() {\n    for (let i = 1; i < 4; i++) {\n        let temp = document.getElementById(\"btn\" + i);\n        document.getElementById(\"btn\" + i).innerHTML = document.getElementById(\"btn\" + i).\n    }\n}\n\n","offset":608,"fileType":"javascript","requestStartTime":1517946252792}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\nlet grid = document.getElementById(\"btns\");\nlet num = 1;\nfor (let i = 0; i < 3; i++) {\n    let row = document.createElement(\"div\");\n    div.\n    for (let j = 0; j < 3; j++) {\n        let btn = document.createElement(\"Button\");\n        btn.id = \"btn\" + num;\n        btn.innerHTML = num++;\n        row.appendChild(btn);\n    }\n    btns.appendChild(row);\n}\n\nlet middleBtn = document.getElementById(\"btn5\");\nmiddleBtn.onClick = function() {\n    for (let i = 1; i < 4; i++) {\n        let temp = document.getElementById(\"btn\" + i);\n        document.getElementById(\"btn\" + i).innerHTML = document.getElementById(\"btn\" + i).innerHTML;\n    }\n}\n\n","offset":142,"fileType":"javascript","requestStartTime":1517946278391}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  const primes = [];\n  for (let i = 3; i < arr.)\n  for (let i = arr[0]; i <= arr[1]; i++) {\n\n  }\n  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":343,"fileType":"javascript","requestStartTime":1517946298673}}
{"body": {"column":29,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  const primes = [];\n  for (let i = 3; i < arr[2].)\n  for (let i = arr[0]; i <= arr[1]; i++) {\n\n  }\n  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":346,"fileType":"javascript","requestStartTime":1517946306106}}
{"body": {"column":17,"line":29,"wordToComplete":"d+/","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match ALL occurrences of numbers in a string.\n     */\n    let re = /(\\.\\d+/;\n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    const r = s.match(re);\n    \n    for (const e of r) {\n        console.log(e);\n    }\n}\n","offset":588,"fileType":"javascript","requestStartTime":1517946353459}}
{"body": {"column":24,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    var i;\n    var result = [];\n    var length = values.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":342,"fileType":"javascript","requestStartTime":1517946406517}}
{"body": {"column":19,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    var i;\n    var result = [];\n    var length = values.length;\n    \n    for(i = 0; i < length; i ++){\n        if(isBalanced(values[i])){\n            result.push('YES');\n        }else{\n            result.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":490,"fileType":"javascript","requestStartTime":1517946474134}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction maxLength(a, k) {\n    var s,n,rem;\n    p = p || [];\n    s = p.reduce(function(m,n){\n        return m+n;\n    },0);\n    if(s===k){\n        \n    }\n    if(s>=k){\n        return;\n    }\n    \n    for(var i=0;i<a.)\n\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a_size = 0;\n    _a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _a = [];\n    var _a_item;\n    for(var _a_i = 0; _a_i < _a_size; _a_i++) {\n        var _a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _a.push(_a_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = maxLength(_a, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":474,"fileType":"javascript","requestStartTime":1517946526537}}
{"body": {"column":11,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  const primes = [];\n  let n = 2;\n  let result;\n  while (result < arr[1]) {\n    primes.\n    result = n * n;\n    n++;\n  }\n  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":383,"fileType":"javascript","requestStartTime":1517946537094}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    var i;\n    var result = [];\n    var length = values.length;\n    \n    for(i = 0; i < length; i ++){\n        if(isBalanced(values[i])){\n            result.push('YES');\n        }else{\n            result.push('NO');\n        }\n    }\n    return result;\n}\nfunction isBalanced(str){\n    var i, ch;\n    var bracketsMap = new Map();\n    bracketsMap.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":629,"fileType":"javascript","requestStartTime":1517946551705}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    var i;\n    var result = [];\n    var length = values.length;\n    \n    for(i = 0; i < length; i ++){\n        if(isBalanced(values[i])){\n            result.push('YES');\n        }else{\n            result.push('NO');\n        }\n    }\n    return result;\n}\nfunction isBalanced(str){\n    var i, ch;\n    var bracketsMap = new Map();\n    bracketsMap.set(']','[');\n    bracketsMap.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":659,"fileType":"javascript","requestStartTime":1517946572667}}
{"body": {"column":7,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction aVeryBigSum(n, ar) {\n    // Complete this function\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = aVeryBigSum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":526,"fileType":"javascript","requestStartTime":1517946593269}}
{"body": {"column":16,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMinimumUniqueSum(arr) {\n  const primes = [];\n  let n = 2;\n  let result = 4;\n  while (result < arr[1]) {\n    if ( result >= arr[0] ) primes.push(result);\n    n++;\n    result = n * n;\n  }\n  return primes.;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = getMinimumUniqueSum(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":474,"fileType":"javascript","requestStartTime":1517946629460}}
{"body": {"column":9,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n\n$ (\"h1\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":794,"fileType":"javascript","requestStartTime":1517946651394}}
{"body": {"column":11,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n\n$ (\"h1\").click((function) {\n  $ (\"h1\").             \n               }\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":824,"fileType":"javascript","requestStartTime":1517946705785}}
{"body": {"column":23,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    var i;\n    var result = [];\n   \n    \n    for(i = 0; i < values.length; i ++){\n        if(isBalanced(values[i])){\n            result.push('YES');\n        }else{\n            result.push('NO');\n        }\n    }\n    return result;\n}\nfunction isBalanced(str){\n    var i, ch;\n    var bracketsMap = new Map();\n    bracketsMap.set(']','[');\n    bracketsMap.set('}','{');\n    bracketsMap.set(')','(');\n    \n    var closing = [...bracketsMap.keys()];\n    var opening = [...bracketsMap.values()];\n    \n    var temp = [];\n    \n    \n    for(i = 0; i < str.length)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":832,"fileType":"javascript","requestStartTime":1517946750108}}
{"body": {"column":6,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    a.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":528,"fileType":"javascript","requestStartTime":1517946819276}}
{"body": {"column":8,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n$(\"h1\").\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":757,"fileType":"javascript","requestStartTime":1517946831522}}
{"body": {"column":12,"line":112,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nvar db = {};\nvar indices = {};\n\nvar commands = {\n    \"add\" : function(json) {\n        try {\n            let id = Object.keys(db).length;\n            db[id] = {\n                \"json\" : json,\n                \"deleted\" : false\n            }\n            createIndices(json, id);\n            return true;\n        } catch (e) {\n            console.log(\"Error in add : \" + e);\n            return false;\n        }\n    },\n    \"get\" : function(json) {\n        let matchArr = [];\n        try {\n            if(Object.keys(json).length == 0) {\n                for(let id in db) {\n                    if(!db[id].deleted) {\n                        matchArr.push(db[id].json);\n                    }\n                }\n            } else {\n                let truncatedDb = new Set();\n                for(let key in json) {\n                    truncatedDb = getIndices(json[key], truncatedDb);\n                }\n                let truncatedDbArr = Array.from(truncatedDb);\n\n                for(let id in truncatedDbArr) {\n                    if(!db[id].deleted && contains(json, db[truncatedDbArr[id]].json)) {\n                        matchArr.push(db[truncatedDbArr[id]].json);\n                    }\n                }\n            }\n        } catch (e) {\n            console.log(\"Error in get : \" + e);\n        }\n        return matchArr;\n    }, \n    \"delete\" : function(json) {\n        try {\n            for(let id in db) {\n                if(contains(json, db[id].json)) {\n                    //Garbage collect it later\n                    db[id].deleted = true;\n                }\n            }\n            return true;\n        } catch (e) {\n            console.log(\"Error in delete : \" + e);\n            return false;\n        }\n    }\n}\n\nfunction contains(o1, o2) {\n    for(let key in o1) {\n        if(!o2.hasOwnProperty(key)) {\n            return false;\n        } else if (typeof o1[key] !== typeof o2[key] \n                   || (Array.isArray(o1[key]) && !Array.isArray(o1[key])) \n                   || (!Array.isArray(o1[key]) && Array.isArray(o1[key]))){\n            return false;\n        } else if (Array.isArray(o1[key])) {\n            for(let item in o1[key]) {\n                if(o2[key].indexOf(o1[key][item]) < 0) {\n                    return false;\n                }\n            }\n        } else if (typeof o1[key] === \"object\") {\n            if(!contains(o1[key], o2[key])) {\n                return false;\n            }\n        } else if(String(o1[key]) !== String(o2[key])){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nfunction createIndices(o, id) {\n    for(let key in o) {\n        if(Array.isArray(o[key])) {\n            for(let i in o[key]) {\n                if(!indices.hasOwnProperty(o[key][i])) {\n                    indices[o[key][i]] = new Set();\n                }\n                indices[o[key][i]].add(id);\n            }\n        } else if (typeof o[key] === \"object\") {\n            createIndices(o[key], id);\n        } else {\n            if(!indices.hasOwnProperty(o[key])) {\n                indices[o[key]] = new Set();\n            }\n            indices[o[key]].add(id);\n        }\n    }\n}\n\nfunction getIndices(value, truncatedDb) {\n    console.\n    if(Array.isArray(value) || typeof value === \"object\") {\n        for(let i in value) {\n            truncatedDb = getIndices(value[i], truncatedDb);\n        }\n    }\n    if(!indices.hasOwnProperty(value)) {\n        return new Set();\n    }\n    if(truncatedDb.size == 0) {\n        truncatedDb = indices[value];\n    } else {\n        truncatedDb = new Set([...truncatedDb].filter(x => indices[value].has(x)));\n    }\n    return truncatedDb;\n}\n\n//var test1 = JSON.parse('{\"type\":\"list\",\"list\":[1,2,3,4],\"location\":{\"city\":\"Spokane\",\"state\":\"WA\",\"postalCode\":\"99207\"}}');\n//commands.add(test1);\n//console.log(indices);\n//var test2 = JSON.parse('{\"type\":\"list\",\"location\":{\"city\":\"Spokane\"}, \"list\":[3,4]}');\n//console.log(contains(test2, test1));\n\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    inputProcessor(input);\n});\n\nfunction inputProcessor(input) {\n    let lineArr = input.split(\"\\n\");\n    for(let i in lineArr) {\n        let line = lineArr[i];\n        if(line === \"\") {\n            continue;\n        }\n        let delimiterPos = line.indexOf(' ');\n        let command = line.substring(0, delimiterPos);\n        if(!commands.hasOwnProperty(command)) {\n            continue;\n        }\n        try {\n            let json = JSON.parse(line.substring(delimiterPos + 1));\n            let output = commands[command](json);\n            outputProcessor(output);\n        } catch (e) {\n            console.error(\"Error in parsing and processing JSON : \" + e)\n        }\n    }\n}\n\nfunction outputProcessor(output) {\n    for(let i in output) {\n        if(typeof output[i] != 'undefined' || output[i] !== true || output[i] !== false) {\n            let outputLine = JSON.stringify(output[i]);\n            console.log(outputLine);\n        }\n    }\n}\n\n","offset":3236,"fileType":"javascript","requestStartTime":1517946913306}}
{"body": {"column":8,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"h1\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":792,"fileType":"javascript","requestStartTime":1517947044934}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    const len = Math.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":543,"fileType":"javascript","requestStartTime":1517947078028}}
{"body": {"column":8,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"h1\").click(function){    \n$(\"h1\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":821,"fileType":"javascript","requestStartTime":1517947155132}}
{"body": {"column":4,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\narr.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":294,"fileType":"javascript","requestStartTime":1517947202045}}
{"body": {"column":11,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(p, arr, k) {\n    cosole.\nreturn arr.indexOf(k) < -1 ? 'YES': 'NO';\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":304,"fileType":"javascript","requestStartTime":1517947303093}}
{"body": {"column":11,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(p, arr, k) {\n    cosole.\nreturn arr.indexOf(k) < -1 ? 'YES': 'NO';\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":304,"fileType":"javascript","requestStartTime":1517947305293}}
{"body": {"column":10,"line":10,"wordToComplete":"","code":"class Rectangle {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n    }\n}\n\n/*\n *  Write code that adds an 'area' method to the Rectangle class' prototype\n */\nRectangle.\n/*\n * Create a Square class that inherits from Rectangle and implement its class constructor\n */\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n    const rec = new Rectangle(3, 4);\n    const sqr = new Square(3);\n    \n    console.log(rec.area());\n    console.log(sqr.area());\n} else {\n    console.log(-1);\n    console.log(-1);\n}\n","offset":185,"fileType":"javascript","requestStartTime":1517947307745}}
{"body": {"column":20,"line":10,"wordToComplete":"","code":"class Rectangle {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n    }\n}\n\n/*\n *  Write code that adds an 'area' method to the Rectangle class' prototype\n */\nRectangle.prototype.\n/*\n * Create a Square class that inherits from Rectangle and implement its class constructor\n */\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n    const rec = new Rectangle(3, 4);\n    const sqr = new Square(3);\n    \n    console.log(rec.area());\n    console.log(sqr.area());\n} else {\n    console.log(-1);\n    console.log(-1);\n}\n","offset":195,"fileType":"javascript","requestStartTime":1517947309181}}
{"body": {"column":17,"line":11,"wordToComplete":"","code":"class Rectangle {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n    }\n}\n\n/*\n *  Write code that adds an 'area' method to the Rectangle class' prototype\n */\nRectangle.prototype.area = function() {\n    return thils.\n}\n/*\n * Create a Square class that inherits from Rectangle and implement its class constructor\n */\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n    const rec = new Rectangle(3, 4);\n    const sqr = new Square(3);\n    \n    console.log(rec.area());\n    console.log(sqr.area());\n} else {\n    console.log(-1);\n    console.log(-1);\n}\n","offset":232,"fileType":"javascript","requestStartTime":1517947316350}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"class Rectangle {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n    }\n}\n\n/*\n *  Write code that adds an 'area' method to the Rectangle class' prototype\n */\nRectangle.prototype.area = function() {\n    return this.\n}\n/*\n * Create a Square class that inherits from Rectangle and implement its class constructor\n */\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n    const rec = new Rectangle(3, 4);\n    const sqr = new Square(3);\n    \n    console.log(rec.area());\n    console.log(sqr.area());\n} else {\n    console.log(-1);\n    console.log(-1);\n}\n","offset":231,"fileType":"javascript","requestStartTime":1517947317557}}
{"body": {"column":23,"line":11,"wordToComplete":"","code":"class Rectangle {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n    }\n}\n\n/*\n *  Write code that adds an 'area' method to the Rectangle class' prototype\n */\nRectangle.prototype.area = function() {\n    return this.w*this.\n}\n/*\n * Create a Square class that inherits from Rectangle and implement its class constructor\n */\n\n\nif (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {\n    const rec = new Rectangle(3, 4);\n    const sqr = new Square(3);\n    \n    console.log(rec.area());\n    console.log(sqr.area());\n} else {\n    console.log(-1);\n    console.log(-1);\n}\n","offset":238,"fileType":"javascript","requestStartTime":1517947321317}}
{"body": {"column":23,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(p, arr, k) {\n    console.log(p, arr, k);\n    return;\nreturn arr.indexOf(k) > -1 ? 'YES': 'NO';\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":356,"fileType":"javascript","requestStartTime":1517947356533}}
{"body": {"column":19,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// The days of the week are: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\nfunction getDayName(dateString) {\n    let dayName;\n    // Write your code here\n    var date = new Date(dateString);\n    var day = date.\n    \n    return date.toString();\n\n    \n    \n    \n   // return dayName;\n}\n\nfunction main() {\n    const d = +(readLine());\n    \n    for (let i = 0; i < d; i++) {\n        const date = readLine();\n        \n        console.log(getDayName(date));\n    }\n}\n","offset":663,"fileType":"javascript","requestStartTime":1517947603287}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    for(var i=Math.l, i++; i<r/2){\n\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":307,"fileType":"javascript","requestStartTime":1517947632237}}
{"body": {"column":43,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    for(var i=Math.floor(l/2), i++; i<math.r/2){\n\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":331,"fileType":"javascript","requestStartTime":1517947645797}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var arr = [];\n    for(var i=Math.floor(l/2), i++; i<math.floor(r/2)){\n        arr.\n    }\n    return arr;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":374,"fileType":"javascript","requestStartTime":1517947684549}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    const len = Math.sqrt(a);\n    let sum1=0;\n    let sum2=0;\n    for(i=0;i<len;i++){\n        sum1+=a[i+len];\n        sum2+=a[len-i];\n    }\n    \n    return Math.\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":683,"fileType":"javascript","requestStartTime":1517947802736}}
{"body": {"column":16,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var arr = [];\n    for(var i=Math.floor(l/2); i++; i<Math.floor(r/2)){\n        console.\n        arr.push(i*2 + 1);\n    }\n    return arr;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":378,"fileType":"javascript","requestStartTime":1517947816661}}
{"body": {"column":13,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var arr = [];\n    console.log(l, Math.floor(r/2));\n    for(var i=l; i++; i<=r){\n        console.log(i);\n        if(i.)\n        arr.push(i*2 + 1);\n    }\n    return arr;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":409,"fileType":"javascript","requestStartTime":1517948072974}}
{"body": {"column":11,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction doesCircleExist(commands) {\n  commands.\n  return commands[0]\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var commands;\n    var commands_size = 0;\n    commands_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var commands = [];\n    var commands_item;\n    for (var commands_i = 0; commands_i < commands_size; commands_i++) {\n        var commands_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        commands.push(commands_item);\n    }\n\n\n    res = doesCircleExist(commands);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":308,"fileType":"javascript","requestStartTime":1517948074885}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    var arr = [];\n    console.log(l, Math.floor(r/2));\n    for(var i=l; i++; i<=r){\n        console.log(i);\n        if(Math.)\n        arr.push(i*2 + 1);\n    }\n    return arr;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":412,"fileType":"javascript","requestStartTime":1517948089038}}
{"body": {"column":18,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction doesCircleExist(commands) {\n  return commands.map(command => {\n    const g = map.\n  })\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var commands;\n    var commands_size = 0;\n    commands_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var commands = [];\n    var commands_item;\n    for (var commands_i = 0; commands_i < commands_size; commands_i++) {\n        var commands_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        commands.push(commands_item);\n    }\n\n\n    res = doesCircleExist(commands);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":350,"fileType":"javascript","requestStartTime":1517948106339}}
{"body": {"column":32,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction doesCircleExist(commands) {\n  return commands.map(command => {\n    let g, r, l;\n    for (let i = 0; i < command.)\n  })\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var commands;\n    var commands_size = 0;\n    commands_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var commands = [];\n    var commands_item;\n    for (var commands_i = 0; commands_i < commands_size; commands_i++) {\n        var commands_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        commands.push(commands_item);\n    }\n\n\n    res = doesCircleExist(commands);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":381,"fileType":"javascript","requestStartTime":1517948128927}}
{"body": {"column":32,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction doesCircleExist(commands) {\n  return commands.map(command => {\n    let g, r, l;\n    for (let i = 0; i < command.length; i++) {\n      if (command[i] === 'g') g.\n    }\n  })\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var commands;\n    var commands_size = 0;\n    commands_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var commands = [];\n    var commands_item;\n    for (var commands_i = 0; commands_i < commands_size; commands_i++) {\n        var commands_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        commands.push(commands_item);\n    }\n\n\n    res = doesCircleExist(commands);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":428,"fileType":"javascript","requestStartTime":1517948143145}}
{"body": {"column":14,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    let rectangle = new Object();\n    \n    rectangle.\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":549,"fileType":"javascript","requestStartTime":1517948265142}}
{"body": {"column":14,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    let rectangle = new Object();\n    \n    rectangle.length = a;\n    rectangle.\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":575,"fileType":"javascript","requestStartTime":1517948270185}}
{"body": {"column":14,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    let rectangle = new Object();\n    \n    rectangle.length = a;\n    rectangle.width = b;\n    rectangle.\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":600,"fileType":"javascript","requestStartTime":1517948276898}}
{"body": {"column":14,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    let rectangle = new Object();\n    \n    rectangle.length = a;\n    rectangle.width = b;\n    rectangle.perimeter = 2 * (a + b);\n    rectangle.\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":639,"fileType":"javascript","requestStartTime":1517948292342}}
{"body": {"column":19,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n\n    for(var i = 0; i < n; i++) {\n        \n        if(n % 3 == 0 && n % 5 == 0) {\n        //if n is a multiple of 3 AND 5    \n           console.\n            \n        }\n        \n    }\n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":428,"fileType":"javascript","requestStartTime":1517948328127}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    const len = Math.Math.sqrt(a);\n    \n    \n    return len;\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":543,"fileType":"javascript","requestStartTime":1517948355114}}
{"body": {"column":19,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n\n    for(var i = 0; i < n; i++) {\n        \n        if(n % 3 == 0 && n % 5 == 0) {\n        //if n is a multiple of 3 AND 5\n            \n           console.log(\"FizzBuzz\");\n        \n        } else if(n % 3 == 0 && n % 5 != 0) {\n        //if n is only a multiple of 3\n           \n           console. \n            \n        }\n    }\n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":579,"fileType":"javascript","requestStartTime":1517948381597}}
{"body": {"column":19,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n\n    for(var i = 0; i < n; i++) {\n        \n        if(n % 3 == 0 && n % 5 == 0) {\n        //if n is a multiple of 3 AND 5\n            \n           console.log(\"FizzBuzz\");\n        \n        } else if(n % 3 == 0 && n % 5 != 0) {\n        //if n is only a multiple of 3\n           \n           console.log(\"Fizz\"); \n            \n        } else if(n % 5 == 0 && n % 3 != 0) {\n        //if n is only a multiple of 5\n        \n           console.\n        }\n    }\n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":719,"fileType":"javascript","requestStartTime":1517948478780}}
{"body": {"column":20,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n\n    for(var i = 0; i < n; i++) {\n        \n        if(n % 3 == 0 && n % 5 == 0) {\n        //if n is a multiple of 3 AND 5\n            \n           console.log(\"FizzBuzz\");\n        \n        } else if(n % 3 == 0 && n % 5 != 0) {\n        //if n is only a multiple of 3\n           \n           console.log(\"Fizz\"); \n            \n        } else if(n % 5 == 0 && n % 3 != 0) {\n        //if n is only a multiple of 5\n        \n           console.log(\"Buzz\");\n        } else {\n        //if none of the above conditions are satisfied\n            console.\n        }\n    }\n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":825,"fileType":"javascript","requestStartTime":1517948508074}}
{"body": {"column":9,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    //let rectangle = new Object();\n    \n    this.length = a,\n    width = b,\n    perimeter = 2 * (a + b),\n    area = a * b\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":546,"fileType":"javascript","requestStartTime":1517948534659}}
{"body": {"column":9,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    //let rectangle = new Object();\n    \n    this.length = a,\n    this.width = b,\n    perimeter = 2 * (a + b),\n    area = a * b\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":567,"fileType":"javascript","requestStartTime":1517948537692}}
{"body": {"column":9,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    //let rectangle = new Object();\n    \n    this.length = a,\n    this.width = b,\n    this.perimeter = 2 * (a + b),\n    area = a * b\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":587,"fileType":"javascript","requestStartTime":1517948543929}}
{"body": {"column":9,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the Rectangle function\n */\nfunction Rectangle(a, b) {\n    \n    //let rectangle = new Object();\n    \n    this.length = a,\n    this.width = b,\n    this.perimeter = 2 * (a + b),\n    this.area = a * b\n    \n}\n\nfunction main() {\n    const a = +(readLine());\n    const b = +(readLine());\n    \n    const rec = new Rectangle(a, b);\n    \n    console.log(rec.length);\n    console.log(rec.width);\n    console.log(rec.perimeter);\n    console.log(rec.area);\n}\n","offset":621,"fileType":"javascript","requestStartTime":1517948547476}}
{"body": {"column":39,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    const len = Math.floor(Math.sqrt(a.));\n    \n    \n    return len;\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":561,"fileType":"javascript","requestStartTime":1517948577183}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    for (let o in objects){\n        if(o.)\n    }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":683,"fileType":"javascript","requestStartTime":1517948796725}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    for (let o in objects){\n        if(o.a == o.)\n    }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":690,"fileType":"javascript","requestStartTime":1517948802780}}
{"body": {"column":21,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    for (let o in objects){\n        if(o.a == o..)\n    }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":691,"fileType":"javascript","requestStartTime":1517948802834}}
{"body": {"column":16,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    for (let o in objects){\n        if(o.x == o.y){\n            total++;\n        }\n        console.\n    }\n    return total;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":741,"fileType":"javascript","requestStartTime":1517948889459}}
{"body": {"column":22,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    for (let o in objects){\n        if(o.x == o.y){\n            total++;\n        }\n        console.log(o.)\n    }\n    return total;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":747,"fileType":"javascript","requestStartTime":1517948892128}}
{"body": {"column":33,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    const len = Math.sqrt(Object.);\n    \n    \n    return len;\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":555,"fileType":"javascript","requestStartTime":1517948925874}}
{"body": {"column":41,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    const len = Math.sqrt(Object.keys(a).);\n    \n    \n    return len;\n    \n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":563,"fileType":"javascript","requestStartTime":1517948931653}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    objects.\n        if(o.x == o.y){\n            total++;\n        }\n        console.log(o.x);\n    }\n    return total;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":654,"fileType":"javascript","requestStartTime":1517948965229}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    process.\n});\n\n","offset":231,"fileType":"javascript","requestStartTime":1517949040377}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    objects.forEach(o => {\n        if(o.x == o.y){\n            total++;\n        }\n    })\n    objects.\n    return total;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":743,"fileType":"javascript","requestStartTime":1517949118056}}
{"body": {"column":27,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    objects.forEach(o => {\n        if(o.x == o.y){\n            total++;\n        }\n    })\n    objects.filter(o => {o.})\n    return total;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":758,"fileType":"javascript","requestStartTime":1517949129224}}
{"body": {"column":34,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    objects.forEach(o => {\n        if(o.x == o.y){\n            total++;\n        }\n    })\n    objects.filter(o => {o.x == o.})\n    return total;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":765,"fileType":"javascript","requestStartTime":1517949133237}}
{"body": {"column":13,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    nums.sort(function(a, b){return a-b});       \n    var x = Math.max.apply(null,nums)\n    con sole.\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":755,"fileType":"javascript","requestStartTime":1517949136767}}
{"body": {"column":17,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    let a = 0;\n    let b = 0;\n    \n    if(a0 < b0){\n        b = b + 1;\n    } else if(a >{\n        a = a + 1;\n    }\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":587,"fileType":"javascript","requestStartTime":1517949137330}}
{"body": {"column":19,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    let total = 0;\n    objects.forEach(o => {\n        if(o.x == o.y){\n            total++;\n        }\n    })\n    objects.filter(o => {o.x == o.y});\n    return objects.;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":789,"fileType":"javascript","requestStartTime":1517949143594}}
{"body": {"column":7,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":499,"fileType":"javascript","requestStartTime":1517949147644}}
{"body": {"column":17,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    nums.sort(function(a, b){return a-b});       \n    var x = Math.max.apply(null,nums)\n    var y = nums.\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":759,"fileType":"javascript","requestStartTime":1517949170611}}
{"body": {"column":6,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    a.\n}\n\n\n","offset":643,"fileType":"javascript","requestStartTime":1517949229851}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.\n}\n\n\n","offset":649,"fileType":"javascript","requestStartTime":1517949240803}}
{"body": {"column":18,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.log(a.)\n}\n\n\n","offset":655,"fileType":"javascript","requestStartTime":1517949244074}}
{"body": {"column":14,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    //let total = 0;\n    //objects.forEach(o => {\n    //    if(o.x == o.y){\n    //        total++;\n    //    }\n    //})\n    let eq = objects.filter(o => o.x == o.y);\n    return eq.;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":803,"fileType":"javascript","requestStartTime":1517949277540}}
{"body": {"column":29,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    console.log(a.map(item =>Number))\n}\n\n\n","offset":643,"fileType":"javascript","requestStartTime":1517949284817}}
{"body": {"column":23,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    for(var i = 0; i<a.)\n}\n\n\n","offset":637,"fileType":"javascript","requestStartTime":1517949356310}}
{"body": {"column":18,"line":10,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    const cases = input[0];\n    while (cases .)\n    process.stdout.write(input)\n});\n\n","offset":265,"fileType":"javascript","requestStartTime":1517949360363}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    var result = ''\n    for(var i = 0; i < n; i++)\n        result+=a[(k+i)%n] +' ';\n    console.\n}\n\n\n","offset":710,"fileType":"javascript","requestStartTime":1517949442198}}
{"body": {"column":23,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    var result = ''\n    for(var i = 0; i < n; i++)\n        result+=a[(k+i)%n] +' ';\n    console.log(result.)\n}\n\n\n","offset":721,"fileType":"javascript","requestStartTime":1517949445241}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517949560875}}
{"body": {"column":34,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction fizz_buzz(fizzybubbly) {\n    //Start your code below this line\n    \n    let finalans;\n    \n    switch(finalans)\n       //if (finalans %3==0);\n        case finalans %3==0:\n    {\n        console.log(finalans + '' + fizz);\n            break;\n    }\n        \n        //else if( finalans %5==0);\n    case finalans %5==0:\n    {\n        console.log(finalans + <b> + buzz);\n        break;\n    }\n        \n        //else if( finalans %5==0 && finalans%3==0);\n    case finalans %3==0 && finalans %5==0:\n    {\n        console.log(finalans + <b>+ );\n                    break;\n    }\n        \n        //else;\n     default:\n     {\n        console.log(finalans + ''+ 'This number is not divisible by 3 or 5' );\n        break;\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var fizzybubbly;\n    var fizzybubbly = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizz_buzz(fizzybubbly);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1202,"fileType":"javascript","requestStartTime":1517949835117}}
{"body": {"column":63,"line":23,"wordToComplete":"br>\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance <= 10; myBankBalance++) {\n    if (myBankBalance === 5) { \n      break; \n      }\n    output+ = \"My bank balance is now $\" + myBankBalance+ \"<br>\";\n  }\n    \n    return output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":508,"fileType":"javascript","requestStartTime":1517949999370}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance <= 10; myBankBalance++) {\n    if (myBankBalance === 5) { \n      break.list; \n      }\n    output+= \"My bank balance is now $\" + myBankBalance+ \"<br>\";\n  }\n    \n    return output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":435,"fileType":"javascript","requestStartTime":1517950173638}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance <= 10; myBankBalance++) {\n    if (myBankBalance === 5) { \n      break.; \n      }\n    output+= \"My bank balance is now $\" + myBankBalance+ \"<br>\";\n  }\n    \n    return output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":435,"fileType":"javascript","requestStartTime":1517950192079}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance <= 10; myBankBalance++) {\n    if (myBankBalance === 5) { \n      break. \n      }\n    output+= \"My bank balance is now $\" + myBankBalance+ \"<br>\";\n  }\n    \n    return output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":435,"fileType":"javascript","requestStartTime":1517950217129}}
{"body": {"column":62,"line":23,"wordToComplete":"br.'","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance <= 4; myBankBalance++) {\n    if (myBankBalance === 5) { \n      continue; \n      }\n    output+= \"My bank balance is now $\" + myBankBalance+ '<br.';\n  }\n    \n    return output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":509,"fileType":"javascript","requestStartTime":1517950331371}}
{"body": {"column":62,"line":23,"wordToComplete":"br>'","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd() {\n  var myBankBalance;\n  var output = \"\";\n\n  for (myBankBalance = 0; myBankBalance <= 4; myBankBalance++) {\n    if (myBankBalance === 5) { \n      continue; \n      }\n    output+= \"My bank balance is now $\" + myBankBalance+ '<br>';\n  }\n    \n    return output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":509,"fileType":"javascript","requestStartTime":1517950333214}}
{"body": {"column":22,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n    for(let i=0 ; i<a.)\n\n}\n\n\n","offset":547,"fileType":"javascript","requestStartTime":1517950739720}}
{"body": {"column":29,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    for (var i = 0; i < nums. )\n}\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":641,"fileType":"javascript","requestStartTime":1517950806005}}
{"body": {"column":11,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    consol.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":232,"fileType":"javascript","requestStartTime":1517950813592}}
{"body": {"column":17,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    let i = nums.\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":671,"fileType":"javascript","requestStartTime":1517950902656}}
{"body": {"column":17,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    let i = nums.sort(function(a, b) {return a-b});\n    var a = nums.\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":723,"fileType":"javascript","requestStartTime":1517950939338}}
{"body": {"column":30,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    let i = nums.sort(function(a, b) {return a-b});\n    var a = nums.indexOf(Math.)\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":736,"fileType":"javascript","requestStartTime":1517950948875}}
{"body": {"column":35,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    let i = nums.sort(function(a, b) {return a-b});\n    var a = nums.indexOf(Math.max(.))\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":741,"fileType":"javascript","requestStartTime":1517950954045}}
{"body": {"column":36,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    let i = nums.sort(function(a, b) {return a-b});\n    var a = nums.indexOf(Math.max(..))\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":742,"fileType":"javascript","requestStartTime":1517950954220}}
{"body": {"column":37,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    let i = nums.sort(function(a, b) {return a-b});\n    var a = nums.indexOf(Math.max(...))\n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":743,"fileType":"javascript","requestStartTime":1517950954365}}
{"body": {"column":30,"line":35,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction getCount(objects) {\n    //Start your code below this line\n  \n    for(let i= 0 ; i < object.)\n    \n      \n        \n        \n    \n}\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":963,"fileType":"javascript","requestStartTime":1517951324982}}
{"body": {"column":23,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction getCount(objects) {\n    //Start your code below this line\n  \n    for(let i= 0 ; i < objects.length; i++){\n        \n        if (objects[i].)\n        \n        \n    } \n        \n        \n    \n      \n        \n        \n    \n}\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":1010,"fileType":"javascript","requestStartTime":1517951477743}}
{"body": {"column":39,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction getCount(objects) {\n    //Start your code below this line\n  \n    for(let i= 0 ; i < objects.length; i++){\n        \n        if (objects[i].x == objects[i].)\n        \n        \n    } \n        \n        \n    \n      \n        \n        \n    \n}\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":1026,"fileType":"javascript","requestStartTime":1517951504502}}
{"body": {"column":101,"line":34,"wordToComplete":"else if the input string “book” doesn't equal a valid name for a book (test the character).return \"I have my The Adventure of Tom Sawyer books.\" */","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction books_collection(book) {\n\n    /* if the input string “book” equals “Calculus” return “I have my Calculus book.” */\n        return ('I have my ' + book + ' book. ');\n    \n     /* else if the input string “book” equals “History” return “I have my History book.” */\n        return ('I have my ' + book + ' book. ');\n\n     /* else if the input string “book” equals “Circuits” return \"I have my Circuits book.\" */\n        return ('I have my ' + book + ' books. ');\n    \n    /* for everything else return \" I have my ____ book.\" */\n        return ('I have my ' + book + ' books.');\n   \n       /* else if the input string “book” doesn't equal a valid name for a book (test the character).return \"I have my The Adventure of Tom Sawyer books.\" */\n        return ('Invalid');\n    \n    /* for everything else return \" I have my ____ book.\" */\n        return ('I have my ' + book + ' books. ');\n   \n    \n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var book;\n    var book = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = books_collection(book);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1352,"fileType":"javascript","requestStartTime":1517951573440}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction fizz_buzz(fizzybubbly) {\n    //Start your code below this line\n} for (var i = 1; i <=45; i ++){\n    if ( i% 3 == 0 && i % 5 == 0){ \n    console.}\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var fizzybubbly;\n    var fizzybubbly = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizz_buzz(fizzybubbly);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":815,"fileType":"javascript","requestStartTime":1517951752120}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(node, 1);\n}\n\nfunction traverseHeight(node, height) {\n    if(node.)\n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":792,"fileType":"javascript","requestStartTime":1517951846729}}
{"body": {"column":28,"line":43,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(node, 1);\n}\n\nfunction traverseHeight(node, height) {\n    if(node.left) {\n        traverseHeight(node.)\n    }\n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":828,"fileType":"javascript","requestStartTime":1517951899240}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(node, 1);\n}\n\nfunction traverseHeight(node, height) {\n        var heights = [];\n    if(node.)    \n    traverseHeight(node.left, height+1);\n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":818,"fileType":"javascript","requestStartTime":1517951964542}}
{"body": {"column":16,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    return list.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":798,"fileType":"javascript","requestStartTime":1517951973218}}
{"body": {"column":4,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\narr.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":294,"fileType":"javascript","requestStartTime":1517951977849}}
{"body": {"column":16,"line":44,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(node, 1);\n}\n\nfunction traverseHeight(node, height) {\n    var heights = [];\n    if (node.left) {\n        heights.traverseHeight(node.left, height+1);\n    }\n    \n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":839,"fileType":"javascript","requestStartTime":1517951999607}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\narr.forEach(i =0; i<arr.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517952008695}}
{"body": {"column":13,"line":47,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(node, 1);\n}\n\nfunction traverseHeight(node, height) {\n    var heights = [];\n    if (node.left) {\n        heights.push(traverseHeight(node.left, height+1));\n    }\n    \n    if (node.) {\n        heights.push(traverseHeight(node.left, height+1));\n    }\n    \n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":906,"fileType":"javascript","requestStartTime":1517952017822}}
{"body": {"column":13,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    if (list.)\n    return list.indexOf(sublist) \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":795,"fileType":"javascript","requestStartTime":1517952064196}}
{"body": {"column":31,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    if (list.length && sublist.)\n    return list.indexOf(sublist) \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":813,"fileType":"javascript","requestStartTime":1517952068180}}
{"body": {"column":16,"line":51,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(node, 1);\n}\n\nfunction traverseHeight(node, height) {\n    var leftHeight, rightHeight;\n    if (node.left) {\n        leftHeight = traverseHeight(node.left, height+1);\n    }\n    \n    if (node.right) {\n        rightHeight = traverseHeight(node.left, height+1);\n    }\n    \n    return Math.\n    \n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":1011,"fileType":"javascript","requestStartTime":1517952069709}}
{"body": {"column":34,"line":25,"wordToComplete":"I have my History book.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction books_collection(book) {\n\n    /* if the input string “book” equals “Calculus” return “I have my Calculus book.” */\n        return ('I have my ' + book + ' book. ');\n       if the imput string \"book\" equals \"History\" \n    return\"I have my History book.\n     /* else if the input string “book” equals “History” return “I have my History book.” */\n        return ('I have my ' + book + ' book.');\n\n     /* else if the input string “book” equals “Circuits” return \"I have my Circuits book.\" */\n        return ('I have my ' + book + ' book.');\n    \n    /* for everything else return \" I have my ____ book.\" */\n        return ('I have my ' + book + ' book.');\n   \n\n}\n\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var book;\n    var book = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = books_collection(book);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":922,"fileType":"javascript","requestStartTime":1517952098218}}
{"body": {"column":13,"line":25,"wordToComplete":"l","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction lonelyinteger(a) {\n    // Complete this function\n    console.l\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = lonelyinteger(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":530,"fileType":"javascript","requestStartTime":1517952099390}}
{"body": {"column":12,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    console.\n    if (list.length && sublist.length){\n       return list.contains(sublist) \n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":794,"fileType":"javascript","requestStartTime":1517952231823}}
{"body": {"column":28,"line":35,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    \n    var e = 0\n    \n    for(let i= 0 ; i < nums.length; i++){\n        \n        if (nums[i] >  nums.){}\n        \n        {\n            e++  \n        } \n        \n    } \n        \n        \n    return(e)\n    \n    \n    \n    \n    \n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":757,"fileType":"javascript","requestStartTime":1517952395699}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction fizz_buzz(fizzybubbly) {\n    //Start your code below this line\n} for (var i = 1; i <=45; i ++){\n    if ( i% 3 == 0 && i % 5 == 0){ \n    console.log('FizzBuzz');\n}\nelse if ( i % 3 === 0) {\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var fizzybubbly;\n    var fizzybubbly = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizz_buzz(fizzybubbly);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":871,"fileType":"javascript","requestStartTime":1517952435955}}
{"body": {"column":8,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction books_collection(book) {\n\n    /* if the input string “book” equals “Calculus” return “I have my Calculus book.” */\n        return ('I have my ' + book + ' book. ');\n       .if the imput string \"book\" equals \"History\" \n    return\"I have my History book.\"\n     /* else if the input string “book” equals “History” return “I have my History book.” */\n        return ('I have my ' + book + ' book.');\n       if the imput string \"book\" equals \"History\" \n    return\"I have my History book.\"\n     /* else if the input string “book” equals “Circuits” return \"I have my Circuits book.\" */\n        return ('I have my ' + book + ' book.');\n    \n    /* for everything else return \" I have my ____ book.\" */\n        return ('I have my ' + book + ' book.');\n   \n\n}\n\n\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var book;\n    var book = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = books_collection(book);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":844,"fileType":"javascript","requestStartTime":1517952463210}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1517952557239}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    console.log(list,sublist)\n    if (sublist.)\n    if (list.length && sublist.length){\n       return list.contains(sublist) \n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":828,"fileType":"javascript","requestStartTime":1517952568319}}
{"body": {"column":30,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    console.log(list,sublist)\n    if (sublist.length > list.)\n    if (list.length && sublist.length){\n       return list.contains(sublist) \n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":842,"fileType":"javascript","requestStartTime":1517952574312}}
{"body": {"column":27,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    console.log(list,sublist)\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.){\n       return list.contains(sublist) \n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":902,"fileType":"javascript","requestStartTime":1517952594944}}
{"body": {"column":16,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    console.log(list,sublist)\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.)\n       return list.contains(sublist) \n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":931,"fileType":"javascript","requestStartTime":1517952626033}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\nfunction palindrome(text){\n    if(text.)\n}\n\nfunction processData(input) {\n    //Enter your code here\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":41,"fileType":"javascript","requestStartTime":1517952663881}}
{"body": {"column":12,"line":45,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(root, 1);\n}\n\nfunction traverseHeight(node, height) {\n    var leftHeight = height, \n        rightHeight = height;\n    \n    console.\n    \n    if (node.left) {\n        leftHeight = traverseHeight(node.left, height+1);\n    }\n    \n    if (node.right) {\n        rightHeight = traverseHeight(node.left, height+1);\n    }\n    \n    return Math.max(leftHeight, rightHeight);\n    \n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":857,"fileType":"javascript","requestStartTime":1517952790024}}
{"body": {"column":13,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    \n    \n    \n  \n        nums.\n        if (nums[i] < nums[nums.length - 1]){\n            nums[i]\n        }\n      \n    \n    \n    \n    \n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":685,"fileType":"javascript","requestStartTime":1517952796095}}
{"body": {"column":24,"line":45,"wordToComplete":"","code":"var Tree = function() {\n    this.root = null;\n}\n\nTree.prototype.insert = function(node, data) {\n    if (node == null){\n    \tnode = new Node(data);\n    }\n \telse if (data < node.data){\n        node.left  = this.insert(node.left, data);\n    }\n    else{\n        node.right = this.insert(node.right, data);   \n    }\n\n    return node;\n}\n\nvar Node = function(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}\n\n/* head ends */\n/*\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction treeHeight(root) {\n\treturn traverseHeight(root, 1);\n}\n\nfunction traverseHeight(node, height) {\n    var leftHeight = height, \n        rightHeight = height;\n    \n    console.log(`${JSON.}`)\n    \n    if (node.left) {\n        leftHeight = traverseHeight(node.left, height+1);\n    }\n    \n    if (node.right) {\n        rightHeight = traverseHeight(node.left, height+1);\n    }\n    \n    return Math.max(leftHeight, rightHeight);\n    \n}\n/* tail begins */\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _stdin = \"\";\nvar _stdin_array = \"\";\nvar _currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    _stdin += data;\n});\n\nprocess.stdin.on('end', function() {\n    _stdin_array = _stdin.split(\"\\n\");\n    solution();\n});\n\nfunction readLine() {\n    return _stdin_array[_currentline++];\n}\n\nfunction solution() {\n\n    var tree = new Tree();\n    var n = parseInt(readLine());\n\n    for (var i=0; i<n; i++) {\n        var m = parseInt(readLine());\n        tree.root = tree.insert(tree.root, m);\n    }\n\n    var height = treeHeight(tree.root);\n    process.stdout.write(height);\n}\n","offset":869,"fileType":"javascript","requestStartTime":1517952798013}}
{"body": {"column":22,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n     console.log(list.,sublis[0])\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":804,"fileType":"javascript","requestStartTime":1517952842234}}
{"body": {"column":22,"line":35,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    \n    \n    \n  \nnums.sort(function(a, b){return a-b});\n        if (nums[nums.] < nums[nums.length - 1]){\n            nums[i]\n        }\n      \n    \n    \n    \n    \n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":733,"fileType":"javascript","requestStartTime":1517952867773}}
{"body": {"column":22,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    \n    \n    \n  \nnums.sort(function(a, b){return a-b});\n        if (nums[nums.length-2] < nums[nums.length - 1]){\n            nums[nums.]\n        }\n      \n    \n    \n    \n    \n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":791,"fileType":"javascript","requestStartTime":1517952880612}}
{"body": {"column":29,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/**\n*   Return the second largest number in the array.\n*   @param {Number[]} nums - An array of numbers.\n*   @return {Number} The second largest number in the array.\n**/\nfunction getSecondLargest(nums) {\n    // Complete the function\n    \n    \n    \n  \nnums.sort(function(a, b){return a-b});\n        if (nums[nums.length-2] < nums[nums.length - 1]){\n            return nums[nums.length-2]\n        }else{\n            return nums[nums.]\n        }\n      \n    \n    \n    \n    \n}\nfunction main() {\n    const n = +(readLine());\n    const nums = readLine().split(' ').map(Number);\n    \n    console.log(getSecondLargest(nums));\n}\n","offset":852,"fileType":"javascript","requestStartTime":1517952907324}}
{"body": {"column":22,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n     console.log(list.)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":804,"fileType":"javascript","requestStartTime":1517952934361}}
{"body": {"column":25,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n     console.log(list[1].)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":807,"fileType":"javascript","requestStartTime":1517952937669}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction packNumbers(arr) {\n    for (let i = 0; i < arr.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = packNumbers(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":316,"fileType":"javascript","requestStartTime":1517952973910}}
{"body": {"column":15,"line":14,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n\nfunction liftoff_countdown(start_num) {\n   for (var i = start_num; i > 0; i --) {\n       console.\n   }\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _start_num = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    liftoff_countdown(_start_num);\n    \n});\n\n","offset":319,"fileType":"javascript","requestStartTime":1517953000570}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(name) {\n    if (name.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":500,"fileType":"javascript","requestStartTime":1517953026847}}
{"body": {"column":13,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(name) {\n    if (name.substr(-2) !== 'ic') {\n        return 'not an acid';\n    }\n    \n    if (name.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":577,"fileType":"javascript","requestStartTime":1517953063818}}
{"body": {"column":22,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n     console.log(list.)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":804,"fileType":"javascript","requestStartTime":1517953064967}}
{"body": {"column":16,"line":5,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World. \\n\")\n        \n        console.,inputString);\n    \n    \n   \n} \n\n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":156,"fileType":"javascript","requestStartTime":1517953103862}}
{"body": {"column":22,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n     console.log(list.)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":804,"fileType":"javascript","requestStartTime":1517953288020}}
{"body": {"column":31,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n     console.log(list.toString.)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":813,"fileType":"javascript","requestStartTime":1517953290945}}
{"body": {"column":13,"line":13,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nfunction sum_matching_range(x1, x2, y1, y2) {\n    sum = 0;\n    if (Math.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _x1 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _x2 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _y1 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _y2 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = sum_matching_range(_x1, _x2, _y1, _y2);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":293,"fileType":"javascript","requestStartTime":1517953339094}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":512,"fileType":"javascript","requestStartTime":1517953360048}}
{"body": {"column":30,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    let operations = 0;\n    for (let i = 0; i < doors.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":554,"fileType":"javascript","requestStartTime":1517953405359}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var listOne = list.toString().replace(',','');\n     console.log(listOne)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    console.\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":935,"fileType":"javascript","requestStartTime":1517953409544}}
{"body": {"column":23,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var listOne = list.\n     console.log(listOne)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    console.log('down here')\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":805,"fileType":"javascript","requestStartTime":1517953468214}}
{"body": {"column":32,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    const maxOperations = doors.\n    let minOperations = 0;\n    for (let i = 0; i < doors.length) {\n        if (doors[i]) {\n            i += 2;\n            minOperations++;\n            continue;\n        }\n        i++;\n    }\n    return [operations, ];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":532,"fileType":"javascript","requestStartTime":1517953478651}}
{"body": {"column":25,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var listOne = Object.list\n     console.log(listOne)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    console.log('down here')\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":807,"fileType":"javascript","requestStartTime":1517953501043}}
{"body": {"column":36,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var listOne = Object.keys(list).\n     console.log(listOne)\n\n    if (sublist.length > list.length){\n        return -1\n    }\n    console.log('down here')\n    for (var i = 0; i<list.length;i++){\n       if (list.indexOf(sublist[0] !== -1))\n        return list[i];\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":818,"fileType":"javascript","requestStartTime":1517953505992}}
{"body": {"column":9,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction fizz_buzz(fizzybubbly) {\n    //Start your code below this line\n} for (var i = 1; i <=45; i ++){\n    if ( i% 3 == 0 && i % 5 == 0){ \n    console.log('FizzBuzz');\n}\nelse if ( i % 3 == 0) {\n    console.log ('Fizz')\n   \n}\nelse is (i % 5 == 0){\n console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var fizzybubbly;\n    var fizzybubbly = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizz_buzz(fizzybubbly);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":920,"fileType":"javascript","requestStartTime":1517953627751}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    Object.keys(list).forEach(function(key) {\n        if (key.)\n        Object.keys(sublist).forEach(function(key) {\n    console.log(key, list[key]);\n}); \n\n\n    \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":844,"fileType":"javascript","requestStartTime":1517953665947}}
{"body": {"column":13,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction fizz_buzz(fizzybubbly) {\n    //Start your code below this line\n} for (var i = 1; i <=45; i ++){\n    if ( i% 3 == 0 && i % 5 == 0){ \n    console.log('FizzBuzz');\n}\nelse if ( i % 3 == 0) {\n    console.log ('Fizz')\n   \n}\nelse is (i % 5 == 0){\n console.log('Buzz');\n}\n    else{\n     console.\n    }\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var fizzybubbly;\n    var fizzybubbly = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizz_buzz(fizzybubbly);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":958,"fileType":"javascript","requestStartTime":1517953698110}}
{"body": {"column":42,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    Object.keys(list).forEach(function(key) {\n        Object.keys(sublist).forEach(function(subkey) {\n                    console.log(list[key].);\n}); \n\n\n    \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":926,"fileType":"javascript","requestStartTime":1517953698954}}
{"body": {"column":54,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    Object.keys(list).forEach(function(key) {\n        Object.keys(sublist).forEach(function(subkey) {\n            console.log(list[key].val, sublist[subkey.]);\n}); \n\n\n    \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":938,"fileType":"javascript","requestStartTime":1517953734122}}
{"body": {"column":32,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    Object.keys(list).forEach(function(key) {\n        Object.keys(sublist).forEach(function(subkey) {\n            console.log(list[key].val, sublist[subkey.val]);\n            if (list[key].val, sublist[subkey.val]){\n                return listinde.key]\n            }\n}); \n\n\n    \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":1030,"fileType":"javascript","requestStartTime":1517953769887}}
{"body": {"column":7,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction solve(lines) {\n    \n    let col = {};\n    let colLength = lines.filter(val =>{\n        return val.split(',').filter(vals => {\n          return parseInt(vals) == vals;  \n        }).length;\n    })\n        .map(val => {\n            let act = val.split(',')\n                .map(val =>{\n                    return val.replace(/\\s/g,'');\n                })\n                .sort()\n                .join(':');\n\n            if(col[act]){\n                col[act]++;\n            }else{\n                col[act] = 1;\n            }\n    }).;\n    \n    let duplicate = 0;\n    for(let i in col){\n        if(col[i] > duplicate){\n            duplicate = col[i];\n        }\n    }\n    \n    return [colections.length, Object.keys(col).length, duplicate];\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _lines_size = 0;\n    _lines_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _lines = [];\n    var _lines_item;\n    for(var _lines_i = 0; _lines_i < _lines_size; _lines_i++) {\n        var _lines_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _lines.push(_lines_item);\n    }\n    \n    res = solve(_lines);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":798,"fileType":"javascript","requestStartTime":1517953839290}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517954053257}}
{"body": {"column":10,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction reverseWords(input) {\n    input.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _input = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = reverseWords(_input);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":301,"fileType":"javascript","requestStartTime":1517954057769}}
{"body": {"column":39,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction reverseWords(input) {\n    input.split(\"\").reverse().join(\"\").\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _input = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = reverseWords(_input);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":330,"fileType":"javascript","requestStartTime":1517954077969}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n\nfunction clock_angles(hour, minute) {\n    var angle = hour * 30;\n    angle += minute * 6;\n    if (angle == 360) {\n        return 180;\n    }\n    return Math.Math.min(angle, (360 - angle));\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _hour = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _minute = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = clock_angles(_hour, _minute);\n    process.stdout.write(\"\"+res);\n    \n});\n\n","offset":378,"fileType":"javascript","requestStartTime":1517954180331}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517954226605}}
{"body": {"column":12,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + Number(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1877,"fileType":"javascript","requestStartTime":1517954276935}}
{"body": {"column":41,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) cleaned.timestamps[0]\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":766,"fileType":"javascript","requestStartTime":1517954428638}}
{"body": {"column":59,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    Object.keys(list).forEach(function(key, i) {\n        Object.keys(sublist).forEach(function(subkey, j) {\n            console.log(list[key].val, i,j, sublist[subkey.]);\n            if (list[key].val == sublist[subkey.val]){\n                return i\n            }\n            \n        })\n    }); \n\n\n    \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":949,"fileType":"javascript","requestStartTime":1517954447539}}
{"body": {"column":60,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    Object.keys(list).forEach(function(key, i) {\n        Object.keys(sublist).forEach(function(subkey, j) {\n            console.log(list[key].val, i,j, sublist[subkey].);\n            if (list[key].val == sublist[subkey.val]){\n                return i\n            }\n            \n        })\n    }); \n\n\n    \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":950,"fileType":"javascript","requestStartTime":1517954449981}}
{"body": {"column":36,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.)\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":796,"fileType":"javascript","requestStartTime":1517954451045}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd(myBankBalance) { \n\n  for (myBankBalance = 0; myBankBalance <= 10; myBankBalance++) {\n    if (myBankBalance = 5) { \n      break; \n      }\n    let output = \"My bank balance is now $\" + myBankBalance + \"<br>\";\n  }\n    \n    console. output\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":508,"fileType":"javascript","requestStartTime":1517954482585}}
{"body": {"column":20,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            console.\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1141,"fileType":"javascript","requestStartTime":1517954541194}}
{"body": {"column":22,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction perp_comnd(myBankBalance) { \n\n  for (myBankBalance >= 0; myBankBalance <= 5; myBankBalance++) {\n    if (myBankBalance = 5) { \n      break; \n      }\n    let output = \"My bank balance is now $\" + myBankBalance + \"<br>\";  \n    console.log(output)\n  }    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n\n    res = perp_comnd();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":321,"fileType":"javascript","requestStartTime":1517954567844}}
{"body": {"column":16,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        console.\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            console.log(\"here\")\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1044,"fileType":"javascript","requestStartTime":1517954554041}}
{"body": {"column":16,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        console.log(\"a\", a)\n        console.\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            console.log(\"here\")\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1072,"fileType":"javascript","requestStartTime":1517954559072}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        console.log(\"a\", a)\n        console.log(\"b\", b)\n        console.\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            console.log(\"here\")\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1100,"fileType":"javascript","requestStartTime":1517954563793}}
{"body": {"column":35,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        console.log(\"a\", a)\n        console.log(\"b\", b)\n        console.log(\"a > b\", a > b)\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            console.log(\"here\")\n            let thing = timestamps.\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1280,"fileType":"javascript","requestStartTime":1517954613239}}
{"body": {"column":20,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n        console.log(\"a\", a)\n        console.log(\"b\", b)\n        console.log(\"a > b\", a > b)\n        if (a < b) {\n            cleaned.push(knownTimestamps[i])\n        } else if (b > a){\n            console.log(\"here\")\n            let thing = timestamps.shift();\n            console.\n            cleaned.push(timestamps.shift())\n            i--\n        }\n         console.log(\"clean\", cleaned)\n    }\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1309,"fileType":"javascript","requestStartTime":1517954616287}}
{"body": {"column":16,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var newList = []\n    Object.keys(list).forEach(function(key, i) {\n        newlist.\n        Object.keys(sublist).forEach(function(subkey, j) {\n            console.log(list[key].val, sublist[subkey].val i,j);\n            //if (list[key].val == sublist[subkey.val]){\n              \n            \n        })\n    });   \n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":868,"fileType":"javascript","requestStartTime":1517954634921}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    for (var i=0; i < arr.)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":316,"fileType":"javascript","requestStartTime":1517954638173}}
{"body": {"column":34,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var newList = []\n    Object.keys(list).forEach(function(key, i) {\n        newlist.push(list[key])\n        \n    });   \n    Object.keys(sublist).forEach(function(subkey, j) {\n        newSublist.push(list[key].)\n        //if (list[key].val == sublist[subkey.val]){\n\n\n    })\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":993,"fileType":"javascript","requestStartTime":1517954672735}}
{"body": {"column":31,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var newList = []\n    Object.keys(list).forEach(function(key, i) {\n        newlist.push(list[key].)\n        \n    });   \n    Object.keys(sublist).forEach(function(subkey, j) {\n        newSublist.push(list[key].val)\n        //if (list[key].val == sublist[subkey.val]){\n\n\n    })\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":883,"fileType":"javascript","requestStartTime":1517954680935}}
{"body": {"column":12,"line":50,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n    }\n    else {\n        var end = head;\n        while (end.next != null) {\n            end = end.next;\n        }\n        var node = new LinkedListNode(val);\n        end.next = node;\n    }\n    return head;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction find(list, sublist) {\n    var newList = []\n    Object.keys(list).forEach(function(key, i) {\n        newlist.push(list[key].val)\n        \n    });   \n    Object.keys(sublist).forEach(function(subkey, j) {\n        newSublist.push(list[key].val)\n\n    })\n    console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _list = _insert_node_into_singlylinkedlist(_list, _list_item);\n    }\n    \n    var _sublist_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _sublist_i, _sublist_item;\n    var _sublist = null;\n    for(_sublist_i = 0; _sublist_i < _sublist_size; _sublist_i++) { \n        var _sublist_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _sublist = _insert_node_into_singlylinkedlist(_sublist, _sublist_item);\n    }\n    \n    res = find(_list, _sublist);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":1022,"fileType":"javascript","requestStartTime":1517954694930}}
{"body": {"column":30,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let matches = [];\n    let i = 0;\n    function inner(k, a) {\n        if (!a.length) return 1\n        let rest = a.splice(1)\n\n        rest.forEach(function(num) {\n            let tmp = []\n            \n            if (Math.abs(a[0] + num) === k) {\n                console.log('output: ' + Math.abs(a[0] + num));\n                tmp.push(a[0], num)    \n                console.log('winner: ' + tmp)\n                \n                for (let pair of matches) {\n                  if (tmp === pair) {\n                      console.\n                  }    \n                }\n                \n                i++\n            }\n        })\n\n        inner(k, rest);\n    }\n    \n    inner(k, a);\n    console.log(a[i]);\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":819,"fileType":"javascript","requestStartTime":1517954730780}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    if (arr.)\n    for (var i=0; i < arr.length; i++){\n        if (arr[i] === k) {\n            return 'YES'\n        } else {\n            return 'NO'\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":302,"fileType":"javascript","requestStartTime":1517954749054}}
{"body": {"column":41,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push(\n                {hour:knownTimestamps[i].\n                         })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push(stamp)\n            i--\n        }\n        \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1120,"fileType":"javascript","requestStartTime":1517954815282}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    console.\n    for (var i=0; i < arr.length; i++){\n        if (arr[i] === k) {\n            return 'YES'\n        } else {\n            return 'NO'\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":302,"fileType":"javascript","requestStartTime":1517954917357}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n\n}\n\nfunction leftShift(n, d) {\n    console.\n}\n\n\n","offset":680,"fileType":"javascript","requestStartTime":1517954961833}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    console.\n}\n\n\n","offset":654,"fileType":"javascript","requestStartTime":1517954992288}}
{"body": {"column":26,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let matches = [];\n    let i = 0;\n    function inner(k, a) {\n        if (!a.length) return 1\n        let rest = a.splice(1)\n\n        rest.forEach(function(num) {\n            let tmp = []\n            \n            if (Math.abs(a[0] + num) === k) {\n                console.log('output: ' + Math.abs(a[0] + num));\n                tmp.push(a[0], num)    \n                console.log('winner: ' + tmp)\n                \n                matches.push(tmp)\n                \n                for (let pair of matches) {\n                  console.  \n                  if (tmp !== pair || tmp !== pair.reverse()) {\n                      //matches.push(tmp)\n                      \n                      console.log('matched')\n                  }    \n                }\n                \n                i++\n            }\n        })\n\n        inner(k, rest);\n    }\n    \n    inner(k, a);\n    console.log(matches);\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":828,"fileType":"javascript","requestStartTime":1517955003579}}
{"body": {"column":36,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  var storage = [];\n  var results = '';\n\n  for (var i = 1; i <= operations[0]; i++) {\n    var command = operations[i].split(' ');\n\n    if (command[0] === 'push') {\n      storage.push(parseInt(command[1], 10));\n    } else if (command[0] === 'pop') {\n      storage.pop();\n    } else if (command[0] === 'inc') {\n      for (var j = 0; j < command[1]; j++) {\n        storage[j] += parseInt(command[2]);\n      }\n    }\n\n    if (storage.length) {\n        console.log(storage[storage.])\n      results += storage[storage.length - 1] + '\\n';\n    } else {\n      results += 'EMPTY' + '\\n';\n    }\n  }\n\n  console.log(results);\n  return results;\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var operations;\n    var operations_size = 0;\n    operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var operations = [];\n    var operations_item;\n    for (var operations_i = 0; operations_i < operations_size; operations_i++) {\n        var operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        operations.push(operations_item);\n    }\n\n\n    res = superStack(operations);\n    \n});\n\n","offset":769,"fileType":"javascript","requestStartTime":1517955012240}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    console.log(arr,k)\n    for (var i=1; i < arr.; i++){\n        if (arr[i] === k) {\n            return 'YES'\n        } else {\n            return 'NO'\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":339,"fileType":"javascript","requestStartTime":1517955044005}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // left rotation array code starts here\n    var arrLength = n;\n    console.\n}\n\n\n","offset":721,"fileType":"javascript","requestStartTime":1517955051896}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    for (var i=1; i < arr.length-1; i++){\n        console.\n        if (arr[i] === k) {\n            return 'YES'\n        } else {\n            return 'NO'\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":348,"fileType":"javascript","requestStartTime":1517955102748}}
{"body": {"column":42,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction check_divisors(divisor_array, low, high) {\n    for (var i = low; i < high + 1; i ++) {\n        var matches = 0;\n        for (var j = 0; j < divisor_array.) {\n            if (i % div === 0) {\n                matches ++;\n            }\n        }\n        if (matches === 0) {\n            console.log(i);\n        }\n        else if (matches < divisor_array.length) {\n            console.log(i + 'one_match');\n        }\n        else {\n            console.log(i + 'all_match')\n        }\n    }\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _divisor_array = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    \n    var _low = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _high = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    check_divisors(_divisor_array, _low, _high);\n    \n});\n\n","offset":423,"fileType":"javascript","requestStartTime":1517955105027}}
{"body": {"column":14,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  var storage = [];\n  var result = '';\n\n  for (var i = 1; i <= operations[0]; i++) {\n    var command = operations[i].split(' ');\n\n    if (command[0] === 'push') {\n      storage.push(parseInt(command[1], 10));\n    } else if (command[0] === 'pop') {\n      storage.pop();\n    } else if (command[0] === 'inc') {\n      for (var j = 0; j < command[1]; j++) {\n        storage[j] += parseInt(command[2]);\n      }\n    }\n    \n    if (storage.length) {\n      // results += storage[storage.length - 1] + '\\n';\n        result = storage[storage.length - 1] + '\\n';\n    } else {\n      // results += 'EMPTY' + '\\n';\n        result = 'EMPTY' + '\\n';\n    }\n      console.\n  }\n\n  return result;\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var operations;\n    var operations_size = 0;\n    operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var operations = [];\n    var operations_item;\n    for (var operations_i = 0; operations_i < operations_size; operations_i++) {\n        var operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        operations.push(operations_item);\n    }\n\n\n    res = superStack(operations);\n    \n});\n\n","offset":947,"fileType":"javascript","requestStartTime":1517955238186}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    for (var i=1; i < arr.length-1; i++){\n        console.\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":348,"fileType":"javascript","requestStartTime":1517955258455}}
{"body": {"column":13,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    \n    for (var i = 0; i < d; i++) {\n        a[i].\n    }\n}\n\n\n","offset":820,"fileType":"javascript","requestStartTime":1517955262928}}
{"body": {"column":13,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    \n    for (var i = 0; i < d; i++) {\n        a[i].\n    }\n}\n\n\n","offset":820,"fileType":"javascript","requestStartTime":1517955267464}}
{"body": {"column":16,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1337,"fileType":"javascript","requestStartTime":1517955302900}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    console.\n    \n    //for (var i = 0; i < d; i++) {\n      //  a[i].push = newArr[d];\n    //}\n}\n\n\n","offset":780,"fileType":"javascript","requestStartTime":1517955306247}}
{"body": {"column":13,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    console..\n    \n    //for (var i = 0; i < d; i++) {\n      //  a[i].push = newArr[d];\n    //}\n}\n\n\n","offset":781,"fileType":"javascript","requestStartTime":1517955306457}}
{"body": {"column":21,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (elem.)\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1383,"fileType":"javascript","requestStartTime":1517955314371}}
{"body": {"column":22,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elme.)\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1384,"fileType":"javascript","requestStartTime":1517955319212}}
{"body": {"column":22,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.)\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1384,"fileType":"javascript","requestStartTime":1517955320268}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    \n    for (var i = 0; i < k; i++) {\n        a[i].push = newArr[k];\n        console.\n    }\n}\n\n\n","offset":854,"fileType":"javascript","requestStartTime":1517955333111}}
{"body": {"column":6,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction multi_array_sum(arr) {\n    r.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _arr = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    \n    res = multi_array_sum(_arr);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":298,"fileType":"javascript","requestStartTime":1517955397003}}
{"body": {"column":22,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.)\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1384,"fileType":"javascript","requestStartTime":1517955405627}}
{"body": {"column":58,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let matches = []\n    let i = 0\n    function inner(k, a) {\n        if (!a.length) return 1\n        let rest = a.splice(1)\n\n        rest.forEach(function(num) {\n            let tmp = []\n            \n            if (Math.abs(a[0] + num) === k) {\n                console.log('output: ' + Math.abs(a[0] + num));\n                tmp.push(a[0], num)    \n                console.log('winner: ' + tmp)\n                \n                if (matches.length > 0) {\n                  for (let pair of matches) {\n                    if (tmp != pair && tmp != pair.reverse()) {\n                      console.log('pair.reverse: ' + pair.)  \n                      console.log('pair: ' + pair)\n                      console.log('tmp: ' + tmp)\n                      matches.push(tmp)                    \n                    }    \n                  }                    \n                }\n                else {\n                    matches.push(tmp)\n                }\n                \n                i++\n            }\n        })\n\n        inner(k, rest)\n    }\n    \n    inner(k, a)\n    console.log(matches.length)\n    \n    return matches.length\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":915,"fileType":"javascript","requestStartTime":1517955415033}}
{"body": {"column":27,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    \n    for (var i = 0; i < k; i++) {\n        a[i].push = newArr.;\n        console.log(newArr);\n    }\n}\n\n\n","offset":834,"fileType":"javascript","requestStartTime":1517955417142}}
{"body": {"column":38,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.value) {\n                if (cleaned[index +1].)\n            }\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1431,"fileType":"javascript","requestStartTime":1517955429804}}
{"body": {"column":25,"line":49,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.value) {\n                if (!cleaned[index +1].value) {\n                    elem.\n                }\n            }\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1466,"fileType":"javascript","requestStartTime":1517955450668}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = [];\n    console.\n    \n    for (var i = 0; i < k; i++) {\n        //newArr.insert(4, a[i]);\n        console.log(newArr);\n    }\n}\n\n\n","offset":780,"fileType":"javascript","requestStartTime":1517955538246}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    console.\n    var previous = start[0];\n    var freq = 0;\n    var output = [];\n    start.forEach(function(s){\n        if (s==prev){\n            freq++;\n        }\n        else{\n            output.push(prev);\n            output.push(freq);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(prev);\n    output.push(freq);\n    console.log(output);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":304,"fileType":"javascript","requestStartTime":1517955584952}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    console.log(start.)\n    var previous = start[0];\n    var freq = 0;\n    var output = [];\n    start.forEach(function(s){\n        if (s==prev){\n            freq++;\n        }\n        else{\n            output.push(prev);\n            output.push(freq);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(prev);\n    output.push(freq);\n    console.log(output);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517955588776}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var freq = 0;\n    var output = [];\n    start.\n    split.forEach(function(s){\n        if (s==prev){\n            freq++;\n        }\n        else{\n            output.push(prev);\n            output.push(freq);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(prev);\n    output.push(freq);\n    console.log(output);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":370,"fileType":"javascript","requestStartTime":1517955621109}}
{"body": {"column":25,"line":51,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.value) {\n                if (!cleaned[index +1].value) {\n                    elem.value = cleaned[index -1].value\n                } else {\n                    elem.\n                }\n            }\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1548,"fileType":"javascript","requestStartTime":1517955635437}}
{"body": {"column":7,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    rr.\n    for (var i=0; i < arr.length-1; i++){\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n    return 'NO'\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":297,"fileType":"javascript","requestStartTime":1517955636477}}
{"body": {"column":8,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.\n    for (var i=0; i < arr.length-1; i++){\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n    return 'NO'\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":298,"fileType":"javascript","requestStartTime":1517955637757}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var freq = 0;\n    var output = [];\n    var split   = start.split()\n    split.forEach(function(s){\n        if (s==prev.){\n            freq++;\n        }\n        else{\n            output.push(previous);\n            output.push(freq);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(prev);\n    output.push(freq);\n    console.log(output);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":443,"fileType":"javascript","requestStartTime":1517955652768}}
{"body": {"column":20,"line":53,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.value) {\n                if (!cleaned[index +1].value) {\n                    elem.value = cleaned[index -1].value\n                } else {\n                    elem.value = (cleaned[index -1].value + cleaned[index +1].value)/2\n                }\n                res.\n            }\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1648,"fileType":"javascript","requestStartTime":1517955680177}}
{"body": {"column":30,"line":53,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.value) {\n                if (!cleaned[index +1].value) {\n                    elem.value = cleaned[index -1].value\n                } else {\n                    elem.value = (cleaned[index -1].value + cleaned[index +1].value)/2\n                }\n                res.push(elem.)\n            }\n        })\n        if (! future, then = old)\n          else \n    }\n     console.log(\"clean\", cleaned)\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1658,"fileType":"javascript","requestStartTime":1517955682017}}
{"body": {"column":15,"line":58,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach(elem, index => {\n            if (!elem.value) {\n                if (!cleaned[index +1].value) {\n                    elem.value = cleaned[index -1].value\n                } else {\n                    elem.value = (cleaned[index -1].value + cleaned[index +1].value)/2\n                }\n                res.push(elem.value)\n            }\n        }) \n    }\n     console.log(\"res\", res)\n    return res.\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1741,"fileType":"javascript","requestStartTime":1517955695433}}
{"body": {"column":14,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    \n    for (var i=0; i < arr.length-1; i++){\n        arr[i.]\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n    return 'NO'\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":351,"fileType":"javascript","requestStartTime":1517955742992}}
{"body": {"column":15,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    \n    for (var i=0; i < arr.length-1; i++){\n        arr[i].\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n    return 'NO'\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":352,"fileType":"javascript","requestStartTime":1517955744254}}
{"body": {"column":25,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var frequency = 0;\n    var output = [];\n    var split   = start.split()\n    split.forEach(function(s){\n        if (s==previous){\n            frequency++;\n        }\n        else{\n            output.push(previous);\n            output.push(frequency);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(previous.);\n    output.push(frequency);\n    console.log(output);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":661,"fileType":"javascript","requestStartTime":1517955774708}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let matches = []\n    let i = 0\n    function inner(k, a) {\n        if (!a.length) return 1\n        let rest = a.splice(1)\n\n        rest.forEach(function(num) {\n            console.\n            let tmp = []\n            \n            if (Math.abs(a[0] + num) === k) {\n                console.log('output: ' + Math.abs(a[0] + num));\n                tmp.push(a[0], num)    \n                console.log('winner: ' + tmp)\n                \n                if (matches.length > 0) {\n                  for (let pair of matches) {\n                    console.log('how many pairs: ' + matches.length)\n                    if (tmp != pair && tmp != pair.reverse()) {\n                      console.log('pair: ' + pair)\n                      console.log('tmp: ' + tmp)\n                        \n                      console.log('pair is temp? ' + (tmp == pair.reverse()))  \n                      matches.push(tmp)                    \n                    }    \n                  }                    \n                }\n                else {\n                    matches.push(tmp)\n                    \n                }\n                \n                i++\n            }\n        })\n\n        inner(k, rest)\n    }\n    \n    inner(k, a)\n    console.log(matches.length)\n    \n    return matches.length\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":474,"fileType":"javascript","requestStartTime":1517955837110}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    \n    for (var i=0; i < arr.length-1; i++){\n        arr[i].toString()\n        k.\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n    return 'NO'\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":373,"fileType":"javascript","requestStartTime":1517955853869}}
{"body": {"column":12,"line":57,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps) {\n    //console.log(\"start\",startDate)\n    //console.log(\"end\",endDate)\n    console.log(\" knownTimestamps\", knownTimestamps)\n   // console.log(\"umid\", humidity)\n    console.log(\"stamps\", timestamps)\n    let res = [];\n    let cleaned = [];\n    let length = knownTimestamps.length + timestamps.length;\n    for (let i =0; i < knownTimestamps.length + timestamps.length; i++) {\n        if (!knownTimestamps[i]) {\n            cleaned.push(timestamps.shift())\n            continue;\n        }\n        if (!timestamps[0]) {\n            cleaned.push(knownTimestamps[i])\n            continue;\n        }\n        let a = new Date(knownTimestamps[i]);\n        let b = new Date(timestamps[0]);\n\n        if (a < b) {\n            cleaned.push({\n                hour:knownTimestamps[i],\n                value: humidity[i]\n            })\n        } else if (b < a){\n            let stamp = timestamps.shift();\n            cleaned.push({hour: stamp, value: null})\n            i--\n        }\n        cleaned.forEach((elem, index) => {\n            if (!elem.value) {\n                if (!cleaned[index+1] || !cleaned[index +1].value) {\n                    elem.value = cleaned[index -1].value\n                } else {\n                    elem.value = (cleaned[index -1].value + cleaned[index +1].value)/2\n                }\n                res.push(elem.value)\n            }\n        }) \n    }\n    console.\n    console.log(\"res\", res)\n    return res;\n   \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var startDate;\n    var startDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var endDate;\n    var endDate = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var knownTimestamps;\n    var knownTimestamps_size = 0;\n    knownTimestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var knownTimestamps = [];\n    var knownTimestamps_item;\n    for (var knownTimestamps_i = 0; knownTimestamps_i < knownTimestamps_size; knownTimestamps_i++) {\n        var knownTimestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        knownTimestamps.push(knownTimestamps_item);\n    }\n\n    var humidity;\n    var humidity_size = 0;\n    humidity_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var humidity = [];\n    var humidity_item;\n    for (var humidity_i = 0; humidity_i < humidity_size; humidity_i++) {\n        var humidity_item = parseFloat(__input_stdin_array[__input_currentline].trim());\n        __input_currentline += 1;\n        humidity.push(humidity_item);\n    }\n\n    var timestamps;\n    var timestamps_size = 0;\n    timestamps_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var timestamps = [];\n    var timestamps_item;\n    for (var timestamps_i = 0; timestamps_i < timestamps_size; timestamps_i++) {\n        var timestamps_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        timestamps.push(timestamps_item);\n    }\n\n\n    res = predictMissingHumidity(startDate, endDate, knownTimestamps, humidity, timestamps);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1732,"fileType":"javascript","requestStartTime":1517955894094}}
{"body": {"column":33,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction multi_array_sum(arr) {\n    return arr.reduce( function (acc, curr) { \n        for (var i = 0; i < curr.return acc + curr })\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _arr = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    \n    res = multi_array_sum(_arr);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":372,"fileType":"javascript","requestStartTime":1517955905821}}
{"body": {"column":23,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var frequency = 0;\n    var output = [];\n    var split   = start.split()\n    split.forEach(function(s){\n        if (s==previous){\n            frequency++;\n        }\n        else{\n            output.push(previous);\n            output.push(frequency);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output+= previous.toFixed();\n    output+= frequency;\n    output.push();\n    console.log(output.);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":735,"fileType":"javascript","requestStartTime":1517955906221}}
{"body": {"column":23,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var frequency = 0;\n    var output = [];\n    var split   = start.split()\n    split.forEach(function(s){\n        if (s==previous){\n            frequency++;\n        }\n        else{\n            output.push(previous);\n            output.push(frequency);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(previous);\n    output.push(frequency);\n    console.log(output.);\n    return output;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":714,"fileType":"javascript","requestStartTime":1517955917011}}
{"body": {"column":18,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var frequency = 0;\n    var output = [];\n    var split   = start.split()\n    split.forEach(function(s){\n        if (s==previous){\n            frequency++;\n        }\n        else{\n            output.push(previous);\n            output.push(frequency);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(previous);\n    output.push(frequency);\n    console.log(output.toString());\n    return output.;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":745,"fileType":"javascript","requestStartTime":1517955924661}}
{"body": {"column":29,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var previous = start[0];\n    var frequency = 0;\n    var output = [];\n    var split   = start.split()\n    split.forEach(function(s){\n        if (s==previous){\n            frequency++;\n        }\n        else{\n            output.push(previous);\n            output.push(frequency);\n            prev = s;\n            freq = 1;\n        }\n    });\n    output.push(previous);\n    output.push(frequency);\n    console.log(output.toString());\n    return output.toString().;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":756,"fileType":"javascript","requestStartTime":1517955966748}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n var result =[]\n for (l; l<=r; l++){\n     if (l % 2 !== 0){\n        result.\n     }\n }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":363,"fileType":"javascript","requestStartTime":1517956108914}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    \n    for (var i=0; i < arr.length-1; i++){\n        arr[i] = arr[i].toString()\n        k = k.toString()\n        console.\n        if (arr[i] === k) {\n            return 'YES'\n        }\n    }\n    return 'NO'\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":413,"fileType":"javascript","requestStartTime":1517956173002}}
{"body": {"column":37,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var pos = 0;\n    var neg = 0;\n    var zer = 0;\n    \n    for (i=0; i<arr.length; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(pos/arr.).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(neg/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":783,"fileType":"javascript","requestStartTime":1517956181778}}
{"body": {"column":37,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var pos = 0;\n    var neg = 0;\n    var zer = 0;\n    \n    for (i=0; i<arr.length; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(pos/arr.length).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(neg/arr.).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":846,"fileType":"javascript","requestStartTime":1517956186666}}
{"body": {"column":37,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var pos = 0;\n    var neg = 0;\n    var zer = 0;\n    \n    for (i=0; i<arr.length; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(pos/arr.length).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(neg/arr.length).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(zer/arr.).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":909,"fileType":"javascript","requestStartTime":1517956192516}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1517956237906}}
{"body": {"column":12,"line":50,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger)\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1868,"fileType":"javascript","requestStartTime":1517956272218}}
{"body": {"column":12,"line":53,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger)\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal)\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.\n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2094,"fileType":"javascript","requestStartTime":1517956291203}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = new Array(n);\n    var rot = k;\n    console.\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(rot, 0, a[i]);\n        rot++;\n        console.log(rot);\n    }\n}\n\n\n","offset":807,"fileType":"javascript","requestStartTime":1517956308971}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = new Array(n);\n    var rot = k;\n    console.log(newArr);\n    console.\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(rot, 0, a[i]);\n        rot++;\n        console.log(rot);\n    }\n}\n\n\n","offset":832,"fileType":"javascript","requestStartTime":1517956313170}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction multi_array_sum(arr) {\n    var reduced = arr.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _arr = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    \n    res = multi_array_sum(_arr);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517956323650}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n  var \n  for(let i =0; i < arr.)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":321,"fileType":"javascript","requestStartTime":1517956588532}}
{"body": {"column":12,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    //var newArr = new Array(n);\n    var rot = k - 1;\n    //console.log(newArr);\n    console.log(rot);\n    \n    var newArr = Array.apply(null, Array(5)).map(Number.prototype.valueOf,0);\n    console.\n}\n\n\n","offset":945,"fileType":"javascript","requestStartTime":1517956766922}}
{"body": {"column":36,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var totals = {\n        pos: 0,\n        neg: 0,\n        zer: 0\n    }\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(totals.pos/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(neg/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":796,"fileType":"javascript","requestStartTime":1517956752401}}
{"body": {"column":36,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var totals = {\n        pos: 0,\n        neg: 0,\n        zer: 0\n    }\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(totals.pos/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.neg/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":857,"fileType":"javascript","requestStartTime":1517956756199}}
{"body": {"column":12,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    sprints.\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":348,"fileType":"javascript","requestStartTime":1517956792398}}
{"body": {"column":15,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n  var oddArr = [];\n  for(let i = l; i <= r; i+=1) {\n      if(i % 2 !== 0) {\n        oddArr.    \n      }\n  }   \n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":379,"fileType":"javascript","requestStartTime":1517956810227}}
{"body": {"column":36,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var totals = {\n        pos: 0,\n        neg: 0,\n        zer: 0\n    }\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(totals.pos/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.neg/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":918,"fileType":"javascript","requestStartTime":1517956761023}}
{"body": {"column":26,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    sprints.forEach(num =>)\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":362,"fileType":"javascript","requestStartTime":1517956800049}}
{"body": {"column":44,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var totals = {\n        pos: 0,\n        neg: 0,\n        zer: 0\n    }\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(totals.pos/arr.).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.neg/n).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":804,"fileType":"javascript","requestStartTime":1517956792530}}
{"body": {"column":44,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var totals = {\n        pos: 0,\n        neg: 0,\n        zer: 0\n    }\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(totals.pos/arr.length).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.neg/arr.).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.zer/n).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":874,"fileType":"javascript","requestStartTime":1517956796033}}
{"body": {"column":44,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var totals = {\n        pos: 0,\n        neg: 0,\n        zer: 0\n    }\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(totals.pos/arr.length).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.neg/arr.length).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(totals.zer/arr.).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":944,"fileType":"javascript","requestStartTime":1517956799636}}
{"body": {"column":32,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.)\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":368,"fileType":"javascript","requestStartTime":1517956894886}}
{"body": {"column":28,"line":49,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let matches = {\n        length: 0,\n        addPair: function addPair(pair) {\n            [].push.call(this, pair)\n        }\n    }\n\n    function inner(k, a) {\n        if (!a.length) return 1\n        let rest = a.splice(1)\n\n        rest.forEach(function(num) {\n            console.log('matches: ' + matches)\n            let tmp = []\n            \n            if (Math.abs(a[0] + num) === k) {\n                console.log('output: ' + Math.abs(a[0] + num));\n                tmp.push(a[0], num)    \n                console.log('winner: ' + tmp)\n                \n                if (matches.length > 0) {\n                  for (let i = 0; i < matches.length; i++) {\n                    if (tmp != matches[i] && tmp != matches[i].reverse()) {\n                      console.log('pair: ' + matches[i])\n                        \n                      console.log('pair is temp? ' + (tmp == matches[i].reverse()))  \n                      for (let j = 0; j < tmp.length; j++) {\n                        matches[i+1][j] = tmp[j]\n                      }  \n                    }\n                  }\n                }\n                else {\n                    matches.\n                }\n            }\n        })\n\n        inner(k, rest)\n    }\n    \n    inner(k, a)\n    console.log(matches.length)\n    \n    return matches.length\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1446,"fileType":"javascript","requestStartTime":1517956893160}}
{"body": {"column":11,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    newArr.\n    \n    //create nice array with 0s prefilled\n    //var newArr = Array.apply(null, Array(5)).map(Number.prototype.valueOf,0);\n    //console.log(newArr);\n}\n\n\n","offset":817,"fileType":"javascript","requestStartTime":1517956900313}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var arrLength = n;\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    newArr.splice(shift, 1, \"surely\");\n    console.\n    \n    //create nice array with 0s prefilled\n    //var newArr = Array.apply(null, Array(5)).map(Number.prototype.valueOf,0);\n    //console.log(newArr);\n}\n\n\n","offset":857,"fileType":"javascript","requestStartTime":1517956918882}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction fizz_buzz(fizzybubbly) {\n    //Start your code below this line\n}\nlet finalans = ''\n    if (finalans === 20) {\n        console.\n    }\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var fizzybubbly;\n    var fizzybubbly = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizz_buzz(fizzybubbly);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":797,"fileType":"javascript","requestStartTime":1517956952328}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        numArr .sprints[i]\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":399,"fileType":"javascript","requestStartTime":1517956960479}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        numArr .sprints[i]\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":399,"fileType":"javascript","requestStartTime":1517956961199}}
{"body": {"column":15,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        numArr.sprints[i]\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":398,"fileType":"javascript","requestStartTime":1517956961703}}
{"body": {"column":28,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction multi_array_sum(arr) {\n    for (var i = 0; i < arr.)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _arr = JSON.parse(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n    \n    res = multi_array_sum(_arr);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":320,"fileType":"javascript","requestStartTime":1517957007987}}
{"body": {"column":15,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    // unspecified length bc specifying a length isn't the norm in JS\n    var newArr = new Array(n);\n    var shift = k - 1;\n    console.log(newArr);\n    \n    for (var i = 0; i < k; i++) {\n        newArr.\n        \n        //newArr.splice(rot, 0, a[i]);\n        //rot++;\n        console.log(newArr);\n    }\n}\n\n\n","offset":857,"fileType":"javascript","requestStartTime":1517957040928}}
{"body": {"column":28,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let matches = {\n        length: 0,\n        addPair: function addPair(pair) {\n            [].push.call(this, pair)\n        }\n    }\n\n    function inner(k, a) {\n        if (!a.length) return 1\n        let rest = a.splice(1)\n\n        rest.forEach(function(num) {\n            console.log('matches: ' + matches)\n            let tmp = []\n            \n            if (Math.abs(a[0] + num) === k) {\n                tmp.push(a[0], num)    \n                \n                for (let pair in matches) {\n                    console.\n                }\n                if (matches.length > 0) {\n                  for (let i = 0; i < matches.length; i++) {\n                    if (tmp != matches[i] && tmp != matches[i].reverse()) {\n                      matches.addPair(tmp)  \n                    }\n                  }\n                }\n                else {\n                    matches.addPair(tmp)\n                }\n            }\n        })\n\n        inner(k, rest)\n    }\n    \n    inner(k, a)\n    console.log(matches.length)\n    \n    return matches.length\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":814,"fileType":"javascript","requestStartTime":1517957043029}}
{"body": {"column":19,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        while (curr < next) {\n            numArr.\n        }\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":496,"fileType":"javascript","requestStartTime":1517957101910}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    console.\n        return start.replace(/(.)\\1*/g, function(seq, p1){return seq.length.toString() + p1});\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":304,"fileType":"javascript","requestStartTime":1517957115376}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    console.log(start.)\n        return start.replace(/(.)\\1*/g, function(seq, p1){return seq.length.toString() + p1});\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1517957119911}}
{"body": {"column":21,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr >)\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":578,"fileType":"javascript","requestStartTime":1517957141726}}
{"body": {"column":19,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr > next) {\n            numArr.\n        }\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":606,"fileType":"javascript","requestStartTime":1517957147766}}
{"body": {"column":19,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr > next) {\n            numArr.push(curr);\n            curr--;\n        }\n        if (curr === next) {\n            numArr.\n        }\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":696,"fileType":"javascript","requestStartTime":1517957216439}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    console.log(newArr);\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n        console.log(newArr);\n        console.\n    }\n}\n\n\n","offset":871,"fileType":"javascript","requestStartTime":1517957224962}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction LookAndSay(start, n) {\n    var out = ''\n        out += start.replace(/(.)\\1*/g, function(seq, p1){return seq.length.toString() + p1});\n    console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _start = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = LookAndSay(_start, _n);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":416,"fileType":"javascript","requestStartTime":1517957283363}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    var a = arr.\n    var pos = 0;\n    var neg = 0;\n    var zer = 0;\n    \n    for (i=0; i<arr; i++) {\n        if(i < 0) {\n            neg+=1;\n        } else if(i > 0) {\n            pos+=1;\n        } else {\n            zer+=1;\n        }\n    }\n    process.stdout.write(\"\"+(pos/a).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(neg/a).toFixed(3)+\"\\n\");\n    process.stdout.write(\"\"+(zer/).toFixed(3)+\"\\n\");\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":531,"fileType":"javascript","requestStartTime":1517957293302}}
{"body": {"column":11,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    console.log(n - k);\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n        console.log(newArr);\n    }\n    \n    newArr.\n}\n\n\n","offset":876,"fileType":"javascript","requestStartTime":1517957341850}}
{"body": {"column":15,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let visitedArr = getArrayOfAllVisited(n, sprints);\n    let maxCount = 0;\n    \n    visitedArr.\n}\n\nfunction getArrayOfAllVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        if (curr === next) {\n            numArr.push(curr);\n        }\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr > next) {\n            numArr.push(curr);\n            curr--;\n        }\n    }\n    return numArr;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":395,"fileType":"javascript","requestStartTime":1517957401527}}
{"body": {"column":12,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n    }\n    \n    newArr.splice(0, 1, a[0]);\n    console. newArr;\n}\n\n\n","offset":855,"fileType":"javascript","requestStartTime":1517957407545}}
{"body": {"column":20,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n    }\n    \n    newArr.splice(a., 1, a[0]);\n    console.log(newArr);\n}\n\n\n","offset":832,"fileType":"javascript","requestStartTime":1517957428184}}
{"body": {"column":28,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n    }\n    \n    newArr.splice(0, 1, a[a.]);\n    console.log(newArr);\n}\n\n\n","offset":840,"fileType":"javascript","requestStartTime":1517957456600}}
{"body": {"column":34,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let visitedArr = getArrayOfAllVisited(n, sprints);\n    let maxCount = 0;\n    \n    for(let i = 0; i < visitedArr.)\n}\n\nfunction getArrayOfAllVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        if (curr === next) {\n            numArr.push(curr);\n        }\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr > next) {\n            numArr.push(curr);\n            curr--;\n        }\n    }\n    return numArr;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":414,"fileType":"javascript","requestStartTime":1517957509455}}
{"body": {"column":31,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n    }\n    \n    newArr.splice(0, 1, a[a.length-1]);\n    \n    for (var j = 0; j < newArr.)\n}\n\n\n","offset":888,"fileType":"javascript","requestStartTime":1517957506199}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n    }\n    \n    newArr.splice(0, 1, a[a.length-1]);\n    \n    for (var j = 0; j < newArr.length; j++) {\n        console. newArr[j];\n    }\n}\n\n\n","offset":919,"fileType":"javascript","requestStartTime":1517957532384}}
{"body": {"column":38,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let visitedArr = getArrayOfAllVisited(n, sprints);\n    let maxCount = 0;\n    \n    for(let i = 0; i < visitedArr.length; i++) {\n        for(let j = i; j < visitedArr.)\n    }\n}\n\nfunction getArrayOfAllVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        if (curr === next) {\n            numArr.push(curr);\n        }\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr > next) {\n            numArr.push(curr);\n            curr--;\n        }\n    }\n    return numArr;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":467,"fileType":"javascript","requestStartTime":1517957556096}}
{"body": {"column":12,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    \n    // by K\n    var newArr = new Array(n);\n    var shift = k - 1;\n    \n    for (var i = 0; i < k; i++) {\n        newArr.splice(i+1, 1, a[i]);\n        shift++;\n    }\n    \n    newArr.splice(0, 1, a[a.length-1]);\n    \n    var answer = \"\";\n    for (var j = 0; j < newArr.length; j++) {\n        answer += newArr[j] + \" \";\n    }\n    \n    console.\n}\n\n\n","offset":982,"fileType":"javascript","requestStartTime":1517957640682}}
{"body": {"column":26,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMostVisited(n, sprints) {\n    let visitedArr = this.getArrayOfAllVisited(n, sprints);\n    let numCount = 1;\n    let maxCount = 0;\n    \n    for(let i = 0; i < visitedArr.length; i++) {\n        for(let j = i; j < visitedArr.length; j++) {\n            if(visitedArr[i] === visitedArr[j]) {\n                maxCount++;\n                if (numCount < maxCount) {\n                    numCount = maxCount;\n                }\n            }\n        }\n        maxCount = 0;\n    }\n    return numCount;\n}\n\nfunction getArrayOfAllVisited(n, sprints) {\n    let max = 0;\n    let numArr = [];\n    for (let i = 0; i < sprints.length; i++) {\n        let curr = sprints[i];\n        let next = sprints[i+1];\n        if (curr === next) {\n            numArr.push(curr);\n        }\n        while (curr < next) {\n            numArr.push(curr);\n            curr++;\n            break;\n        }\n        while (curr > next) {\n            numArr.push(curr);\n            curr--;\n        }\n    }\n    return numArr;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints;\n    var sprints_size = 0;\n    sprints_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var sprints = [];\n    var sprints_item;\n    for (var sprints_i = 0; sprints_i < sprints_size; sprints_i++) {\n        var sprints_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        sprints.push(sprints_item);\n    }\n\n\n    res = getMostVisited(n, sprints);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":324,"fileType":"javascript","requestStartTime":1517957759703}}
{"body": {"column":12,"line":28,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    var rad = readLine();\n    // Print the area of the circle:\n    console.\n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":614,"fileType":"javascript","requestStartTime":1517957755051}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = Math.\n    \n    // Print the area of the circle:\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":559,"fileType":"javascript","requestStartTime":1517957787731}}
{"body": {"column":14,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    PI = Math.\n    var rad = readLine();\n    // Print the area of the circle:\n    console.log(PI*r*r);\n    // Print the perimeter of the circle:\n    \n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":553,"fileType":"javascript","requestStartTime":1517957798068}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    PI = Math.PI;\n    var rad = readLine();\n    // Print the area of the circle:\n    console.log(PI*r*r);\n    // Print the perimeter of the circle:\n    console.\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":699,"fileType":"javascript","requestStartTime":1517957813265}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    console.\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":141,"fileType":"javascript","requestStartTime":1517957877806}}
{"body": {"column":21,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    console.log(JSON.)\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":150,"fileType":"javascript","requestStartTime":1517957880541}}
{"body": {"column":40,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction numberOfPairs(a, k) {\n    let count = 0\n    let matches = []\n    \n    // Pick all elements one by one\n    for (let i = 0; i < a.length; i++) {       \n        // See if there is a pair of this picked element\n        for (let j = i + 1; j < a.length; j++) {\n          if (a[i] + a[j] == k || a[j] + a[i] == k ) {\n            for (let x = 0; x < matches. in matches) {\n                \n            }\n            matches.push(a[i], a[j])\n            count++\n          }\n        }            \n    }\n    return count;\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var k;\n    var k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = numberOfPairs(a, k);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":620,"fileType":"javascript","requestStartTime":1517958247812}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\n\n$('li').() {\n    \n}\n\n","offset":61,"fileType":"javascript","requestStartTime":1517958263517}}
{"body": {"column":51,"line":6,"wordToComplete":"star rating.\"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\n\n$('li').on('click', function(e) {\n    alert(\"You have selected a \" + + \" star rating.\")\n});\n$('li').on('mouseover', function(e) {\n    \n});\n\n\n","offset":138,"fileType":"javascript","requestStartTime":1517958478160}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n// 0 2 3 0 6\nfunction nimbleGame(s) {\n    var turn = 'First';\n    var letItRun = true;\n    while(letItRun) {\n        for(var i=0;i<s.)\n    }\n    // Complete this function\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        s = readLine().split(' ');\n        s = s.map(Number);\n        var result = nimbleGame(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":591,"fileType":"javascript","requestStartTime":1517958507603}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n});\n\nfunction consecutive(num) {\n    let count = 0;\n    for (let i = 1; i * (i+1) < 2 * num; i++) {\n        let ans = ((1 * num - (i * (i+1))/2) / (i + 1));\n        if(Number.)\n    }\n}\n\n\n","offset":394,"fileType":"javascript","requestStartTime":1517958800409}}
{"body": {"column":22,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\n\n$('li').on('click', function(e) {\n    var el = document.getElementByID\n    alert(\"You have selected a \" + + \" star rating.\")\n});\n$('li').on('mouseover', function(e) {\n    \n});\n\n\n","offset":109,"fileType":"javascript","requestStartTime":1517958838747}}
{"body": {"column":10,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  //var Stack = \n  console.\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":321,"fileType":"javascript","requestStartTime":1517958911857}}
{"body": {"column":26,"line":6,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\n\n$('li').on('click', function(e) {\n    var rating = document.\n    alert(\"You have selected a \" +  + \" star rating.\")\n});\n$('li').on('mouseover', function(e) {\n    \n});\n\n\n","offset":113,"fileType":"javascript","requestStartTime":1517959057313}}
{"body": {"column":11,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  var Stack = function() {\n      this.\n  }\n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":332,"fileType":"javascript","requestStartTime":1517959189549}}
{"body": {"column":32,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n// 0 2 3 0 6\nfunction nimbleGame(s) {\n    for(var index =0; index < s.)\n    // Complete this function\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        s = readLine().split(' ');\n        s = s.map(Number);\n        var result = nimbleGame(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":528,"fileType":"javascript","requestStartTime":1517959263736}}
{"body": {"column":11,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  var Stack = function() {\n      this.count = 0;\n      this.\n  }\n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":354,"fileType":"javascript","requestStartTime":1517959281160}}
{"body": {"column":19,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n// 0 2 3 0 6\nfunction nimbleGame(s) {\n    var result = 0;\n    for(var index =0; index < s.length; s++) {\n        result = _.\n    }\n    // Complete this function\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        s = readLine().split(' ');\n        s = s.map(Number);\n        var result = nimbleGame(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":582,"fileType":"javascript","requestStartTime":1517959287136}}
{"body": {"column":7,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n  \n  this.\n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":385,"fileType":"javascript","requestStartTime":1517959312934}}
{"body": {"column":11,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n  \n  this.push = function(val) {\n      this.\n  }\n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":419,"fileType":"javascript","requestStartTime":1517959332872}}
{"body": {"column":24,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n  \n  this.push = function(val) {\n      this.storage[this.]\n  }\n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":432,"fileType":"javascript","requestStartTime":1517959338554}}
{"body": {"column":11,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n  \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.\n  }\n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":457,"fileType":"javascript","requestStartTime":1517959350029}}
{"body": {"column":12,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    console.consecutive(input);\n});\n\nfunction consecutive(num) {\n    let count = 0;\n    for (let i = 1; i * (i+1) < 2 * num; i++) {\n        let ans = ((1 * num - (i * (i+1))/2) / (i + 1));\n        if(Number.isInteger(ans)) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n","offset":231,"fileType":"javascript","requestStartTime":1517959508929}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    for (grade of grades){\n        if() console.\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":531,"fileType":"javascript","requestStartTime":1517959743873}}
{"body": {"column":7,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":484,"fileType":"javascript","requestStartTime":1517959770463}}
{"body": {"column":13,"line":10,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    \n}\nfunction highlight(n) {\n    document.    \n}\nhttp://www.healthtap.com/imgs/feelgood/sprites/sprite2x/filled-star.png\n\n$('li').on('mouseover', function(e) {\n    \n});\n\n\n","offset":193,"fileType":"javascript","requestStartTime":1517959834393}}
{"body": {"column":40,"line":10,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    \n}\nfunction highlight(n) {\n    document.getElementByID(\"one_star\").    \n}\nhttp://www.healthtap.com/imgs/feelgood/sprites/sprite2x/filled-star.png\n\n$('li').on('mouseover', function(e) {\n    \n});\n\n\n","offset":220,"fileType":"javascript","requestStartTime":1517959873072}}
{"body": {"column":14,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.)\n  }\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":515,"fileType":"javascript","requestStartTime":1517959888391}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    console.\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":141,"fileType":"javascript","requestStartTime":1517959897722}}
{"body": {"column":10,"line":13,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    \n}\nfunction highlight(n) {\n    document.getElementByID(\"one_star\").src    \n}\nhttp://www.healthtap.com/imgs/feelgood/sprites/sprite2x/filled-star.png\n$document.\n$('li').on('mouseover', function(e) {\n    \n});\n\n\n","offset":312,"fileType":"javascript","requestStartTime":1517959918695}}
{"body": {"column":27,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    \n    var size = a.length();\n    \n    for (let i = 0; i < size; i++){\n        let aNumber = a[i].toString();\n        let mNumber = m[i].\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":429,"fileType":"javascript","requestStartTime":1517959964685}}
{"body": {"column":11,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.\n  }\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":583,"fileType":"javascript","requestStartTime":1517960055305}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    \n}\nfunction highlight(n) {\n    document.getElementByID(\"one_star\").src    \n}\nhttp://www.healthtap.com/imgs/feelgood/sprites/sprite2x/filled-star.png\n$document.ready(function() { \n$('li').on('mouseover', function(e) {\n    $(this).\n});\n});\n\n\n","offset":382,"fileType":"javascript","requestStartTime":1517960082305}}
{"body": {"column":15,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n\n    return arr.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1517960086457}}
{"body": {"column":32,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    for (grade of grades){\n        if(grade < 38) console., \n        dif = 5 - (grade % 5);\n        if(dif < 3) console.log(dif + grade);\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":542,"fileType":"javascript","requestStartTime":1517960097877}}
{"body": {"column":27,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n\n    return arr.indexOf(k) >\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":318,"fileType":"javascript","requestStartTime":1517960099288}}
{"body": {"column":24,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.\n  }\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":616,"fileType":"javascript","requestStartTime":1517960170842}}
{"body": {"column":37,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.]\n  }\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":629,"fileType":"javascript","requestStartTime":1517960184530}}
{"body": {"column":18,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.\n  }\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":655,"fileType":"javascript","requestStartTime":1517960191115}}
{"body": {"column":31,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.]\n  }\n  \n  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":668,"fileType":"javascript","requestStartTime":1517960197350}}
{"body": {"column":19,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    let arr = [];\n    \n    for (let i = l, j = r + 1; i < j; i++) {\n        if (i % 2 >)\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":375,"fileType":"javascript","requestStartTime":1517960305287}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n    let arr = [];\n    \n    for (let i = l, j = r + 1; i < j; i++) {\n        if (i % 2 > 0) {\n            arr.\n        }\n    }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":397,"fileType":"javascript","requestStartTime":1517960310855}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    var result[grades.];\n    for (grade of grades){\n        if(grade < 38) console.log(grade);\n        dif = 5 - (grade % 5);\n        if(dif < 3) console.log(dif + grade);\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":505,"fileType":"javascript","requestStartTime":1517960328925}}
{"body": {"column":39,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction carParking(n, available) {\n    if(!available) return new Array(0.,) \n    var row = 0;\n    var sum = sumArray(available[0]);\n    console.log(\"sum \" + sumArray(available[0]));\n    if(sum === 0) return new Array(0, 0);\n    for(var i = 1; i < available.length; i++) {\n        var temp = sumArray()\n        if(temp < sum) {\n            row = i;\n            sum = temp;\n        }\n    }\n    console.log(\"[\" + row + \", \" + sum + \"]\");\n    return new Array(row, sum);\n}\n\nfunction sumArray(arr) {\n    console.log(arr);\n    return arr.reduce((a,b) => a + b);\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var available;\n    var available_rows = 0;\n    var available_cols = 0;\n    var available_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var available_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var available = Array(available_rows);\n    for(var available_i = 0; available_i < available_rows; available_i++) {\n      available[available_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      available[available_i] = available[available_i].map(Number);\n    }\n\n\n    res = carParking(n, available);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":335,"fileType":"javascript","requestStartTime":1517960338919}}
{"body": {"column":32,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = []\n    let page = 1\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + page\n    https.get(url, res => {\n        let data = ''\n        res.on('data', chunk => {\n            data += chunk\n        })\n        res.on('end', () =>{    \n            let movies = JSON.parse(data)\n            let totalPages = movies.total_pages\n            \n            movies.data.map(movie => {\n                titles.push(movie.Title)\n            })\n            \n            for(let i=2; i<= totalPages; i++){\n                let newPage = i\n                let url2 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage\n                \n                https.get(url2, res => {\n                    res.on('data', chunk => {\n                        data += chunk\n                    })\n                    res.on('end', () => {\n                        let newMovies \n                        console.\n                    \n                    })\n                }).on(\"error\", err => {\n                    throw new Error(err)\n                })\n            }\n        })\n    }).on(\"error\", err => {\n        throw new Error(err)\n    })\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1384,"fileType":"javascript","requestStartTime":1517960360392}}
{"body": {"column":5,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n    var white = [255,255,255];\n    var red = \n    pixels.forEach((pixel)=>{\n        var r1 = parseInt(pixel.substr(0,8),2) ;\n        var g1 = parseInt(pixel.substr(8,8),2) ;\n        var b1 = parseInt(pixel.substr(16,8),2);\n        \n    })\n}\n\nclass Pixel{\n    this.r;\nthis.\n    Pixel(r,g,b){\n        \n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":564,"fileType":"javascript","requestStartTime":1517960369510}}
{"body": {"column":18,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    var result[grades.length];\n    for (grade of grades){\n        if(grade > 38)\n        dif = 5 - (grade % 5);\n        if(dif < 3) console.log(dif + grade);\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":559,"fileType":"javascript","requestStartTime":1517960389226}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    \n    var size = a.length();\n    var moves;\n    \n    for (let i = 0; i < size; i++){\n        let aNumber = a[i].toString();\n        let mNumber = m[i].toString();\n        let length = aNumber.length();\n        \n        for(let j = 0; j < length; j++){\n            let aNum = aNumber.substr(j,1);\n            let mNum = mNumber.substr(j,1);\n            console.\n        }\n        \n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":653,"fileType":"javascript","requestStartTime":1517960420091}}
{"body": {"column":31,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    var result[];\n    for (grade of grades){\n        if(grade >= 38) {\n            dif = 5 - (grade % 5);\n            if(dif < 3) result.\n        }\n        \n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":620,"fileType":"javascript","requestStartTime":1517960422364}}
{"body": {"column":31,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    var result = [];\n    for (grade of grades){\n        if(grade >= 38) {\n            dif = 5 - (grade % 5);\n            if(dif < 3) result.\n        }\n        \n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":623,"fileType":"javascript","requestStartTime":1517960443279}}
{"body": {"column":30,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n    var white = new Pixel(255,255,255);\n    var red =  new Pixel(255,0,0);\n    var black = new Pixel(0,0,0);\n    var blue = new Pixel(0,0,255);\n    var green = new Pixel(0,255,0);\n    \n    pixels.forEach((pixel)=>{\n        var r1 = parseInt(pixel.substr(0,8),2) ;\n        var g1 = parseInt(pixel.substr(8,8),2) ;\n        var b1 = parseInt(pixel.substr(16,8),2);\n        \n    })\n}\n\nfunction distance(pixel1, pixel2){\n    Math.sqrt(Math.pow(pixel1.))\n}\n\nclass Pixel{\n    \n    constructor(r,g,b){\n        this.r =  r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":738,"fileType":"javascript","requestStartTime":1517960609907}}
{"body": {"column":15,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    var result = [];\n    for (grade of grades){\n        if(grade >= 38) {\n            dif = 5 - (grade % 5);\n            if(dif < 3) grade += dif\n        }\n        result.\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":654,"fileType":"javascript","requestStartTime":1517960636487}}
{"body": {"column":15,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n    var white = new Pixel(255,255,255);\n    var red =  new Pixel(255,0,0);\n    var black = new Pixel(0,0,0);\n    var blue = new Pixel(0,0,255);\n    var green = new Pixel(0,255,0);\n    \n    pixels.forEach((pixel)=>{\n        var pixel1 = new Pixel();\n        \n        pixel1. = parseInt(pixel.substr(0,8),2) ;\n        var g1 = parseInt(pixel.substr(8,8),2) ;\n        var b1 = parseInt(pixel.substr(16,8),2);\n    })\n}\n\nfunction distance(pixel1, pixel2){\n   return Math.sqrt(Math.pow(pixel1.r-pixel2.r)+Math.pow(pixel1.g-pixel2.g)+Math.pow(pixel1.b-pixel2.b));\n}\n\nclass Pixel{\n    \n    constructor(r,g,b){\n        this.r =  r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":565,"fileType":"javascript","requestStartTime":1517960725159}}
{"body": {"column":41,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = []\n    let page = 1\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + page\n    https.get(url, res => {\n        let data = ''\n        res.on('data', chunk => {\n            data += chunk\n        })\n        res.on('end', () =>{    \n            let movies = JSON.parse(data)\n            let totalPages = movies.total_pages\n            \n            movies.data.map(movie => {\n                titles.push(movie.Title)\n            })\n            \n            for(let i=2; i<= totalPages; i++){\n                let newPage = i\n                let url2 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage\n                \n                https.get(url2, res => {\n                    res.on('data', chunk => {\n                        data += chunk\n                    })\n                    res.on('end', ()=>{\n                        console.log(data.)\n                    })\n                    \n                }).on(\"error\", err => {\n                    throw new Error(err)\n                })\n            }\n        })\n    }).on(\"error\", err => {\n        throw new Error(err)\n    })\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1352,"fileType":"javascript","requestStartTime":1517960729561}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var arr = operations;\n  arr.\n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n    \n    \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":327,"fileType":"javascript","requestStartTime":1517960796945}}
{"body": {"column":25,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n    var white = new Pixel(255,255,255);\n    var red =  new Pixel(255,0,0);\n    var black = new Pixel(0,0,0);\n    var blue = new Pixel(0,0,255);\n    var green = new Pixel(0,255,0);\n    var colors ={\"white\":}\n    pixels.forEach((pixel)=>{\n        var pixel1 = new Pixel();\n        pixel1.r = parseInt(pixel.substr(0,8),2) ;\n        pixel1.g = parseInt(pixel.substr(8,8),2) ;\n        pixel1.b = parseInt(pixel.substr(16,8),2);\n        \n    })\n}\n\nfunction distance(pixel1, pixel2){\n   return Math.sqrt(Math.pow(pixel1.r-pixel2.r)+Math.pow(pixel1.g-pixel2.g)+Math.pow(pixel1.b-pixel2.b));\n}\n\nclass Pixel{\n    \n    constructor(r,g,b){\n        this.r =  r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":497,"fileType":"javascript","requestStartTime":1517960804816}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var arr = [];\n  arr.push(operations);\n  console.  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n    \n    \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":347,"fileType":"javascript","requestStartTime":1517960819563}}
{"body": {"column":13,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var input = \"\";\n  operations.\n   \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n    \n    \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":328,"fileType":"javascript","requestStartTime":1517960890638}}
{"body": {"column":34,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let titles = []\n    let page = 1\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + page\n    https.get(url, res => {\n        let data = ''\n        res.on('data', chunk => {\n            data += chunk\n        })\n        res.on('end', () =>{    \n            let movies = JSON.parse(data)\n            let totalPages = movies.total_pages\n            \n            movies.data.map(movie => {\n                titles.push(movie.Title)\n            })\n            \n            console.log(titles)\n            \n            for(let i=2; i<= totalPages; i++){\n                let newPage = i\n                let url2 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage\n                \n                https.get(url2, res => {\n                    res.on('data', chunk => {\n                        data += chunk\n                    })\n                    res.on('end', ()=>{\n                        let newMovies = JSON.parse(data)\n                        newMovies.\n                    })\n                    \n                }).on(\"error\", err => {\n                    throw new Error(err)\n                })\n            }\n        })\n    }).on(\"error\", err => {\n        throw new Error(err)\n    })\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1447,"fileType":"javascript","requestStartTime":1517960949066}}
{"body": {"column":15,"line":41,"wordToComplete":"0.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  for(let i =0.)  \n  if(operations)  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":758,"fileType":"javascript","requestStartTime":1517961167562}}
{"body": {"column":31,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  for(let i =0; i < operations.)  \n  if(operations)  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":774,"fileType":"javascript","requestStartTime":1517961172732}}
{"body": {"column":16,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  for(let i =0; i < operations.length; i+=1) {  \n    if(operations[i] === \"push\"){\n       newStack. \n    }  \n      \n  }    \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":842,"fileType":"javascript","requestStartTime":1517961218497}}
{"body": {"column":20,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 65 && c.charCodeAt(0) < 91) || (c.charCodeAt(0) >= 97 && c.charCodeAt(0) < 123)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = arr.; i < arr.length; i++){\n        \n    }\n    console.log(count);\n    var offset = original_string_length%7;\n    for(var i = arr.length - count - offset; i < count; i++){\n        ret.push(arr[i]);\n    }\n    console.log(ret)\n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move)){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    console.log(findKey(message));\n    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":899,"fileType":"javascript","requestStartTime":1517961343166}}
{"body": {"column":29,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, tail, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n        tail = head;\n    }\n    else {\n        var node = new LinkedListNode(val);\n        tail.next = node;\n        tail = tail.next;\n    }\n    return tail;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction deleteEven(list) {\n    \n    while(list){\n        if(list.value % 2 === 0){\n            list.next = list.\n        }\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = 0;\n    _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    var _list_tail = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        if(_list_i == 0) {\n    \t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item);\n    \t_list_tail = _list;\n    \t}\n    \telse {\n    \t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item);\n    \t}\n    }\n    \n    res = deleteEven(_list);\n    while(res != null) {\n        wstream.write(res.val+\"\\n\");\n        \n        res = res.next;\n    }\n    \n    wstream.end();\n});\n\n","offset":821,"fileType":"javascript","requestStartTime":1517961366750}}
{"body": {"column":10,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n  console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":510,"fileType":"javascript","requestStartTime":1517961400278}}
{"body": {"column":21,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  for(let i =0; i < operations.length; i+=1) {  \n    if(operations[i]. === \"push\"){\n       newStack.push() \n    }  \n      \n  }    \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":813,"fileType":"javascript","requestStartTime":1517961481764}}
{"body": {"column":6,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    var temp = [];\n    a.\n}\n\n\n","offset":680,"fileType":"javascript","requestStartTime":1517961507722}}
{"body": {"column":15,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\nfunction LinkedListNode(node_value) {\n    this.val = node_value;\n    this.next = null;\n}\n\nfunction _insert_node_into_singlylinkedlist(head, tail, val) {\n    if(head == null) {\n        head = new LinkedListNode(val);\n        tail = head;\n    }\n    else {\n        var node = new LinkedListNode(val);\n        tail.next = node;\n        tail = tail.next;\n    }\n    return tail;\n}\n\n/*\n * Complete the function below.\n */\n/*\nFor your reference:\nLinkedListNode {\n    var val;\n    var next;\n};\n*/\nfunction deleteEven(list) {\n    \n    while(list.){\n        if(list.value % 2 === 0){\n            list.next = list.next.next\n        }\n        console.log(list)\n    }\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _list_size = 0;\n    _list_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _list_i, _list_item;\n    var _list = null;\n    var _list_tail = null;\n    for(_list_i = 0; _list_i < _list_size; _list_i++) { \n        var _list_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        if(_list_i == 0) {\n    \t_list = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item);\n    \t_list_tail = _list;\n    \t}\n    \telse {\n    \t\t_list_tail = _insert_node_into_singlylinkedlist(_list, _list_tail, _list_item);\n    \t}\n    }\n    \n    res = deleteEven(_list);\n    while(res != null) {\n        wstream.write(res.val+\"\\n\");\n        \n        res = res.next;\n    }\n    \n    wstream.end();\n});\n\n","offset":756,"fileType":"javascript","requestStartTime":1517961525665}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    a.forEach(function(val)\n             {\n        if (val <= k)\n            res.\n    })\n}\n\n\n","offset":736,"fileType":"javascript","requestStartTime":1517961544044}}
{"body": {"column":11,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    var larry_score = 0;\n    var rob_score = 0;\n    for(apple of apples) {\n        if(a + apple > s && a + apple < t) larry_score++;\n    }\n    for(orange of oranges) {\n        if(b + orange > s && b + orange < t) rob_score++;        \n    }\n    system.\n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":772,"fileType":"javascript","requestStartTime":1517961547203}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    var larry_score = 0;\n    var rob_score = 0;\n    for(apple of apples) {\n        if(a + apple > s && a + apple < t) larry_score++;\n    }\n    for(orange of oranges) {\n        if(b + orange > s && b + orange < t) rob_score++;        \n    }\n    console.\n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":773,"fileType":"javascript","requestStartTime":1517961552954}}
{"body": {"column":16,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    a.forEach(function(val)\n             {\n        if (val <= k)\n            res.concat(val);\n        else \n            res.\n    })\n}\n\n\n","offset":779,"fileType":"javascript","requestStartTime":1517961554205}}
{"body": {"column":13,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    a.forEach(function(val)\n             {\n        if (val <= k)\n            res.concat(val);\n        else \n            val.concat(res);\n    })\n    console./\n}\n\n\n","offset":812,"fileType":"javascript","requestStartTime":1517961566417}}
{"body": {"column":35,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  for(let i =0; i < operations.length; i+=1) {  \n    if(operations[i].slice(0,4) === \"push\"){\n       newStack.push(operations[i].) \n    }  \n      \n  }    \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":872,"fileType":"javascript","requestStartTime":1517961581654}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    a.forEach(function(val)\n             {\n        console.\n        if (val <= k)\n            res.concat(val);\n        else \n        {\n            var temp = [val];\n            temp.concat(res);\n        }\n    })\n    console.log(res);\n}\n\n\n","offset":714,"fileType":"javascript","requestStartTime":1517961630210}}
{"body": {"column":10,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  for(let i =0; i < operations.length; i+=1) {  \n    if(operations[i].slice(0,4) === \"push\"){\n       newStack.push(operations[i].slice(5)) \n    }  \n      \n  } \n  console.  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":913,"fileType":"javascript","requestStartTime":1517961638796}}
{"body": {"column":20,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    a.forEach(function(val)\n             {\n        if (val <= k)\n            res = res.concat(val);\n        else \n        {\n            var temp = [val];\n            res = temp.concat(res);\n        }\n    })\n    console.log(res.);\n}\n\n\n","offset":882,"fileType":"javascript","requestStartTime":1517961671424}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    var larry_score = 0;\n    var rob_score = 0;\n    for(apple of apples) {\n        if(a + apple >= s && a + apple <= t) larry_score++;\n    }\n    for(orange of oranges) {\n        if(b + orange >= s && b + orange <= t) rob_score++;        \n    }\n    console.log(larry_score)\n    console,.(rob_score)\n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":807,"fileType":"javascript","requestStartTime":1517961681001}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    var larry_score = 0;\n    var rob_score = 0;\n    for(apple of apples) {\n        if(a + apple >= s && a + apple <= t) larry_score++;\n    }\n    for(orange of oranges) {\n        if(b + orange >= s && b + orange <= t) rob_score++;        \n    }\n    console.log(larry_score)\n    console.(rob_score)\n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":806,"fileType":"javascript","requestStartTime":1517961682268}}
{"body": {"column":22,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  }\n \n  this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n  }\n  \n  this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n  }\n  \n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n    if(operations[i].slice(0,4) === \"push\"){\n       newStack.push(operations[i].slice(5)) \n    }  \n      \n  } \n  console.log(myStack.);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":930,"fileType":"javascript","requestStartTime":1517961725357}}
{"body": {"column":12,"line":53,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + parseInt(secondInteger));\n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + parseFloat(secondDecimal));\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2118,"fileType":"javascript","requestStartTime":1517961924722}}
{"body": {"column":32,"line":61,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 65 && c.charCodeAt(0) < 91) || (c.charCodeAt(0) >= 97 && c.charCodeAt(0) < 123)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = 0; i < string.length; i++){\n        var c = string.charAt(i);\n        if(c in map){\n            map[c] += 1;\n        }\n        else{\n            map[c] = 1;\n        }\n    }\n    \n    var freq = [];\n    var cc = 0;\n    for(var c in map ){\n        if(map.hasOwnProperty(c)){\n            if(map[c] > 1){\n                freq[cc] = map[c];\n                cc += 1;\n            }\n        }\n    }\n\n    var max_freq = 0;\n    for(var i = 0 ; i < freq.length; i+=1){\n        max_freq = Math.max(max.)\n    }\n    \n    console.log(freq);\n    console.log(count);\n    var offset = original_string_length%7;\n    for(var i = arr.length - count - offset; i < count; i++){\n        ret.push(arr[i]);\n    }\n    console.log(ret)\n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move)){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    console.log(findKey(message));\n    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":1384,"fileType":"javascript","requestStartTime":1517961934802}}
{"body": {"column":9,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"div\").click(function(){\n\t\t$(\"this\").hide();\n});\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":881,"fileType":"javascript","requestStartTime":1517961949118}}
{"body": {"column":9,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"div\").(function(){\n\t\t$(\"this\").hide();\n});\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":881,"fileType":"javascript","requestStartTime":1517961958854}}
{"body": {"column":22,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    a.forEach(function(val,index)\n             {console.\n        if (index <= k)\n            res = res.concat(val);\n        else \n        {\n            var temp = [val];\n            res = temp.concat(res);\n        }\n    })\n    console.log(res.join(\" \"));\n}\n\n\n","offset":711,"fileType":"javascript","requestStartTime":1517962111258}}
{"body": {"column":10,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n      }  \n      \n    } \n  console. newStack.storage;  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":933,"fileType":"javascript","requestStartTime":1517962128021}}
{"body": {"column":12,"line":12,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    \n}\nfunction highlight() {\n    $(this div).css('background-image', 'url(\"http://www.healthtap.com/imgs/feelgood/sprites/sprite2x/filled-star.png\")');\n}\n$(document).\n$('li a div').on('hover', function() {\n    $(this).css('background-image', 'url(\"http://www.healthtap.com/imgs/feelgood/sprites/sprite2x/filled-star.png\")');\n});\n\n\n","offset":316,"fileType":"javascript","requestStartTime":1517962133854}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":778,"fileType":"javascript","requestStartTime":1517962159492}}
{"body": {"column":25,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.storage.push(operations[i].slice(5)) \n      }  \n      \n    } \n  console.log( newStack.storage);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":877,"fileType":"javascript","requestStartTime":1517962161446}}
{"body": {"column":21,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var res = [];\n    var temp = [];\n\n    a.forEach(function(val,index)\n             {\n        if (index+1 <= k)\n            res = res.concat(val);\n        else \n        {\n            temp = temp.concat(val);\n        }\n    })\n    console.log(temp.res.join(\" \"));\n}\n\n\n","offset":884,"fileType":"javascript","requestStartTime":1517962186657}}
{"body": {"column":23,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n   \n    var colors ={\n                white: new Pixel(255,255,255),\n                red :new Pixel(255,0,0),\n                black :new Pixel(0,0,0),\n                blue : new Pixel(0,0,255),\n                green : new Pixel(0,255,0)\n               };\n    \n    pixels.forEach((pixel)=>{\n        var pixel1 = new Pixel();\n        var distanceColors = [];\n        \n        pixel1.r = parseInt(pixel.substr(0,8),2) ;\n        pixel1.g = parseInt(pixel.substr(8,8),2) ;\n        pixel1.b = parseInt(pixel.substr(16,8),2);\n        \n        for(var property in colors){\n            var result = distance(pixel1,colors[property]);\n            distanceColors.push({color:property,value:result});\n        }\n        \n        distanceColors.\n    })\n}\n\nfunction distance(pixel1, pixel2){\n   return Math.sqrt(Math.pow(pixel1.r-pixel2.r)+Math.pow(pixel1.g-pixel2.g)+Math.pow(pixel1.b-pixel2.b));\n}\n\nclass Pixel{\n    \n    constructor(r,g,b){\n        this.r =  r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1023,"fileType":"javascript","requestStartTime":1517962221356}}
{"body": {"column":26,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n   \n    var colors ={\n                white: new Pixel(255,255,255),\n                red :new Pixel(255,0,0),\n                black :new Pixel(0,0,0),\n                blue : new Pixel(0,0,255),\n                green : new Pixel(0,255,0)\n               };\n    \n    pixels.forEach((pixel)=>{\n        var pixel1 = new Pixel();\n        var distanceColors = [];\n        \n        pixel1.r = parseInt(pixel.substr(0,8),2) ;\n        pixel1.g = parseInt(pixel.substr(8,8),2) ;\n        pixel1.b = parseInt(pixel.substr(16,8),2);\n        \n        for(var property in colors){\n            var result = distance(pixel1,colors[property]);\n            distanceColors.push({color:property,value:result});\n        }\n        \n        distanceColors.sort((x,y)=>{\n            return x.value-y.value;\n        });\n        \n        if(distanceColors.)\n    })\n}\n\nfunction distance(pixel1, pixel2){\n   return Math.sqrt(Math.pow(pixel1.r-pixel2.r)+Math.pow(pixel1.g-pixel2.g)+Math.pow(pixel1.b-pixel2.b));\n}\n\nclass Pixel{\n    \n    constructor(r,g,b){\n        this.r =  r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1120,"fileType":"javascript","requestStartTime":1517962291285}}
{"body": {"column":23,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    if(x2 > x1 && v2 ><)\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":518,"fileType":"javascript","requestStartTime":1517962351000}}
{"body": {"column":23,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction closestColor(pixels) {\n   \n    var colors ={\n                white: new Pixel(255,255,255),\n                red :new Pixel(255,0,0),\n                black :new Pixel(0,0,0),\n                blue : new Pixel(0,0,255),\n                green : new Pixel(0,255,0)\n               };\n    \n    pixels.forEach((pixel)=>{\n        var pixel1 = new Pixel();\n        var distanceColors = [];\n        var listResult = [];\n        pixel1.r = parseInt(pixel.substr(0,8),2) ;\n        pixel1.g = parseInt(pixel.substr(8,8),2) ;\n        pixel1.b = parseInt(pixel.substr(16,8),2);\n        \n        for(var property in colors){\n            var result = distance(pixel1,colors[property]);\n            distanceColors.push({color:property,value:result});\n        }\n        \n        distanceColors.sort((x,y)=>{\n            return x.value-y.value;\n        });\n        \n        if(distanceColors[0].value == distanceColors[1].value){\n            listResult.\n        }\n    })\n}\n\nfunction distance(pixel1, pixel2){\n   return Math.sqrt(Math.pow(pixel1.r-pixel2.r)+Math.pow(pixel1.g-pixel2.g)+Math.pow(pixel1.b-pixel2.b));\n}\n\nclass Pixel{\n    \n    constructor(r,g,b){\n        this.r =  r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var pixels;\n    var pixels_size = 0;\n    pixels_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var pixels = [];\n    var pixels_item;\n    for (var pixels_i = 0; pixels_i < pixels_size; pixels_i++) {\n        var pixels_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        pixels.push(pixels_item);\n    }\n\n\n    res = closestColor(pixels);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1201,"fileType":"javascript","requestStartTime":1517962367553}}
{"body": {"column":14,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    var alice = 0;\n    var bob = 0;\n    if(a0<b0) alice++;\n    elseif(a0>)\n    if(a1<)\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":572,"fileType":"javascript","requestStartTime":1517962416956}}
{"body": {"column":17,"line":26,"wordToComplete":"3.","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = 3.\n    // Print the area of the circle:\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":556,"fileType":"javascript","requestStartTime":1517962457321}}
{"body": {"column":30,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n      } else if(operations[i].{\n          \n      }  \n      \n    } \n    console.log( newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":929,"fileType":"javascript","requestStartTime":1517962510016}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = 3.141592;\n    r = readLine();\n    // Print the area of the circle:\n    console.\n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":633,"fileType":"javascript","requestStartTime":1517962534675}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let bigBagWeight = big * 5\n  let numOfBigBags = bigBagWeight / goal\n  console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":383,"fileType":"javascript","requestStartTime":1517962547187}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = 3.141592;\n    r = readLine();\n    // Print the area of the circle:\n    console.log(PI*r*r);\n    // Print the perimeter of the circle:\n    console.\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":700,"fileType":"javascript","requestStartTime":1517962546152}}
{"body": {"column":17,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n      } else if(operations[i]=\"pop\") {\n        newStack.  \n      }  \n      \n    } \n    console.log( newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":955,"fileType":"javascript","requestStartTime":1517962571988}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  while (goal > )\n  let bigBagWeight = big * 5\n  let numOfBigBags = bigBagWeight % goal\n  console.log(numOfBigBags)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":319,"fileType":"javascript","requestStartTime":1517962647492}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = MATH.;\n    let r = parseFloat(readLine());\n    // Print the area of the circle:\n    console.log(PI*r*r);\n    // Print the perimeter of the circle:\n    console.log(PI*2*r);\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":559,"fileType":"javascript","requestStartTime":1517962669745}}
{"body": {"column":30,"line":49,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack);    \n      } else if(operations[i]. === \"\") \n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1142,"fileType":"javascript","requestStartTime":1517962776906}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    if(x2 > x1 && v2 > v1) return \"NO\";\n    lead = ((x1 >= x2) ? x1 : x2)\n    behind = ((x1 < x2) ? x1 : x2)\n    while(lead > )\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":620,"fileType":"javascript","requestStartTime":1517962811618}}
{"body": {"column":38,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let bigBagWeight = big * 5\n  let numOfBigBags = bigBagWeight % goal\n  \n  while (g > 4 && (bigBagWeight - 5) >) {\n    goal -= bigBagWeight\n  }\n  \n  console.log(goal)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":429,"fileType":"javascript","requestStartTime":1517962816406}}
{"body": {"column":19,"line":11,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    \n}\n$(document).ready(function() {\n    $(this).on('hover', function() {\n        if $(this).\n        $(this).removeClass(\"empty\");\n        $(this).addClass(\"filled\");\n    });\n});\n\n\n","offset":243,"fileType":"javascript","requestStartTime":1517962847926}}
{"body": {"column":6,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<html>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":900,"fileType":"javascript","requestStartTime":1517962877831}}
{"body": {"column":10,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let bigBagWeight = big * 5\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    goal -= bigBagWeight\n  }\n  \n  console.\n  \n  return goal\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":440,"fileType":"javascript","requestStartTime":1517962888424}}
{"body": {"column":15,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":909,"fileType":"javascript","requestStartTime":1517962898502}}
{"body": {"column":23,"line":53,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nvar calculateHourglass = function(arr, i, j) {\n  var sum = 0;\n  \n  sum = sum + arr[i][j] + arr[i][j+1] + arr[i][j+2];\n  sum = sum + arr[i+1][j+1]; \n  sum = sum + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2];\n  \n  return sum;\n}\n\nfunction main() {\n    var arr = [];\n    for(arr_i = 0; arr_i < 6; arr_i++){\n       arr[arr_i] = readLine().split(' ');\n       arr[arr_i] = arr[arr_i].map(Number);\n    }\n  \n  if (arr.length < 3 || arr[0].length < 3) {\n    process.stdout.write('0');\n    return; \n  }\n  \n  var results = [];\n  \n  for (var i=0; i < arr.length - 2; i++) {\n    for (var j=0; j<arr[i].length - 2; j++) {\n      results.push(calculateHourglass(arr, i, j));\n    }\n  }\n  \n  var result = results.\n  \n  process.stdout.write(result.toString());\n}\n\n\n","offset":1153,"fileType":"javascript","requestStartTime":1517962907333}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let bigBagWeight = big * 5\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    goal -= bigBagWeight\n  }\n  \n  console.log(goal)\n  if (goal > )\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":463,"fileType":"javascript","requestStartTime":1517962935189}}
{"body": {"column":16,"line":50,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1182,"fileType":"javascript","requestStartTime":1517962938673}}
{"body": {"column":60,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":959,"fileType":"javascript","requestStartTime":1517962967562}}
{"body": {"column":20,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let bigBagWeight = big * 5\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    goal -= bigBagWeight\n  }\n  \n  console.log(goal)\n  if (bigBagWeight >) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":470,"fileType":"javascript","requestStartTime":1517962986356}}
{"body": {"column":59,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1114,"fileType":"javascript","requestStartTime":1517962984234}}
{"body": {"column":38,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let bigBagWeight = big * 5\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    goal -= bigBagWeight\n  }\n  \n  console.log(goal)\n  if ((bigBagWeight - 5) > 0 && goal >) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":488,"fileType":"javascript","requestStartTime":1517963007068}}
{"body": {"column":21,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    switch(n)\n        case = '1'\n            document.\n}\n$(document).ready(function() {\n    $(this).on('hover', function() {\n        if $(this).hasClass(\"empty\") {\n            $(this).removeClass(\"empty\");\n            $(this).addClass(\"filled\");\n        }\n    });\n});\n\n\n","offset":203,"fileType":"javascript","requestStartTime":1517963020441}}
{"body": {"column":43,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar curr_rating = 0;\nfunction rate(n) {\n    alert(\"You have selected a \" + n + \" star rating.\");\n    curr_rating = n;\n    switch(n)\n        case = '1'\n            document.getElementByID(\"one\").\n}\n$(document).ready(function() {\n    $(this).on('hover', function() {\n        if $(this).hasClass(\"empty\") {\n            $(this).removeClass(\"empty\");\n            $(this).addClass(\"filled\");\n        }\n    });\n});\n\n\n","offset":225,"fileType":"javascript","requestStartTime":1517963034046}}
{"body": {"column":29,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let bigBagWeight = big * 5\n  \n  if (totalAvailableWeight > )\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    goal -= bigBagWeight\n  }\n  \n  console.log(goal)\n  if ((bigBagWeight - 5) > 0 && goal > small) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":379,"fileType":"javascript","requestStartTime":1517963041555}}
{"body": {"column":6,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":916,"fileType":"javascript","requestStartTime":1517963054537}}
{"body": {"column":6,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":916,"fileType":"javascript","requestStartTime":1517963067058}}
{"body": {"column":6,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":923,"fileType":"javascript","requestStartTime":1517963071532}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction tripleThreat(a) {\n  for (let a = 1; a < a.)  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = tripleThreat(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":311,"fileType":"javascript","requestStartTime":1517963214189}}
{"body": {"column":24,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction tripleThreat(a) {\n  for (let a = 1; i < a.)  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = tripleThreat(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":311,"fileType":"javascript","requestStartTime":1517963217435}}
{"body": {"column":9,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":731,"fileType":"javascript","requestStartTime":1517963217628}}
{"body": {"column":8,"line":44,"wordToComplete":"one\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"body\").ready(function(){\n    $(\".one\").text(\"hello world\")\n});\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":930,"fileType":"javascript","requestStartTime":1517963230449}}
{"body": {"column":29,"line":46,"wordToComplete":"http://code.\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.\"\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":953,"fileType":"javascript","requestStartTime":1517963252940}}
{"body": {"column":36,"line":46,"wordToComplete":"http://code.jquery.\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.\"\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":960,"fileType":"javascript","requestStartTime":1517963261546}}
{"body": {"column":11,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      this.  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":765,"fileType":"javascript","requestStartTime":1517963274042}}
{"body": {"column":49,"line":46,"wordToComplete":"http://code.jquery.com/jquery-2.\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.\"\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":973,"fileType":"javascript","requestStartTime":1517963274066}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n\ndocument.\n\n","offset":40,"fileType":"javascript","requestStartTime":1517963275602}}
{"body": {"column":51,"line":46,"wordToComplete":"http://code.jquery.com/jquery-2.2.\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.2.\"\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":975,"fileType":"javascript","requestStartTime":1517963275605}}
{"body": {"column":64,"line":46,"wordToComplete":"script>","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.2.4s\"></script>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":988,"fileType":"javascript","requestStartTime":1517963289515}}
{"body": {"column":28,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n\ndocument.querySelectorAll('.')\n\n","offset":59,"fileType":"javascript","requestStartTime":1517963291353}}
{"body": {"column":34,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n\ndocument.querySelectorAll('.box').;\n\n","offset":65,"fileType":"javascript","requestStartTime":1517963296225}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction tripleThreat(a) {\n  let beforeFlag = false\n  let afterFlag = true\n  \n  for (let i = 1; i < a.length; i++) {\n    if (i + 1 === a.)\n    if (a[i] - a[i - 1] === 1) beforeFlag = true\n    if (a[i + 1] - a[i] === 1) afterFlag = true\n  }  \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = tripleThreat(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":397,"fileType":"javascript","requestStartTime":1517963350201}}
{"body": {"column":23,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      \n      for(let i = this.)  \n      this.storage[i]  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":784,"fileType":"javascript","requestStartTime":1517963376562}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\ndocument.querySelectorAll('.box').addEventListener(function (e) {\n    alert(e.)\n});\n\n","offset":109,"fileType":"javascript","requestStartTime":1517963408258}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\ndocument.querySelectorAll('.box').addEventListener(function (e) {\n    alert(e.target.)\n});\n\n","offset":116,"fileType":"javascript","requestStartTime":1517963409378}}
{"body": {"column":27,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\ndocument.querySelectorAll('.box').addEventListener(function (e) {\n    alert(e.target.dataset.)\n});\n\n","offset":124,"fileType":"javascript","requestStartTime":1517963411520}}
{"body": {"column":40,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      \n      for(let i = this.count; i >= this.; i )  \n      this.storage[i]  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":801,"fileType":"javascript","requestStartTime":1517963420122}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction tripleThreat(a) {\n  let beforeFlag = false\n  let afterFlag = true\n  \n  for (let i = 1; i < a.length; i++) {\n    if (i + 1 === a.)\n    if (a[i] - a[i - 1] === 1) {\n      beforeFlag = true\n    } else {\n      beforeFlag = false\n    }\n    if (a[i + 1] - a[i] === 1) {\n      afterFlag = true\n    } else {\n      afterFlag = false\n    }\n  }\n  if (afterFlag && beforeFlag) return 1\n  else return 0\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = tripleThreat(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":397,"fileType":"javascript","requestStartTime":1517963490232}}
{"body": {"column":19,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.2.4s\"></script>\n</head>\n    <div id= \"one\">\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":1016,"fileType":"javascript","requestStartTime":1517963487461}}
{"body": {"column":14,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      \n      for(let i = this.count-1; i > this.count-e; i-- ){  \n        this.storage[i] += k;   \n          \n      } \n      console.  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":887,"fileType":"javascript","requestStartTime":1517963489898}}
{"body": {"column":23,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      \n      for(let i = this.count-1; i > this.count-e; i-- ){  \n        this.storage[i] += k;   \n          \n      } \n      console.log(this.)  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":896,"fileType":"javascript","requestStartTime":1517963492649}}
{"body": {"column":8,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction tripleThreat(a) {\n  let beforeFlag = false\n  let afterFlag = true\n  \n  if (a.)\n  \n  for (let i = 1; i < a.length; i++) {\n    if (i + 1 === a.length) break\n    if (a[i] - a[i - 1] === 1) {\n      beforeFlag = true\n    } else {\n      beforeFlag = false\n    }\n    if (a[i + 1] - a[i] === 1) {\n      afterFlag = true\n    } else {\n      afterFlag = false\n    }\n  }\n  if (afterFlag && beforeFlag) return 1\n  else return 0\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = tripleThreat(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":346,"fileType":"javascript","requestStartTime":1517963506755}}
{"body": {"column":17,"line":59,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      \n      for(let i = this.count-1; i > this.count-e; i-- ){  \n        this.storage[i] += k;   \n          \n      } \n      console.log(this.storage);  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1396,"fileType":"javascript","requestStartTime":1517963520813}}
{"body": {"column":26,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar boxes = document.querySelectorAll('.box');\n\nfor (var i = 0, j = boxes.)\n.addEventListener(function (e) {\n    alert(e.target.dataset.name);\n});\n\n","offset":105,"fileType":"javascript","requestStartTime":1517963538002}}
{"body": {"column":35,"line":59,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  \n   \n    \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(e, k) {\n      \n      for(let i = this.count-1; i > this.count-e; i-- ){  \n        this.storage[i] += k;   \n          \n      } \n      console.log(this.storage);  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.inc(operations[i].);\n        console.log(\"inc\");  \n      }\n      \n    } \n    console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1414,"fileType":"javascript","requestStartTime":1517963548873}}
{"body": {"column":8,"line":2,"wordToComplete":"","code":"\nlet a = 'a';\nconsole.\n\n","offset":23,"fileType":"javascript","requestStartTime":1517963558148}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\n\nvar boxes = document.querySelectorAll('.box');\n\nfor (var i = 0, j = boxes.length; i < j; i++) {\n    boxes[i].addEventListener('click', function (e) {\n        e.\n        alert(e.target.dataset.name);\n    });\n}\n\n\n","offset":191,"fileType":"javascript","requestStartTime":1517963578426}}
{"body": {"column":19,"line":49,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.2.4s\"></script>\n</head>\n    <div id= \"one\">Hello</div>\n    <div id= \"two\">\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":1047,"fileType":"javascript","requestStartTime":1517963590783}}
{"body": {"column":32,"line":49,"wordToComplete":"div>","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.2.4s\"></script>\n</head>\n    <div id= \"one\">Hello</div>\n    <div id= \"two\">Goodbye</div>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":1060,"fileType":"javascript","requestStartTime":1517963604257}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction summation(numbers) {\n    return numbers.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _numbers_size = 0;\n    _numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _numbers = [];\n    var _numbers_item;\n    for(var _numbers_i = 0; _numbers_i < _numbers_size; _numbers_i++) {\n        var _numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _numbers.push(_numbers_item);\n    }\n    \n    res = summation(_numbers);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":309,"fileType":"javascript","requestStartTime":1517963626025}}
{"body": {"column":36,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction summation(numbers) {\n    return numbers.reduce((p, c) => );\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _numbers_size = 0;\n    _numbers_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _numbers = [];\n    var _numbers_item;\n    for(var _numbers_i = 0; _numbers_i < _numbers_size; _numbers_i++) {\n        var _numbers_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _numbers.push(_numbers_item);\n    }\n    \n    res = summation(_numbers);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":326,"fileType":"javascript","requestStartTime":1517963637896}}
{"body": {"column":7,"line":51,"wordToComplete":"html>","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n<!DOCTYPE html>\n<html>\n<head>\n    <script src+\"http://code.jquery.com/jquery-2.2.4s\"></script>\n</head>\n    <div id= \"one\">Hello</div>\n    <div id= \"two\">Goodbye</div>\n</body>\n</html>\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":1076,"fileType":"javascript","requestStartTime":1517963640476}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nlet a = 'a'\nconsole.log(\"+++ a:\", a)\n\n$(document).\n\n","offset":52,"fileType":"javascript","requestStartTime":1517963642557}}
{"body": {"column":14,"line":6,"wordToComplete":"","code":"\nlet a = 'a'\nconsole.log(\"+++ a:\", a)\n\n$(document).ready(function () {\n    alert('a');\n    $(\"#app\").\n})\n\n","offset":102,"fileType":"javascript","requestStartTime":1517963666323}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let totalAvailableWeight = small + (big * 5)\n  let bigBagWeight = big * 5\n  \n  console.\n  if (totalAvailableWeight < goal) return -1\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    goal -= bigBagWeight\n  }\n  \n  if ((bigBagWeight - 5) > 0 && goal > small) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":392,"fileType":"javascript","requestStartTime":1517963713136}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction addNumbers(a, b) {\n    return Math.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a = parseFloat(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n\n    var b;\n    var b = parseFloat(__input_stdin_array[__input_currentline].trim());\n    __input_currentline += 1;\n\n\n    res = addNumbers(a, b);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":304,"fileType":"javascript","requestStartTime":1517963726785}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let totalAvailableWeight = small + (big * 5)\n  let bigBagWeight = big * 5\n  \n  console.log(totalAvailableWeight)\n  if (totalAvailableWeight < goal) return -1\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    console.\n    goal -= bigBagWeight\n  }\n  \n  if ((bigBagWeight - 5) > 0 && goal > small) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":526,"fileType":"javascript","requestStartTime":1517963735715}}
{"body": {"column":9,"line":5,"wordToComplete":"","code":"\n$(document).ready(function () {\n    $(\"#app\").innerHTML('a!')\n})\n\ndocument.\n\n","offset":77,"fileType":"javascript","requestStartTime":1517963765337}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let totalAvailableWeight = small + (big * 5)\n  let bigBagWeight = big * 5\n  \n  if (totalAvailableWeight < goal) return -1\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    console.log(goal)\n    goal -= bigBagWeight\n    console.\n  }\n  \n  if ((bigBagWeight - 5) > 0 && goal > small) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":537,"fileType":"javascript","requestStartTime":1517963775040}}
{"body": {"column":31,"line":5,"wordToComplete":"","code":"\n$(document).ready(function () {\n    $(\"#app\").innerHTML('a!')\n})\n\ndocument.getElementById(\"app\").\n\n","offset":99,"fileType":"javascript","requestStartTime":1517963773823}}
{"body": {"column":20,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(val) {\n        \n      let str = val. \n      for(let i = this.count-1; i > this.count-e; i-- ){  \n        this.storage[i] += k;   \n          \n      } \n      console.log(this.storage);  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.inc(operations[i].slice(4));\n        console.log(\"inc\");  \n      }\n      \n    } \n   // console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":770,"fileType":"javascript","requestStartTime":1517963800350}}
{"body": {"column":19,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let max = Math.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":309,"fileType":"javascript","requestStartTime":1517963804193}}
{"body": {"column":25,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let max = Math.max(a.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":315,"fileType":"javascript","requestStartTime":1517963809720}}
{"body": {"column":35,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let max = Math.max(a.length, b.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":325,"fileType":"javascript","requestStartTime":1517963812369}}
{"body": {"column":2,"line":6,"wordToComplete":"","code":"\n$(document).ready(function () {\n    $(\"#app\").innerHTML('a!')\n})\n\nvar a = document.getElementById(\"app\")\na.\n\n","offset":109,"fileType":"javascript","requestStartTime":1517963817194}}
{"body": {"column":8,"line":6,"wordToComplete":"","code":"\n$(document).ready(function () {\n    $(\"#app\").innerHTML('a!')\n})\n\nvar a = document.getElementById(\"app\")\na.style.\n\n","offset":115,"fileType":"javascript","requestStartTime":1517963818031}}
{"body": {"column":10,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n<html>\n    <head>\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":889,"fileType":"javascript","requestStartTime":1517963845083}}
{"body": {"column":10,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let totalAvailableWeight = small + (big * 5)\n  let bigBagWeight = big * 5\n  \n  if (totalAvailableWeight < goal) return -1\n  \n  while (goal > 4 && (bigBagWeight - 5) >= 0) {\n    bigBagWeight -= 5\n    goal -= 5\n  }\n  console.\n  \n  if ((bigBagWeight - 5) > 0 && goal > small) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":528,"fileType":"javascript","requestStartTime":1517963860667}}
{"body": {"column":16,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n<html>\n    <head>\n        <tittle>\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":906,"fileType":"javascript","requestStartTime":1517963899547}}
{"body": {"column":25,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n<html>\n    <head>\n        <tittle>Click Me>\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":915,"fileType":"javascript","requestStartTime":1517963903737}}
{"body": {"column":103,"line":1,"wordToComplete":"sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.","code":"\n// sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.\n\n","offset":105,"fileType":"javascript","requestStartTime":1517963916316}}
{"body": {"column":226,"line":1,"wordToComplete":"sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't show, and it doesn't make sense for me to write it in vanilla javascript without some of the tools I'm used to.","code":"\n// sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't show, and it doesn't make sense for me to write it in vanilla javascript without some of the tools I'm used to.\n\n","offset":228,"fileType":"javascript","requestStartTime":1517963933016}}
{"body": {"column":33,"line":45,"wordToComplete":"title>","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n<html>\n    <head>\n        <tittle>Click Me></title>\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":923,"fileType":"javascript","requestStartTime":1517963934167}}
{"body": {"column":306,"line":1,"wordToComplete":"sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't show, and it doesn't make sense for me to write it in vanilla javascript without some of the tools I'm used to. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset.","code":"\n// sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't show, and it doesn't make sense for me to write it in vanilla javascript without some of the tools I'm used to. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset.\n\n","offset":308,"fileType":"javascript","requestStartTime":1517963947052}}
{"body": {"column":11,"line":46,"wordToComplete":"head>","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n<html>\n    <head>\n        <title>Click Me></title>\n    </head>\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":934,"fileType":"javascript","requestStartTime":1517963947961}}
{"body": {"column":19,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let longer = a.\n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            str += \n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":353,"fileType":"javascript","requestStartTime":1517963954434}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let longer = a.length > \n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            str += \n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":362,"fileType":"javascript","requestStartTime":1517963956086}}
{"body": {"column":10,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n<html>\n    <head>\n        <title>Click Me></title>\n    </head>\n    <body>\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":945,"fileType":"javascript","requestStartTime":1517963955743}}
{"body": {"column":30,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let longer = a.length > b.\n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            str += \n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":364,"fileType":"javascript","requestStartTime":1517963956872}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction createPackage(small, big, goal) {\n  let g = goal\n  let totalAvailableWeight = small + (big * 5)\n  let bigBagWeight = big * 5\n  \n  if (totalAvailableWeight < goal) return -1\n  \n  while (g > 5 && (bigBagWeight - 5) >= 0) {\n    bigBagWeight -= 5\n    g -= 5\n  }\n  console.log(g)\n  \n  if ((bigBagWeight - 5) > 0 && g > small) return -1\n  \n  return goal\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var small;\n    var small = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var big;\n    var big = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var goal;\n    var goal = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = createPackage(small, big, goal);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":457,"fileType":"javascript","requestStartTime":1517963962942}}
{"body": {"column":18,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            if (a.)\n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":488,"fileType":"javascript","requestStartTime":1517963991041}}
{"body": {"column":26,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            if (a.length >)\n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":496,"fileType":"javascript","requestStartTime":1517963994977}}
{"body": {"column":385,"line":1,"wordToComplete":"sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. And this is a pretty big requirement to be fulfilling without tools.","code":"\n// sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. And this is a pretty big requirement to be fulfilling without tools.\n\n","offset":387,"fileType":"javascript","requestStartTime":1517964045066}}
{"body": {"column":25,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            if (a.length > i) {\n                str += a.\n            }\n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":527,"fileType":"javascript","requestStartTime":1517964051785}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction mergeStrings(a, b) {\n    let min = Math.max(a.length, b.length);\n    let str = '';\n    \n    for (var i = 0; i < min; i++) {\n        if (a[i] && b[i]) {\n            str += a[i] + b[i];\n        } else {\n            if (a.length > i) {\n                str += a.substr(i);\n            } else {\n                str += b.\n            }\n        }\n    }\n    \n    return str;\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    var _b = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = mergeStrings(_a, _b);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":584,"fileType":"javascript","requestStartTime":1517964067361}}
{"body": {"column":12,"line":1,"wordToComplete":"","code":"\n$(document).\n// Sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. And this is a pretty big requirement to be fulfilling without tools. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. \n\n","offset":14,"fileType":"javascript","requestStartTime":1517964068199}}
{"body": {"column":13,"line":2,"wordToComplete":"","code":"\n$(document).ready(function() {\n    consoole.\n})\n// Sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. And this is a pretty big requirement to be fulfilling without tools. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. \n\n","offset":46,"fileType":"javascript","requestStartTime":1517964075423}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\n$(document).ready(function() {\n    console.\n})\n// Sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. And this is a pretty big requirement to be fulfilling without tools. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. \n\n","offset":45,"fileType":"javascript","requestStartTime":1517964077097}}
{"body": {"column":41,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = val;\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];\n      return result;\n    }\n    \n    this.inc = function(val) {\n        \n      let nums = val.split(\" \"); \n      let e = nums[0];\n      let k = nums[1];\n      for(let i = this.count-1; i > this.; i-- ){  \n        this.storage[i] += k;             \n      } \n        \n      console.log(this.storage);  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        console.log(\"current newStack after push\", newStack.storage);    \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);  \n        console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.inc(operations[i].slice(4));\n        console.log(\"inc\");  \n      }\n      \n    } \n   // console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":871,"fileType":"javascript","requestStartTime":1517964158774}}
{"body": {"column":348,"line":10,"wordToComplete":"Sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. And this is a pretty big requirement to be fulfilling without tools (leap year? date comparison without moment.. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. ","code":"\n$(document).ready(function() {\n    console.log('hello world')\n    alert('hello 2')\n})\n\nvar x = document.getElementById(\"app\");\nx.style.color = \"red\";\n\n\n// Sorry, this doesn't let me use jquery, doesn't look like I can setup react easily for this, console.log doesn't print, and it doesn't make sense for me to write it in vanilla javascript without some very basic tools that I'm used to. And this is a pretty big requirement to be fulfilling without tools (leap year? date comparison without moment.. I hope my answers in the 1st and 2nd part sufficiently demonstrate my skillset. \n\n","offset":502,"fileType":"javascript","requestStartTime":1517964159542}}
{"body": {"column":57,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\nfunction actuator(pressureWanted, pressureReading, decision) {\n/* USE THE PSEUDO-CODE AS A GUIDELINE! */\n    for ( var i = 0; i <= 4; i++)\n        {if (pressureWanted[i] < 0 || pressureWanted[i] . \n            \n            \n        }\n}\n\nfunction main() {\n    let n1 = +(readLine());\n    const pressureWanted = readLine().split(' ').map(Number);\n    \n    let n2 = +(readLine());\n    const pressureReading = readLine().split(' ').map(Number);\n    \n    let n3 = +(readLine());\n    let decision = readLine().split(' ').map(Number);\n    \n    console.log(actuator(pressureWanted, pressureReading, decision));\n}\n\n","offset":1058,"fileType":"javascript","requestStartTime":1517964186152}}
{"body": {"column":32,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n    var size = values.length;\n    \n    for (var i = 0; i < size; i++){\n        let str = size[i];\n        let length = str.length;\n        let stack = [];\n        \n        for(var j = 0; j < length; j++){\n            switch(str.substr(j,1)){\n                case \"(\": stack.push(\"(\"); break;\n                case \"[\": stack.push(\"[\"); break;\n                case \"{\": stack.push(\"[\"); break;\n                case \")\"; stack.\n                    \n            }\n        }\n        \n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":710,"fileType":"javascript","requestStartTime":1517964199933}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n\n/*\n * Create the function factorial here\n */\n\nfunction factorial(n) {\n    console.\n    if (n !== 0) {\n        return (n * factorial(n-1));\n    }\n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    console.log(factorial(n));\n}\n","offset":505,"fileType":"javascript","requestStartTime":1517964543383}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517964537420}}
{"body": {"column":29,"line":10,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    input = input.split('\\n');\n    for(var i = 0; i < input.)\n    var c_input = clean(input);\n    console.log(c_input)\n    if(c_input[0] == 'E' || c_input == 'e'){\n        var email = '';\n        console.log(c_input.split('@'))\n    }\n});\n\n// Strip all the whitespaces\nfunction clean(str){\n    var ret = [];\n    for(var i = 0; i < str.length; i++){\n        if(str[i] != ' '){\n            ret.push(str[i]);\n        }\n    }\n    return ret.join('');\n}\n\n","offset":279,"fileType":"javascript","requestStartTime":1517964597291}}
{"body": {"column":10,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction decode(codes, encoded) {\n    var startIndex = 0;\n    var result =\"\";\n    \n    codes.\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var codes;\n    var codes_size = 0;\n    codes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var codes = [];\n    var codes_item;\n    for (var codes_i = 0; codes_i < codes_size; codes_i++) {\n        var codes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        codes.push(codes_item);\n    }\n\n    var encoded;\n    var encoded = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = decode(codes, encoded);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":353,"fileType":"javascript","requestStartTime":1517964792267}}
{"body": {"column":30,"line":12,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    input = input.split('\\n');\n    for(var i = 0; i < input.length; i++){\n        var c_input = clean(input[i]);\n        var command = c_input.\n        if(c_input[0] == 'E' || c_input == 'e'){\n            var email = '';\n            var email_name = c_input.split('@')[0];\n            var corrected_email_name = '';\n            for(var i = 0; i < email_name.length; i++){\n                if(i == 0 || i == email_name.length -1){\n                    corrected_email_name += email_name[i];\n                }\n                else{\n                    corrected_email_name += '*';\n                }\n            }\n            console.log(corrected_email_name);\n        }\n    }\n    \n});\n\n// Strip all the whitespaces\nfunction clean(str){\n    var ret = [];\n    for(var i = 0; i < str.length; i++){\n        if(str[i] != ' '){\n            ret.push(str[i]);\n        }\n    }\n    return ret.join('');\n}\n\n","offset":362,"fileType":"javascript","requestStartTime":1517964892586}}
{"body": {"column":27,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction decode(codes, encoded) {\n    var result =\"\";\n    \n    for(var startIndex = 0; startIndex < encoded.length; startIndex +=6 ){\n        var code = encoded.\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var codes;\n    var codes_size = 0;\n    codes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var codes = [];\n    var codes_item;\n    for (var codes_i = 0; codes_i < codes_size; codes_i++) {\n        var codes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        codes.push(codes_item);\n    }\n\n    var encoded;\n    var encoded = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = decode(codes, encoded);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":421,"fileType":"javascript","requestStartTime":1517964940937}}
{"body": {"column":24,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction decode(codes, encoded) {\n    var result =\"\";\n    \n    for(var startIndex = 0; startIndex < encoded.length; startIndex +=6 ){\n        var code = encoded.substr(startIndex,6);\n        codes.find((item)=>{\n            return item.\n        })\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var codes;\n    var codes_size = 0;\n    codes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var codes = [];\n    var codes_item;\n    for (var codes_i = 0; codes_i < codes_size; codes_i++) {\n        var codes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        codes.push(codes_item);\n    }\n\n    var encoded;\n    var encoded = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = decode(codes, encoded);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":496,"fileType":"javascript","requestStartTime":1517965064882}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction conditional_op_(num1, num2, num3, numtest) {\n    //Start your function below this line\n    \n    if(numtest > num1){\n        var a = 100;\n    }\n    else{\n        var a = 200;\n    }\n   \n    if(numtest >)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num1;\n    var num1 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num2;\n    var num2 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num3;\n    var num3 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numtest;\n    var numtest = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = conditional_op_(num1, num2, num3, numtest);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":871,"fileType":"javascript","requestStartTime":1517965076426}}
{"body": {"column":22,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    var i = 0;\n    for(i = 0; i <arr.)\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":327,"fileType":"javascript","requestStartTime":1517965098985}}
{"body": {"column":26,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction decode(codes, encoded) {\n    var result =\"\";\n    \n    for(var startIndex = 0; startIndex < encoded.length; startIndex +=6 ){\n        var code = encoded.substr(startIndex,6);\n        var objCode = codes.find((item)=>{\n            return item.code == code;\n        });\n        result =   result.\n    }\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var codes;\n    var codes_size = 0;\n    codes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var codes = [];\n    var codes_item;\n    for (var codes_i = 0; codes_i < codes_size; codes_i++) {\n        var codes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        codes.push(codes_item);\n    }\n\n    var encoded;\n    var encoded = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = decode(codes, encoded);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":562,"fileType":"javascript","requestStartTime":1517965190615}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction journeyToMoon(n, astronaut) {\n    // Complete this function\n    console.\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var p = parseInt(n_temp[1]);\n    var astronaut = [];\n    for(astronaut_i = 0; astronaut_i < p; astronaut_i++){\n       astronaut[astronaut_i] = readLine().split(' ');\n       astronaut[astronaut_i] = astronaut[astronaut_i].map(Number);\n    }\n    var result = journeyToMoon(n, astronaut);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":540,"fileType":"javascript","requestStartTime":1517965211694}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction journeyToMoon(n, astronaut) {\n    // Complete this function\n    console.log(n)\n    console.\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var p = parseInt(n_temp[1]);\n    var astronaut = [];\n    for(astronaut_i = 0; astronaut_i < p; astronaut_i++){\n       astronaut[astronaut_i] = readLine().split(' ');\n       astronaut[astronaut_i] = astronaut[astronaut_i].map(Number);\n    }\n    var result = journeyToMoon(n, astronaut);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":559,"fileType":"javascript","requestStartTime":1517965219469}}
{"body": {"column":21,"line":29,"wordToComplete":"aeiou./","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction regexVar() {\n    /*\n     * Declare a RegExp object variable named 're'\n     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})\n     */\n     var re = /aeiou./;\n     const re = /(.).*\\1/;\n    \n    \n    /*\n     * Do not remove the return statement\n     */\n    return re;\n}\n\nfunction main() {\n    const re = regexVar();\n    const s = readLine();\n    \n    console.log(re.test(s));\n}\n","offset":626,"fileType":"javascript","requestStartTime":1517965283347}}
{"body": {"column":23,"line":50,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = parseInt(val);\n      this.count++;\n      console.log(this.storage[this.count]);\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];  \n      return result;\n    }\n    \n    this.inc = function(val) {\n        \n      let nums = val.split(\" \"); \n      let e = parseInt(nums[0]);\n      let k = parseInt(nums[1]);\n      for(let i = this.count-1; i >= this.count - e; i-- ){  \n        this.storage[i] += k;             \n      } \n      console.log()\n    }\n    \n    this.lastVal = function(val) {\n      console.log(this.)  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n       // console.log(\"current newStack after push\", newStack.storage);  \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);\n        if(newStack.count === 0 ){\n          console.log('EMPTY')  \n        }  \n      //  console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.inc(operations[i].slice(4));\n      //  console.log(\"current newStack after inc\", newStack.storage);  \n      }\n      \n    } \n   // console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1110,"fileType":"javascript","requestStartTime":1517965288582}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction journeyToMoon(n, astronaut) {\n    // Complete this function\n    for(var i = 0; i < n.)\n\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var p = parseInt(n_temp[1]);\n    var astronaut = [];\n    for(astronaut_i = 0; astronaut_i < p; astronaut_i++){\n       astronaut[astronaut_i] = readLine().split(' ');\n       astronaut[astronaut_i] = astronaut[astronaut_i].map(Number);\n    }\n    var result = journeyToMoon(n, astronaut);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":553,"fileType":"javascript","requestStartTime":1517965383823}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction conditional_op_(num1, num2, num3, numtest) {\n    //Start your function below this line\n    \n    if(numtest > num1){\n        var a = 100;\n    }\n    else{\n        var a = 200;\n    }\n   \n    if(numtest > num2){\n        var b = a - 50;\n    }\n    else{\n        var b = a + 100;\n    }\n    \n    if(numtest >)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var num1;\n    var num1 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num2;\n    var num2 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var num3;\n    var num3 = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var numtest;\n    var numtest = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = conditional_op_(num1, num2, num3, numtest);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":971,"fileType":"javascript","requestStartTime":1517965395562}}
{"body": {"column":17,"line":64,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = parseInt(val);\n      this.count++;\n      console.log(this.storage[this.count]);\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];  \n      return result;\n    }\n    \n    this.inc = function(val) {\n        \n      let nums = val.split(\" \"); \n      let e = parseInt(nums[0]);\n      let k = parseInt(nums[1]);\n      for(let i = this.count-1; i >= this.count - e; i-- ){  \n        this.storage[i] += k;             \n      } \n      console.log()\n    }\n    \n    this.lastVal = function() {\n      if(this.count === 0) {\n         console.log('EMPTY')   \n      }  \n      console.log(this.storage[this.count-1]);  \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        newStack.lastVal(); \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);\n        newStack.\n      //  console.log(\"current newStack after pop\", newStack.storage);    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.inc(operations[i].slice(4));\n      //  console.log(\"current newStack after inc\", newStack.storage);  \n      }\n      \n    } \n   // console.log(\"At the end \", newStack);  \n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1519,"fileType":"javascript","requestStartTime":1517965401892}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction decode(codes, encoded) {\n    var result =\"\";\n    console.\n    for(var startIndex = 0; startIndex < encoded.length; startIndex +=6 ){\n        var code = encoded.substr(startIndex,6);\n        var objCode = codes.find((item)=>{\n            \n            return item.code == code;\n        });\n        console.log(objCode);\n        result =   result +  objCode.code;\n    }\n    return result;\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var codes;\n    var codes_size = 0;\n    codes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var codes = [];\n    var codes_item;\n    for (var codes_i = 0; codes_i < codes_size; codes_i++) {\n        var codes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        codes.push(codes_item);\n    }\n\n    var encoded;\n    var encoded = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = decode(codes, encoded);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":326,"fileType":"javascript","requestStartTime":1517965469721}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction InsertNumber() {\n    document.\n    \n    \n}\n\n","offset":69,"fileType":"javascript","requestStartTime":1517965486577}}
{"body": {"column":16,"line":62,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction superStack(operations) {\n  \n  var Stack = function() {\n      this.count = 0;\n      this.storage = {};\n  \n \n    this.push = function(val) {\n      this.storage[this.count] = parseInt(val);\n      this.count++;\n    }\n  \n    this.pop = function() {\n      if(this.count === 0) {\n         return undefined;\n      }\n      \n      this.count--;\n      var result = this.storage[this.count];\n      delete this.storage[this.count];  \n      return result;\n    }\n    \n    this.inc = function(val) {\n        \n      let nums = val.split(\" \"); \n      let e = parseInt(nums[0]);\n      let k = parseInt(nums[1]);\n      for(let i = this.count-1; i >= this.count - e; i-- ){  \n        this.storage[i] += k;             \n      } \n      \n    }\n    \n    this.lastVal = function() {\n      if(this.count === 0) {\n        console.log('EMPTY')   \n      } else {  \n        console.log(this.storage[this.count-1]);  \n      }    \n    }\n  }\n  var newStack = new Stack();\n  \n    for(let i =0; i < operations.length; i+=1) {  \n      if(operations[i].slice(0,4) === \"push\"){\n        newStack.push(operations[i].slice(5)) \n        newStack.lastVal(); \n        console.  \n      } else if(operations[i] === \"pop\") {\n        newStack.pop(operations[i]);\n        newStack.lastVal();    \n      } else if(operations[i].slice(0,3) === \"inc\") {\n        newStack.inc(operations[i].slice(4));\n        newStack.lastVal();\n      }\n      \n    } \n   console.log(newStack.storage);\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _operations_size = 0;\n    _operations_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _operations = [];\n    var _operations_item;\n    for(var _operations_i = 0; _operations_i < _operations_size; _operations_i++) {\n        var _operations_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        _operations.push(_operations_item);\n    }\n    \n    superStack(_operations);\n    \n});\n\n","offset":1400,"fileType":"javascript","requestStartTime":1517965815120}}
{"body": {"column":49,"line":4,"wordToComplete":"Ideally, one should strip the input. ","code":"\n// Add your javascript here\nfunction InsertNumber() {\n    var number = document.getElementById(\"ValueEntryPoint\");\n    if() { //Ideally, one should strip the input. \n        AddNumber\n    }\n    \n}\n\n","offset":166,"fileType":"javascript","requestStartTime":1517965701656}}
{"body": {"column":62,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction AddElement(txtValue) {\n    var \n    \n}\n\nfunction InsertNumber() {\n    var txtValue = document.getElementById(\"ValueEntryPoint\").;\n    if(txtValue != \"\") { //Ideally, one should strip the input. \n        AddElement(txtValue);\n    }\n}\n\n","offset":168,"fileType":"javascript","requestStartTime":1517965766073}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction AddElement(txtValue) {\n    document.\n    \n}\n\nfunction InsertNumber() {\n    var txtValue = document.getElementById(\"ValueEntryPoint\").innerHTML;\n    if(txtValue != \"\") { //Ideally, one should strip the input. \n        AddElement(txtValue);\n    }\n}\n\n","offset":76,"fileType":"javascript","requestStartTime":1517965825730}}
{"body": {"column":38,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction AddElement(txtValue) {\n    var li = document.createElement(\"li\");\n    var listDisplaySection = document.\n}\n\nfunction InsertNumber() {\n    var txtValue = document.getElementById(\"ValueEntryPoint\").innerHTML;\n    if(txtValue != \"\") { //Ideally, one should strip the input. \n        AddElement(txtValue);\n    }\n}\n\n","offset":144,"fileType":"javascript","requestStartTime":1517965852373}}
{"body": {"column":27,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\n\nfunction AddElement(txtValue) {\n    var newChild = document.createElement(\"li\");\n    var listDisplaySection = document.getElementById(\"ListDisplaySection\");\n    var childCount = listDisplaySection.childElementCount;\n    if(childCount > 0 && childCount % 3 == 0) {\n        newChild.classList.\n    }\n    listDisplaySection.appendChild(newChild);\n    \n    \n}\n\nfunction InsertNumber() {\n    var txtValue = document.getElementById(\"ValueEntryPoint\").innerHTML;\n    if(txtValue != \"\") { //Ideally, one should strip the input. \n        AddElement(txtValue);\n    }\n}\n\n","offset":322,"fileType":"javascript","requestStartTime":1517966064313}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(acid_name) {\n    // Complete this function\n    if(acid_name.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":539,"fileType":"javascript","requestStartTime":1517966970939}}
{"body": {"column":50,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(acid_name) {\n    // Complete this function\n    if(acid_name.startsWith('hydro') && acid_name.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":572,"fileType":"javascript","requestStartTime":1517966989035}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return sum(.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":538,"fileType":"javascript","requestStartTime":1517967025484}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return sum(..)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":539,"fileType":"javascript","requestStartTime":1517967025720}}
{"body": {"column":18,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return sum(...)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":540,"fileType":"javascript","requestStartTime":1517967026626}}
{"body": {"column":24,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction acidNaming(acid_name) {\n    // Complete this function\n    if(acid_name.startsWith('hydro') && acid_name.endsWith('ic')) {\n        return 'non-metal acid'\n    } else if(acid_name.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    for(var a0 = 0; a0 < n; a0++){\n        var acid_name = readLine();\n        var result = acidNaming(acid_name);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":646,"fileType":"javascript","requestStartTime":1517967077693}}
{"body": {"column":14,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return ar.;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":536,"fileType":"javascript","requestStartTime":1517967081292}}
{"body": {"column":39,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n            console.log('test: ' + sentence);\n    \n    // Confirm that sentence meets requirements\n    var match = /^[A-Z][a-z ,]*\\.$/g;\n    var sMatch = match.test(sentence);\n         if (sMatch && sentence.length>=2 && sentence.length<=Math.pow(10,5)) {\n\n            //Split the string into individual words and punctuation\n            var wordAr = sentence.split(\" \");\n             \n            // Remove period\n            var noPeriod = wordAr[wordAr.length-1].substring(0,wordAr[wordAr.length-1].length-1);\n            wordAr[wordAr.length-1] = noPeriod;\n            \n    \n             //Determine lengths of words and sort accordingly\n             var sorted = [];\n             sorted = wordAr.sort(function (a,b){\n                 return a.length > b.length;\n              });\n             \n             // Capitalize first letter of first word\n             var firstLetter = sorted.join(' ').charAt(0).toUpperCase();\n             \n             // Make sure rest of words are lowercase\n             var restOf = sorted.join(' ').slice(1);\n             restOf = restOf.toLowerCase();\n             \n             // Combine\n             var sentenceA = firstLetter + restOf;\n             \n             // Remove commas\n             var sentenceB = sentenceA.\n             \n             // Add new punctuation\n             var fullSentence = sentence.concat('.');\n    \n            //Return\n            return fullSentence;\n             \n             \n    // Fails if input is not a sentence\n    } else {\n      console.log('Error: Input must be a sentence');\n    }\n}\n\nconsole.log(arrange('The bat, the cat, and the hat.'));\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1552,"fileType":"javascript","requestStartTime":1517967238717}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    document.\n}\n\n","offset":60,"fileType":"javascript","requestStartTime":1517967303578}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction gerar(){\n    document.\n}\n\n\n","offset":61,"fileType":"javascript","requestStartTime":1517967322125}}
{"body": {"column":6,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"Test\");\n    a.\n}\n\n","offset":98,"fileType":"javascript","requestStartTime":1517967331979}}
{"body": {"column":30,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction gerar(){\n    var nomeNote = Date.now().\n    document.createElement(\"\")\n}\n\n\n","offset":78,"fileType":"javascript","requestStartTime":1517967363055}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return let b =>\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":541,"fileType":"javascript","requestStartTime":1517967367228}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return let b =>\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":541,"fileType":"javascript","requestStartTime":1517967370657}}
{"body": {"column":30,"line":49,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n            console.log('test: ' + sentence);\n    \n    // Confirm that sentence meets requirements\n    var match = /^[A-Z][a-z ,]*\\.$/g;\n    var sMatch = match.test(sentence);\n         if (sMatch && sentence.length>=2 && sentence.length<=Math.pow(10,5)) {\n\n            //Split the string into individual words and punctuation\n            var wordAr = sentence.split(\" \");\n             \n            // Remove period\n            var noPeriod = wordAr[wordAr.length-1].substring(0,wordAr[wordAr.length-1].length-1);\n            wordAr[wordAr.length-1] = noPeriod;\n            \n    \n             //Determine lengths of words and sort accordingly\n             var sorted = [];\n             sorted = wordAr.sort(function (a,b){\n                 return a.length > b.length;\n              });\n             \n             // Capitalize first letter of first word\n             var firstLetter = sorted.join(' ').charAt(0).toUpperCase();\n             \n             // Make sure rest of words are lowercase\n             var restOf = sorted.join(' ').slice(1);\n             restOf = restOf.toLowerCase();\n             \n             // Combine\n             var sentenceA = firstLetter + restOf;\n             \n             // Remove commas\n             for (var i=0; i<sentenceA.length; i++){\n                if (sentenceA.(i)==','){\n                    var sentenceB = sentenceA.slice(i);\n                }\n             }\n             \n             // Add new punctuation\n             var fullSentence = sentenceB.concat('.');\n    \n            //Return\n            return fullSentence;\n             \n             \n    // Fails if input is not a sentence\n    } else {\n      console.log('Error: Input must be a sentence');\n    }\n}\n\nconsole.log(arrange('The bat, the cat, and the hat.'));\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1596,"fileType":"javascript","requestStartTime":1517967372676}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction minimalOperations(words) {\n    var listInt = [];\n    \n    words.forEach((word)=>{\n        var item = \"\";\n        var count = 0;\n        for(var index = 0; index < word.length; index ++ ){\n            \n            if(item.charAt(item.length>0?item.length-1:0) != word.charAt(index)){\n                item = item + word.charAt(index);\n            }else{\n                count +=1;\n                item = item + \" \";\n            }\n        }\n        listInt.push(count);\n    });\n    return listInt;\n}\n\nfunction validate(word,item){\n    var errors = 0;\n    if(item.charAt(item.length>0?item.length-1:0) != word.charAt(index)){\n        item = item + word.charAt(index);\n    }else{\n        errors = 1;\n        item = item + \" \";\n    }\n    if(word.)\n    return errors + validate(word.substr(1),item);\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var words;\n    var words_size = 0;\n    words_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var words = [];\n    var words_item;\n    for (var words_i = 0; words_i < words_size; words_i++) {\n        var words_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        words.push(words_item);\n    }\n\n\n    res = minimalOperations(words);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":1008,"fileType":"javascript","requestStartTime":1517967376459}}
{"body": {"column":16,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    const primaryDiagSum = 0;\n    const secondaryDiagSum = 0;\n    const n = a.\n    for(var x = 0; x<a.length; x++){\n      const row = a[x];\n      primaryDiagSum += row[x];\n      secondaryDiagSum += row[n-1-x]\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":570,"fileType":"javascript","requestStartTime":1517967390291}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return let b => b+= .\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":547,"fileType":"javascript","requestStartTime":1517967470787}}
{"body": {"column":26,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return let b => b+= ..\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":548,"fileType":"javascript","requestStartTime":1517967471009}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return let b => b+= ...\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":549,"fileType":"javascript","requestStartTime":1517967471337}}
{"body": {"column":13,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    document.\n}\n\n","offset":60,"fileType":"javascript","requestStartTime":1517967587315}}
{"body": {"column":23,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return let b => ar.;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":545,"fileType":"javascript","requestStartTime":1517967600931}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    console.\n    //return let b => ar.reduce();\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":534,"fileType":"javascript","requestStartTime":1517967620320}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    console.log(ar.)\n    //return let b => ar.reduce();\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":541,"fileType":"javascript","requestStartTime":1517967622284}}
{"body": {"column":42,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    document.getElementById(\"inputValue\").\n}\n\n","offset":89,"fileType":"javascript","requestStartTime":1517967627917}}
{"body": {"column":13,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nfunction gerar(){\n    var nota;\n    var nomeNote = Date.now().toString();\n    nota = document.createElement(\"div\");   \n    nota.type = \"text\";\n    nota.id = nomeNote;\n    document.\n    \n    document.getElementById(\"main\").appendChild(nota);\n}\n\n\n","offset":210,"fileType":"javascript","requestStartTime":1517967682935}}
{"body": {"column":22,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"inputValue\").value;\n    var ul = document.\n}\n\n","offset":126,"fileType":"javascript","requestStartTime":1517967740606}}
{"body": {"column":22,"line":5,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"inputValue\").value;\n    var ul = document.getElementById(\"list\");\n    var li = document.\n}\n\n","offset":172,"fileType":"javascript","requestStartTime":1517967758996}}
{"body": {"column":7,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"inputValue\").value;\n    var ul = document.getElementById(\"list\");\n    var li = document.createElement(\"li\");\n    \n    li.\n}\n\n","offset":205,"fileType":"javascript","requestStartTime":1517967773812}}
{"body": {"column":28,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"inputValue\").value;\n    var ul = document.getElementById(\"list\");\n    var li = document.createElement(\"li\");\n    \n    li.appendChild(document.)\n}\n\n","offset":226,"fileType":"javascript","requestStartTime":1517967780433}}
{"body": {"column":7,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"inputValue\").value;\n    var ul = document.getElementById(\"list\");\n    var li = document.createElement(\"li\");\n    \n    li.appendChild(document.createTextNode(a));\n    ul.\n}\n\n","offset":253,"fileType":"javascript","requestStartTime":1517967793472}}
{"body": {"column":16,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    let primaryDiagSum = 0;\n    let secondaryDiagSum = 0;\n    const n = a.length;\n    for(var x = 0; x<n; x++){\n      const row = a[x];\n      primaryDiagSum += row[x];\n      secondaryDiagSum += row[n-1-x]\n    }\n    return Math.;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":719,"fileType":"javascript","requestStartTime":1517967834239}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map.)\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":365,"fileType":"javascript","requestStartTime":1517967969971}}
{"body": {"column":9,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nfunction gerar(){\n    var nota;\n    var nomeNote = Date.now().toString();\n    nota = document.createElement(\"div\");   \n    nota.type = \"text\";\n    nota.id = nomeNote;\n    nota.\n    \n    var btnEdit;\n    btnEdit = document.createElement(\"div\");   \n    btnEdit.type = \"button\";\n    btnEdit.id = nomeNote;\n    \n    var btnDelete;\n    btnDelete = document.createElement(\"div\");   \n    btnDelete.type = \"button\";\n    btnDelete.id = nomeNote;\n    document.getElementById(\"nota\").appendChild(btnEdit);\n    document.getElementById(\"nota\").appendChild(btnDelete);\n    \n    document.getElementById(\"main\").appendChild(nota);\n}\n\n\n","offset":206,"fileType":"javascript","requestStartTime":1517968047217}}
{"body": {"column":15,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.)\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":434,"fileType":"javascript","requestStartTime":1517968043917}}
{"body": {"column":49,"line":48,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n            console.log('test: ' + sentence);\n    \n    // Confirm that sentence meets requirements\n    var match = /^[A-Z][a-z ,]*\\.$/g;\n    var sMatch = match.test(sentence);\n         if (sMatch && sentence.length>=2 && sentence.length<=Math.pow(10,5)) {\n\n            //Split the string into individual words and punctuation\n            var wordAr = sentence.split(\" \");\n             \n            // Remove period\n            var noPeriod = wordAr[wordAr.length-1].substring(0,wordAr[wordAr.length-1].length-1);\n            wordAr[wordAr.length-1] = noPeriod;\n            \n    \n             //Determine lengths of words and sort accordingly\n             var sorted = [];\n             sorted = wordAr.sort(function (a,b){\n                 return a.length > b.length;\n              });\n             \n             // Capitalize first letter of first word\n             var firstLetter = sorted.join(' ').charAt(0).toUpperCase();\n             \n             // Make sure rest of words are lowercase\n             var restOf = sorted.join(' ').slice(1);\n             restOf = restOf.toLowerCase();\n             \n             // Combine\n             var sentenceA = firstLetter + restOf;\n             \n             // Remove commas\n             var sentenceB = sentenceA.indexOf('.')\n             \n             console.log('sliced: ' + sentenceB);\n             \n             // Add new punctuation\n             var fullSentence = sentenceB.concat('.');\n    \n            //Return\n            return fullSentence;\n             \n             \n    // Fails if input is not a sentence\n    } else {\n      console.log('Error: Input must be a sentence');\n    }\n}\n\nconsole.log(arrange('The bat, the cat, and the hat.'));\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1562,"fileType":"javascript","requestStartTime":1517968058589}}
{"body": {"column":20,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.parseInt(string, 16))\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":488,"fileType":"javascript","requestStartTime":1517968112450}}
{"body": {"column":56,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === Math.)\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":524,"fileType":"javascript","requestStartTime":1517968162040}}
{"body": {"column":66,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === Math.sqrt(Math.))\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":534,"fileType":"javascript","requestStartTime":1517968166214}}
{"body": {"column":65,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === parseInt(Math.))\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":533,"fileType":"javascript","requestStartTime":1517968186451}}
{"body": {"column":18,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    // Complete this function\n    let min=0, max=0, result=[], i=0;\n    while(i<doors.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":586,"fileType":"javascript","requestStartTime":1517968229623}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var a = document.getElementById(\"inputValue\").value;\n    var ul = document.getElementById(\"list\");\n    var li = document.createElement(\"li\");\n    if(a != \"\"){\n    li.appendChild(document.createTextNode(a));\n    ul.appendChild(li);\n    document.\n    }\n}\n\n","offset":295,"fileType":"javascript","requestStartTime":1517968222238}}
{"body": {"column":13,"line":9,"wordToComplete":"","code":"\n// Add your javascript here\nfunction main(){\n    var inputValue = document.getElementById(\"inputValue\").value;\n    var ul = document.getElementById(\"list\");\n    var li = document.createElement(\"li\");\n    if(inputValue != \"\"){\n    li.appendChild(document.createTextNode(a));\n    ul.appendChild(li);\n    document.\n    }\n}\n\n","offset":313,"fileType":"javascript","requestStartTime":1517968248797}}
{"body": {"column":32,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === parseInt(Math.sqrt(parseInt(string, 16)))) {\n        map[string] = 1;\n        return 1;\n    }\n    let result = -1;\n    for (let i = 0; i <= string.)\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":666,"fileType":"javascript","requestStartTime":1517968297484}}
{"body": {"column":14,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    return ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":506,"fileType":"javascript","requestStartTime":1517968320121}}
{"body": {"column":34,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === parseInt(Math.sqrt(parseInt(string, 16)))) {\n        map[string] = 1;\n        return 1;\n    }\n    let result = -1;\n    for (let i = 0; i <= string.length; i++) {\n        const subString1 = string.\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":715,"fileType":"javascript","requestStartTime":1517968352038}}
{"body": {"column":34,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === parseInt(Math.sqrt(parseInt(string, 16)))) {\n        map[string] = 1;\n        return 1;\n    }\n    let result = -1;\n    for (let i = 0; i <= string.length; i++) {\n        const subString1 = string.slice(i);\n        const subString2 = string.\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":759,"fileType":"javascript","requestStartTime":1517968380616}}
{"body": {"column":26,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    let diag1 = 0;\n    let diag2 = 0;\n    for (let i = 0; i < a.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":556,"fileType":"javascript","requestStartTime":1517968486807}}
{"body": {"column":21,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    let diag1 = 0;\n    let diag2 = 0;\n    for (let i = 0; i < a.length; i++) {\n        diag1 += a[i];\n        diag2 += a[a.]\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":615,"fileType":"javascript","requestStartTime":1517968517975}}
{"body": {"column":12,"line":40,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    console.log(meal_cost)\n//    var tip = meal_cost * (tip_percent / 100);\n//    var tax = meal_cost * (tax_percent / 100);\n    console.('The total meal cost is 15 dollars.');\n}\n\n}\n","offset":1036,"fileType":"javascript","requestStartTime":1517968521629}}
{"body": {"column":17,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === parseInt(Math.sqrt(parseInt(string, 16)))) {\n        map[string] = 1;\n        return 1;\n    }\n    let result = -1;\n    for (let i = 1; i <= string.length; i++) {\n        const subString1 = string.slice(0, i);\n        const subString2 = string.slice(i);\n        if (Math.(parseInt(subString1, 16)))\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":789,"fileType":"javascript","requestStartTime":1517968544423}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    let diag1 = 0;\n    let diag2 = 0;\n    for (let i = 0; i < a.length; i++) {\n        diag1 += a[i];\n        diag2 += a[a.length - 1 - i];\n    }\n    return Math.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":654,"fileType":"javascript","requestStartTime":1517968563506}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    print.\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":139,"fileType":"javascript","requestStartTime":1517968591895}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    document.\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":142,"fileType":"javascript","requestStartTime":1517968598206}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    console.\n}\n}\n","offset":911,"fileType":"javascript","requestStartTime":1517968685549}}
{"body": {"column":33,"line":4,"wordToComplete":"Hello, World.\"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    document.write(\"Hello, World.\");\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":162,"fileType":"javascript","requestStartTime":1517968689225}}
{"body": {"column":21,"line":51,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n            console.log('test: ' + sentence);\n    \n    // Confirm that sentence meets requirements\n    var match = /^[A-Z][a-z ,]*\\.$/g;\n    var sMatch = match.test(sentence);\n         if (sMatch && sentence.length>=2 && sentence.length<=Math.pow(10,5)) {\n\n            //Split the string into individual words and punctuation\n            var wordAr = sentence.split(\" \");\n             \n            // Remove period\n            var noPeriod = wordAr[wordAr.length-1].substring(0,wordAr[wordAr.length-1].length-1);\n            wordAr[wordAr.length-1] = noPeriod;\n            \n    \n             //Determine lengths of words and sort accordingly\n             var sorted = [];\n             sorted = wordAr.sort(function (a,b){\n                 return a.length > b.length;\n              });\n             \n             // Capitalize first letter of first word\n             var firstLetter = sorted.join(' ').charAt(0).toUpperCase();\n             \n             // Make sure rest of words are lowercase\n             var restOf = sorted.join(' ').slice(1);\n             restOf = restOf.toLowerCase();\n             \n             // Combine\n             var sentenceA = firstLetter + restOf;\n             \n             // Remove commas\n             // While commas are in sentence, remove commas\n           //  var commas = sentenceA.search(',');\n             var isCommas = sentenceA.search(',');\n             console.\n             var noCommas = sentenceA.replace(',','');\n             var noCommas2 = noCommas.replace(',','');\n             console.log(noCommas2);\n          //   var comma = sentenceA.indexOf(',');\n           //  var sentenceB = sentenceA.slice()\n             \n        //     console.log('sliced: ' + sentenceB);\n             \n             // Add new punctuation\n             var fullSentence = sentenceB.concat('.');\n    \n            //Return\n            return fullSentence;\n             \n             \n    // Fails if input is not a sentence\n    } else {\n      console.log('Error: Input must be a sentence');\n    }\n}\n\nconsole.log(arrange('The bat, the cat, and the hat.'));\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1696,"fileType":"javascript","requestStartTime":1517968738932}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction my_atm(option) {\n    var input;\n    let input = 'withdraw';\n    switch(checkingAccount){\n        case 'withdraw':\n           console.log('You have selected to withdraw money from the account')           \n           break;\n           case 'deposit':\n           console.\n           break;\n           case /*insert the option names here */:\n           /* insert return statement here */\n           break;\n           default:\n           /* insert return statement here */\n           }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var option;\n    var option = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(option);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":497,"fileType":"javascript","requestStartTime":1517968813346}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    console.\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    console.log(\"asdf\")\n}\n}\n","offset":823,"fileType":"javascript","requestStartTime":1517968823306}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n    console.\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    console.log(readLine())\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    console.log(\"asdf\")\n}\n}\n","offset":511,"fileType":"javascript","requestStartTime":1517968851320}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    console.\n}\n}\n","offset":911,"fileType":"javascript","requestStartTime":1517968888286}}
{"body": {"column":41,"line":50,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n            console.log('test: ' + sentence);\n    \n    // Confirm that sentence meets requirements\n    var match = /^[A-Z][a-z ,]*\\.$/g;\n    var sMatch = match.test(sentence);\n         if (sMatch && sentence.length>=2 && sentence.length<=Math.pow(10,5)) {\n\n            //Split the string into individual words and punctuation\n            var wordAr = sentence.split(\" \");\n             \n            // Remove period\n            var noPeriod = wordAr[wordAr.length-1].substring(0,wordAr[wordAr.length-1].length-1);\n            wordAr[wordAr.length-1] = noPeriod;\n            \n    \n             //Determine lengths of words and sort accordingly\n             var sorted = [];\n             sorted = wordAr.sort(function (a,b){\n                 return a.length > b.length;\n              });\n             \n             // Capitalize first letter of first word\n             var firstLetter = sorted.join(' ').charAt(0).toUpperCase();\n             \n             // Make sure rest of words are lowercase\n             var restOf = sorted.join(' ').slice(1);\n             restOf = restOf.toLowerCase();\n             \n             // Combine\n             var sentence = firstLetter + restOf;\n             \n             // Remove commas\n             var isCommas = sentence.search(',');\n             while(isCommas!==-1){\n                 var noCommas = sentence.\n             }\n             console.log(isCommas);\n             var noCommas = sentenceA.replace(',','');\n             console.log(isCommas);\n             var noCommas2 = noCommas.replace(',','');\n             console.log(noCommas2);\n             console.log(isCommas);\n          //   var comma = sentenceA.indexOf(',');\n           //  var sentenceB = sentenceA.slice()\n             \n        //     console.log('sliced: ' + sentenceB);\n             \n             // Add new punctuation\n             var fullSentence = sentenceB.concat('.');\n    \n            //Return\n            return fullSentence;\n             \n             \n    // Fails if input is not a sentence\n    } else {\n      console.log('Error: Input must be a sentence');\n    }\n}\n\nconsole.log(arrange('The bat, the cat, and the hat.'));\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1638,"fileType":"javascript","requestStartTime":1517968926994}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solveMeFirst(a, b) {\n  // Hint: Type return a+b below   \n}\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    \n    let t = solveMeFirst();\n    console.\n}\n}\n","offset":1013,"fileType":"javascript","requestStartTime":1517968938589}}
{"body": {"column":10,"line":4,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    print.\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":139,"fileType":"javascript","requestStartTime":1517969040248}}
{"body": {"column":27,"line":4,"wordToComplete":"Hello, World.\"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    print.ln(\"Hello, World.\");\n    // Write the second line of output that prints the contents of 'inputString' here.\n} \n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":156,"fileType":"javascript","requestStartTime":1517969049847}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) {\n    return getMinHelper(s, {});\n}\n\nfunction getMinHelper(string, map) {\n    if (map[string] !== null) {\n        return map[string];\n    }\n    if (string.length === 0) {\n        return 0;\n    } else if (Math.sqrt(parseInt(string, 16)) === parseInt(Math.sqrt(parseInt(string, 16)))) {\n        map[string] = 1;\n        return 1;\n    }\n    let result = -1;\n    for (let i = 1; i <= string.length+1; i++) {\n        const subString1 = string.slice(0, i);\n        const subString2 = string.slice(i);\n        if (Math.sqrt(parseInt(subString1, 16)) === parseInt(Math.sqrt(parseInt(subString1, 16)))) {\n            map[subString1] = 1;\n            next = getMinHelper(subString2, map);\n            map[subString2] = next;\n            if ((next > 0) && (result < 0 || result > (1 + next))) {\n                result = 1 + next;\n            }\n        }\n    }\n    console.\n    return result;\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":1140,"fileType":"javascript","requestStartTime":1517969314113}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(num) {\n for (var i = 1; i <= num; i++) {\n     if (i % 3 === 0) {\n         console.\n     }\n }\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _num = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    fizzBuzz(_num);\n    \n});\n\n","offset":360,"fileType":"javascript","requestStartTime":1517969377253}}
{"body": {"column":17,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(num) {\n for (var i = 1; i <= num; i++) {\n     if (i % 3 === 0) {\n         console.log('Fizz');\n     }else if (i % 5 === 0) {\n         console.\n     }\n }\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _num = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    fizzBuzz(_num);\n    \n});\n\n","offset":420,"fileType":"javascript","requestStartTime":1517969403134}}
{"body": {"column":17,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(num) {\n for (var i = 1; i <= num; i++) {\n     if (i % 5 === 0 && i % 3 === 0) {\n         console.\n     }\n    } else if (i % 3 === 0) {\n         console.log('Fizz');\n     }else if (i % 5 === 0) {\n         console.log('Buzz')\n     }\n }\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _num = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    fizzBuzz(_num);\n    \n});\n\n","offset":375,"fileType":"javascript","requestStartTime":1517969457094}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(num) {\n for (var i = 1; i <= num; i++) {\n     if (i % 5 === 0 && i % 3 === 0) {\n         console.log('FizzBuzz');\n    } else if (i % 3 === 0) {\n         console.log('Fizz');\n     }else if (i % 5 === 0) {\n         console.log('Buzz')\n     } else {\n         console.\n     }\n }\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _num = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    fizzBuzz(_num);\n    \n});\n\n","offset":542,"fileType":"javascript","requestStartTime":1517969479135}}
{"body": {"column":39,"line":24,"wordToComplete":"0.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) { \n    return getMinHelper(s, {}); \n} \nfunction getMinHelper(string, map) { \n    if (map[string] !== null) { \n        return map[string]; \n    } \n    if (string.length === 0) { \n        return 0; \n    } else if (parseInt(string, 16)**0. === parseInt(Math.sqrt(parseInt(string, 16)))) {\n        map[string] = 1; return 1; \n    } \n    let result = -1; \n    for (let i = 1; i <= string.length+1; i++) { \n        const subString1 = string.slice(0, i); \n        const subString2 = string.slice(i); \n        if (Math.sqrt(parseInt(subString1, 16)) === parseInt(Math.sqrt(parseInt(subString1, 16)))) { \n            map[subString1] = 1; \n            next = getMinHelper(subString2, map); \n            map[subString2] = next; \n            if ((next > 0) && (result < 0 || result > (1 + next))) { result = 1 + next; } \n        } \n    } \n    console.log(result); \n    return result; \n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":515,"fileType":"javascript","requestStartTime":1517970100402}}
{"body": {"column":78,"line":24,"wordToComplete":"0.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) { \n    return getMinHelper(s, {}); \n} \nfunction getMinHelper(string, map) { \n    if (map[string] !== null) { \n        return map[string]; \n    } \n    if (string.length === 0) { \n        return 0; \n    } else if (parseInt(string, 16)**0.5 === parseInt(parseInt(string, 16)**0.)) {\n        map[string] = 1; return 1; \n    } \n    let result = -1; \n    for (let i = 1; i <= string.length+1; i++) { \n        const subString1 = string.slice(0, i); \n        const subString2 = string.slice(i); \n        if (Math.sqrt(parseInt(subString1, 16)) === parseInt(Math.sqrt(parseInt(subString1, 16)))) { \n            map[subString1] = 1; \n            next = getMinHelper(subString2, map); \n            map[subString2] = next; \n            if ((next > 0) && (result < 0 || result > (1 + next))) { result = 1 + next; } \n        } \n    } \n    console.log(result); \n    return result; \n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":554,"fileType":"javascript","requestStartTime":1517970111705}}
{"body": {"column":40,"line":31,"wordToComplete":"0.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) { \n    return getMinHelper(s, {}); \n} \nfunction getMinHelper(string, map) { \n    if (map[string] !== null) { \n        return map[string]; \n    } \n    if (string.length === 0) { \n        return 0; \n    } else if (parseInt(string, 16)**0.5 === parseInt(parseInt(string, 16)**0.5)) {\n        map[string] = 1; return 1; \n    } \n    let result = -1; \n    for (let i = 1; i <= string.length+1; i++) { \n        const subString1 = string.slice(0, i); \n        const subString2 = string.slice(i); \n        if (parseInt(subString1, 16)**0. === parseInt(Math.sqrt(parseInt(subString1, 16)))) { \n            map[subString1] = 1; \n            next = getMinHelper(subString2, map); \n            map[subString2] = next; \n            if ((next > 0) && (result < 0 || result > (1 + next))) { result = 1 + next; } \n        } \n    } \n    console.log(result); \n    return result; \n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":808,"fileType":"javascript","requestStartTime":1517970128130}}
{"body": {"column":83,"line":31,"wordToComplete":"0.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getMin(s) { \n    return getMinHelper(s, {}); \n} \nfunction getMinHelper(string, map) { \n    if (map[string] !== null) { \n        return map[string]; \n    } \n    if (string.length === 0) { \n        return 0; \n    } else if (parseInt(string, 16)**0.5 === parseInt(parseInt(string, 16)**0.5)) {\n        map[string] = 1; return 1; \n    } \n    let result = -1; \n    for (let i = 1; i <= string.length+1; i++) { \n        const subString1 = string.slice(0, i); \n        const subString2 = string.slice(i); \n        if (parseInt(subString1, 16)**0.5 === parseInt(parseInt(subString1, 16)**0.)) { \n            map[subString1] = 1; \n            next = getMinHelper(subString2, map); \n            map[subString2] = next; \n            if ((next > 0) && (result < 0 || result > (1 + next))) { result = 1 + next; } \n        } \n    } \n    console.log(result); \n    return result; \n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = getMin(s);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":851,"fileType":"javascript","requestStartTime":1517970135977}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517970194269}}
{"body": {"column":27,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var bot_pos = lines[1].\n    var grid = [];\n    for(var i = 2; i <= dimension + 1; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(dimension, grid);\n}\n\nfunction displayPathtoPrincess(dimension, grid)\n{\n    // Your Code here\n    var princess = {row: null, col: null};\n    var bot = {row: null, col: null};\n    \n    if(grid[0][0] == 'p') {\n        princess.row = 0;\n        princess.col = 0;\n    } else if (grid[0][dimension - 1] == 'p') {\n        princess.row = 0;\n        princess.col = dimension - 1;\n    } else if (grid[dimension - 1][0] == 'p') {\n        princess.row = dimension - 1;\n        princess.col = 0;\n    } else if (grid[dimension - 1][dimension - 1] == 'p') {\n        princess.row = dimension - 1;\n        princess.col = dimension - 1;\n    }\n    \n    for(var i = 0; i < dimension; i++) {\n        for(var j = 0; j < dimension; j++) {\n            if(grid[i][j] == 'm') {\n                bot.row = i;\n                bot.col = j;\n                j = dimension;\n                i = dimension;\n            }\n        }\n    }\n    \n    var up_down = princess.row <= bot.row ? \"UP\" : \"DOWN\";\n    var left_right = princess.col <= bot.col ? \"LEFT\" : \"RIGHT\";\n    \n    while(princess.row != bot.row) {\n        console.log(up_down);\n        bot.row += (up_down == \"UP\" ? -1 : 1); \n    }\n    \n    while(princess.col != bot.col) {\n        console.log(left_right);\n        bot.col += (left_right == \"LEFT\" ? -1 : 1);\n    }\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":134,"fileType":"javascript","requestStartTime":1517970416878}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var bot_pos = lines[1].split(' ');\n    var bot = {row: bot_pos[0], col: bot_pos[1]};\n    var grid = [];\n    for(var i = 2; i <= dimension + 1; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(bot, dimension, grid);\n}\n\nfunction displayPathtoPrincess(bot, dimension, grid)\n{\n    // Your Code here\n    var princess = {row: null, col: null};\n    \n    for(var i = 0; i < dimension; i++) {\n        for(var j = 0; j < dimension; j++) {\n            if(grid[i][j] == 'p') {\n                princess.row = i;\n                princess.col = j;\n                j = dimension;\n                i = dimension;\n            }\n        }\n    }\n    \n    var up_down = princess.row <= bot.row ? \"UP\" : \"DOWN\";\n    var left_right = princess.col <= bot.col ? \"LEFT\" : \"RIGHT\";\n    \n    console.\n    \n    while(princess.row != bot.row) {\n        console.log(up_down);\n        bot.row += (up_down == \"UP\" ? -1 : 1); \n    }\n    \n    while(princess.col != bot.col) {\n        console.log(left_right);\n        bot.col += (left_right == \"LEFT\" ? -1 : 1);\n    }\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":905,"fileType":"javascript","requestStartTime":1517970531009}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var bot_pos = lines[1].split(' ');\n    var bot = {row: bot_pos[0], col: bot_pos[1]};\n    var grid = [];\n    for(var i = 2; i <= dimension + 1; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(bot, dimension, grid);\n}\n\nfunction displayPathtoPrincess(b, dimension, grid)\n{\n    // Your Code here\n    var princess = {row: null, col: null};\n    var bot = b;\n    \n    console.\n    \n    for(var i = 0; i < dimension; i++) {\n        for(var j = 0; j < dimension; j++) {\n            if(grid[i][j] == 'p') {\n                princess.row = i;\n                princess.col = j;\n                j = dimension;\n                i = dimension;\n            }\n        }\n    }\n    \n    var up_down = princess.row <= bot.row ? \"UP\" : \"DOWN\";\n    var left_right = princess.col <= bot.col ? \"LEFT\" : \"RIGHT\";\n    \n    while(princess.row != bot.row) {\n        console.log(up_down);\n        bot.row += (up_down == \"UP\" ? -1 : 1); \n    }\n    \n    while(princess.col != bot.col) {\n        console.log(left_right);\n        bot.col += (left_right == \"LEFT\" ? -1 : 1);\n    }\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":504,"fileType":"javascript","requestStartTime":1517970555046}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nfunction processData(input) {\n    var lines = input.split('\\n');\n    var dimension = parseInt(lines[0]);\n    var bot_pos = lines[1].split(' ');\n    var bot = {row: bot_pos[0], col: bot_pos[1]};\n    var grid = [];\n    for(var i = 2; i <= dimension + 1; ++i)\n    {\n        grid.push(lines[i]);\n    }\n    displayPathtoPrincess(bot, dimension, grid);\n}\n\nfunction displayPathtoPrincess(b, dimension, grid)\n{\n    // Your Code here\n    var princess = {row: null, col: null};\n    var bot = b;\n    \n    console.log(bot;)\n    \n    for(var i = 0; i < dimension; i++) {\n        for(var j = 0; j < dimension; j++) {\n            if(grid[i][j] == 'p') {\n                princess.row = i;\n                princess.col = j;\n                j = dimension;\n                i = dimension;\n            }\n        }\n    }\n    \n    console.\n    \n    var up_down = princess.row <= bot.row ? \"UP\" : \"DOWN\";\n    var left_right = princess.col <= bot.col ? \"LEFT\" : \"RIGHT\";\n    \n    while(princess.row != bot.row) {\n        console.log(up_down);\n        bot.row += (up_down == \"UP\" ? -1 : 1); \n    }\n    \n    while(princess.col != bot.col) {\n        console.log(left_right);\n        bot.col += (left_right == \"LEFT\" ? -1 : 1);\n    }\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":818,"fileType":"javascript","requestStartTime":1517970559844}}
{"body": {"column":22,"line":1,"wordToComplete":"","code":"\n  var butt = document.\n\n","offset":24,"fileType":"javascript","requestStartTime":1517970776414}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"\n  var butt = document.creatElement('button');   \n    butt.\n\n","offset":60,"fileType":"javascript","requestStartTime":1517970824468}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n    var newArray [];\n    for (var x = 0; x < a.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":336,"fileType":"javascript","requestStartTime":1517970832494}}
{"body": {"column":17,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n    var newArray [];\n    for (var x = 0; x < a.length; x++) {\n        newArray.a[x]\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":368,"fileType":"javascript","requestStartTime":1517970858127}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n    var newArray [];\n    for (var x = 0; x < a.length; x++) {\n        newArray.push(a[x]);\n    }\n    for (var z = 0; z < b.length; z++) {\n        newArray.push(a[x]);\n    }\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":474,"fileType":"javascript","requestStartTime":1517970894377}}
{"body": {"column":35,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction staircase(n) {\n    let output = '';\n    for (let i = 0; i < n; i++) {\n        output += new Array(n - i). + new Array(i) + '\\n';\n    }\n    return output;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    console.log(staircase(n));\n}\n\n\n","offset":573,"fileType":"javascript","requestStartTime":1517970991278}}
{"body": {"column":60,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction staircase(n) {\n    let output = '';\n    for (let i = 0; i < n; i++) {\n        output += new Array(n - i).join(' ') + new Array(i). + '\\n';\n    }\n    return output;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    console.log(staircase(n));\n}\n\n\n","offset":598,"fileType":"javascript","requestStartTime":1517970996192}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\n  var butt = document.creatElement('button');   \n    butt.innerHTML = func();\n\nfunctions func(){\n    btn.\n}\n\n","offset":107,"fileType":"javascript","requestStartTime":1517971097850}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    min = 0;\n    doorArray = doors.toString().split();\n    max = doorArray. \n    return doorArray;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":575,"fileType":"javascript","requestStartTime":1517971100890}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\n  var butt = document.creatElement('button');   \n    butt.innerHTML = \"0\";\n    butt.\n\n\n","offset":86,"fileType":"javascript","requestStartTime":1517971121105}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    min = 0;\n    doorArray = doors.toString().split();\n    max = doorArray.reduce((a,b)=>parseInt(a)+parseInt(b));\n    console.\n    return doorArray;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":627,"fileType":"javascript","requestStartTime":1517971129011}}
{"body": {"column":13,"line":4,"wordToComplete":"","code":"\n  var butt = document.creatElement('button');   \n    butt.innerHTML = \"0\";\n    butt.onclick = function{\n        butt.\n    }\n\n\n","offset":119,"fileType":"javascript","requestStartTime":1517971152403}}
{"body": {"column":13,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction mergeArrays(a, b) {\n    var newArray = new Array();\n    for (var x = 0; x < a.length; x++) {\n        newArray.push(a[x]);\n    }\n    for (var z = 0; z < b.length; z++) {\n        newArray.push(b[z]);\n    }\n    console.log('New array = ', newArray);\n    newArray.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var b;\n    var b_size = 0;\n    b_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var b = [];\n    var b_item;\n    for (var b_i = 0; b_i < b_size; b_i++) {\n        var b_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        b.push(b_item);\n    }\n\n\n    res = mergeArrays(a, b);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":529,"fileType":"javascript","requestStartTime":1517971231250}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    console.\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1517971266031}}
{"body": {"column":31,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n   var lowerCase = sentence.toLowerCase(); \n   var arrLower = lowerCase.split(' ');\n   var strLength = arrLower[0].;\n    \n   for(let i = 0; i < arrLower.length; i+=1) {\n       \n   } \n    \n   return arrLower;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":404,"fileType":"javascript","requestStartTime":1517971334119}}
{"body": {"column":41,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    min = 0;\n    doorArray = doors.toString().split().;\n    max = doorArray.reduce((a,b)=> {return parseInt(a)+parseInt(b)});\n    console.log(max);\n    return doorArray;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":554,"fileType":"javascript","requestStartTime":1517971354121}}
{"body": {"column":49,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    min = 0;\n    doorArray = doors.toString().split().map(e =>);\n    max = doorArray.reduce((a,b)=> {return parseInt(a)+parseInt(b)});\n    console.log(max);\n    return doorArray;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":562,"fileType":"javascript","requestStartTime":1517971362730}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    var lines = input.split('\\n');\n    var player = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= 8; i++)\n    {\n        grid.push(lines[i]);\n    }\n    \n    for(var i = 0; i < 7; i++) {\n        for(var j = 0; j < 7; j++) {\n            if(grid[i].)\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":321,"fileType":"javascript","requestStartTime":1517971499218}}
{"body": {"column":48,"line":13,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    var lines = input.split('\\n');\n    var player = parseInt(lines[0]);\n    var grid = [];\n    for(var i = 1; i <= 8; i++)\n    {\n        grid.push(lines[i]);\n    }\n    \n    for(var i = 0; i < 7; i++) {\n        for(var j = 0; j < 7; j++) {\n            if(grid[i].charAt(j) = '1') console.\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":346,"fileType":"javascript","requestStartTime":1517971511088}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction missingWords(s, t) {\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var t;\n    var t = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = missingWords(s, t);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":302,"fileType":"javascript","requestStartTime":1517971715028}}
{"body": {"column":16,"line":1,"wordToComplete":"","code":"\nbtns = document.\n\n","offset":18,"fileType":"javascript","requestStartTime":1517971737379}}
{"body": {"column":41,"line":1,"wordToComplete":"button.\"","code":"\nbtns = document.querySelectorAll(\"button.\")\n\n","offset":43,"fileType":"javascript","requestStartTime":1517971743090}}
{"body": {"column":5,"line":3,"wordToComplete":"","code":"\nbtns = document.querySelectorAll(\"button.w\")\n\nbtns.\n\n","offset":53,"fileType":"javascript","requestStartTime":1517971747672}}
{"body": {"column":19,"line":2,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.\nbtns.addEventListener(\"click\", function() {\n    \n})\n\n","offset":70,"fileType":"javascript","requestStartTime":1517971779110}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nbtns.addEventListener(\"click\", function() {\n    res.\n})\n\n","offset":150,"fileType":"javascript","requestStartTime":1517971793128}}
{"body": {"column":24,"line":4,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nbtns.addEventListener(\"click\", function() {\n    res.innerHTML = res.\n})\n\n","offset":166,"fileType":"javascript","requestStartTime":1517971803069}}
{"body": {"column":41,"line":4,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nbtns.addEventListener(\"click\", function() {\n    res.innerHTML = res.innerHTML + this.\n})\n\n","offset":183,"fileType":"javascript","requestStartTime":1517971807156}}
{"body": {"column":8,"line":3,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.\nbtns.addEventListener(\"click\", function() {\n    res.innerHTML = res.innerHTML + this.innerHTML\n})\n\n","offset":106,"fileType":"javascript","requestStartTime":1517971848777}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction missingWords(s, t) {\n    console.log('s = ', s)\n    console.log('t = ', t)\n    var first = str.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var t;\n    var t = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = missingWords(s, t);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":364,"fileType":"javascript","requestStartTime":1517971860029}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction missingWords(s, t) {\n    console.log('s = ', s)\n    console.log('t = ', t)\n    var first = s.split(\" \");\n    var second = s.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var t;\n    var t = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = missingWords(s, t);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":393,"fileType":"javascript","requestStartTime":1517971877409}}
{"body": {"column":16,"line":6,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.\n        res.innerHTML = res.innerHTML + this.innerHTML\n    })\n})\n\n","offset":202,"fileType":"javascript","requestStartTime":1517971921474}}
{"body": {"column":24,"line":6,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.log(res.)\n        res.innerHTML = res.innerHTML + this.innerHTML\n    })\n})\n\n","offset":210,"fileType":"javascript","requestStartTime":1517971922668}}
{"body": {"column":27,"line":7,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.log(res.innerHTML + )\n        let existing = res.\n        res.innerHTML = res.innerHTML + this.innerHTML\n    })\n})\n\n","offset":251,"fileType":"javascript","requestStartTime":1517971934040}}
{"body": {"column":43,"line":7,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.log(res.innerHTML + )\n        let existing = res.innerHTML ? res.\n        res.innerHTML = res.innerHTML + this.innerHTML\n    })\n})\n\n","offset":267,"fileType":"javascript","requestStartTime":1517971937387}}
{"body": {"column":28,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.\n    return doorArray;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":528,"fileType":"javascript","requestStartTime":1517971941015}}
{"body": {"column":44,"line":7,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.log(res.innerHTML + )\n        res.innerHTML = res.innerHTML ? res.+ this.innerHTML\n    })\n})\n\n","offset":268,"fileType":"javascript","requestStartTime":1517971950863}}
{"body": {"column":78,"line":7,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.log(res.innerHTML + )\n        res.innerHTML = res.innerHTML ? res.innerHTML + this.innerHTML : this.\n    })\n})\n\n","offset":302,"fileType":"javascript","requestStartTime":1517971954585}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    console. lockedDoorCount;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":562,"fileType":"javascript","requestStartTime":1517971971534}}
{"body": {"column":40,"line":6,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    addEventListener(\"click\", function() {\n        console.log(res.innerHTML, this. )\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":226,"fileType":"javascript","requestStartTime":1517971972340}}
{"body": {"column":30,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction missingWords(s, t) {\n \n    var first = s.split(\" \");\n    var second = t.split(\" \");\n    console.log('s = ', first)\n    console.log('t = ', second)\n    for (var x = 0; x < first.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var t;\n    var t = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = missingWords(s, t);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":446,"fileType":"javascript","requestStartTime":1517971985153}}
{"body": {"column":13,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n   var lowerCase = sentence.toLowerCase(); \n   var arrLower = lowerCase.split(' ');\n   var minLength = arrLower[0].length;\n   var result = []; \n    \n   for(let i = 1; i < arrLower.length; i+=1) {\n      if(arrLower[i].length < minLength) {\n          minLength = arrLower[i].length;\n          \n      }\n      result. \n   } \n    \n   return strLength;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":602,"fileType":"javascript","requestStartTime":1517971995917}}
{"body": {"column":7,"line":5,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":150,"fileType":"javascript","requestStartTime":1517972044119}}
{"body": {"column":19,"line":3,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":117,"fileType":"javascript","requestStartTime":1517972082600}}
{"body": {"column":21,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction missingWords(s, t) {\n \n    var first = s.split(\" \");\n    var second = t.split(\" \");\n    console.log('s = ', first)\n    console.log('t = ', second)\n    var flag = 0;\n    var newArray = new Array(); \n    for (var x = 0; x < first.length; x++) {\n        if (first[x] !== second[x+flag]){\n            newArray.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var t;\n    var t = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = missingWords(s, t);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":575,"fileType":"javascript","requestStartTime":1517972086423}}
{"body": {"column":4,"line":4,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#clr\")[0]\nclr.\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":149,"fileType":"javascript","requestStartTime":1517972096379}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    min = 0;\n    for (door in doors) {\n        console.\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":605,"fileType":"javascript","requestStartTime":1517972100413}}
{"body": {"column":8,"line":5,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#clr\")[0]\nclr.addEventListener(\"click\", function() {\n    res.\n})\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":196,"fileType":"javascript","requestStartTime":1517972107820}}
{"body": {"column":184,"line":16,"wordToComplete":"this doesn't return binary and I quit math at trig and have no comp sci degree. To my defense outside of nery conversation binary has never come up in my 17 year carrier. YAGNI.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nconst rearrange = (elements) => {\n    // this doesn't return binary and I quit math at trig and have no comp sci degree. To my defense outside of nery conversation binary has never come up in my 17 year carrier. YAGNI.\n    const base2Elements = elements.sort().map( base10 =>`${parseInt(base10, 2)}` );\n    const count1s = (binaryString) => binaryString.length - binaryString.replace(/1/g, '').length;\n    const output = base2Elements.sort((a, b) => {\n        return count1s(a) < count1s(b); \n    });\n    return output.map((base2)=>parseInt(base2, 10));\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var elements;\n    var elements_size = 0;\n    elements_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var elements = [];\n    var elements_item;\n    for (var elements_i = 0; elements_i < elements_size; elements_i++) {\n        var elements_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        elements.push(elements_item);\n    }\n\n\n    res = rearrange(elements);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":478,"fileType":"javascript","requestStartTime":1517972116872}}
{"body": {"column":19,"line":4,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#clr\")[0]\nlet eql = documnet.\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":164,"fileType":"javascript","requestStartTime":1517972117571}}
{"body": {"column":4,"line":8,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#btnClr\")[0]\nlet eql = documnet.querySelectorAll(\"#btnEql\")[0]\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\neql.\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":271,"fileType":"javascript","requestStartTime":1517972137953}}
{"body": {"column":18,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    min = 0;\n    for (door in doors) {\n        if (doors.)\n    }\n    return [0,0,0];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":607,"fileType":"javascript","requestStartTime":1517972155199}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#btnClr\")[0]\nlet eql = documnet.querySelectorAll(\"#btnEql\")[0]\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\neql.addEventListener(\"click\", function() {\n    let equation = res.\n})\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":333,"fileType":"javascript","requestStartTime":1517972160426}}
{"body": {"column":12,"line":10,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#btnClr\")[0]\nlet eql = documnet.querySelectorAll(\"#btnEql\")[0]\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.\n})\nconsole.log(btns, res)\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":355,"fileType":"javascript","requestStartTime":1517972164453}}
{"body": {"column":18,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    min = 0;\n    for (door in doors) {\n        if (doors.)\n    }\n    return [0,0,0];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":607,"fileType":"javascript","requestStartTime":1517972177390}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    min = 0;\n    for (door in doors) {\n        if (doors.door === 1) {\n            console.\n        }\n    }\n    return [0,0,0];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":641,"fileType":"javascript","requestStartTime":1517972184298}}
{"body": {"column":23,"line":13,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#btnClr\")[0]\nlet eql = documnet.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":394,"fileType":"javascript","requestStartTime":1517972250210}}
{"body": {"column":32,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    \n    let arr = input.split('\\n').;\n    // ['a','b','c','d']\n    \n    console.log(arr)\n    \n    let oddArr = arr.filter((item, idx) => {\n       return idx % 2; \n    });\n    console.log(oddArr);\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":96,"fileType":"javascript","requestStartTime":1517972257262}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    min = 0;\n    for (door in doors) {\n        if (doors[door] === 1) {\n            min += 1;\n            doors[door] = 0;\n            doors[door+1] = 0;\n        }\n    }\n    console.\n    return [0,0,0];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":732,"fileType":"javascript","requestStartTime":1517972274447}}
{"body": {"column":22,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    lockedDoorCount = doors.reduce((a,b) => a+b);\n    min = 0;\n    for (door in doors) {\n        if (doors[door] === 1) {\n            min += 1;\n            doors[door] = 0;\n            if (doors.)\n            doors[door+1] = 0;\n        }\n    }\n    console.log()\n    return [0,0,0];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":695,"fileType":"javascript","requestStartTime":1517972291397}}
{"body": {"column":11,"line":14,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#btnClr\")[0]\nlet eql = documnet.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    consol.\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":423,"fileType":"javascript","requestStartTime":1517972321651}}
{"body": {"column":12,"line":14,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = documnet.querySelectorAll(\"#btnClr\")[0]\nlet eql = documnet.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":424,"fileType":"javascript","requestStartTime":1517972322317}}
{"body": {"column":22,"line":20,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        let cur = res.\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":553,"fileType":"javascript","requestStartTime":1517972411332}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        let cur = res.innerHTML\n        if (cur.)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":579,"fileType":"javascript","requestStartTime":1517972423240}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        let cur = res.innerHTML\n        if (cur[cur.])\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":583,"fileType":"javascript","requestStartTime":1517972428843}}
{"body": {"column":32,"line":21,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\n\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        let cur = res.innerHTML\n        if (cur[cur.length - 1].)\n        res.innerHTML = res.innerHTML ? \n                    res.innerHTML + this.innerHTML : \n                    this.innerHTML\n    })\n})\n\n","offset":595,"fileType":"javascript","requestStartTime":1517972433023}}
{"body": {"column":43,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\n/* initial failure without cheating\nconst rearrange = (elements) => {\n    // this doesn't return binary and I quit math at trig and have no comp sci degree. To my defense outside of nery conversation binary has never come up in my 17 year carrier. YAGNI.\n    const base2Elements = elements.sort().map( base10 =>`${parseInt(base10, 2)}` );\n    const count1s = (binaryString) => binaryString.length - binaryString.replace(/1/g, '').length;\n    const output = base2Elements.sort((a, b) => {\n        return count1s(a) < count1s(b); \n    });\n    return output.map((base2)=>parseInt(base2, 10));\n}\n*/\n\n// code where I looked up how to get binary numbers in Javascript (light cheating)\nconst convertToBin = (int) => ((int >>> 0).\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var elements;\n    var elements_size = 0;\n    elements_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var elements = [];\n    var elements_item;\n    for (var elements_i = 0; elements_i < elements_size; elements_i++) {\n        var elements_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        elements.push(elements_item);\n    }\n\n\n    res = rearrange(elements);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":982,"fileType":"javascript","requestStartTime":1517972468204}}
{"body": {"column":30,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    let lockedDoorCount = doors.reduce((a,b) => a+b);\n    let min = 0;\n    for (let i = 0; i < doors.) {\n        if (doors[door] === 1) {\n            min += 1;\n            doors[door] = 0;\n            if (doors.length >= door+1)\n                doors[door+1] = 0;\n        }\n    }\n    console.log(min);\n    return [0,0,0];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":601,"fileType":"javascript","requestStartTime":1517972473895}}
{"body": {"column":25,"line":21,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        let cur = res.innerHTML\n        if (!cur && this.) {\n            cur \n        }\n        if (cur[cur.length - 1] in ) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":618,"fileType":"javascript","requestStartTime":1517972517910}}
{"body": {"column":23,"line":22,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        console.log(this)\n        let cur = res.innerHTML\n        if (!cur && !(this.innerHTML in ops) {\n            cur = this.\n        }\n        if (cur[cur.length - 1] in ) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":663,"fileType":"javascript","requestStartTime":1517972530001}}
{"body": {"column":15,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    let max = doors.reduce((a,b) => a+b);\n    let min = 0;\n    for (let i = 0; i < doors.length; i++) {\n        if (doors[i] === 1) {\n            min += 1;\n            doors[i] = 0;\n            if (doors.length >= i+1)\n                doors[i+1] = 0;\n        }\n    }\n    return min. + \" \" + max;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":782,"fileType":"javascript","requestStartTime":1517972558380}}
{"body": {"column":38,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    let max = doors.reduce((a,b) => a+b);\n    let min = 0;\n    for (let i = 0; i < doors.length; i++) {\n        if (doors[i] === 1) {\n            min += 1;\n            doors[i] = 0;\n            if (doors.length >= i+1)\n                doors[i+1] = 0;\n        }\n    }\n    return min.toString() + \" \" + max.;\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":805,"fileType":"javascript","requestStartTime":1517972562628}}
{"body": {"column":12,"line":28,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    \n    // Print the area of the circle:\n    console.\n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":593,"fileType":"javascript","requestStartTime":1517972602950}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    \n    // Print the area of the circle:\n    console.log();\n    // Print the perimeter of the circle:\n    console.\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":654,"fileType":"javascript","requestStartTime":1517972608593}}
{"body": {"column":21,"line":20,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.\n        if (!cur && !(this.innerHTML in ops)) {\n            cur = this.innerHTML\n        }\n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":586,"fileType":"javascript","requestStartTime":1517972609352}}
{"body": {"column":22,"line":21,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.]\n        \n        \n        if (!cur && !(this.innerHTML in ops)) {\n            cur = this.innerHTML\n        }\n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":618,"fileType":"javascript","requestStartTime":1517972622525}}
{"body": {"column":16,"line":22,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.\n        \n        if (!cur && !(this.innerHTML in ops)) {\n            cur = this.innerHTML\n        }\n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":646,"fileType":"javascript","requestStartTime":1517972627169}}
{"body": {"column":22,"line":24,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.)\n        \n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":692,"fileType":"javascript","requestStartTime":1517972662282}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = Math.\n    // Print the area of the circle:\n    console.log();\n    // Print the perimeter of the circle:\n    console.log();\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":559,"fileType":"javascript","requestStartTime":1517972674494}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.indexOf(eol) == -1) {\n            res.\n        }\n        \n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":730,"fileType":"javascript","requestStartTime":1517972677625}}
{"body": {"column":23,"line":26,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.indexOf(eol) == -1) {\n            res.innerHTML = v\n        } else if (ops.) {\n                   \n        }\n        \n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":767,"fileType":"javascript","requestStartTime":1517972697739}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.indexOf(v) == -1) {\n            res.innerHTML = v\n        } else if (ops.indexOf(eol) == -1) {\n            res.       \n        }\n        \n        if (!(cur[cur.length - 1] in ops)) { \n            res.innerHTML = res.innerHTML ? \n                res.innerHTML + this.innerHTML : \n                this.innerHTML\n        }\n    })\n})\n\n","offset":803,"fileType":"javascript","requestStartTime":1517972724405}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":802,"fileType":"javascript","requestStartTime":1517972748192}}
{"body": {"column":49,"line":26,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.indexOf(v) == -1) {\n            res.innerHTML = v\n        } else if (ops.indexOf(eol) == -1 && ops.) {\n            res.innerHTML = c + v       \n        }\n    })\n})\n\n","offset":791,"fileType":"javascript","requestStartTime":1517972759022}}
{"body": {"column":25,"line":33,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(json.root, val)\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":811,"fileType":"javascript","requestStartTime":1517972780858}}
{"body": {"column":25,"line":33,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.root, val)\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":811,"fileType":"javascript","requestStartTime":1517972783390}}
{"body": {"column":23,"line":28,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    console.log(equation)\n    let seq = equation.split(/([+-*/])/)\n    console.log(seq)\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.indexOf(v) == -1) {\n            res.innerHTML = v\n        } else if (ops.indexOf(eol) == -1 && ops.indexOf(v) > -1) {\n            res.innerHTML = c + v       \n        } else if (ops.)\n    })\n})\n\n","offset":874,"fileType":"javascript","requestStartTime":1517972832687}}
{"body": {"column":16,"line":27,"wordToComplete":"2.","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const PI = Math.PI;\n    const r = 2.\n    let area = PI * (r * r);\n    let perimeter = 2 * (PI * r)\n    // Print the area of the circle:\n    console.log(area);\n    // Print the perimeter of the circle:\n    console.log(perimeter);\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":579,"fileType":"javascript","requestStartTime":1517972862320}}
{"body": {"column":9,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\nconst fetch = require('fetch');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    http.(url)\n    .then((resp) => resp.json())\n    .then(function(data) {\n        let movies = data.data;\n        let totPages = data.total_pages;\n        let sortArray = [];\n        for(let i=0; i<movies.length;i++){\n            sortArray.push(data.data[i].Title);\n        }\n        for(let i=2; i<=totPages; i++){\n           let newPage = i;\n           let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n          \n           fetch(url1).then(function(response) {\n              var contentType = response.headers.get(\"content-type\");\n              if(contentType && contentType.indexOf(\"application/json\") !== -1) {\n                 return response.json().then(function(json) {\n                  console.log(json); \n                \n                 for(let i=0; i<json.data.length;i++){\n                    sortArray.push(json.data[i].Title);\n                 }\n                  \n                 if(i==totPages) {\n                     console.log(sortArray.sort());\n                 }\n                \n                });\n              } else {\n                console.log(\"Oops, we haven't got JSON!\");\n              }\n            });\n            \n        }\n  })\n  .catch(function(error) {\n    console.log(error);\n  });   \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":568,"fileType":"javascript","requestStartTime":1517972876530}}
{"body": {"column":15,"line":34,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":843,"fileType":"javascript","requestStartTime":1517972879316}}
{"body": {"column":26,"line":34,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":854,"fileType":"javascript","requestStartTime":1517972885055}}
{"body": {"column":17,"line":36,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).reduce((arr, el) => {\n            return {\n                .\n            }\n        })\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":914,"fileType":"javascript","requestStartTime":1517972923065}}
{"body": {"column":18,"line":36,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).reduce((arr, el) => {\n            return {\n                ..\n            }\n        })\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":915,"fileType":"javascript","requestStartTime":1517972923231}}
{"body": {"column":19,"line":36,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).reduce((arr, el) => {\n            return {\n                ...\n            }\n        })\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":916,"fileType":"javascript","requestStartTime":1517972923608}}
{"body": {"column":21,"line":35,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).reduce((arr, el) => {\n            return [.]\n        })\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":897,"fileType":"javascript","requestStartTime":1517972929143}}
{"body": {"column":22,"line":35,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).reduce((arr, el) => {\n            return [..]\n        })\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":898,"fileType":"javascript","requestStartTime":1517972929308}}
{"body": {"column":23,"line":35,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        console.log(JSON.stringify(root))\n        Object.keys(root).reduce((arr, el) => {\n            return [...]\n        })\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":899,"fileType":"javascript","requestStartTime":1517972929467}}
{"body": {"column":16,"line":36,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = Object.keys(root).reduce((arr, el) => {\n            return [...arr, root[el]]\n        }, [])\n        console.\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":916,"fileType":"javascript","requestStartTime":1517972965141}}
{"body": {"column":23,"line":34,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = Object.keys(root).reduce((arr, el) => {\n            if (Object.)\n            return [...arr, root[el]]\n        }, [])\n        console.log(temp)\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":870,"fileType":"javascript","requestStartTime":1517972991107}}
{"body": {"column":9,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = Object.keys(root).reduce((arr, el) => {\n            if (Object.keys(root))\n            return [...arr, root[el]]\n        }, [])\n        console.log(temp)\n\t};\n\n    rhis.\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":975,"fileType":"javascript","requestStartTime":1517973003528}}
{"body": {"column":9,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = Object.keys(root).reduce((arr, el) => {\n            if (Object.keys(root))\n            return [...arr, root[el]]\n        }, [])\n        console.log(temp)\n\t};\n\n    this.\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":975,"fileType":"javascript","requestStartTime":1517973005522}}
{"body": {"column":18,"line":41,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = Object.keys(root).reduce((arr, el) => {\n            if (Object.keys(root))\n            return [...arr, root[el]]\n        }, [])\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(root, val) => {\n        if Object.\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1031,"fileType":"javascript","requestStartTime":1517973019265}}
{"body": {"column":28,"line":41,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = Object.keys(root).reduce((arr, el) => {\n            if (Object.keys(root))\n            return [...arr, root[el]]\n        }, [])\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(root, val) => {\n        const keys = Object.\n        if Object.keys(root) > 0 {\n            return Object.keys(root).reduce((arr, el) => {\n            if (Object.keys(root))\n            return [...arr, root[el]]\n        }, [])\n        }\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1041,"fileType":"javascript","requestStartTime":1517973041804}}
{"body": {"column":9,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\nconst http = require('http');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    http.  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":566,"fileType":"javascript","requestStartTime":1517973071100}}
{"body": {"column":12,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\nconst http = require('http');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    http.get(url, (res) => {\n        res.\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":598,"fileType":"javascript","requestStartTime":1517973083681}}
{"body": {"column":12,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\nconst http = require('http');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    http.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":631,"fileType":"javascript","requestStartTime":1517973094109}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\nconst http = require('http');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    http.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            console.\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":679,"fileType":"javascript","requestStartTime":1517973107978}}
{"body": {"column":26,"line":33,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.\n        const temp = Object.keys(root).reduce((arr, el) => {\n            if (Object.keys(root))\n            return [...arr, root[el]]\n        }, [])\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(root) => {\n        const keys = Object.keys(root)\n        if keys > 0 {\n            return keys.reduce((arr, el) => {\n                return [...arr, root[el]]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":812,"fileType":"javascript","requestStartTime":1517973106384}}
{"body": {"column":8,"line":16,"wordToComplete":"","code":"\nlet btns = document.querySelectorAll(\"button.w\")\nlet res = document.querySelectorAll(\"#res\")[0]\nlet clr = document.querySelectorAll(\"#btnClr\")[0]\nlet eql = document.querySelectorAll(\"#btnEql\")[0]\nlet ops = ['-', '+', '*', '/']\nclr.addEventListener(\"click\", function() {\n    res.innerHTML = ''\n})\n\neql.addEventListener(\"click\", function() {\n    let equation = res.innerHTML\n    //console.log(equation)\n    //let seq = equation.split(/(\\D)/)\n    //console.log(seq)\n    let result = eval(equation)\n    res.\n})\n\nbtns.forEach(el => { \n    el.addEventListener(\"click\", function() {\n        let c = res.innerHTML\n        let v = this.innerHTML\n        let eol = c[c.length - 1]\n        console.log(c, v, eol)\n        \n        if (!c && ops.indexOf(v) === -1) {\n            res.innerHTML = v\n        } else if (ops.indexOf(eol) == -1 || ops.indexOf(v) == -1) {\n            res.innerHTML = c + v       \n        }\n    })\n})\n\n","offset":505,"fileType":"javascript","requestStartTime":1517973123014}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(data) {\n            let movies = data.\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":660,"fileType":"javascript","requestStartTime":1517973214674}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(data) {\n            let movies = data.data;\n            console.\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":686,"fileType":"javascript","requestStartTime":1517973218031}}
{"body": {"column":37,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n\t};\n\n    this.reduceNode = function(root) => {\n        const keys = Object.keys(root)\n        if keys > 0 {\n            return temp = keys.reduce((arr, el) => {\n                return [...arr, this.root[el]]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1027,"fileType":"javascript","requestStartTime":1517973216795}}
{"body": {"column":16,"line":34,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.\n\t};\n\n    this.reduceNode = function(root) => {\n        const keys = Object.keys(root)\n        if keys > 0 {\n            return temp = keys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":845,"fileType":"javascript","requestStartTime":1517973231122}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(root) {\n        const keys = Object.keys(root)\n        if keys. > 0 {\n            return temp = keys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":954,"fileType":"javascript","requestStartTime":1517973259225}}
{"body": {"column":32,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(data) {\n            let movies = data;\n            let totPages = data.\n            console.log(movies);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":693,"fileType":"javascript","requestStartTime":1517973283378}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(root) {\n        var allKeys = Object.keys(root)\n        console.\n        if allKeys.length > 0 {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":955,"fileType":"javascript","requestStartTime":1517973328681}}
{"body": {"column":30,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.body;\n            let totPages = body.total_pages;\n            console.log(totPages);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":660,"fileType":"javascript","requestStartTime":1517973414564}}
{"body": {"column":42,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies)\n            console.log( totPages);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":672,"fileType":"javascript","requestStartTime":1517973597088}}
{"body": {"column":34,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.)\n            console.log( movies);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":790,"fileType":"javascript","requestStartTime":1517973627992}}
{"body": {"column":26,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.\n            }\n            console.log( movies);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":830,"fileType":"javascript","requestStartTime":1517973644510}}
{"body": {"column":36,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(data.)\n            }\n            console.log( movies);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":840,"fileType":"javascript","requestStartTime":1517973647987}}
{"body": {"column":13,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n  var lowerCase = sentence.toLowerCase(); \n  var arrLower = lowerCase.split(' ');\n  var minLength = arrLower[0].length;\n  var minIndex = 0;\n  var result = []; \n  \n  for(let j = 0; j < arrLower.length; j +=1) {    \n    minIndex = 0;\n    minLength = arrLower[0].length;  \n    for(let i = 1; i < arrLower.length; i+=1) {\n      if(arrLower[i].length < minLength) {\n          minLength = arrLower[i].length;\n          minIndex = i;\n      }\n      consol.  \n    }      \n    result.push(arrLower[minIndex]);\n    arrLower.splice(minIndex,1); \n  }  \n  console.log(arrLower); \n  return result;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":737,"fileType":"javascript","requestStartTime":1517973637930}}
{"body": {"column":41,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].)\n            }\n            console.log( movies);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":845,"fileType":"javascript","requestStartTime":1517973664654}}
{"body": {"column":7,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n   arr.\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":493,"fileType":"javascript","requestStartTime":1517973660583}}
{"body": {"column":25,"line":34,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.)\n\t};\n\n    this.reduceNode = function(root) {\n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":854,"fileType":"javascript","requestStartTime":1517973715039}}
{"body": {"column":17,"line":38,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(root) {\n        if (root.)\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":932,"fileType":"javascript","requestStartTime":1517973760237}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            arr.\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":961,"fileType":"javascript","requestStartTime":1517973799194}}
{"body": {"column":21,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            return [.]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":966,"fileType":"javascript","requestStartTime":1517973804331}}
{"body": {"column":22,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            return [..]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":967,"fileType":"javascript","requestStartTime":1517973804504}}
{"body": {"column":23,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            return [...]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":968,"fileType":"javascript","requestStartTime":1517973804655}}
{"body": {"column":33,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            return [...arr, root.]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":978,"fileType":"javascript","requestStartTime":1517973806957}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n  var lowerCase = sentence.toLowerCase(); \n  lowerCase = lowerCase.  \n  var arrLower = lowerCase.split(' ');\n  var minLength = arrLower[0].length;\n  var minIndex = 0;\n  var result = []; \n  \n  for(let j = 0; j < arrLower.length; j +=1) {    \n    minIndex = 0;\n    minLength = arrLower[0].length;  \n    for(let i = 1; i < arrLower.length; i+=1) {\n      if(arrLower[i].length < minLength) {\n          minLength = arrLower[i].length;\n          minIndex = i;\n      }\n      console.log(\"the min value is \", arrLower[i]);  \n    }      \n    result.push(arrLower[minIndex]);\n    arrLower.splice(minIndex,1); \n  }  \n  console.log(arrLower); \n  return result;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":356,"fileType":"javascript","requestStartTime":1517973810004}}
{"body": {"column":15,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n    //Start your function below this line\n   if (choice = Withdraw){\n       console.\n   }\n            \n    \n        \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":799,"fileType":"javascript","requestStartTime":1517973813469}}
{"body": {"column":22,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1084,"fileType":"javascript","requestStartTime":1517973825120}}
{"body": {"column":21,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            if (root.)\n            return [...arr, root.data]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":966,"fileType":"javascript","requestStartTime":1517973827933}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    function parameterVariable ()\n    console. \"Welcome to 10 days of JavaScript\";\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":934,"fileType":"javascript","requestStartTime":1517973852999}}
{"body": {"column":28,"line":41,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.\n            }\n            return [...arr, root.data]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1023,"fileType":"javascript","requestStartTime":1517973858178}}
{"body": {"column":23,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1128,"fileType":"javascript","requestStartTime":1517973870007}}
{"body": {"column":49,"line":41,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(JSON.stringify(root))\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.)\n            }\n            return [...arr, root.data]\n        }\n        \n        if (!root) return root\n        \n        var allKeys = Object.keys(root)\n        if (allKeys.length > 0) {\n            return temp = allKeys.reduce((arr, el) => {\n                return [...arr, this.reduceNode(root[el])]\n            }, [])\n        }\n        return root\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1044,"fileType":"javascript","requestStartTime":1517973871780}}
{"body": {"column":45,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       lety newMovies = JSON.\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1201,"fileType":"javascript","requestStartTime":1517973891898}}
{"body": {"column":57,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       lety newMovies = JSON.parse(body).\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1213,"fileType":"javascript","requestStartTime":1517973897869}}
{"body": {"column":48,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       lety newMovies = JSON.parse(body).data;\n                       for(let i=0; i<newMovies.)\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1267,"fileType":"javascript","requestStartTime":1517973912573}}
{"body": {"column":37,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       lety newMovies = JSON.parse(body).data;\n                       for(let i=0; i<newMovies.length;i++) {\n                           sortArray.\n                       }\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1318,"fileType":"javascript","requestStartTime":1517973923279}}
{"body": {"column":38,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n   arr.map(function(num){\n      var reducer = (total, number) +. \n   });\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":550,"fileType":"javascript","requestStartTime":1517973916827}}
{"body": {"column":55,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       lety newMovies = JSON.parse(body).data;\n                       for(let i=0; i<newMovies.length;i++) {\n                           sortArray.push(newMovies{i}.)\n                       }\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1336,"fileType":"javascript","requestStartTime":1517973933520}}
{"body": {"column":16,"line":38,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode(root)\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(arr, root) {\n        console.\n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":920,"fileType":"javascript","requestStartTime":1517973930924}}
{"body": {"column":11,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n   arr.map(function(num){\n      var reducer = (total, number) => total+number;\n       arr.\n   });\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":576,"fileType":"javascript","requestStartTime":1517973934107}}
{"body": {"column":35,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       let newMovies = JSON.parse(body).data;\n                       for(let i=0; i<newMovies.length;i++) {\n                           sortArray.push(newMovies{i}.Title)\n                       }\n                       \n                       if(i == totPages) {\n                           console.\n                       }\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1469,"fileType":"javascript","requestStartTime":1517973984609}}
{"body": {"column":49,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       let newMovies = JSON.parse(body).data;\n                       for(let i=0; i<newMovies.length;i++) {\n                           sortArray.push(newMovies{i}.Title)\n                       }\n                       \n                       if(i == totPages) {\n                           console.log(sortArray.)\n                       }\n                   })\n                })\n            }\n            console.log( sortArray);\n        })\n    })  \n  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1483,"fileType":"javascript","requestStartTime":1517973989289}}
{"body": {"column":17,"line":38,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.)\n        \n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":925,"fileType":"javascript","requestStartTime":1517973986549}}
{"body": {"column":18,"line":35,"wordToComplete":"d","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.d)\n        \n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            \n        }\n        \n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":877,"fileType":"javascript","requestStartTime":1517974007500}}
{"body": {"column":27,"line":36,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.)\n        }\n        \n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            \n        }\n        \n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":911,"fileType":"javascript","requestStartTime":1517974037989}}
{"body": {"column":31,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       let newMovies = JSON.parse(body).data;\n                       console.\n                       for(let i=0; i<newMovies.length;i++) {\n                           sortArray.push(newMovies{i}.Title)\n                       }\n                       \n                       if(i == totPages) {\n                           console.log(sortArray.sort());\n                       }\n                   })\n                })\n            }\n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1249,"fileType":"javascript","requestStartTime":1517974070355}}
{"body": {"column":20,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            }\n            if (val.)\n        }\n        \n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            \n        }\n        \n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":978,"fileType":"javascript","requestStartTime":1517974069934}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction miniMaxSum(arr) {\n   arr.map(function(num){\n       var high=0; \n       var low =0;\n       var reducer = (total, number) => total+number;\n       result = arr.reduce(reducer) - num;\n       if (result > high){high = result}\n       else if(result < low){low = result};\n   });\n    console.\n}\n\nfunction main() {\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    miniMaxSum(arr);\n\n}\n\n\n","offset":752,"fileType":"javascript","requestStartTime":1517974084940}}
{"body": {"column":28,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            }\n            if (root.left) {\n                return this.\n            }\n        }\n        \n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            \n        }\n        \n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1015,"fileType":"javascript","requestStartTime":1517974096936}}
{"body": {"column":43,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            }\n            if (root.left) {\n                return this.isPresent(root.)\n            }\n        }\n        \n\t};\n\n    this.reduceNode = function(arr, root) {\n        if (root.data) {\n            \n        }\n        \n        if (root.data) {\n            var left\n            if (root.left) {\n                left = this.reduceNode(arr, root.left)\n            }\n            var right\n            if (root.right) {\n                right = this.reduceNode(arr, root.right)\n            }\n            return [...arr, root.data, right, left]\n        }\n        return arr\n    }\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1030,"fileType":"javascript","requestStartTime":1517974102082}}
{"body": {"column":36,"line":38,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            } else if (val === root.)\n            if (root.left) {\n                return this.isPresent(root.left, val)\n            }\n        }\n        \n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":980,"fileType":"javascript","requestStartTime":1517974124018}}
{"body": {"column":25,"line":39,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            } else if (val === root.data) {\n                if (root.)\n            }\n            if (root.left) {\n                return this.isPresent(root.left, val)\n            }\n        }\n        \n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1013,"fileType":"javascript","requestStartTime":1517974128206}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction in_n_out() \n{\n    //Start your code below\n    //In this we will intake a set of strings in which they will be as labeled above\n    \n    //When input is done we must perform operations on the numbers\n    \n    //Lastly we must return it in the format outlined\n    if(File.)\n    return \"I Have 20 Total\";\n}\n\n\n    res = in_n_out();\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1117,"fileType":"javascript","requestStartTime":1517974140514}}
{"body": {"column":32,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            } else if (val === root.data) {\n                if (root.right) {\n                    return this.\n                }\n            }\n            if (root.left) {\n                return this.isPresent(root.left, val)\n            }\n        }\n        \n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1054,"fileType":"javascript","requestStartTime":1517974140414}}
{"body": {"column":47,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            } else if (val === root.data) {\n                if (root.right) {\n                    return this.isPresent(root.)\n                }\n            }\n            if (root.left) {\n                return this.isPresent(root.left, val)\n            }\n        }\n        \n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1069,"fileType":"javascript","requestStartTime":1517974145979}}
{"body": {"column":20,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            console.\n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":890,"fileType":"javascript","requestStartTime":1517974183561}}
{"body": {"column":34,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            console.log(sortArray.)\n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":904,"fileType":"javascript","requestStartTime":1517974188372}}
{"body": {"column":33,"line":40,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                return 0\n            } else if (val === root.data) {\n                return 1\n            } else if (val <root.)\n            if (root.left) {\n                return this.isPresent(root.left, val)\n            }\n        }\n        \n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1046,"fileType":"javascript","requestStartTime":1517974207884}}
{"body": {"column":25,"line":37,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        const temp = this.reduceNode([], root)\n        console.log(temp)\n        if (root.data) {\n            if (val > root.data) {\n                if (root.)\n                return this.isPresent(root.right, val)\n            } else if (val === root.data) {\n                return 1\n            } else if (val < root.data) {\n                \n            }\n            if (root.left) {\n            }\n        }\n        \n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":944,"fileType":"javascript","requestStartTime":1517974224320}}
{"body": {"column":13,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction getGrade(score) {\n    let grade;\n    if(grade>)\n    \n    return grade;\n}\n\nfunction main() {\n    const score = +(readLine());\n    \n    console.log(getGrade(score));\n}\n","offset":477,"fileType":"javascript","requestStartTime":1517974237081}}
{"body": {"column":14,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction getGrade(score) {\n    let grade;\n    if(grade=>)\n    \n    return grade;\n}\n\nfunction main() {\n    const score = +(readLine());\n    \n    console.log(getGrade(score));\n}\n","offset":478,"fileType":"javascript","requestStartTime":1517974239808}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    let sortArray = [];\n\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n        })\n    })\n    console.\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":893,"fileType":"javascript","requestStartTime":1517974266235}}
{"body": {"column":24,"line":45,"wordToComplete":"","code":"function Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n};\n\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data < root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    this.isPresent = function(root, val) {\n        // Add your code here\n        if (root.data) {\n            if (val > root.data) {\n                if (root.right) {\n                    return this.isPresent(root.right, val)\n                }\n                return 0\n            } else if (val === root.data) {\n                return 1\n            } else if (val < root.data) {\n                if (root.left) {\n                    return this.isPresent(root.left, val)\n                }\n                console.\n                return 0\n            }\n        }\n\t};\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    var j = 1;\n    \n    for (var i = 0; i < values[0]; i++) {\n        root = tree.insert(root, values[j]);\n        \n        j++;\n    }\n    \n    var k = j + 1;\n    \n    for (var i = 0; i < values[j]; i++) {\n        process.stdout.write(tree.isPresent(root, values[k]) + '\\n');\n        \n        k++;\n    }\n});\n","offset":1226,"fileType":"javascript","requestStartTime":1517974308437}}
{"body": {"column":20,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   res.on('data', function(body) {\n                       let newMovies = JSON.parse(body).data;\n                       console.log(body);\n\n                   })\n                })\n            }\n            console.\n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1340,"fileType":"javascript","requestStartTime":1517974350191}}
{"body": {"column":27,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n            for(let i =2; i<totPages; i++) {\n                let newPage = i;\n                let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n                https.get(url1, (res) => {\n                   console.\n                })\n            }\n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1136,"fileType":"javascript","requestStartTime":1517974436033}}
{"body": {"column":12,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n  var lowerCase = sentence.toLowerCase(); \n  lowerCase = lowerCase.slice(0,lowerCase.length-1 );  \n // console.log(lowerCase);  \n    \n  var arrLower = lowerCase.split(' ');\n  var minLength = arrLower[0].length;\n  var minIndex = 0;\n  var result = []; \n  \n  for(let j = 0; j < arrLower.length; j +=1) {    \n    minIndex = 0;\n    minLength = arrLower[0].length;  \n    console.  \n    for(let i = 1; i < arrLower.length; i+=1) {\n      if(arrLower[i].length < minLength) {\n          minLength = arrLower[i].length;\n          minIndex = i;\n      }\n      console.log(\"the min value is \", arrLower[i]);  \n    }      \n    result.push(arrLower[minIndex]);\n    arrLower.splice(minIndex,1); \n    console.log(\"Below push \",arrLower);  \n  }  \n   \n \n  return result;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":662,"fileType":"javascript","requestStartTime":1517974449466}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1517974738005}}
{"body": {"column":25,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":344,"fileType":"javascript","requestStartTime":1517974997738}}
{"body": {"column":18,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((arr, el) => {\n        return el.\n    })\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":384,"fileType":"javascript","requestStartTime":1517975037137}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((arr, el) => {\n        return el.split('').\n    })\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":394,"fileType":"javascript","requestStartTime":1517975089901}}
{"body": {"column":53,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((arr, el) => {\n        return el.split('').filter(el => el === '0').\n    })\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":419,"fileType":"javascript","requestStartTime":1517975106376}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '0').length + sum\n    }, 0)\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":454,"fileType":"javascript","requestStartTime":1517975127963}}
{"body": {"column":27,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '0').length + sum\n    }, 0)\n    console.log(temp)\n    return (temp - zombies.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":491,"fileType":"javascript","requestStartTime":1517975183221}}
{"body": {"column":23,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n    //Start your function below this line\n   if (choice == \"Withdraw\"){\n       console.log(\"You have selected to withdraw money from the account\")\n       if (amount % 5==0){\n        balance =balance - amount\n           console.log(\"You have $\" + balance+ \".00 left\")\n           console.log(\"Would you like to do something else?\")\n           if (decision = \"Yes\"){\n               console.\n           }\n       }\n       else{\n           console.log(\"Your withdraw amount must be a multiple of $5.00, please try again\")\n       }\n          \n   }\n    else if(choice == \"Deposit\"){\n       console.log(\"You have selected to deposit money to the account\")\n        \n    } \n    else if (choice == \"Cancel\"){\n        console.log(\"Returning to account selection\")\n    }\n    else{\n        console.log(\"You have selected an invalid option\")\n    }\n        \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1102,"fileType":"javascript","requestStartTime":1517975206119}}
{"body": {"column":11,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '0').length + sum\n    }, 0)\n    consol.\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":453,"fileType":"javascript","requestStartTime":1517975216245}}
{"body": {"column":12,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '0').length + sum\n    }, 0)\n    console.\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":454,"fileType":"javascript","requestStartTime":1517975218186}}
{"body": {"column":47,"line":44,"wordToComplete":"make first letter to upper case and adds .  ","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction arrange(sentence) {\n  var lowerCase = sentence.toLowerCase();  // it changes sentence to lower case \n  lowerCase = lowerCase.slice(0,lowerCase.length-1 );  // it gets rid of . at the end of the sentence \n  var arrLower = lowerCase.split(' ');     // it converts sentence into an array\n  var lengthSentence = arrLower.length;    // original length of the sentence \n  var minLength = arrLower[0].length;      // initial minimum length : it will be replaced to other value\n  var minIndex = 0;                        // initial minimum index : it will be replaced to other value\n  var result = []; \n  \n  for(let j = 0; j < lengthSentence; j +=1) {    \n    minIndex = 0;\n    minLength = arrLower[0].length;  \n    // iterates to find min value and index\n    for(let i = 1; i < arrLower.length; i+=1) {\n      // if a str element's length is less than min length, it replaces minLength and minIndex  \n      if(arrLower[i].length < minLength) {\n          minLength = arrLower[i].length;\n          minIndex = i;\n      }\n      \n    }      \n    // push the element that has a short length  \n    result.push(arrLower[minIndex]);\n    // get rid of the min element from arrLower   \n    arrLower.splice(minIndex,1); \n    \n  }  \n  // join result into string value  \n  result = result.join(' '); \n  // make first letter to upper case and adds .  \n  result = result[0].toUpperCase() + result.slice(1,result.length) +'.';\n  return result;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var sentence;\n    var sentence = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = arrange(sentence);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1595,"fileType":"javascript","requestStartTime":1517975313800}}
{"body": {"column":27,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    for(var i=1; itotPag)\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n                     https.(url1).then(function(response) {\n              var contentType = response.headers.get(\"content-type\");\n              if(contentType && contentType.indexOf(\"application/json\") !== -1) {\n                return response.json().then(function(json) {\n                  //console.log(json); //uncomment this console.log to see the JSON data.\n                \n                 for(let i=0; i<json.data.length;i++){\n                    sortArray.push(json.data[i].Title);\n                 }\n                  \n                 if(i==totPages)console.log(sortArray.sort());\n                \n                });\n              } else {\n                console.log(\"Oops, we haven't got JSON!\");\n              }\n            });\n           \n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":923,"fileType":"javascript","requestStartTime":1517975363667}}
{"body": {"column":15,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    for(var i=1; itotPag)\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n     for(let i=2; i<=totPages; i++){\n           let newPage = i;\n           let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n          \n          http.(url1).then(function(response) {\n              var contentType = response.headers.get(\"content-type\");\n              if(contentType && contentType.indexOf(\"application/json\") !== -1) {\n                return response.json().then(function(json) {\n                  //console.log(json); //uncomment this console.log to see the JSON data.\n                \n                 for(let i=0; i<json.data.length;i++){\n                    sortArray.push(json.data[i].Title);\n                 }\n                  \n                 if(i==totPages)console.log(sortArray.sort());\n                \n                });\n              } else {\n                console.log(\"Oops, we haven't got JSON!\");\n              }\n            });\n            \n        }\n           \n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1100,"fileType":"javascript","requestStartTime":1517975388730}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    for(var i=1; itotPag)\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n     for(let i=2; i<=totPages; i++){\n           let newPage = i;\n           let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n          \n          https.(url1).then(function(response) {\n              var contentType = response.headers.get(\"content-type\");\n              if(contentType && contentType.indexOf(\"application/json\") !== -1) {\n                return response.json().then(function(json) {\n                  //console.log(json); //uncomment this console.log to see the JSON data.\n                \n                 for(let i=0; i<json.data.length;i++){\n                    sortArray.push(json.data[i].Title);\n                 }\n                  \n                 if(i==totPages)console.log(sortArray.sort());\n                \n                });\n              } else {\n                console.log(\"Oops, we haven't got JSON!\");\n              }\n            });\n            \n        }\n           \n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":1101,"fileType":"javascript","requestStartTime":1517975390775}}
{"body": {"column":28,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction differentTeams(skills) {\n    const teams = 0;\n    const spSkills = skills.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _skills = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = differentTeams(_skills);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":343,"fileType":"javascript","requestStartTime":1517975459093}}
{"body": {"column":20,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n    //Start your function below this line\n   if (choice == \"Withdraw\"){\n       console.log(\"You have selected to withdraw money from the account\")\n       if (amount % 5==0){\n        balance =balance - amount\n           console.log(\"You have $\" + balance+ \".00 left\")\n           console.log(\"Would you like to do something else?\")\n           if (decision = \"Yes\"){\n               console.log(\"Returning to the main menu\")\n           }\n           else(decision = \"No\"){\n               console.log(\"Have a nice day!\")\n           }\n       }\n       else{\n           console.log(\"Your withdraw amount must be a multiple of $5.00, please try again\")\n       }\n          \n   }\n    else if(choice == \"Deposit\"){\n       console.log(\"You have selected to deposit money to the account\")\n        if (amount > 0){\n            balance = balance + amount\n            console.\n        }\n        \n    } \n    else if (choice == \"Cancel\"){\n        console.log(\"Returning to account selection\")\n    }\n    else{\n        console.log(\"You have selected an invalid option\")\n    }\n        \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1573,"fileType":"javascript","requestStartTime":1517975531909}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n        }\n               });\n        console.\n     for(let i=2; i<=totPages; i++){\n           let newPage = i;\n           let url1 = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + newPage;\n          \n          https.get(url1, (res) => {\n              var contentType = response.headers.get(\"content-type\");\n              if(contentType && contentType.indexOf(\"application/json\") !== -1) {\n                return response.json().then(function(json) {\n                  console.log(json); //uncomment this console.log to see the JSON data.\n                \n                 for(let i=0; i<json.data.length;i++){\n                    sortArray.push(json.data[i].Title);\n                 }\n                  \n                 if(i==totPages)console.log(sortArray.sort());\n                \n                });\n              } else {\n                console.log(\"Oops, we haven't got JSON!\");\n              }\n            });\n            \n        }\n           \n        })\n    })  \n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":915,"fileType":"javascript","requestStartTime":1517975550849}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction differentTeams(skills) {\n    const teams = 0;\n    const spSkills = skills.split('');\n    const availableSkills = ['p', 'c', 'm', 'b', 'z'];\n    \n    const output = availableSkills.reduce((curr, next) => {\n        \n    }, 0);\n    \n    console.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _skills = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = differentTeams(_skills);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":511,"fileType":"javascript","requestStartTime":1517975548188}}
{"body": {"column":60,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n    //Start your function below this line\n   if (choice == \"Withdraw\"){\n       console.log(\"You have selected to withdraw money from the account\")\n       if (amount % 5==0){\n        balance =balance - amount\n           console.log(\"You have $\" + balance+ \".00 left\")\n           console.log(\"Would you like to do something else?\")\n           if (decision = \"Yes\"){\n               console.log(\"Returning to the main menu\")\n           }\n           else(decision = \"No\"){\n               console.log(\"Have a nice day!\")\n           }\n       }\n       else{\n           console.log(\"Your withdraw amount must be a multiple of $5.00, please try again\")\n       }\n          \n   }\n    else if(choice == \"Deposit\"){\n       console.log(\"You have selected to deposit money to the account\")\n        if (amount > 0){\n            balance = balance + amount\n            console.log(\"Your new balance is $\"+ balance +\".\" )\n        }\n        \n    } \n    else if (choice == \"Cancel\"){\n        console.log(\"Returning to account selection\")\n    }\n    else{\n        console.log(\"You have selected an invalid option\")\n    }\n        \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1613,"fileType":"javascript","requestStartTime":1517975629645}}
{"body": {"column":42,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getMovieTitles(substr) {\n    let pageNum=1;\n    let url = 'https://jsonmock.hackerrank.com/api/movies/search/?Title=' + substr + \"&page=\" + pageNum;\n    https.get(url, (res) => {\n        res.setEncoding('utf8');\n        res.on('data', function(body) {\n            let movies = JSON.parse(body).data;\n            let totPages =movies.total_pages;\n            let sortArray = [];\n            for(let i=0; i<movies.length;i++) {\n                sortArray.push(movies[i].Title)\n            }\n                    console.log(sortArray.)\n\n        })\n               });\n \n\n\n}\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getMovieTitles(_substr);\n});\n\n","offset":912,"fileType":"javascript","requestStartTime":1517975651628}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1517975722831}}
{"body": {"column":24,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.forEach(el => {\n        const temp = el.\n    })\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":346,"fileType":"javascript","requestStartTime":1517975738079}}
{"body": {"column":34,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.forEach(el => {\n        const temp = el.split('').\n    })\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":356,"fileType":"javascript","requestStartTime":1517975749595}}
{"body": {"column":25,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.forEach(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === 1) {\n                return [.]\n            }\n        })\n    })\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":438,"fileType":"javascript","requestStartTime":1517975821851}}
{"body": {"column":26,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.forEach(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === 1) {\n                return [..]\n            }\n        })\n    })\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":439,"fileType":"javascript","requestStartTime":1517975822069}}
{"body": {"column":27,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.forEach(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === 1) {\n                return [...]\n            }\n        })\n    })\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":440,"fileType":"javascript","requestStartTime":1517975822250}}
{"body": {"column":16,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    zombies.forEach(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === 1) {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        console.\n    })\n    console.log(zombies)\n    const temp = zombies.reduce((sum, el) => {\n        return el.split('').filter(el => el === '1').length\n    }, 0)\n    console.log(temp)\n\n    return (temp - zombies.length) / 2\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":520,"fileType":"javascript","requestStartTime":1517975853154}}
{"body": {"column":33,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(grades){\n    // Complete this function\n    \n    for(let i = 0; i < grades.length; i++){\n        \n        if(grades[i] <= 38){\n            continue;\n        }\n        else if((grades[i] % 5) >= 3){\n            grades[i] = grades[i] + (grades[i]%5-1);\n        }\n    }\n    return(grades);\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var grades = [];\n    for(var grades_i = 0; grades_i < n; grades_i++){\n       grades[grades_i] = parseInt(readLine());\n    }\n    var result = solve(grades);\n    console.log(result.join(\"\\n\"));\n    \n\n\n}\n\n\n","offset":665,"fileType":"javascript","requestStartTime":1517975881045}}
{"body": {"column":7,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize = zombies.forEach(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n    }).\n    console.log(temp)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":533,"fileType":"javascript","requestStartTime":1517975951481}}
{"body": {"column":36,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    for (var i = 0; i < denormalize.)\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":584,"fileType":"javascript","requestStartTime":1517976115398}}
{"body": {"column":15,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 0; i < denormalize.length, i++) {\n        result.\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":639,"fileType":"javascript","requestStartTime":1517976166350}}
{"body": {"column":19,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            result.\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":725,"fileType":"javascript","requestStartTime":1517976257536}}
{"body": {"column":32,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            result.map(el => {\n                const temp = el.\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":769,"fileType":"javascript","requestStartTime":1517976380007}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            denormalize.\n            result.map(el => {\n                const temp = el.map()\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":770,"fileType":"javascript","requestStartTime":1517976481298}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    \n    var result;\n    \n    for(var i = 1; i <= 10 ; i++){\n        \n        console.\n        \n    }\n\n}\n\n\n","offset":597,"fileType":"javascript","requestStartTime":1517976504772}}
{"body": {"column":25,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.)\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":802,"fileType":"javascript","requestStartTime":1517976518986}}
{"body": {"column":44,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.))\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":821,"fileType":"javascript","requestStartTime":1517976533904}}
{"body": {"column":33,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [el, .]\n                }\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":874,"fileType":"javascript","requestStartTime":1517976555507}}
{"body": {"column":34,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [el, ..]\n                }\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":875,"fileType":"javascript","requestStartTime":1517976555806}}
{"body": {"column":29,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [.el, ..]\n                }\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":870,"fileType":"javascript","requestStartTime":1517976560332}}
{"body": {"column":30,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [..el, ..]\n                }\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":871,"fileType":"javascript","requestStartTime":1517976560510}}
{"body": {"column":31,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [...el, ..]\n                }\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":872,"fileType":"javascript","requestStartTime":1517976560670}}
{"body": {"column":38,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length, i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [...el, ...]\n                }\n            })\n        }\n    }\n    \n    console.log(denormalize)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":879,"fileType":"javascript","requestStartTime":1517976562921}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    \n    var result = []\n    for (var i = 1; i < denormalize.length; i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [...el, ...next]\n                }\n                return el\n            })\n        }\n        console.\n    }\n    \n    console.log(result)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":970,"fileType":"javascript","requestStartTime":1517976615613}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.\n    \n    var result = []\n    for (var i = 1; i < denormalize.length; i++) {\n        if (i === 0) {\n            result.append(denormalize[0])\n            console.log(result)\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.contains(subEl))) {\n                    return [...el, ...next]\n                }\n                return el\n            })\n        }\n    }\n    \n    console.log(result)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":560,"fileType":"javascript","requestStartTime":1517976652642}}
{"body": {"column":23,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    var inputs = input.\n});\n\n","offset":242,"fileType":"javascript","requestStartTime":1517976668818}}
{"body": {"column":30,"line":10,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    var inputs = input.split('\\n');\n    for(var i = 0; i < inputs.)\n    \n});\n\n","offset":285,"fileType":"javascript","requestStartTime":1517976685747}}
{"body": {"column":32,"line":11,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    var inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        var command = inputs[i].\n    }\n    \n});\n\n","offset":334,"fileType":"javascript","requestStartTime":1517976706277}}
{"body": {"column":24,"line":35,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = denormalize[0]\n            console.log(result)\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.\n                if (next.filter(subEl => el.find(subEl))) {\n                    return [...el, ...next]\n                }\n                return el\n            })\n        }\n    }\n    \n    console.log(result)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":856,"fileType":"javascript","requestStartTime":1517976756944}}
{"body": {"column":27,"line":18,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        var command = inputs[i].split()\n    }\n    \n});\n\nfunction clean(str){\n    for(var i = 0; i < str.)\n}\n\n","offset":446,"fileType":"javascript","requestStartTime":1517976762925}}
{"body": {"column":18,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = denormalize[0]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.log(el)\n                \n                return el\n            })\n        }\n    }\n    return result.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":924,"fileType":"javascript","requestStartTime":1517976799816}}
{"body": {"column":16,"line":21,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        var command = inputs[i].split()\n    }\n    \n});\n\nfunction clean(str){\n    let ret = [];\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]==' '){\n            ret.\n        }\n    }\n}\n\n","offset":522,"fileType":"javascript","requestStartTime":1517976819740}}
{"body": {"column":58,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = [denormalize[0]]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                if (next.filter(subEl => el.filter(subEl).)) {\n                    return [...el, ...next]\n                }\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":860,"fileType":"javascript","requestStartTime":1517976843323}}
{"body": {"column":24,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = [denormalize[0]]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.\n                if (next.filter(subEl => el.filter(subEl).length > 0)) {\n                    return [...el, ...next]\n                }\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":826,"fileType":"javascript","requestStartTime":1517976859056}}
{"body": {"column":19,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result.denormalize[0]]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.log(el)\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":695,"fileType":"javascript","requestStartTime":1517976877147}}
{"body": {"column":16,"line":13,"wordToComplete":"e","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        consol.e\n    }\n    \n});\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":410,"fileType":"javascript","requestStartTime":1517976888072}}
{"body": {"column":16,"line":13,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        console.\n    }\n    \n});\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":410,"fileType":"javascript","requestStartTime":1517976890160}}
{"body": {"column":23,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = [.] denormalize[0]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.log(el)\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":699,"fileType":"javascript","requestStartTime":1517976900648}}
{"body": {"column":24,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = [..] denormalize[0]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.log(el)\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":700,"fileType":"javascript","requestStartTime":1517976900806}}
{"body": {"column":25,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = [...] denormalize[0]\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.log(el)\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":701,"fileType":"javascript","requestStartTime":1517976900947}}
{"body": {"column":20,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction zombieCluster(zombies) {\n    const denormalize= zombies.map(el => {\n        const temp = el.split('').reduce((arr, el, index) => {\n            if (el === '1') {\n                return [...arr, index]\n            }\n            return arr\n        }, [])\n        return temp\n    })\n    console.log(denormalize)\n    \n    var result = []\n    for (var i = 0; i < denormalize.length; i++) {\n        if (i === 0) {\n            result = [...result, denormalize[0]]\n            console.\n        } else {\n            const next = denormalize[i]\n            result.map(el => {\n                console.log(el)\n                return el\n            })\n        }\n    }\n    return result.length\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var zombies;\n    var zombies_size = 0;\n    zombies_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var zombies = [];\n    var zombies_item;\n    for (var zombies_i = 0; zombies_i < zombies_size; zombies_i++) {\n        var zombies_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        zombies.push(zombies_item);\n    }\n\n\n    res = zombieCluster(zombies);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":745,"fileType":"javascript","requestStartTime":1517976918881}}
{"body": {"column":20,"line":14,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.parsePhone(data);\n        }\n        else if(command =='E' || command == 'e'){\n            pa\n        }\n    }\n    \n});\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":459,"fileType":"javascript","requestStartTime":1517977006798}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.\n        }\n    }\n    \n});\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":562,"fileType":"javascript","requestStartTime":1517977013687}}
{"body": {"column":28,"line":23,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(var i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    for(var i = 0; i < data.)\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":661,"fileType":"javascript","requestStartTime":1517977128100}}
{"body": {"column":93,"line":31,"wordToComplete":"Your withdraw amount must be a multiple of $5.00, please try again.\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n   var input = decision;\n   var withdraw = \"withdraw\";\n   var deposit = \"deposit\";\n   var cancel = \"cancel\";\n    \n   switch(input){\n       case withdraw:\n          input = \"You have selected to withdraw money from the account\";\n          console.log(\"How much would you like to withdraw?\");\n          if(input % 5 != 0){\n             console.log(\"Your withdraw amount must be a multiple of $5.00, please try again.\");\n          }\n       case deposit:\n          input = \"You have selected to deposit money to your account\";\n       case cancel:\n          input = \"Returning to account selection\";\n          break;\n       case default:\n          input = \"You have selected an invalid option\";\n       \n           \n           \n           \n   }\n    \n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1129,"fileType":"javascript","requestStartTime":1517977167397}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = []; \n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || data[i] == '(' || data[i] == ')' + data[i] =='-'){\n            symbols.\n        }\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":798,"fileType":"javascript","requestStartTime":1517977199063}}
{"body": {"column":22,"line":10,"wordToComplete":"","code":"\nvar btn = document.getElementById(\"btn5\");\n/* This sets the action to perform on a click event */\nbtn.addEventListener(\"click\", function() {\n    /* This changes the button's label */\n    var array = [1, 2, 3, 4, 6, 7, 8, 9];\n    var loopBtn = document.getElementById(\"btn\"+array[0]);\n    \n    for(var i=0; i<array.length; i++){\n        var loopBtn = document.getElementById(\"btn\"+array[i]);\n        alert(loopBtn.);\n        //loopBtn++;\n        //alert(loopBtn);\n        var innerHTML = btn.innerHTML;\n    }\n    btn.innerHTML = 'You clicked me!';\n});\n\n","offset":415,"fileType":"javascript","requestStartTime":1517977201033}}
{"body": {"column":12,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction minimalOperations(words) {\n    console.\n    let arOutput = [];\n    let nuwords = words[0];\n    let nuidx = 1;\n    let artmp = [];\n\n    for (nuidx; nuidx < nuwords; nuidx++) {\n        artmp = arRepeatedChar(words[nuidx]);\n        if (artmp == null) {\n            arOutput.push(0);\n        } else {\n            arOutput.push(repeatedChar(artmp));\n        }\n    }\n    return arOutput;\n}\n\nfunction repeatedChar(artmp) {\n    let nusize = artmp.length;\n    let nujdx = 0;\n    let nuAcum = 0;\n    let stOut = '';\n    for (nujdx; nujdx < nuSize; nujdx++) {\n        nuAcum += nuReplace(artmp[nujdx].length);\n    }\n    return nuAcum;\n}\n\nfunction nuReplace(nuSize) {\n    return isPar(nuSize) ? (nuSize / 2) : ((nuSize - 1) / 2);\n}\n\nfunction isPar(num) {\n    return num % 2 == 0 ? true : false;\n}\n\nfunction arRepeatedChar(word) {\n    return word.match(/(.)\\1+/g);\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var words;\n    var words_size = 0;\n    words_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var words = [];\n    var words_item;\n    for (var words_i = 0; words_i < words_size; words_i++) {\n        var words_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        words.push(words_item);\n    }\n\n\n    res = minimalOperations(words);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":307,"fileType":"javascript","requestStartTime":1517977218000}}
{"body": {"column":20,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let numbers = [];\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || data[i] == '(' || data[i] == ')' + data[i] =='-'){\n            symbols.push(data[i]);\n        }\n        if(parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9 ){\n            numbers.\n        }\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":927,"fileType":"javascript","requestStartTime":1517977272702}}
{"body": {"column":25,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n   var input = decision;\n   var withdraw = \"withdraw\";\n   var deposit = \"deposit\";\n   var cancel = \"cancel\";\n    \n   switch(input){\n       case withdraw:\n          input = \"You have selected to withdraw money from the account\";\n          console.log(\"How much would you like to withdraw?\");\n          if(amount % 5 != 0){\n             console.log(\"Your withdraw amount must be a multiple of $5.00, please try again.\");\n           break;\n          }\n           else{\n              if(balance <= 0) {\n                 console. \n                  balance = amount - balance;\n           }}\n           \n       case deposit:\n          input = \"You have selected to deposit money to your account\";\n       case cancel:\n          input = \"Returning to account selection\";\n          break;\n       case default:\n          input = \"You have selected an invalid option\";\n       \n           \n           \n           \n   }\n    \n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1239,"fileType":"javascript","requestStartTime":1517977368442}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.\n    \n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":842,"fileType":"javascript","requestStartTime":1517977446638}}
{"body": {"column":31,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = 0; i < symbols.)\n    \n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":905,"fileType":"javascript","requestStartTime":1517977524666}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fibonacci(n) {\n    var first, second, sum = 0;\n    for(var i=0; i<n; i++) {\n        sum = first + second;\n        console.\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fibonacci(n);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":391,"fileType":"javascript","requestStartTime":1517977543079}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = 0; i < symbols.length; i++){\n        ret += symbols[i];\n    }\n    \n    console.\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":969,"fileType":"javascript","requestStartTime":1517977555835}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nvar btn = document.getElementById(\"btn5\");\n/* This sets the action to perform on a click event */\nbtn.addEventListener(\"click\", function() {\n    /* This changes the button's label */\n    var array = [1, 2, 3, 4, 6, 7, 8, 9];\n    var loopBtn = document.getElementById(\"btn\"+array[0]);\n    \n    for(var i=0; i<array.length; i++){\n        var element = (\"btn\" + array[i]);\n        var loopBtn = document.getElementById(element);\n        loopBtn.innerHTML;\n        //loopBtn++;\n        //alert(loopBtn);\n        var innerHTML = btn.innerHTML;\n    }\n    btn.innerHTML = 'You clicked me!';\n});\n\n","offset":444,"fileType":"javascript","requestStartTime":1517977705550}}
{"body": {"column":18,"line":49,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n   var input = choice;\n   var withdraw = \"withdraw\";\n   var deposit = \"deposit\";\n   var cancel = \"cancel\";\n    \n   switch(input){\n       case withdraw:\n          input = \"You have selected to withdraw money from the account\";\n          console.log(\"How much would you like to withdraw?\");\n          if(amount % 5 != 0){\n             console.log(\"Your withdraw amount must be a multiple of $5.00, please try again.\");\n           break;\n          }\n           else{\n              if(balance <= 0) {\n                 console.log(\"You don't have enough money to withdraw this amount\"); \n              else{\n                 balance = balance - amount; \n                 console.log(\"You have ${balance} left\");\n                 console.log(\"Would you like to do something else?\");\n                 if(decision == \"Yes\"){\n                     console.log(\"Returning to the main menu\");\n                 }\n              }\n           }}\n           \n       case deposit:\n          input = \"You have selected to deposit money to your account\";\n          console.\n       case cancel:\n          input = \"Returning to account selection\";\n          break;\n       case default:\n          input = \"You have selected an invalid option\";\n       \n           \n           \n           \n   }\n    \n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1768,"fileType":"javascript","requestStartTime":1517977795610}}
{"body": {"column":13,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fibonacci(n) {\n    var first = 0, second = 1, sum = 0;\n    var fibs = new Array();\n    console.log(sum);\n    for(var i=0; i<n-1; i++) {\n        sum = first + second;\n        console.log(sum);\n        fibs.\n        first = second;\n        second = sum;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fibonacci(n);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":474,"fileType":"javascript","requestStartTime":1517977891553}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [3, 6, 10]\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.; i < symbols.length; i++){\n        if(i < checks[0]){\n            ret += symbols[i];\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":926,"fileType":"javascript","requestStartTime":1517978007030}}
{"body": {"column":10,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.\n}\n\n\n","offset":599,"fileType":"javascript","requestStartTime":1517978020258}}
{"body": {"column":32,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [4, 7, 10]\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = 0 ; i < symbols.; i--){\n        if(i < checks[0]){\n            ret += symbols[i];\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":934,"fileType":"javascript","requestStartTime":1517978067889}}
{"body": {"column":24,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [4, 7, 10]\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols. ; i < symbols.length; i++){\n        if(i < checks[0]){\n            ret += '*';\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += symbols[i];\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":926,"fileType":"javascript","requestStartTime":1517978181006}}
{"body": {"column":27,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [4, 7, 10]\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.;\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += symbols[i];\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1003,"fileType":"javascript","requestStartTime":1517978236502}}
{"body": {"column":27,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [4, 7, 10]\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols.push(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.;\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1003,"fileType":"javascript","requestStartTime":1517978282773}}
{"body": {"column":25,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [4, 7, 10]\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[data.(data[i]);\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":850,"fileType":"javascript","requestStartTime":1517978356413}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    console.\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1517978612868}}
{"body": {"column":24,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [3, 6, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.)\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":973,"fileType":"javascript","requestStartTime":1517978623899}}
{"body": {"column":16,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [3, 6, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.length; i >= 0; i--){\n        console.\n    }\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1011,"fileType":"javascript","requestStartTime":1517978731509}}
{"body": {"column":28,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [3, 6, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.length; i >= 0; i--){\n        console.log(symbols.)\n    }\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1023,"fileType":"javascript","requestStartTime":1517978735292}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = '';\n    let checks = [3, 6, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    console.log(symbols);\n    for(let i = symbols.length; i >= 0; i--){\n        ret.symbols.pop());\n    }\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1007,"fileType":"javascript","requestStartTime":1517978760579}}
{"body": {"column":25,"line":41,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction my_atm(balance, choice, amount, decision) {\n   var input = choice;\n   var withdraw = \"Withdraw\";\n   var deposit = \"Deposit\";\n   var cancel = \"Cancel\";\n    \n   switch(input){\n       case withdraw:\n          console.log(\"You have selected to withdraw money from the account\");\n          if(amount % 5 != 0){\n             console.log(\"Your withdraw amount must be a multiple of $5.00, please try again.\");\n           break;\n          }\n           else{\n              if(balance <= 0) {\n                 console.log(\"You don't have enough money to withdraw this amount\"); \n                  break;\n              }\n              else{\n                 balance = balance - amount; \n                 console.log(\"You have ${balance} left\");\n                 console.\n                 if(decision == \"Yes\"){\n                     console.log(\"Returning to main menu\");\n                 }\n                 else{\n                     console.log(\"Have a nice day\");\n                 }\n              }\n           }\n           \n       case deposit:\n          console.log(\"You have selected to deposit money to your account\");\n          console.log(\"How much would you like to deposit?\");\n          balance = balance + amount;\n          console.log(\"Your new balance is ${balance}.\");\n          console.log(\"Would you like to do something else?\");\n          if(decision == \"yes\"){\n              console.log(\"Returning to main menu\");\n          }\n          else if(decision == \"no\"){\n              console.log(\"Have a nice day\");\n          }\n       case cancel:\n          console.log(\"Returning to account selection\");\n          break;\n       default:\n          console.log(\"You have selected an invalid option\");\n           break;\n           \n           \n           \n   }\n    \n    \n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var balance;\n    var balance = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var choice;\n    var choice = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n    var amount;\n    var amount = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var decision;\n    var decision = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = my_atm(balance, choice, amount, decision);\n    \n});\n\n","offset":1430,"fileType":"javascript","requestStartTime":1517978811817}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    for(let i = symbols.length-1; i >= 0; i--){\n        if(i < check[0])\n            ret.push(symbols.pop());\n        else\n            ret.\n    }\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1062,"fileType":"javascript","requestStartTime":1517978865790}}
{"body": {"column":20,"line":39,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        if(x < checks[0])\n            ret.push(symbols.pop());\n        else{\n            ret.push('*');\n            symbols.\n        }\n        x += 1;\n    }\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1110,"fileType":"javascript","requestStartTime":1517978968512}}
{"body": {"column":27,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.\n        if(x < checks[0])\n            ret.push(symbols.pop());\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    /*for(let i = symbols.length ; i >=0 ; i--){\n        if(i < checks[0]){\n            ret += symbols.pop();\n        }\n        if(i == checks[0]){\n            ret += '-';\n        }\n        if( i >= checks[0] && i < checks[1]){\n            ret += '*';\n        }\n        if(i == checks[1]){\n            ret += '-';\n        }\n        if(i >= checks[1] && i < checks[2]){\n            ret += '*';\n        }\n        if(i == checks[2]){\n            ret += '-';\n        }\n        if(i>=checks[2] && symbols[i] !='+'){\n            ret += '*';\n        }\n        if(symbols[i] =='+'){\n            ret += '+';\n        }\n    }*/\n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1013,"fileType":"javascript","requestStartTime":1517978990158}}
{"body": {"column":16,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n    console.log(ret)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1075,"fileType":"javascript","requestStartTime":1517979081347}}
{"body": {"column":74,"line":9,"wordToComplete":"a-z]+[\\_]*\\d*)@([hackerrank]+)\\./g\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nconst fs = require('fs');\nconst fileOut = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n/*\n * Write the regular expression in the blank space below\n */\nconst regularExpression = new RegExp(\"/(([a-z]+[\\_]*\\d*)@([hackerrank]+)\\./g\");\n\nlet input = '';\nprocess.stdin.on('data', (data) => {\n    input += data;\n});\n\nprocess.stdin.on('end', () => {\n    input = input.split('\\n');\n\n    const query = parseInt(input[0]);\n    let result = Array(query).fill('False');\n    \n    input.shift();\n    \n    for (const i in input) {\n        const someString = input[i];\n        \n        if (regularExpression.test(someString)) {\n            result[i] = 'True';\n        }\n    }\n    \n    result.forEach((res) => {\n        fileOut.write(res + '\\n');\n    });\n    \n    fileOut.end();\n});\n","offset":290,"fileType":"javascript","requestStartTime":1517979096637}}
{"body": {"column":20,"line":50,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n    console.log(ret.)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1325,"fileType":"javascript","requestStartTime":1517979121632}}
{"body": {"column":29,"line":50,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n    console.log(ret.join('').)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1334,"fileType":"javascript","requestStartTime":1517979174305}}
{"body": {"column":3,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  .\n}\n\n\n","offset":618,"fileType":"javascript","requestStartTime":1517979181580}}
{"body": {"column":13,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  .split('').\n}\n\n\n","offset":628,"fileType":"javascript","requestStartTime":1517979185236}}
{"body": {"column":25,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  .split('')\n  \n  for (let i = 0; i < ex.)\n}\n\n\n","offset":656,"fileType":"javascript","requestStartTime":1517979201044}}
{"body": {"column":30,"line":50,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n    console.log(ret.reverse().)\n}\n\nfunction parseEmail(data){\n    \n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1335,"fileType":"javascript","requestStartTime":1517979213541}}
{"body": {"column":8,"line":34,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  let ex = expression.split('');\n  let s = [];\n  \n  for (let i = 0; i < ex.length; i+=1) {\n    if (ex[i] === '{') {\n      s.\n    } else if (ex[i] === '[') {\n               \n    } else if (ex[i] === '(') {\n      \n    } else {\n      \n    }\n  }\n}\n\n\n","offset":739,"fileType":"javascript","requestStartTime":1517979261012}}
{"body": {"column":16,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  let ex = expression.split('');\n  let s = [];\n  \n  for (let i = 0; i < ex.length; i+=1) {\n    if (ex[i] === '{') {\n      s.push('}')\n    } else if (ex[i] === '[') {\n            \n       s.push(']')     \n    } else if (ex[i] === '(') {\n      s.push(')')\n    } else {\n      if (stack.)\n    }\n  }\n}\n\n\n","offset":897,"fileType":"javascript","requestStartTime":1517979335276}}
{"body": {"column":16,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  let ex = expression.split('');\n  let s = [];\n  \n  for (let i = 0; i < ex.length; i+=1) {\n    if (ex[i] === '{') {\n      s.push('}')\n    } else if (ex[i] === '[') {\n            \n       s.push(']')     \n    } else if (ex[i] === '(') {\n      s.push(')')\n    } else {\n      if (stack.pop() !== ex[i]) {\n        console.\n      }\n    }\n  }\n}\n\n\n","offset":932,"fileType":"javascript","requestStartTime":1517979351508}}
{"body": {"column":10,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var expression = readLine();\n    }\n  console.log(expression)\n  let ex = expression.split('');\n  let s = [];\n  \n  for (let i = 0; i < ex.length; i+=1) {\n    if (ex[i] === '{') {\n      s.push('}')\n    } else if (ex[i] === '[') {\n            \n       s.push(']')     \n    } else if (ex[i] === '(') {\n      s.push(')')\n    } else {\n      if (stack.pop() !== ex[i]) {\n        console.log('NO')\n      }\n    }\n  }\n  \n  console.\n}\n\n\n","offset":973,"fileType":"javascript","requestStartTime":1517979357332}}
{"body": {"column":25,"line":54,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n     return (ret.reverse().join(''))\n}\n\nfunction parseEmail(data){\n    let email_pre = data.\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1429,"fileType":"javascript","requestStartTime":1517979408278}}
{"body": {"column":26,"line":55,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n     return (ret.reverse().join(''))\n}\n\nfunction parseEmail(data){\n    let email_pre = data.split('@')[0];\n    let email_post = data.\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1470,"fileType":"javascript","requestStartTime":1517979421593}}
{"body": {"column":11,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          if (s.pop() !== ex[i]) {\n            console.log('NO');\n            break;\n          }\n        }\n      }\n\n      if s.console.log('YES')\n    }\n\n}\n\n\n","offset":1032,"fileType":"javascript","requestStartTime":1517979468596}}
{"body": {"column":16,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          s.pop()\n          // if (s.pop() !== ex[i]) {\n          //   console.log('NO');\n          //   break;\n          // }\n        }\n        console.\n      }\n\n      if (s.length === 0)console.log('YES')\n    }\n\n}\n\n\n","offset":1058,"fileType":"javascript","requestStartTime":1517979513308}}
{"body": {"column":27,"line":55,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n     return (ret.reverse().join(''))\n}\n\nfunction parseEmail(data){\n    let [pre, post]  = data.split('@');\n    for(let i = 0; i < pre.)\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1471,"fileType":"javascript","requestStartTime":1517979538862}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r= readLine()\n    const PI = math.\n    // Print the area of the circle:\n    area = \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":581,"fileType":"javascript","requestStartTime":1517979560116}}
{"body": {"column":30,"line":57,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n     return (ret.reverse().join(''))\n}\n\nfunction parseEmail(data){\n    let [pre, post]  = data.split('@');\n    let count = 0;\n    for(let i = 0; i < pre.length; i += 1){\n        if(i == 0 || i == pre.)\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1537,"fileType":"javascript","requestStartTime":1517979575033}}
{"body": {"column":19,"line":49,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          //s.pop()\n          if (s.pop() !== ex[i]) {\n            break;\n          }\n        }\n        //console.log(s)\n      }\n\n      if (s.length === 0)console.log('YES')\n      else console.\n    }\n\n}\n\n\n","offset":1098,"fileType":"javascript","requestStartTime":1517979635748}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r= readLine()\n    const PI = Math.PI\n    // Print the area of the circle:\n    area = PI * r * r;\n    console.\n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":656,"fileType":"javascript","requestStartTime":1517979725139}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r= readLine()\n    const PI = Math.PI\n    // Print the area of the circle:\n    area = PI * r * r;\n    console.log(area)\n    // Print the perimeter of the circle:\n    console.\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":720,"fileType":"javascript","requestStartTime":1517979735826}}
{"body": {"column":83,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction revisedRussianRoulette(doors) {\n    var min = 0; var max = 0;\n    for (i=0;i<doors.length;i++) {\n        if (doors[i]===1) {max++}}\n    if ((doors[0]===1) && (doors[1]===0)) {min++}\n    var j=0;\n    while (j<doors.length) {\n        console.log (j + \" \" + min);\n        if (doors[j]===1 && doors[j+1]===1) {min++; j+=2}\n        else if ((doors[j]===1) && (doors[j+1]===0)) {min++; j++}\n        else {j++}\n    }\n    if ((doors[doors.length-1]===1) && ((doors[doors.length-2]===1) && doors[doors.]) {min++}\n    else if ((doors[doors.length-3]===1) && (doors[doors.length-2]===0)) {min++}\n    return min + \" \" + max;\n}\n\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result);\n}\n\n\n","offset":961,"fileType":"javascript","requestStartTime":1517979765134}}
{"body": {"column":24,"line":58,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n    \n    \n     return (ret.reverse().join(''))\n}\n\nfunction parseEmail(data){\n    let [pre, post]  = data.split('@');\n    let ret = '';\n    let count = 0;\n    let first = pre[0];\n    let last = pre[data.]\n    return ret + '@' + post;\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1529,"fileType":"javascript","requestStartTime":1517979822730}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1517979977825}}
{"body": {"column":52,"line":9,"wordToComplete":"a-z]+[\\_|\\.]*\\d*)@([hackerrank]+)\\.\\w+/g\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nconst fs = require('fs');\nconst fileOut = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n/*\n * Write the regular expression in the blank space below\n */\nconst regularExpression = new RegExp(\"/([a-z]+[\\_|\\.]*\\d*)@([hackerrank]+)\\.\\w+/g\");\n\n\nlet input = '';\nprocess.stdin.on('data', (data) => {\n    input += data;\n});\n\nprocess.stdin.on('end', () => {\n    input = input.split('\\n');\n\n    const query = parseInt(input[0]);\n    let result = Array(query).fill('False');\n    \n    input.shift();\n    \n    for (const i in input) {\n        const someString = input[i];\n        \n        if (regularExpression.test(someString)) {\n            result[i] = 'True';\n        }\n    }\n    \n    result.forEach((res) => {\n        fileOut.write(res + '\\n');\n    });\n    \n    fileOut.end();\n});\n","offset":268,"fileType":"javascript","requestStartTime":1517979996787}}
{"body": {"column":18,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          //s.pop()\n          if (s[s.] !== ex[i]) {\n            break;\n          }\n          s.pop();\n        }\n        //console.log(s)\n      }\n\n      if (s.length === 0)console.log('YES')\n      else console.log('NO')\n    }\n\n}\n\n\n","offset":943,"fileType":"javascript","requestStartTime":1517980140903}}
{"body": {"column":27,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkValididtyEmail(data){\n    for(let i = 0; i < daa.)\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1430,"fileType":"javascript","requestStartTime":1517980156347}}
{"body": {"column":28,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkValididtyEmail(data){\n    for(let i = 0; i < data.)\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1431,"fileType":"javascript","requestStartTime":1517980157082}}
{"body": {"column":32,"line":54,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    for(let i = 0; i < data.length; i++){\n        if(data[0] || data[data.])\n    }\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1497,"fileType":"javascript","requestStartTime":1517980186325}}
{"body": {"column":24,"line":54,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.'|| data[data.length - 1])\n    }\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1489,"fileType":"javascript","requestStartTime":1517980196779}}
{"body": {"column":56,"line":54,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.')\n    }\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1521,"fileType":"javascript","requestStartTime":1517980206398}}
{"body": {"column":18,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n      \n      if () {\n        continue\n          console.\n      }\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          //s.pop()\n          if (s.pop() !== ex[i]) {\n            break;\n          }\n          s.pop();\n        }\n        //console.log(s)\n      }\n\n      if (s.length === 0)console.log('YES')\n      else console.log('NO')\n    }\n\n}\n\n\n","offset":724,"fileType":"javascript","requestStartTime":1517980229565}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    var maxDiff = -1;\n    a.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":316,"fileType":"javascript","requestStartTime":1517980234401}}
{"body": {"column":13,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n      \n      if (ex.) {\n        \n        console.log('NO')\n        continue\n      }\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          //s.pop()\n          if (s.pop() !== ex[i]) {\n            break;\n          }\n          s.pop();\n        }\n        //console.log(s)\n      }\n\n      if (s.length === 0)console.log('YES')\n      else console.log('NO')\n    }\n\n}\n\n\n","offset":688,"fileType":"javascript","requestStartTime":1517980252333}}
{"body": {"column":32,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n      var expression = readLine();\n      //console.log(expression)\n      let ex = expression.split('');\n      let s = [];\n      \n      if (ex.length === 0 || [].ex[0]) {\n        \n        console.log('NO')\n        continue\n      }\n\n      for (let i = 0; i < ex.length; i+=1) {\n        if (ex[i] === '{') {\n          s.push('}')\n        } else if (ex[i] === '[') {\n\n           s.push(']')     \n        } else if (ex[i] === '(') {\n          s.push(')')\n        } else {\n          //s.pop()\n          if (s.pop() !== ex[i]) {\n            break;\n          }\n          s.pop();\n        }\n        //console.log(s)\n      }\n\n      if (s.length === 0)console.log('YES')\n      else console.log('NO')\n    }\n\n}\n\n\n","offset":707,"fileType":"javascript","requestStartTime":1517980269933}}
{"body": {"column":20,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    var maxDiff = -1;\n    for(var i=0;i<a.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":330,"fileType":"javascript","requestStartTime":1517980277168}}
{"body": {"column":28,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.)\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n    }\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1427,"fileType":"javascript","requestStartTime":1517980292213}}
{"body": {"column":26,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    var maxDiff = -1;\n    for(var i=0;i<a.length; i++) {\n        for(var j=i+1;j<a.)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":371,"fileType":"javascript","requestStartTime":1517980299264}}
{"body": {"column":27,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    var maxDiff = -1;\n    for(var i=0;i<a.length; i++) {\n        for(var j=i+1;j<a.length;j++) {\n            maxDiff = Math.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":412,"fileType":"javascript","requestStartTime":1517980327862}}
{"body": {"column":45,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    var maxDiff = -1;\n    for(var i=0;i<a.length; i++) {\n        for(var j=i+1;j<a.length;j++) {\n            maxDiff = Math.max(maxDiff, Math.)\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":430,"fileType":"javascript","requestStartTime":1517980335485}}
{"body": {"column":26,"line":68,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if(data[i] >= 'a'.)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1836,"fileType":"javascript","requestStartTime":1517980547856}}
{"body": {"column":59,"line":68,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1869,"fileType":"javascript","requestStartTime":1517980591199}}
{"body": {"column":27,"line":69,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.charCodeAt(0) ) ||\n            (data[i] < 'A'.)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1915,"fileType":"javascript","requestStartTime":1517980610417}}
{"body": {"column":59,"line":69,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.charCodeAt(0) ) ||\n            (data[i] < 'A'.charCodeAt(0)  && data[i] > 'Z'.)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1947,"fileType":"javascript","requestStartTime":1517980622030}}
{"body": {"column":27,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.charCodeAt(0) ) ||\n            (data[i] < 'A'.charCodeAt(0)  && data[i] > 'Z'.charCodeAt(0) ) ||\n            (data[i] < '0'.)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":1993,"fileType":"javascript","requestStartTime":1517980645918}}
{"body": {"column":54,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.charCodeAt(0) ) ||\n            (data[i] < 'A'.charCodeAt(0)  && data[i] > 'Z'.charCodeAt(0) ) ||\n            (data[i] < '0'.charCodeAt(0)  && data[i] >)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":2020,"fileType":"javascript","requestStartTime":1517980656095}}
{"body": {"column":59,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.charCodeAt(0) ) ||\n            (data[i] < 'A'.charCodeAt(0)  && data[i] > 'Z'.charCodeAt(0) ) ||\n            (data[i] < '0'.charCodeAt(0)  && data[i] > '9'.)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":2025,"fileType":"javascript","requestStartTime":1517980658635}}
{"body": {"column":21,"line":71,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction parsePhone(data){\n    let symbols = [];\n    let ret = [];\n    let checks = [4, 7, 10];\n    let count = 0;\n    for(var i = 0; i < data.length; i++){\n        if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n            symbols[count] = data[i];\n            count += 1;\n        }\n    }\n    let x = 0;\n    let checkerCount = 0;\n    for(let i = symbols.length-1; i >= 0; i--){\n        let curr = symbols.pop();\n        if(x == checks[checkerCount]){\n            ret.push('-');\n            checkerCount += 1;\n        }\n        if(x < checks[0] || curr == '+')\n            ret.push(curr);\n        else{\n            ret.push('*');\n        }\n        x += 1;\n    }\n     return (ret.reverse().join(''))\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == dat[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValididtyEmail(data){\n    let ret = true;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] < 'a'.charCodeAt(0)  && data[i] > 'z'.charCodeAt(0) ) ||\n            (data[i] < 'A'.charCodeAt(0)  && data[i] > 'Z'.charCodeAt(0) ) ||\n            (data[i] < '0'.charCodeAt(0)  && data[i] > '9'.charCodeAt(0) ) ||\n            (data[i].)\n    }\n           return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValiditityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":2065,"fileType":"javascript","requestStartTime":1517980700638}}
{"body": {"column":28,"line":23,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction checkValidityPhone(data){\n    for(let i = 0; i < data.)\n}\n\nfunction parsePhone(data){\n    if(checkValidityPhone(data)){\n        let symbols = [];\n        let ret = [];\n        let checks = [4, 7, 10];\n        let count = 0;\n        for(var i = 0; i < data.length; i++){\n            if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n                symbols[count] = data[i];\n                count += 1;\n            }\n        }\n        let x = 0;\n        let checkerCount = 0;\n        for(let i = symbols.length-1; i >= 0; i--){\n            let curr = symbols.pop();\n            if(x == checks[checkerCount]){\n                ret.push('-');\n                checkerCount += 1;\n            }\n            if(x < checks[0] || curr == '+')\n                ret.push(curr);\n            else{\n                ret.push('*');\n            }\n            x += 1;\n        }\n        return (ret.reverse().join(''))\n    }\n    else{\n        return ('Invalid Phone number');\n    }\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == data[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValidityEmail(data){\n    let ret = false;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] >= 'a'.charCodeAt(0)  && data[i] <= 'z'.charCodeAt(0) ) ||\n            (data[i] >= 'A'.charCodeAt(0)  && data[i] <= 'Z'.charCodeAt(0) ) ||\n            (data[i] >= '0'.charCodeAt(0)  && data[i] <= '9'.charCodeAt(0) ) ||\n            (data[i].indexOf(allowedChars)) )\n            ret = true;\n    }\n    return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValidityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":701,"fileType":"javascript","requestStartTime":1517981084285}}
{"body": {"column":35,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":422,"fileType":"javascript","requestStartTime":1517981130782}}
{"body": {"column":19,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n    let inputs = input.split('\\n');\n    for(let i = 0; i < inputs.length; i += 1){\n        let c_input = clean(inputs[i]);\n        let [command, data] = inputs[i].split(':');\n        if(command == 'P' || command =='p'){\n            console.log(command + ':' + parsePhone(data));\n        }\n        else if(command =='E' || command == 'e'){\n            console.log(command + ':' + parseEmail(data));\n        }\n    }\n});\n\nfunction checkValidityPhone(data){\n    let checks = '+-()'\n    for(let i = 0; i < data.length; i+=1){\n        if(data[i].)\n    }\n}\n\nfunction parsePhone(data){\n    if(checkValidityPhone(data)){\n        let symbols = [];\n        let ret = [];\n        let checks = [4, 7, 10];\n        let count = 0;\n        for(var i = 0; i < data.length; i++){\n            if(data[i] == '+' || (parseInt(data[i]) >= 0 && parseInt(data[i]) <= 9)){\n                symbols[count] = data[i];\n                count += 1;\n            }\n        }\n        let x = 0;\n        let checkerCount = 0;\n        for(let i = symbols.length-1; i >= 0; i--){\n            let curr = symbols.pop();\n            if(x == checks[checkerCount]){\n                ret.push('-');\n                checkerCount += 1;\n            }\n            if(x < checks[0] || curr == '+')\n                ret.push(curr);\n            else{\n                ret.push('*');\n            }\n            x += 1;\n        }\n        return (ret.reverse().join(''))\n    }\n    else{\n        return ('Invalid Phone number');\n    }\n}\n\nfunction checkDoubleDots(data){\n    for(var i = 0; i < data.length - 2; i+=1){\n        if(data[i] == data[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction checkValidityEmail(data){\n    let ret = false;\n    let allowedChars = '!#$%^&*(){}|_+~`';\n    ret = checkDoubleDots(data);\n    for(let i = 0; i < data.length; i++){\n        if(data[0] == '.' || data[data.length - 1] == '.'){\n            ret = false;\n        }\n        if( (data[i] >= 'a'.charCodeAt(0)  && data[i] <= 'z'.charCodeAt(0) ) ||\n            (data[i] >= 'A'.charCodeAt(0)  && data[i] <= 'Z'.charCodeAt(0) ) ||\n            (data[i] >= '0'.charCodeAt(0)  && data[i] <= '9'.charCodeAt(0) ) ||\n            (data[i].indexOf(allowedChars)) )\n            ret = true;\n    }\n    return ret;\n}\n\nfunction parseEmail(data){\n    if(checkValidityEmail(data)){\n        let [pre, post]  = data.split('@');\n        let ret = '';\n        let count = 0;\n        let first = pre[0];\n        let last = pre[pre.length-1];\n        ret = first + '*****' + last;\n        return ret + '@' + post;\n    }\n    else{\n        return \"Invalid email address\";\n    }\n}\n\nfunction clean(str){\n    let ret = '';\n    for(var i = 0; i < str.length; i += 1){\n        if(str[i]!=' '){\n            ret += str[i];\n        }\n    }\n    return ret;\n}\n\n","offset":759,"fileType":"javascript","requestStartTime":1517981143340}}
{"body": {"column":24,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.)\n        }\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":609,"fileType":"javascript","requestStartTime":1517981206163}}
{"body": {"column":46,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.)\n        }\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":631,"fileType":"javascript","requestStartTime":1517981216171}}
{"body": {"column":60,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.))\n        }\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":645,"fileType":"javascript","requestStartTime":1517981219771}}
{"body": {"column":17,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.pop()) != bracePos-1)\n                return \"NO\";\n        } else {\n            stac.\n        }\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":730,"fileType":"javascript","requestStartTime":1517981262929}}
{"body": {"column":18,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.pop()) != bracePos-1)\n                return \"NO\";\n        } else {\n            stack.\n        }\n    }\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":731,"fileType":"javascript","requestStartTime":1517981263737}}
{"body": {"column":19,"line":32,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.pop()) != bracePos-1)\n                return \"NO\";\n        } else {\n            stack.push(c);\n        }\n    }\n    return (!stack.)\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":775,"fileType":"javascript","requestStartTime":1517981288976}}
{"body": {"column":12,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n    var res = new Array();\n    for(var brace : values) {\n        res.\n    }\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.pop()) != bracePos-1)\n                return \"NO\";\n        } else {\n            stack.push(c);\n        }\n    }\n    return (!stack.length ? \"YES\" : \"NO\")\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":356,"fileType":"javascript","requestStartTime":1517981328414}}
{"body": {"column":31,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 'a'. && c.charCodeAt(0) < 91) || (c.charCodeAt(0) >= 97 && c.charCodeAt(0) < 123)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = 0; i < string.length; i++){\n        var c = string.charAt(i);\n        if(c in map){\n            map[c] += 1;\n        }\n        else{\n            map[c] = 1;\n        }\n    }\n    \n    var freq = [];\n    var cc = 0;\n    for(var c in map ){\n        if(map.hasOwnProperty(c)){\n            if(map[c] > 1){\n                freq[cc] = map[c];\n                cc += 1;\n            }\n        }\n    }\n\n    var max_freq = 0;\n    for(var i = 0 ; i < freq.length; i+=1){\n        max_freq = Math.max(freq[i], max_freq);\n    }\n    \n    console.log(max_freq);\n    var offset = original_string_length%max_freq;\n    for(var i = 0; i < max_freq; i++){\n        ret.push(arr[arr.length - max_freq - offset + i]);\n    }\n \n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move) && char != 'a' && char !='b'){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    let key = findKey(message);\n//    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":403,"fileType":"javascript","requestStartTime":1517981430402}}
{"body": {"column":15,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    return arr.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":507,"fileType":"javascript","requestStartTime":1517981436481}}
{"body": {"column":70,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 'a'.charCodeAt(0) && c.charCodeAt(0) < 'z'.) || (c.charCodeAt(0) >= 97 && c.charCodeAt(0) < 123)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = 0; i < string.length; i++){\n        var c = string.charAt(i);\n        if(c in map){\n            map[c] += 1;\n        }\n        else{\n            map[c] = 1;\n        }\n    }\n    \n    var freq = [];\n    var cc = 0;\n    for(var c in map ){\n        if(map.hasOwnProperty(c)){\n            if(map[c] > 1){\n                freq[cc] = map[c];\n                cc += 1;\n            }\n        }\n    }\n\n    var max_freq = 0;\n    for(var i = 0 ; i < freq.length; i+=1){\n        max_freq = Math.max(freq[i], max_freq);\n    }\n    \n    console.log(max_freq);\n    var offset = original_string_length%max_freq;\n    for(var i = 0; i < max_freq; i++){\n        ret.push(arr[arr.length - max_freq - offset + i]);\n    }\n \n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move) && char != 'a' && char !='b'){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    let key = findKey(message);\n//    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":442,"fileType":"javascript","requestStartTime":1517981437408}}
{"body": {"column":111,"line":21,"wordToComplete":"A.'","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 'a'.charCodeAt(0) && c.charCodeAt(0) < 'z'.charCodeAt(0)) || (c.charCodeAt(0) >= 'A.' && c.charCodeAt(0) < 123)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = 0; i < string.length; i++){\n        var c = string.charAt(i);\n        if(c in map){\n            map[c] += 1;\n        }\n        else{\n            map[c] = 1;\n        }\n    }\n    \n    var freq = [];\n    var cc = 0;\n    for(var c in map ){\n        if(map.hasOwnProperty(c)){\n            if(map[c] > 1){\n                freq[cc] = map[c];\n                cc += 1;\n            }\n        }\n    }\n\n    var max_freq = 0;\n    for(var i = 0 ; i < freq.length; i+=1){\n        max_freq = Math.max(freq[i], max_freq);\n    }\n    \n    console.log(max_freq);\n    var offset = original_string_length%max_freq;\n    for(var i = 0; i < max_freq; i++){\n        ret.push(arr[arr.length - max_freq - offset + i]);\n    }\n \n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move) && char != 'a' && char !='b'){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    let key = findKey(message);\n//    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":483,"fileType":"javascript","requestStartTime":1517981444518}}
{"body": {"column":112,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 'a'.charCodeAt(0) && c.charCodeAt(0) < 'z'.charCodeAt(0)) || (c.charCodeAt(0) >= 'A'. && c.charCodeAt(0) < 123)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = 0; i < string.length; i++){\n        var c = string.charAt(i);\n        if(c in map){\n            map[c] += 1;\n        }\n        else{\n            map[c] = 1;\n        }\n    }\n    \n    var freq = [];\n    var cc = 0;\n    for(var c in map ){\n        if(map.hasOwnProperty(c)){\n            if(map[c] > 1){\n                freq[cc] = map[c];\n                cc += 1;\n            }\n        }\n    }\n\n    var max_freq = 0;\n    for(var i = 0 ; i < freq.length; i+=1){\n        max_freq = Math.max(freq[i], max_freq);\n    }\n    \n    console.log(max_freq);\n    var offset = original_string_length%max_freq;\n    for(var i = 0; i < max_freq; i++){\n        ret.push(arr[arr.length - max_freq - offset + i]);\n    }\n \n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move) && char != 'a' && char !='b'){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    let key = findKey(message);\n//    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":484,"fileType":"javascript","requestStartTime":1517981445429}}
{"body": {"column":151,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction checkSpace(c){\n    if( c != ' ')\n        return true;\n    return false;\n}\n\nfunction checkCharacter(c){\n    if((c.charCodeAt(0) >= 'a'.charCodeAt(0) && c.charCodeAt(0) < 'z'.charCodeAt(0)) || (c.charCodeAt(0) >= 'A'.charCodeAt(0) && c.charCodeAt(0) < 'Z'.)){\n       return true;\n    }\n    return false;\n}\n\nfunction findASCIIDiff(a, b){\n    let diff = a.charCodeAt(0) - b.charCodeAt(0) ;\n    return diff < 0 ? 26 + diff: diff ;\n}\n\nfunction findRepetiting(arr){\n    var original_string_length = 107; // I counted but we can even paste the first cipher and count the length\n    var ret = [];\n    var map = {};\n    var count = 0;\n    var string = arr.join('');\n    for(var i = 0; i < string.length; i++){\n        var c = string.charAt(i);\n        if(c in map){\n            map[c] += 1;\n        }\n        else{\n            map[c] = 1;\n        }\n    }\n    \n    var freq = [];\n    var cc = 0;\n    for(var c in map ){\n        if(map.hasOwnProperty(c)){\n            if(map[c] > 1){\n                freq[cc] = map[c];\n                cc += 1;\n            }\n        }\n    }\n\n    var max_freq = 0;\n    for(var i = 0 ; i < freq.length; i+=1){\n        max_freq = Math.max(freq[i], max_freq);\n    }\n    \n    console.log(max_freq);\n    var offset = original_string_length%max_freq;\n    for(var i = 0; i < max_freq; i++){\n        ret.push(arr[arr.length - max_freq - offset + i]);\n    }\n \n    return ret;\n}\n\nfunction findKey(message){\n    let orig_text = 'Your friend, Alice';\n    let ret = [];\n    for(let i = 0; i < message.length;  i++){\n        if(checkCharacter(orig_text[i]) && checkSpace(orig_text[i])){\n            //ret.push({ char: message[i], diff: findASCIIDiff(message[i], orig_text[i]) });\n           ret.push(findASCIIDiff(message[i], orig_text[i]))\n        }\n    }\n    return findRepetiting(ret);\n}\n\nfunction moveCharacter(char, offset){\n    if(!checkCharacter(char) || !checkSpace(char)){\n        return char;\n    }\n    let move = String.fromCharCode(char.charCodeAt(0) - offset);\n    if(checkCharacter(move) && char != 'a' && char !='b'){\n        return move;\n    }\n    else{\n        return String.fromCharCode(char.charCodeAt(0) - offset + 26); \n    }\n}\n\nfunction decrypt(encrypted_message) {\n    let message = 'Atvt hrqgse, Cnikg';\n    let ret = []\n    let key = findKey(message);\n//    let key = ['8','2','5','1','2','2','0'];\n    let count = 0;\n    for(var i = 0; i < encrypted_message.length; i+=1){\n        let offset = 0\n        if(checkCharacter(encrypted_message[i])){\n            offset = parseInt(key[count%key.length]);\n            count++;\n        }\n        ret.push(moveCharacter(encrypted_message[i], offset));\n    }\n    return ret.join('');\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _encrypted_message = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    res = decrypt(_encrypted_message);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":523,"fileType":"javascript","requestStartTime":1517981452881}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    \n    console.\n    return arr.reduce((a,b) => a+b)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":509,"fileType":"javascript","requestStartTime":1517981510140}}
{"body": {"column":25,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n    var res = new Array();\n    for(var i=0;i<values.) {\n        res.push(checkBraces(brace));\n    }\n    return res;\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.pop()) != bracePos-1)\n                return \"NO\";\n        } else {\n            stack.push(c);\n        }\n    }\n    return (!stack.length ? \"YES\" : \"NO\")\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":339,"fileType":"javascript","requestStartTime":1517981549078}}
{"body": {"column":36,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction braces(values) {\n\n    var res = new Array();\n    for(var i=0;i<values.length;i++) {\n        res.push(checkBraces(values.));\n    }\n    return res;\n}\nfunction checkBraces(s) {\n    var parentheses = \"[]{}()\", stack = [], i,c;\n    for(i=0;c=s[i++]){\n        var bracePos = parentheses.indexOf(c), braceType;\n        if ( !~bracePos)\n            continue;\n        braceType = bracePos % 2 ? 'closed' : 'open';\n        if ( braceType === 'closed') {\n            if ( !stack.length || parentheses.indexOf(stack.pop()) != bracePos-1)\n                return \"NO\";\n        } else {\n            stack.push(c);\n        }\n    }\n    return (!stack.length ? \"YES\" : \"NO\")\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var values;\n    var values_size = 0;\n    values_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var values = [];\n    var values_item;\n    for (var values_i = 0; values_i < values_size; values_i++) {\n        var values_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        values.push(values_item);\n    }\n\n\n    res = braces(values);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":389,"fileType":"javascript","requestStartTime":1517981555029}}
{"body": {"column":18,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    input = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":77,"fileType":"javascript","requestStartTime":1517981562358}}
{"body": {"column":10,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    https.\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":518,"fileType":"javascript","requestStartTime":1517981789556}}
{"body": {"column":30,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    const SEP_LEN = arguments.\n    var aliceScore = 0;\n    var bobScore = 0;\n    var aliceProperty, bobProperty;\n    \n    for(var i = 0; i < Math.floor(arguments.length / 2); i++) {\n        aliceProperty = arguments[i];\n        bobProperty = arguments[i + 1];\n        if(aliceProperty > bobProperty) {\n            aliceScore++;\n        } else if(aliceProperty < bobProperty) {\n            bobScore++;\n        }\n    }\n    \n    return [aliceScore, bobScore];\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":559,"fileType":"javascript","requestStartTime":1517981787709}}
{"body": {"column":25,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(a0, a1, a2, b0, b1, b2){\n    // Complete this function\n    const SEP_LEN = Math.arguments.length / 2;\n    var aliceScore = 0;\n    var bobScore = 0;\n    var aliceProperty, bobProperty;\n    \n    for(var i = 0; i < Math.floor(arguments.length / 2); i++) {\n        aliceProperty = arguments[i];\n        bobProperty = arguments[i + 1];\n        if(aliceProperty > bobProperty) {\n            aliceScore++;\n        } else if(aliceProperty < bobProperty) {\n            bobScore++;\n        }\n    }\n    \n    return [aliceScore, bobScore];\n}\n\nfunction main() {\n    var a0_temp = readLine().split(' ');\n    var a0 = parseInt(a0_temp[0]);\n    var a1 = parseInt(a0_temp[1]);\n    var a2 = parseInt(a0_temp[2]);\n    var b0_temp = readLine().split(' ');\n    var b0 = parseInt(b0_temp[0]);\n    var b1 = parseInt(b0_temp[1]);\n    var b2 = parseInt(b0_temp[2]);\n    var result = solve(a0, a1, a2, b0, b1, b2);\n    console.log(result.join(\" \"));\n    \n\n\n}\n\n\n","offset":554,"fileType":"javascript","requestStartTime":1517981798962}}
{"body": {"column":14,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    https.get(url, function (result) {\n       result. \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":561,"fileType":"javascript","requestStartTime":1517981810595}}
{"body": {"column":27,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var json = JSON.\n       }); \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":619,"fileType":"javascript","requestStartTime":1517981972125}}
{"body": {"column":31,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var json = JSON.parse(dataBuff);\n           for(var i=0; i<json.)\n       }); \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":751,"fileType":"javascript","requestStartTime":1517982021636}}
{"body": {"column":36,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var json = JSON.parse(dataBuff);\n           for(var i=0; i<json.data.)\n       }); \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":756,"fileType":"javascript","requestStartTime":1517982024316}}
{"body": {"column":30,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var json = JSON.parse(dataBuff);\n           var totalCount = 0;\n           for(var i=0; i<json.data.length;i++) {\n               if ( json.data. )\n           }\n       }); \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":831,"fileType":"javascript","requestStartTime":1517982076885}}
{"body": {"column":8,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the reverseString function\n * Use console.log() to print to stdout.\n */\nfunction reverseString(s) {\n    var res = s.split(\"\");\n    res.\n}\n\nfunction main() {\n    const s = eval(readLine());\n    \n    reverseString(s);\n}\n","offset":572,"fileType":"javascript","requestStartTime":1517982072206}}
{"body": {"column":33,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var json = JSON.parse(dataBuff);\n           var totalCount = 0;\n           for(var i=0; i<json.data.length;i++) {\n               if ( json.data[i]. )\n           }\n       }); \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":834,"fileType":"javascript","requestStartTime":1517982084579}}
{"body": {"column":50,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var json = JSON.parse(dataBuff);\n           var totalCount = 0;\n           for(var i=0; i<json.data.length;i++) {\n               if ( json.data[i].indexOf(substr) > )\n           }\n       }); \n    });\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":851,"fileType":"javascript","requestStartTime":1517982092205}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the reverseString function\n * Use console.log() to print to stdout.\n */\nfunction reverseString(s) {\n    var res = s.split(\"\");\n    res.reverse();\n    s = res.\n}\n\nfunction main() {\n    const s = eval(readLine());\n    \n    reverseString(s);\n}\n","offset":595,"fileType":"javascript","requestStartTime":1517982102460}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    console.\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":300,"fileType":"javascript","requestStartTime":1517982130335}}
{"body": {"column":13,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    console..\n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":301,"fileType":"javascript","requestStartTime":1517982130544}}
{"body": {"column":25,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let min = a[0];\n    let dif = a[1] - a[0];\n    \n    for(let i = 0; i < a.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":365,"fileType":"javascript","requestStartTime":1517982188343}}
{"body": {"column":13,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let min = a[0];\n    let dif = a[1] - a[0];\n    \n    for(let i = 0; i < a.length; i++) {\n        if(a.)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":393,"fileType":"javascript","requestStartTime":1517982201803}}
{"body": {"column":23,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let min = a[0];\n    let dif = a[1] - a[0];\n    \n    for(let i = 0; i < a.length; i++) {\n        if(a[i] - min >)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":403,"fileType":"javascript","requestStartTime":1517982206633}}
{"body": {"column":60,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n/*\n * This is a comment. Text formatted with /.../ is ignored when the code runs.\n * The next line of code that the computer will evaluate starts with the word \"function\"\n * A function is a user-defined command that you'll learn how to create in the future\n * The HackerRank system uses functions as its basic building block to give you feedback.\n * For now, you're just filling in the details.\n * Type your code where instructed below.\n */\n\nfunction M_G() {\n    //Start your code below this line\n    var a = Number(__input_stdin_array[__input_currentline].)\n}\n\n    res = M_G();\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":953,"fileType":"javascript","requestStartTime":1517982263990}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the reverseString function\n * Use console.log() to print to stdout.\n */\nfunction reverseString(s) {\n    var res = s.split(\"\");\n    res.reverse();\n    s = res.join();\n    console.\n}\n\nfunction main() {\n    const s = eval(readLine());\n    \n    reverseString(s);\n}\n","offset":615,"fileType":"javascript","requestStartTime":1517982284475}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let min = a[0];\n    let diff = a[1] - a[0];\n    \n    for(let i = 0; i < a.length; i++) {\n        if((a[i] - min) > diff) {\n            diff = a[i] - min;\n        }\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    if(min == a[0]) {\n        console.\n      return -1;  \n    } \n    return diff;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":559,"fileType":"javascript","requestStartTime":1517982394999}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let min = a[0];\n    let diff = a[1] - a[0];\n    \n    for(let i = 0; i < a.length; i++) {\n        if((a[i] - min) > diff) {\n            diff = a[i] - min;\n        }\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    console.\n    if(min == a[0]) {\n        console.log(\"min\");\n      return -1;  \n    } \n    return diff;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":533,"fileType":"javascript","requestStartTime":1517982422590}}
{"body": {"column":13,"line":27,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction maxDifference(a) {\n    let min = a[0];\n    let diff = a[1] - a[0];\n    \n    for(let i = 0; i < a.length; i++) {\n        if((a[i] - min) > diff) {\n            diff = a[i] - min;\n        }\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    console..\n    if(min == a[0]) {\n        console.log(\"min\");\n      return -1;  \n    } \n    return diff;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n\n    res = maxDifference(a);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":534,"fileType":"javascript","requestStartTime":1517982422742}}
{"body": {"column":23,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Node(data){\n    this.data=data;\n    this.next=null;\n}\nfunction Solution(){\n\tthis.insert=function(head,data){\n          //complete this method\n        var headBack = head;\n        if (headBack == null)\n            headBack = new Node(data);\n        else\n            while(head.)\n        return headBack;    \n    };\n\n\tthis.display=function(head){\n        var start=head;\n            while(start){\n                process.stdout.write(start.data+\" \");\n                start=start.next;\n            }\n    };\n}\nfunction main(){\n    var T=parseInt(readLine());\n    var head=null;\n    var mylist=new Solution();\n    for(i=0;i<T;i++){\n        var data=parseInt(readLine());\n        head=mylist.insert(head,data);\n    }\n    mylist.display(head);\n}\t\t\n","offset":680,"fileType":"javascript","requestStartTime":1517982427900}}
{"body": {"column":32,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    if(true)\n        return \"Hii2343\";\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, function (result) {\n       result.on(\"data\", function(dataBuff){\n           var jsonObj = JSON.parse(dataBuff);\n           var totalCount = 0;\n           \n           if ( true )\n               return \"Hii\";\n           /*\n           for(var i=0; i<jsonObj.data.length;i++) {\n               if ( jsonObj.data[i].indexOf(substr) >= 0 )\n                   totalCount++;\n           }\n           */\n           totalCount = jsonObj.\n           return totalCount;\n       }); \n    });\n    return \"Hii\";\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":1075,"fileType":"javascript","requestStartTime":1517982479652}}
{"body": {"column":28,"line":30,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Node(data){\n    this.data=data;\n    this.next=null;\n}\nfunction Solution(){\n\tthis.insert=function(head,data){\n          //complete this method\n        var headBack = head;\n        if (headBack == null)\n            headBack = new Node(data);\n        else\n            while(head.next != null)\n                head = head.\n        return headBack;    \n    };\n\n\tthis.display=function(head){\n        var start=head;\n            while(start){\n                process.stdout.write(start.data+\" \");\n                start=start.next;\n            }\n    };\n}\nfunction main(){\n    var T=parseInt(readLine());\n    var head=null;\n    var mylist=new Solution();\n    for(i=0;i<T;i++){\n        var data=parseInt(readLine());\n        head=mylist.insert(head,data);\n    }\n    mylist.display(head);\n}\t\t\n","offset":722,"fileType":"javascript","requestStartTime":1517982445306}}
{"body": {"column":17,"line":31,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction Node(data){\n    this.data=data;\n    this.next=null;\n}\nfunction Solution(){\n\tthis.insert=function(head,data){\n          //complete this method\n        var headBack = head;\n        if (headBack == null)\n            headBack = new Node(data);\n        else {\n            while(head.next != null)\n                head = head.next;\n            head.\n        }\n        return headBack;    \n    };\n\n\tthis.display=function(head){\n        var start=head;\n            while(start){\n                process.stdout.write(start.data+\" \");\n                start=start.next;\n            }\n    };\n}\nfunction main(){\n    var T=parseInt(readLine());\n    var head=null;\n    var mylist=new Solution();\n    for(i=0;i<T;i++){\n        var data=parseInt(readLine());\n        head=mylist.insert(head,data);\n    }\n    mylist.display(head);\n}\t\t\n","offset":747,"fileType":"javascript","requestStartTime":1517982468955}}
{"body": {"column":30,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, (result) => {\n       result.on(\"data\", function(dataBuff) {\n           var jsonObj = JSON.parse(dataBuff);\n           var totalCount = 0;\n           \n           if ( true )\n               return \"Hii\";\n           /*\n           for(var i=0; i<jsonObj.data.length;i++) {\n               if ( jsonObj.data[i].indexOf(substr) >= 0 )\n                   totalCount++;\n           }\n           */\n           totalCount = jsonObj.total;\n           return totalCount;\n       }); \n    });\n    return \"Hii\";\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":622,"fileType":"javascript","requestStartTime":1517982660830}}
{"body": {"column":38,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nconst https = require('https');\n/*\n * Complete the function below.\n * Use console.log to print the result, you should not return from the function.\n */\nfunction getNumberOfMovies(substr) {\n    /*\n     * Endpoint: \"https://jsonmock.hackerrank.com/api/movies/search/?Title=substr\"\n     */\n    var url = \"https://jsonmock.hackerrank.com/api/movies/search/?Title=\" + substr;\n    https.get(url, (result) => {\n       result.on(\"data\", (dataBuff) => {\n           var jsonObj = JSON.parse(dataBuff);\n           var totalCount = 0;\n           \n           if ( true )\n               return \"Hii\";\n           /*\n           for(var i=0; i<jsonObj.data.length;i++) {\n               if ( jsonObj.data[i].indexOf(substr) >= 0 )\n                   totalCount++;\n           }\n           */\n           totalCount = jsonObj.total;\n           return totalCount;\n       }); \n    });\n    return \"Hii\";\n}\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var _substr = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n    \n    getNumberOfMovies(_substr);\n});\n\n","offset":663,"fileType":"javascript","requestStartTime":1517982667997}}
{"body": {"column":7,"line":13,"wordToComplete":"","code":"\nlet b1 = document.getElementById(\"btn1\");\nlet b2 = document.getElementById(\"btn2\");\nlet b3 = document.getElementById(\"btn3\");\nlet b4 = document.getElementById(\"btn4\");\nlet b5 = document.getElementById(\"btn5\");\nlet b6 = document.getElementById(\"btn6\");\nlet b7 = document.getElementById(\"btn7\");\nlet b8 = document.getElementById(\"btn8\");\nlet b9 = document.getElementById(\"btn9\");\nb5.onClick = function() {\n    let temp = b1.innerHTML;\n    b1.innerHTML = b4.innerHTML;\n    b4.\n};\n\n","offset":475,"fileType":"javascript","requestStartTime":1517982726621}}
{"body": {"column":22,"line":15,"wordToComplete":"","code":"\nlet b1 = document.getElementById(\"btn1\");\nlet b2 = document.getElementById(\"btn2\");\nlet b3 = document.getElementById(\"btn3\");\nlet b4 = document.getElementById(\"btn4\");\nlet b5 = document.getElementById(\"btn5\");\nlet b6 = document.getElementById(\"btn6\");\nlet b7 = document.getElementById(\"btn7\");\nlet b8 = document.getElementById(\"btn8\");\nlet b9 = document.getElementById(\"btn9\");\nb5.onClick = function() {\n    let temp = b1.innerHTML;\n    b1.innerHTML = b4.innerHTML;\n    b4.innerHTML = b7.innerHTML;\n    b7.innerHTML = b8.innerHTML;\n    b8.innerHTML = b9.\n};\n\n","offset":556,"fileType":"javascript","requestStartTime":1517982763048}}
{"body": {"column":16,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\nfunction decode(codes, encoded) {\n    let json = {};\n    json = stToObject(codes);\n\n    return replaceEncode(json, encoded);\n}\n\nfunction replaceEncode(json, encoded) {\n    let stOut = encoded;\n    let arObKeycodes = Object.keys(json);\n    let nuLength = arObKeycodes.length;\n    let nuIdx = 0;\n\n    for (nuIdx; nuIdx < nuLength; nuIdx++) {\n        const key = arObKeycodes[nuIdx];\n        stOut.replace(key, json[key]);\n    }\n    return stOut;\n}\n\n\nfunction stToObject(arCodes) {\n    let nuLength = arCodes.nuLength;\n    let nuidx = 0;\n    let arTmp = [];\n    let json = {};\n\n    for (nuidx; nuidx < nuLength; nuidx++) {\n        console.\n        arTmp = arCodes[nuidx].split('  ');\n        if (arTmp[0] === '[newline]') {\n            arTmp[0] = '\\n';\n        }\n        json[arTmp[1]] = arTmp[0];\n    }\n    return json;\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var codes;\n    var codes_size = 0;\n    codes_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var codes = [];\n    var codes_item;\n    for (var codes_i = 0; codes_i < codes_size; codes_i++) {\n        var codes_item = __input_stdin_array[__input_currentline].trim();\n        __input_currentline += 1;\n        codes.push(codes_item);\n    }\n\n    var encoded;\n    var encoded = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = decode(codes, encoded);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":856,"fileType":"javascript","requestStartTime":1517983195075}}
{"body": {"column":6,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    a.\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":495,"fileType":"javascript","requestStartTime":1517983377773}}
{"body": {"column":24,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  let count = 0;\n  \n  for (let i = 0; i < a.  )\n}\n\n\n","offset":572,"fileType":"javascript","requestStartTime":1517983391244}}
{"body": {"column":10,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    for(a.)\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":499,"fileType":"javascript","requestStartTime":1517983406241}}
{"body": {"column":10,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    for(a.)\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":499,"fileType":"javascript","requestStartTime":1517983413383}}
{"body": {"column":8,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.\n  let count = 0;\n  \n  for (let i = 0; i < a.length; i++) {\n    \n  }\n}\n\n\n","offset":536,"fileType":"javascript","requestStartTime":1517983437690}}
{"body": {"column":8,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.\n  let count = 0;\n  \n  for (let i = 0; i < a.length; i++) {\n    \n  }\n}\n\n\n","offset":555,"fileType":"javascript","requestStartTime":1517983443764}}
{"body": {"column":10,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  \n  for (let i = 0; i < a.length; i++) {\n    if (b.)\n  }\n}\n\n\n","offset":635,"fileType":"javascript","requestStartTime":1517983533982}}
{"body": {"column":18,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  \n  for (let i = 0; i < a.length; i++) {\n    let index = b.\n  }\n}\n\n\n","offset":643,"fileType":"javascript","requestStartTime":1517983552135}}
{"body": {"column":6,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    var temp = a[0];\n    for(var i = 0; i< a.length; i++){\n        a[i] = a[i+1];\n    }\n    a.\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":583,"fileType":"javascript","requestStartTime":1517983564171}}
{"body": {"column":8,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    var temp = a[0];\n    for(var i = 0; i< a.length; i++){\n        a[i] = a[i+1];\n    }\n    a[a.]\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":585,"fileType":"javascript","requestStartTime":1517983566978}}
{"body": {"column":8,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  let index;\n  \n  for (let i = 0; i < a.length; i++) {\n    index = b.indexOf(a[i]);\n    \n    if (index !== -1) {\n      a.\n    }\n  }\n}\n\n\n","offset":704,"fileType":"javascript","requestStartTime":1517983613028}}
{"body": {"column":8,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  let index;\n  \n  for (let i = 0; i < a.length; i++) {\n    index = b.indexOf(a[i]);\n    \n    if (index !== -1) {\n      a.shift();\n      b.\n    }\n  }\n}\n\n\n","offset":721,"fileType":"javascript","requestStartTime":1517983617075}}
{"body": {"column":11,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  let index;\n  \n  for (let i = 0; i < a.length; i++) {\n    index = b.indexOf(a[i]);\n    \n    if (index !== -1) {\n      a.shift();\n      b.splice(index, 1);\n    }\n  }\n  \n  return a.\n}\n\n\n","offset":763,"fileType":"javascript","requestStartTime":1517983627394}}
{"body": {"column":22,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  let index;\n  \n  for (let i = 0; i < a.length; i++) {\n    index = b.indexOf(a[i]);\n    \n    if (index !== -1) {\n      a.shift();\n      b.splice(index, 1);\n    }\n  }\n  \n  return a.length + b.\n}\n\n\n","offset":774,"fileType":"javascript","requestStartTime":1517983629532}}
{"body": {"column":10,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var a = readLine();\n    var b = readLine();\n  \n  a = a.split('');\n  b = b.split('');\n  let count = 0;\n  let index;\n  \n  for (let i = 0; i < a.length; i++) {\n    index = b.indexOf(a[i]);\n    \n    if (index !== -1) {\n      a.shift();\n      b.splice(index, 1);\n    }\n  }\n  \n  console. a.length + b.length;\n}\n\n\n","offset":762,"fileType":"javascript","requestStartTime":1517983639466}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    for(var i = 0; i<d; i++){\n        for(var j = 0; j<a.)\n        a[i] = a[i+1];\n    }\n    a[a.length -1] = temp;\n    \n    \n    return a;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":546,"fileType":"javascript","requestStartTime":1517983880305}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    for(var i = 0; i<d; i++){\n        for(var j = 0; j<a.)\n        a[i] = a[i+1];\n    }\n    a[a.length -1] = temp;\n    \n    \n    return a;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":546,"fileType":"javascript","requestStartTime":1517983884948}}
{"body": {"column":8,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    arr.\n}\n\n\n","offset":579,"fileType":"javascript","requestStartTime":1517984093842}}
{"body": {"column":18,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    arr.reverse().\n}\n\n\n","offset":589,"fileType":"javascript","requestStartTime":1517984097389}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    console.arr.reverse().join(' ');\n}\n\n\n","offset":583,"fileType":"javascript","requestStartTime":1517984106688}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    var temp;\n    for(var i = 0; i<d; i++){\n        temp = a[0];\n        for(var j = 0; j<a.length; j++){ a[j] = a[j+1] }\n        a[a.length -1] = temp;\n        consoel.\n    }\n    \n    return a;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":658,"fileType":"javascript","requestStartTime":1517984233288}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction leftRotation(a, d) {\n    var temp;\n    for(var i = 0; i<d; i++){\n        temp = a[0];\n        for(var j = 0; j<a.length; j++){ a[j] = a[j+1] }\n        a[a.length -1] = temp;\n        console.\n    }\n    \n    return a;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var d = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    var result = leftRotation(a, d);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":658,"fileType":"javascript","requestStartTime":1517984235714}}
{"body": {"column":9,"line":40,"wordToComplete":"conso","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n    conso\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1063,"fileType":"javascript","requestStartTime":1517985994405}}
{"body": {"column":12,"line":40,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n    console.\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1066,"fileType":"javascript","requestStartTime":1517985995410}}
{"body": {"column":21,"line":40,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n    console.log(root.)\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1075,"fileType":"javascript","requestStartTime":1517986001347}}
{"body": {"column":17,"line":41,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n    console.log(root.left);\nconsole.log(root.);\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1099,"fileType":"javascript","requestStartTime":1517986007688}}
{"body": {"column":30,"line":40,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        console.log(root.left.);\n        console.log(root.right);\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1084,"fileType":"javascript","requestStartTime":1517986016881}}
{"body": {"column":31,"line":41,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        console.log(root.left.data);\n        console.log(root.right.);\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1122,"fileType":"javascript","requestStartTime":1517986019904}}
{"body": {"column":13,"line":42,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        console.log(root.left.data);\n        console.log(root.right.data);\n        this.\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1142,"fileType":"javascript","requestStartTime":1517986058882}}
{"body": {"column":58,"line":41,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\n        // Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        \n        if (!(root.left === null)) {console.log(root.left.data);}\n        if (!(root.right === null)) {console.log(root.right.data);}\n        this.levelOrder(root.left);\n        this.levelOrder(root.right);\n\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1121,"fileType":"javascript","requestStartTime":1517986348080}}
{"body": {"column":23,"line":43,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\nvar result,arr_node;        \n// Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        result = \"\"+root.data+\" \";\n        while(){\n              arr_node.\n              }\n        return result;      \n        if (!(root.left === null)) {console.log(root.left.data);}\n        if (!(root.right === null)) {console.log(root.right.data);}\n        this.levelOrder(root.left);\n        this.levelOrder(root.right);\n\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1150,"fileType":"javascript","requestStartTime":1517986698162}}
{"body": {"column":19,"line":43,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\nvar result,next_level;        \nnext_level = new array();\n// Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        result = \"\"+root.data+\" \";\n        next_level.\n        while(){\n              arr_node.add(root.left);\n              arr_node.add(root.right);\n            for(i=0;)\n              }\n        return result;      \n        if (!(root.left === null)) {console.log(root.left.data);}\n        if (!(root.right === null)) {console.log(root.right.data);}\n        this.levelOrder(root.left);\n        this.levelOrder(root.right);\n\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1157,"fileType":"javascript","requestStartTime":1517986941887}}
{"body": {"column":19,"line":43,"wordToComplete":"","code":"// Start of function Node\nfunction Node(data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n}; // End of function Node\n\n// Start of function BinarySearchTree\nfunction BinarySearchTree() {\n    this.insert = function(root, data) {\n        if (root === null) {\n            this.root = new Node(data);\n            \n            return this.root;\n        }\n        \n        if (data <= root.data) {\n            if (root.left) {\n                this.insert(root.left, data);\n            } else {\n                root.left = new Node(data);\n            }\n        } else {\n            if (root.right) {\n                this.insert(root.right, data);\n            } else {\n                root.right = new Node(data);\n            }\n        }\n        \n        return this.root;\n    };\n    \n    // Start of function levelOrder\n    this.levelOrder = function(root) {\nvar result,next_level;        \nnext_level = new array();\n// Add your code here\n        // To print values separated by spaces use process.stdout.write(someValue + ' ')\n        if (root === null){\n            return;\n        }\n        result = \"\"+root.data+\" \";\n        next_level.\n        while(){\n              arr_node.add(root.left);\n              arr_node.add(root.right);\n            for(i=0;)\n              }\n        return result;      \n        if (!(root.left === null)) {console.log(root.left.data);}\n        if (!(root.right === null)) {console.log(root.right.data);}\n        this.levelOrder(root.left);\n        this.levelOrder(root.right);\n\n\t}; // End of function levelOrder\n}; // End of function BinarySearchTree\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar _input = \"\";\n\nprocess.stdin.on('data', function (data) {\n    _input += data;\n});\n\nprocess.stdin.on('end', function () {\n    var tree = new BinarySearchTree();\n    var root = null;\n    \n    var values = _input.split('\\n').map(Number);\n    \n    for (var i = 1; i < values.length; i++) {\n        root = tree.insert(root, values[i]);\n    }\n    \n    tree.levelOrder(root);\n});\n","offset":1157,"fileType":"javascript","requestStartTime":1517986943977}}
{"body": {"column":6,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n  arr.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":296,"fileType":"javascript","requestStartTime":1517987625798}}
{"body": {"column":11,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n  const list = arr.filter(item => item === k)\n  \n  if (list.)\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":350,"fileType":"javascript","requestStartTime":1517987714922}}
{"body": {"column":12,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n  let arr = []\n  for (let i = l; i <= r; i++) {\n    if (i%2 !== 0)\n        arr.\n  }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":367,"fileType":"javascript","requestStartTime":1517987865714}}
{"body": {"column":16,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1][j]=='P'){\n                    pawn = j;\n                }\n                else if(board[i][j]=='k'){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":915,"fileType":"javascript","requestStartTime":1517988423172}}
{"body": {"column":16,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1][j]=='P'){\n                    pawn = j;\n                }\n                else if(board[i][j]=='k'){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":942,"fileType":"javascript","requestStartTime":1517988429272}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1][j]=='P'){\n                    pawn = j;\n                }\n                else if(board[i][j]=='k'){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":966,"fileType":"javascript","requestStartTime":1517988433709}}
{"body": {"column":24,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                console.\n                if(board[1][j]=='P'){\n                    pawn = j;\n                }\n                else if(board[i][j]=='k'){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.log(yking);\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":689,"fileType":"javascript","requestStartTime":1517988454820}}
{"body": {"column":28,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                console.log(board[1][j])\n                if(board[1].==\"P\"){\n                    pawn = j;\n                }\n                else if(board[i][j]==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.log(yking);\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":734,"fileType":"javascript","requestStartTime":1517988481500}}
{"body": {"column":36,"line":30,"wordToComplete":"1.","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                console.log(board[1.])\n                if(board[1].charAt(j)==\"P\"){\n                    pawn = j;\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.log(yking);\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":701,"fileType":"javascript","requestStartTime":1517988592972}}
{"body": {"column":37,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                console.log(board[1].charAt(0))\n                if(board[1].charAt(j)==\"P\"){\n                    pawn = j;\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.log(yking);\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":702,"fileType":"javascript","requestStartTime":1517988600244}}
{"body": {"column":20,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the isPositive function.\n * If 'a' is positive, return \"YES\".\n * If 'a' is 0, throw an Error with the message \"Zero Error\"\n * If 'a' is negative, throw an Error with the message \"Negative Error\"\n */\nfunction isPositive(a) {\n    throw{\n        if(a > 0)\n        {\n            console.\n        }\n    }\n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    for (let i = 0; i < n; i++) {\n        const a = +(readLine());\n      \n        try {\n            console.log(isPositive(a));\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n","offset":720,"fileType":"javascript","requestStartTime":1517988585723}}
{"body": {"column":37,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                console.log(board[1].)\n                if(board[1].charAt(j)==\"P\"){\n                    pawn = j;\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.log(yking);\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":702,"fileType":"javascript","requestStartTime":1517988627312}}
{"body": {"column":37,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawn = -1;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                console.log(board[1].)\n                if(board[1].charAt(j)==\"P\"){\n                    pawn = j;\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        console.log(pawn);\n        console.log(xking);\n    console.log(yking);\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":702,"fileType":"javascript","requestStartTime":1517988646124}}
{"body": {"column":10,"line":6,"wordToComplete":"","code":"\nfunction processData(input) {\n  for () {\n    \n  }\n       \n  console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":70,"fileType":"javascript","requestStartTime":1517988875043}}
{"body": {"column":15,"line":6,"wordToComplete":"","code":"\nfunction processData(input) {\n  for () {\n    \n  }\n       \n  console.log(.)\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":75,"fileType":"javascript","requestStartTime":1517988913882}}
{"body": {"column":21,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.\n  let result = 0;\n\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":53,"fileType":"javascript","requestStartTime":1517988942769}}
{"body": {"column":27,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n  const N = +data[0];\n  for (let i = 1; i < data.)\n  let result = 0;\n\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":115,"fileType":"javascript","requestStartTime":1517989019897}}
{"body": {"column":20,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n  const N = +data[0];\n  const W = data[2].\n  let result = 0;\n\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":108,"fileType":"javascript","requestStartTime":1517989036170}}
{"body": {"column":24,"line":8,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n  const N = +data[0];\n  const X = data[1];\n  const W = data[2].map(Number)\n\n  let result = 0;\n  for (let i = 0; i , X.) {\n    \n  }\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":184,"fileType":"javascript","requestStartTime":1517989064426}}
{"body": {"column":26,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawns = [];\n        var pawn = -1;\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1].charAt(j)==\"P\"){\n                    pawns.j;\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":783,"fileType":"javascript","requestStartTime":1517989097584}}
{"body": {"column":14,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawns = [];\n        var pawn = -1;\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1].charAt(j)==\"P\"){\n                    pawns.push(j);\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        pawns.\n        if(xking== pawn || yking== 0) return 2;\n        else if(Math.abs(pawn-xking) == Math.abs(yking-0)) return 2;\n        else if((Math.abs(pawn-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(pawn-xking)==1 && Math.abs(yking-0)==2)) return 1;\n        else return 0;\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":979,"fileType":"javascript","requestStartTime":1517989116760}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n  console.\n  const N = +data[0];\n  const X = data[1];\n  const W = data[2].map(Number)\n\n  let result = 0;\n  let sum = 0;\n  for (let i = 0; i , X.length; i+=1) {\n    sum += W[i];\n    result += X[i] * W[i];\n  }\n  \n  result= result/sum;\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":76,"fileType":"javascript","requestStartTime":1517989145754}}
{"body": {"column":20,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n  console.log(data)\n  const N = +data[0];\n  const X = data[1].;\n  const W = data[2].map(Number)\n\n  let result = 0;\n  let sum = 0;\n  for (let i = 0; i , X.length; i+=1) {\n    sum += W[i];\n    result += X[i] * W[i];\n  }\n  \n  result= result/sum;\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":128,"fileType":"javascript","requestStartTime":1517989164482}}
{"body": {"column":31,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n  console.log(data)\n  const N = +data[0];\n  const X = data[1].split(' ').;\n  const W = data[2].map(Number)\n\n  let result = 0;\n  let sum = 0;\n  for (let i = 0; i , X.length; i+=1) {\n    sum += W[i];\n    result += X[i] * W[i];\n  }\n  \n  result= result/sum;\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":139,"fileType":"javascript","requestStartTime":1517989167906}}
{"body": {"column":10,"line":14,"wordToComplete":"","code":"\nfunction processData(input) {\n  const data = input.split('\\n');\n\n  const N = +data[0];\n  const X = data[1].split(' ').map(Number);\n  const W = data[2].split(' ').map(Number)\n\n  let result = 0;\n  let sum = 0;\n  for (let i = 0; i , X.length; i+=1) {\n    sum += W[i];\n    result += X[i] * W[i];\n  }\n  console.\n  result= result/sum;\n       \n  console.log(result.toFixed(1))\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":308,"fileType":"javascript","requestStartTime":1517989219386}}
{"body": {"column":67,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawns = [];\n\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1].charAt(j)==\"P\"){\n                    pawns.push(j);\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(Math.abs(x-xking) == Math.abs(yking-0) && Math.) total+= 2;\n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1086,"fileType":"javascript","requestStartTime":1517989264937}}
{"body": {"column":12,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawns = [];\n\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n            for (var j = 0;j<8;j++){\n                if(board[1].charAt(j)==\"P\"){\n                    pawns.push(j);\n                }\n                else if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n    console.\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(Math.abs(x-xking) == Math.abs(yking-0)) total+= 2;\n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":955,"fileType":"javascript","requestStartTime":1517989374125}}
{"body": {"column":15,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    \n    return arr.\n}\n\n\n","offset":591,"fileType":"javascript","requestStartTime":1517989416605}}
{"body": {"column":20,"line":48,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the isPositive function.\n * If 'a' is positive, return \"YES\".\n * If 'a' is 0, throw an Error with the message \"Zero Error\"\n * If 'a' is negative, throw an Error with the message \"Negative Error\"\n */\nfunction isPositive(a) {\n    try{\n        \n        if (a > 0)\n        {\n            console.log('YES');\n        }\n        else if(a==0)\n        {\n            throw \"Zero Error\";\n        }\n        else\n        {\n            throw \"Negative Error\";\n        }\n    }\n    catch(e)\n        {\n            console.\n        }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    for (let i = 0; i < n; i++) {\n        const a = +(readLine());\n      \n        try {\n            console.log(isPositive(a));\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n","offset":942,"fileType":"javascript","requestStartTime":1517989406279}}
{"body": {"column":26,"line":48,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the isPositive function.\n * If 'a' is positive, return \"YES\".\n * If 'a' is 0, throw an Error with the message \"Zero Error\"\n * If 'a' is negative, throw an Error with the message \"Negative Error\"\n */\nfunction isPositive(a) {\n    try{\n        \n        if (a > 0)\n        {\n            console.log('YES');\n        }\n        else if(a==0)\n        {\n            throw \"Zero Error\";\n        }\n        else\n        {\n            throw \"Negative Error\";\n        }\n    }\n    catch(e)\n        {\n            console.log(e.)\n        }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    for (let i = 0; i < n; i++) {\n        const a = +(readLine());\n      \n        try {\n            console.log(isPositive(a));\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n","offset":948,"fileType":"javascript","requestStartTime":1517989407398}}
{"body": {"column":26,"line":48,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the isPositive function.\n * If 'a' is positive, return \"YES\".\n * If 'a' is 0, throw an Error with the message \"Zero Error\"\n * If 'a' is negative, throw an Error with the message \"Negative Error\"\n */\nfunction isPositive(a) {\n    try{\n        \n        if (a > 0)\n        {\n            console.log('YES');\n        }\n        else if(a==0)\n        {\n            throw new Error (\"Zero Error\");\n        }\n        else\n        {\n            throw new Error (\"Negative Error\");\n        }\n    }\n    catch(e)\n        {\n            console.log(e.);\n        }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    for (let i = 0; i < n; i++) {\n        const a = +(readLine());\n      \n        try {\n            console.log(isPositive(a));\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n","offset":972,"fileType":"javascript","requestStartTime":1517989565506}}
{"body": {"column":10,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":69,"fileType":"javascript","requestStartTime":1517989638580}}
{"body": {"column":27,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    board.forEach(function(row){\n                   console.\n                    count ++;\n                    if(row.indexOf('P') !== -1){\n                        prawn = [count - 1, row.indexOf('P')];\n                        console.log(prawn);\n                    }\n\n                    if((row.indexOf('K') !== -1)&&(king.length === 0)){\n                        king = [count, row.indexOf('K')];\n                        console.log(king);\n                    }\n                    })\n       \n    //tower\n    if(king[0] === prawn[0]){\n        console.log(\"tower\");\n        ways += 1;\n    }\n    \n    //horse\n    if((king[0] - 1 === prawn[0]) && (king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        console.log(\"horse\");\n        ways += 1;\n    }\n\n    if(((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])) && (king[0] - 2 === prawn[0])){\n        console.log(\"\");\n        ways += 1;\n    }\n       \n   return ways;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":630,"fileType":"javascript","requestStartTime":1517989639227}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the isPositive function.\n * If 'a' is positive, return \"YES\".\n * If 'a' is 0, throw an Error with the message \"Zero Error\"\n * If 'a' is negative, throw an Error with the message \"Negative Error\"\n */\nfunction isPositive(a) {\n    console.\n    try{\n        if (a > 0)\n        {\n            console.log('YES');\n        }\n        else if(a==0)\n        {\n            throw new Error (\"Zero Error\");\n        }\n        else\n        {\n            throw new Error (\"Negative Error\");\n        }\n    }\n    catch(e)\n        {\n            console.log(e.message);\n        }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    \n    for (let i = 0; i < n; i++) {\n        const a = +(readLine());\n      \n        try {\n            console.log(isPositive(a));\n        } catch (e) {\n            console.log(e.message);\n        }\n    }\n}\n","offset":673,"fileType":"javascript","requestStartTime":1517989617023}}
{"body": {"column":12,"line":214,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [];\n    console.\n\n}\n\n\n","offset":12351,"fileType":"javascript","requestStartTime":1517989651712}}
{"body": {"column":74,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0) && (yking==1 || board[1].x-1] == \"#\")) total+= 2;\n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1088,"fileType":"javascript","requestStartTime":1517989714329}}
{"body": {"column":12,"line":4,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    for (const obj in input) {\n        obj.\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":102,"fileType":"javascript","requestStartTime":1517989851667}}
{"body": {"column":34,"line":216,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const top = number[number.]\n        i++;\n    }\n\n}\n\n\n","offset":12405,"fileType":"javascript","requestStartTime":1517989862352}}
{"body": {"column":21,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    board.forEach(function(scneraio){\n            scenario.\n                    console.log(row);\n                    count ++;\n                    if(row.indexOf('P') !== -1){\n                        prawn = [count - 1, row.indexOf('P')];\n                        console.log(prawn);\n                    }\n\n                    if((row.indexOf('K') !== -1)&&(king.length === 0)){\n                        king = [count, row.indexOf('K')];\n                        console.log(king);\n                    }\n                    })\n    if(king.length > 0){   \n        //tower\n        if(king[0] === prawn[0]){\n            console.log(\"tower\");\n            ways += 1;\n        }\n\n        //horse\n        if((king[0] - 1 === prawn[0]) && (king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            console.log(\"horse\");\n            ways += 1;\n        }\n\n        if(((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])) && (king[0] - 2 === prawn[0])){\n            console.log(\"\");\n            ways += 1;\n        }\n    }\n       \n   return ways;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":629,"fileType":"javascript","requestStartTime":1517989930435}}
{"body": {"column":9,"line":217,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        //const top = number[number.length - 1];\n        .const prime = findPrime(i-1);\n        \n        i++;\n    }\n\n}\n\n\n","offset":12429,"fileType":"javascript","requestStartTime":1517989967306}}
{"body": {"column":10,"line":217,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        //const top = number[number.length - 1];\n        ..const prime = findPrime(i-1);\n        \n        i++;\n    }\n\n}\n\n\n","offset":12430,"fileType":"javascript","requestStartTime":1517989967479}}
{"body": {"column":12,"line":215,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    number = A;\n    console.\n    while(i <= q) {\n        //const top = number[number.length - 1];\n        //const prime = findPrime(i-1);\n        \n        i++;\n    }\n\n}\n\n\n","offset":12374,"fileType":"javascript","requestStartTime":1517989989693}}
{"body": {"column":19,"line":218,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const top = number[number.length - 1];\n        const prime = findPrime(i-1);\n        foo = () =>\n        i++;\n    }\n\n}\n\n\n","offset":12475,"fileType":"javascript","requestStartTime":1517990076111}}
{"body": {"column":32,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n        var pawns = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                while(x-i != xking){\n                    if(board[i].x-i])\n                }\n                total+= 2;\n            } \n            else if(xking-x == Math.abs(yking-0) && (yking==1 || board[1].charAt(x+1) == \"#\")) total+= 2;\n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1156,"fileType":"javascript","requestStartTime":1517990096081}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n    for(var i=7;i<8;i--){\n        for(var j=7;j<8;i--){\n            if(board[i][j]==\"K\"){\n                blackKing.push(board[i][j]);\n            }\n            \n             if(board[i][j]==\"p\"){\n                blackKing.push(board[i][j]);\n            }\n             if(board[i][j]==\"p\"){\n                pawnposition.push(board[i][j]);\n            }\n        }\n        \n    }\n    \n    console.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":958,"fileType":"javascript","requestStartTime":1517990133194}}
{"body": {"column":24,"line":217,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const prime = findPrime(i-1);\n        let j = numbers.\n        i++;\n    }\n\n}\n\n\n","offset":12433,"fileType":"javascript","requestStartTime":1517990137122}}
{"body": {"column":19,"line":218,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const prime = findPrime(i-1);\n        let j = numbers.length;\n        foo = () =>\n        i++;\n    }\n\n}\n\n\n","offset":12460,"fileType":"javascript","requestStartTime":1517990152185}}
{"body": {"column":27,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n    for(var i=7;i<8;i--){\n        for(var j=board[i].;j<8;i--){\n            if(board[i][j]==\"K\"){\n                blackKing.push(board[i][j]);\n            }\n            \n             if(board[i][j]==\"p\"){\n                blackKing.push(board[i][j]);\n            }\n             if(board[i][j]==\"p\"){\n                pawnposition.push(board[i][j]);\n            }\n        }\n        \n    }\n    \n    console.log(pawnPosition)\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":616,"fileType":"javascript","requestStartTime":1517990190361}}
{"body": {"column":12,"line":136,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getKPos(board) {\n    for( var i = 0; i < 8; ++i )\n        for( var j = 0; j < 8; ++j )\n            if( board[i][j] === 'k' )\n                return [i,j];\n}\n\nfunction turningIntoRook(board, p_pos, k_pos) {\n    // on left\n    for( var i = p_pos[0]-1; i >= 0; --i ) {\n        if( board[i][p_pos[1]] === '#' )\n            continue;\n        if( board[i][p_pos[1]] !== 'k' )\n            break;\n        if( i === k_pos[0] && p_pos[1] === k_pos[1] )\n            return true;\n    }\n    // on top\n    for( var j = p_pos[1]-1; j >= 0; --j ) {\n        if( board[p_pos[0]][j] === '#' )\n            continue;\n        if( board[p_pos[0]][j] !== 'k' )\n            break;\n        if( p_pos[0] === k_pos[0] && j === k_pos[1] )\n            return true;\n    }\n    // on right\n    for( var i = p_pos[0]+1; i < 8; ++i ) {\n        if( board[i][p_pos[1]] === '#' )\n            continue;\n        if( board[i][p_pos[1]] !== 'k' )\n            break;\n        if( i === k_pos[0] && p_pos[1] === k_pos[1] )\n            return true;\n    }\n    // on bottom\n    for( var j = p_pos[1]+1; j < 8; ++j ) {\n        if( board[p_pos[0]][j] === '#' )\n            continue;\n        if( board[p_pos[0]][j] !== 'k' )\n            break;\n        if( p_pos[0] === k_pos[0] && j === k_pos[1] )\n            return true;\n    }\n    return false;\n}\n\nfunction checkBishop(board, p_pos, k_pos, vector) {\n    var i = vector[0], j = vector[1];\n    while( p_pos[0]+i >= 0 && p_pos[1]+j >= 0 ) {\n        if( board[p_pos[0]+i][p_pos[1]+j] === '#' )\n            continue;\n        if( board[p_pos[0]+i][p_pos[1]+j] !== 'k' )\n            break;\n        if( p_pos[0]+i === k_pos[0] && p_pos[1]+j === k_pos[1] )\n            return true;\n        i += vector[0];\n        j += vector[1];\n    }\n    return false\n}\n\nfunction turningIntoBishop(board, p_pos, k_pos) {\n    // on top-left\n    if( checkBishop(board, p_pos, k_pos, [-1,-1]) )\n        return true;\n    // on top-right\n    if( checkBishop(board, p_pos, k_pos, [-1,1]) )\n        return true;\n    // on bottom-right\n    if( checkBishop(board, p_pos, k_pos, [1,1]) )\n        return true;\n    // on bottom-right\n    if( checkBishop(board, p_pos, k_pos, [1,-1]) )\n        return true;\n    return false;\n}\n\nfunction turningIntoKnight(board, p_pos, k_pos) {\n    var vectors = [\n        [-2,-1],\n        [-1,-2],\n        [-2, 1],\n        [-1,2],\n        [2, 1],\n        [1, 2],\n        [2,-1],\n        [1, -2],\n    ];\n    for( var i = 0, n = vectors.length; i < n; ++i ) {\n        if(p_pos[0]+vectors[i][0] === k_pos[0] && p_pos[1]+vectors[i][1] === k_pos[1])\n            return true;\n    }\n    return false;\n}\n\nfunction getWays(board, p_pos, k_pos) {\n    board[1][p_pos[1]] = '#';\n    var sum = 0;\n    if( turningIntoRook(board, p_pos, k_pos) ) {\n        sum += 2; // rook + queen\n    }\n    if( turningIntoBishop(board, p_pos, k_pos) ) {\n        sum += 2; // bishop + queen\n    }\n    if( turningIntoKnight(board, p_pos, k_pos) ) {\n        sum += 1;\n    }\n    return sum;\n}\n\nfunction waysToGiveACheck(board) {\n    var k_pos = getKPos(board);\\\n    console.\n    var sum = 0;\n    for( var j = 0; j < 8; ++j ) {\n        if( board[1][j] === 'P' ) {\n            sum += getWays(JSON.parse(JSON.stringify(board)), [0,j], k_pos);\n        }\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":3506,"fileType":"javascript","requestStartTime":1517990204694}}
{"body": {"column":33,"line":219,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const prime = findPrime(i-1);\n        \n        foo = count => {\n            if(count === numbers.)\n        };\n        i++;\n    }\n\n}\n\n\n","offset":12476,"fileType":"javascript","requestStartTime":1517990239108}}
{"body": {"column":12,"line":120,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getKPos(board) {\n    for( var i = 0; i < 8; ++i )\n        for( var j = 0; j < 8; ++j )\n            if( board[i][j] === 'k' )\n                return [i,j];\n}\n\nfunction turningIntoRook(board, p_pos, k_pos) {\n    // on left\n    for( var i = p_pos[0]-1; i >= 0; --i ) {\n        if( board[i][p_pos[1]] === '#' )\n            continue;\n        if( board[i][p_pos[1]] !== 'k' )\n            break;\n        if( i === k_pos[0] && p_pos[1] === k_pos[1] )\n            return true;\n    }\n    // on top\n    for( var j = p_pos[1]-1; j >= 0; --j ) {\n        if( board[p_pos[0]][j] === '#' )\n            continue;\n        if( board[p_pos[0]][j] !== 'k' )\n            break;\n        if( p_pos[0] === k_pos[0] && j === k_pos[1] )\n            return true;\n    }\n    // on right\n    for( var i = p_pos[0]+1; i < 8; ++i ) {\n        if( board[i][p_pos[1]] === '#' )\n            continue;\n        if( board[i][p_pos[1]] !== 'k' )\n            break;\n        if( i === k_pos[0] && p_pos[1] === k_pos[1] )\n            return true;\n    }\n    // on bottom\n    for( var j = p_pos[1]+1; j < 8; ++j ) {\n        if( board[p_pos[0]][j] === '#' )\n            continue;\n        if( board[p_pos[0]][j] !== 'k' )\n            break;\n        if( p_pos[0] === k_pos[0] && j === k_pos[1] )\n            return true;\n    }\n    return false;\n}\n\nfunction checkBishop(board, p_pos, k_pos, vector) {\n    var i = vector[0], j = vector[1];\n    while( p_pos[0]+i >= 0 && p_pos[1]+j >= 0 ) {\n        if( board[p_pos[0]+i][p_pos[1]+j] === '#' )\n            continue;\n        if( board[p_pos[0]+i][p_pos[1]+j] !== 'k' )\n            break;\n        if( p_pos[0]+i === k_pos[0] && p_pos[1]+j === k_pos[1] )\n            return true;\n        i += vector[0];\n        j += vector[1];\n    }\n    return false\n}\n\nfunction turningIntoBishop(board, p_pos, k_pos) {\n    // on top-left\n    if( checkBishop(board, p_pos, k_pos, [-1,-1]) )\n        return true;\n    // on top-right\n    if( checkBishop(board, p_pos, k_pos, [-1,1]) )\n        return true;\n    // on bottom-right\n    if( checkBishop(board, p_pos, k_pos, [1,1]) )\n        return true;\n    // on bottom-right\n    if( checkBishop(board, p_pos, k_pos, [1,-1]) )\n        return true;\n    return false;\n}\n\nfunction turningIntoKnight(board, p_pos, k_pos) {\n    var vectors = [\n        [-2,-1],\n        [-1,-2],\n        [-2, 1],\n        [-1,2],\n        [2, 1],\n        [1, 2],\n        [2,-1],\n        [1, -2],\n    ];\n    for( var i = 0, n = vectors.length; i < n; ++i ) {\n        if(p_pos[0]+vectors[i][0] === k_pos[0] && p_pos[1]+vectors[i][1] === k_pos[1])\n            return true;\n    }\n    return false;\n}\n\nfunction getWays(board, p_pos, k_pos) {\n    console.\n    board[1][p_pos[1]] = '#';\n    var sum = 0;\n    if( turningIntoRook(board, p_pos, k_pos) ) {\n        sum += 2; // rook + queen\n    }\n    if( turningIntoBishop(board, p_pos, k_pos) ) {\n        sum += 2; // bishop + queen\n    }\n    if( turningIntoKnight(board, p_pos, k_pos) ) {\n        sum += 1;\n    }\n    return sum;\n}\n\nfunction waysToGiveACheck(board) {\n    var k_pos = getKPos(board);\n    var sum = 0;\n    for( var j = 0; j < 8; ++j ) {\n        if( board[1][j] === 'P' ) {\n            sum += getWays(JSON.parse(JSON.stringify(board)), [0,j], k_pos);\n        }\n    }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":3115,"fileType":"javascript","requestStartTime":1517990318888}}
{"body": {"column":20,"line":225,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const prime = findPrime(i-1);\n        \n        foo = count => {\n            if(count === numbers.length) {\n                return;\n            } else {\n                \n            }\n        };\n        foo(numbers.)\n        i++;\n    }\n\n}\n\n\n","offset":12593,"fileType":"javascript","requestStartTime":1517990371379}}
{"body": {"column":35,"line":222,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\nfindPrime = i => {\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \n                        61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, \n                        131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, \n                        197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, \n                        271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, \n                        353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, \n                        433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, \n                        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \n                        601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, \n                        677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, \n                        769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, \n                        859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, \n                        953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, \n                        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, \n                        1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, \n                        1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, \n                        1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, \n                        1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, \n                        1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, \n                        1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, \n                        1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, \n                        1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, \n                        1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, \n                        1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, \n                        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, \n                        2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, \n                        2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, \n                        2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, \n                        2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, \n                        2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, \n                        2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, \n                        2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, \n                        2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, \n                        2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, \n                        2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, \n                        2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, \n                        2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, \n                        3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, \n                        3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, \n                        3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, \n                        3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, \n                        3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, \n                        3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, \n                        3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, \n                        3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, \n                        3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, \n                        3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, \n                        3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, \n                        4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, \n                        4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, \n                        4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, \n                        4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423,\n                        4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, \n                        4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n                        4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, \n                        4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, \n                        4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, \n                        4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, \n                        4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, \n                        5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, \n                        5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, \n                        5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, \n                        5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, \n                        5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, \n                        5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, \n                        5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, \n                        5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, \n                        5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, \n                        5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, \n                        6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, \n                        6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, \n                        6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, \n                        6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, \n                        6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, \n                        6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, \n                        6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, \n                        6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, \n                        6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, \n                        6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, \n                        6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, \n                        7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, \n                        7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, \n                        7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, \n                        7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, \n                        7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, \n                        7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, \n                        7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, \n                        7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, \n                        7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, \n                        8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, \n                        8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, \n                        8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, \n                        8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, \n                        8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, \n                        8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, \n                        8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, \n                        8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, \n                        8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, \n                        8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, \n                        9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, \n                        9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, \n                        9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, \n                        9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, \n                        9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, \n                        9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, \n                        9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, \n                        9697, 9719, 9721, 9733];\n    return primes[i];\n}\n\nclass Stack {\n    constructor(capacity = Infinity) {\n        this._capacity = capacity;\n        this._storage = [];\n        this._min = [];\n        this._max = [];\n    }\n    push(el) {\n        if (this._storage.length < this._capacity) {\n            if (this._storage.length === 0) {\n                this._min.push(el);\n                this._max.push(el);\n            }\n            else if (this._storage.length > 0) {\n                if (this._max[this._max.length - 1] < el) {\n                    this._max.push(el);\n                }\n                else {\n                    this._max.push(this._max[this._max.length - 1])\n                }\n                if (this._min[this._min.length - 1] > el) {\n                    this._min.push(el);\n                }\n                else {\n                    this._min.push(this._min[this._min.length - 1])\n                }\n            }\n            this._storage.push(el);\n            return this._storage;\n        }\n        return 'Stack is full. Delete some elements.'\n    }\n    pop() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            this._min.pop();\n            this._max.pop();\n            this._storage.pop();\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    peek() {\n        if (this._storage.length > 0) {\n            const top = this._storage[this._storage.length - 1];\n            return top;\n        }\n        return 'Stack is empty.'\n    }\n    isEmpty() {\n        if (this._storage.length > 0) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    min() {\n        const min = this._min[this._min.length - 1];\n        return min;\n    }\n    max() {\n        const max = this._max[this._max.length - 1];\n        return max;\n    }\n    show() {\n        console.log(this._storage);\n    }\n    size() {\n        return this._storage.length;\n    }\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var q = parseInt(n_temp[1]);\n    number = readLine().split(' ');\n    number = number.map(Number);\n    \n    let A = [], B = [], i = 1;\n    \n    while(i <= q) {\n        const prime = findPrime(i-1);\n        \n        foo = count => {\n            if(count === 0) {\n                return;\n            } else {\n                const top = number.\n            }\n        };\n        foo(numbers.length);\n        i++;\n    }\n\n}\n\n\n","offset":12553,"fileType":"javascript","requestStartTime":1517990420185}}
{"body": {"column":31,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n    for(var i=7;i<8;i--){\n        for(var j=i;j<board[i].;j--){\n            if(board[i][j]==\"K\"){\n                blackKing.push(board[i][j]);\n            }\n            \n             if(board[i][j]==\"p\"){\n                blackKing.push(board[i][j]);\n            }\n             if(board[i][j]==\"p\"){\n                pawnposition.push(board[i][j]);\n            }\n        }\n        \n    }\n    \n    console.log(pawnPosition)\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":620,"fileType":"javascript","requestStartTime":1517990516544}}
{"body": {"column":23,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.)\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":586,"fileType":"javascript","requestStartTime":1517990631871}}
{"body": {"column":15,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       console.\n   }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":614,"fileType":"javascript","requestStartTime":1517990639775}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    console.\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1517990694555}}
{"body": {"column":19,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       for(var j=i;j<8;j++){\n           console.log(board[i][0][j]);\n           console.\n       }\n      \n   }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":687,"fileType":"javascript","requestStartTime":1517990785781}}
{"body": {"column":24,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       for(var j=i;j<8;j++){\n           console.log(board[i][0][j]);\n           if(board[i][0][j]===\"K\"){\n              blackKing.\n             }\n       }\n      \n   }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":729,"fileType":"javascript","requestStartTime":1517990833766}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       for(var j=i;j<8;j++){\n           //console.log(board[i][0][j]);\n           if(board[i][0][j]===\"K\"){\n              blackKing.push([i,j])\n             }\n       }\n      \n   }\n    \n    console. blackKing;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":796,"fileType":"javascript","requestStartTime":1517990883581}}
{"body": {"column":28,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    \n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    \n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    \n                }\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1091,"fileType":"javascript","requestStartTime":1517990913417}}
{"body": {"column":23,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       for(var j=i;j<8;j++){\n           //console.log(board[i][0][j]);\n           if(board[i][0][j]===\"K\"){\n               console.\n              blackKing.push([i,j])\n             }\n       }\n      \n   }\n    \n    console.log(blackKing);\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":730,"fileType":"javascript","requestStartTime":1517990917253}}
{"body": {"column":28,"line":46,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j])\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    \n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    \n                }\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1199,"fileType":"javascript","requestStartTime":1517990929149}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getKPos(board) {\n    for( var i = 0; i < 8; ++i )\n        for( var j = 0; j < 8; ++j )\n            if( board[i][j] === 'k' )\n                return [i,j];\n}\n\nfunction checkOnLine(board, p_pos, k_pos, vector) {\n    var i = vector[0], j = vector[1];\n    while( p_pos[0]+i >= 0 && p_pos[0]+i < 8 && p_pos[1]+j >= 0 && p_pos[1]+j < 8 ) {\n        console.\n        if( board[p_pos[0]+i][p_pos[1]+j] === '#' ) {\n            p_pos[0] += i;\n            p_pos[1] += j;\n            continue;\n        }\n        if( board[p_pos[0]+i][p_pos[1]+j] !== 'k' )\n            break;\n        if( p_pos[0]+i === k_pos[0] && p_pos[1]+j === k_pos[1] )\n            return true;\n    }\n    return false;\n}\n\nfunction turningIntoRook(board, p_pos, k_pos) {\n    // on left\n    if( checkOnLine(board, p_pos, k_pos, [0,-1]) )\n        return true;\n    // on top - no need\n    //if( checkOnLine(board, p_pos, k_pos, [-1,0]) )\n    //    return true;\n    // on right\n    if( checkOnLine(board, p_pos, k_pos, [0,1]) )\n        return true;\n    // on bottom\n    if( checkOnLine(board, p_pos, k_pos, [1,0]) )\n        return true;\n    return false;\n}\n\nfunction turningIntoBishop(board, p_pos, k_pos) {\n    // on top-left - no need\n    //if( checkOnLine(board, p_pos, k_pos, [-1,-1]) )\n    //    return true;\n    // on top-right - no need\n    //if( checkOnLine(board, p_pos, k_pos, [-1,1]) )\n    //    return true;\n    // on bottom-right\n    if( checkOnLine(board, p_pos, k_pos, [1,1]) )\n        return true;\n    // on bottom-right\n    if( checkOnLine(board, p_pos, k_pos, [1,-1]) )\n        return true;\n    return false;\n}\n\nfunction turningIntoKnight(board, p_pos, k_pos) {\n    var vectors = [\n        [-2,-1],\n        [-1,-2],\n        [-2, 1],\n        [-1,2],\n        [2, 1],\n        [1, 2],\n        [2,-1],\n        [1, -2],\n    ];\n    for( var i = 0, n = vectors.length; i < n; ++i ) {\n        if(p_pos[0]+vectors[i][0] === k_pos[0] && p_pos[1]+vectors[i][1] === k_pos[1])\n            return true;\n    }\n    return false;\n}\n\nfunction getWays(board, p_pos, k_pos) {\n    board[1][p_pos[1]] = '#';\n    var sum = 0;\n    if( turningIntoRook(board, p_pos, k_pos) ) {\n        sum += 2; // rook + queen\n    }\n    if( turningIntoBishop(board, p_pos, k_pos) ) {\n        sum += 2; // bishop + queen\n    }\n    if( turningIntoKnight(board, p_pos, k_pos) ) {\n        sum += 1;\n    }\n    return sum;\n}\n\nfunction waysToGiveACheck(board) {\n    var k_pos = getKPos(board);\n    var sum = 0;\n    for( var j = 0; j < 8; ++j ) {\n        if( board[1][j] === 'P' ) {\n            sum += getWays(JSON.parse(JSON.stringify(board)), [0,j], k_pos);\n        }\n    }\n    return sum;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":818,"fileType":"javascript","requestStartTime":1517990938119}}
{"body": {"column":27,"line":49,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    \n                }\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1308,"fileType":"javascript","requestStartTime":1517990941585}}
{"body": {"column":26,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.\n                }\n            }\n        }\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1415,"fileType":"javascript","requestStartTime":1517990952217}}
{"body": {"column":16,"line":56,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.push([i,j]);\n                }\n            }\n        }\n        knights.\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1486,"fileType":"javascript","requestStartTime":1517990968925}}
{"body": {"column":15,"line":61,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.push([i,j]);\n                }\n            }\n        }\n        knights.forEach(x=>{\n            if((Math.abs(x[1]-xking)== 2 && Math.abs(yking-x[0])==1) || (Math.abs(x[1]-xking)==1 && Math.abs(yking-x[0])==2)) {\n                total +=4;\n            }\n        })\n        queens.\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1694,"fileType":"javascript","requestStartTime":1517991056232}}
{"body": {"column":15,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       console.\n   }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":614,"fileType":"javascript","requestStartTime":1517991060044}}
{"body": {"column":25,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.push([i,j]);\n                }\n            }\n        }\n        knights.forEach(x=>{\n            if((Math.abs(x[1]-xking)== 2 && Math.abs(yking-x[0])==1) || (Math.abs(x[1]-xking)==1 && Math.abs(yking-x[0])==2)) {\n                total +=4;\n            }\n        })\n        queens.forEach(x=>{\n            if(x[1] == xking ||x[0]==yking) total+=4;\n            else if(Math.xking-x[1] == Math.abs(yking-x[0]))\n        })\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1786,"fileType":"javascript","requestStartTime":1517991151197}}
{"body": {"column":27,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       for(var j=0;j<board.){\n           \n       }\n       console.log(board[i][i])\n   }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":626,"fileType":"javascript","requestStartTime":1517991151602}}
{"body": {"column":19,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var blackKing=[];\n    var whiteking=[];\n    var pawnposition=[];\n   for(var i=0;i<board.length;i++){\n       for(var j=0;j<board.length;j++){\n           console.\n       }\n       console.log(board[i][i])\n   }\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":658,"fileType":"javascript","requestStartTime":1517991160596}}
{"body": {"column":14,"line":65,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.push([i,j]);\n                }\n            }\n        }\n        knights.forEach(x=>{\n            if((Math.abs(x[1]-xking)== 2 && Math.abs(yking-x[0])==1) || (Math.abs(x[1]-xking)==1 && Math.abs(yking-x[0])==2)) {\n                total +=4;\n            }\n        })\n        queens.forEach(x=>{\n            if(x[1] == xking ||x[0]==yking) total+=4;\n            else if(Math.abs(xking-x[1]) == Math.abs(yking-x[0])) total+=4;\n        })\n        rooks.\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1862,"fileType":"javascript","requestStartTime":1517991172740}}
{"body": {"column":25,"line":65,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.push([i,j]);\n                }\n            }\n        }\n        knights.forEach(x=>{\n            if((Math.abs(x[1]-xking)== 2 && Math.abs(yking-x[0])==1) || (Math.abs(x[1]-xking)==1 && Math.abs(yking-x[0])==2)) {\n                total +=4;\n            }\n        })\n        queens.forEach(x=>{\n            if(x[1] == xking ||x[0]==yking) total+=4;\n            else if(Math.abs(xking-x[1]) == Math.abs(yking-x[0])) total+=4;\n        })\n        rooks.forEach(x=>)\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1873,"fileType":"javascript","requestStartTime":1517991175950}}
{"body": {"column":16,"line":68,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    // Complete this function\n            var pawns = [];\n        var bishops = [];\n        var queens = [];\n        var knights = [];\n        var rooks = [];\n        var total = 0;\n        var xking = -1;\n        var yking = -1;\n        for (var i = 0;i<8;i++){\n              if(board[1].charAt(i)==\"P\"){\n                    pawns.push(i);\n              }\n            for (var j = 0;j<8;j++){\n                if(board[i].charAt(j)==\"k\"){\n                    xking = j;\n                    yking = i;\n                }\n                else if(board[i].charAt(j)==\"N\"){\n                    knights.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"B\"){\n                    bishops.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"Q\"){\n                    queens.push([i,j]);\n                }\n                else if(board[i].charAt(j)==\"R\"){\n                    rooks.push([i,j]);\n                }\n            }\n        }\n        knights.forEach(x=>{\n            if((Math.abs(x[1]-xking)== 2 && Math.abs(yking-x[0])==1) || (Math.abs(x[1]-xking)==1 && Math.abs(yking-x[0])==2)) {\n                total +=4;\n            }\n        })\n        queens.forEach(x=>{\n            if(x[1] == xking ||x[0]==yking) total+=4;\n            else if(Math.abs(xking-x[1]) == Math.abs(yking-x[0])) total+=4;\n        })\n        rooks.forEach(x=>{\n            if(x[1] == xking ||x[0]==yking) total+=4;\n        })\n        bishops.\n        pawns.forEach(x=>{\n            if(xking== x || yking== 0) total+=2;\n            else if(x-xking == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x-i != xking){\n                    if(board[i].charAt(x-i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}\n            } \n            else if(xking-x == Math.abs(yking-0)){\n                var i = 1;\n                var con = true;\n                while(x+i != xking){\n                    if(board[i].charAt(x+i) != \"#\"){\n                        con = false;break;\n                    } \n                    i++;\n                }\n                if(con){total+= 2;}                \n            } \n            else if((Math.abs(x-xking)== 2 && Math.abs(yking-0)==1) || (Math.abs(x-xking)==1 && Math.abs(yking-0)==2)) total+= 1;\n        })\n\n        return total;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine();\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1956,"fileType":"javascript","requestStartTime":1517991197325}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    \n    a.\n    let aStr = `${a}`;\n    let mStr = `${m}`;\n    \n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":301,"fileType":"javascript","requestStartTime":1517992098006}}
{"body": {"column":10,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    \n    a.forEach((start) => {\n        m.\n    });\n    let aStr = `${a}`;\n    let mStr = `${m}`;\n    \n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":332,"fileType":"javascript","requestStartTime":1517992128843}}
{"body": {"column":26,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    \n    for (let i = 0; i < a.)\n    let aStr = `${a}`;\n    let mStr = `${m}`;\n    \n    \n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":321,"fileType":"javascript","requestStartTime":1517992142323}}
{"body": {"column":16,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    if (!a && a.)\n    for (let i = 0; i < a.length; i++) {\n        const andrea = `${a[i]}`;\n        const maria = `${m[i]}`;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1517992246512}}
{"body": {"column":29,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    if (!a && a.length !== m.)\n    for (let i = 0; i < a.length; i++) {\n        const andrea = `${a[i]}`;\n        const maria = `${m[i]}`;\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":319,"fileType":"javascript","requestStartTime":1517992251312}}
{"body": {"column":15,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    if (!a || !m || a.length !== m.length) return 0;\n    \n    for (let i = 0; i < a.length; i++) {\n        const andrea = `${a[i]}`;\n        const maria = `${m[i]}`;\n        \n        andrea.\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":480,"fileType":"javascript","requestStartTime":1517992328593}}
{"body": {"column":34,"line":22,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    if (!a || !m || a.length !== m.length) return 0;\n    \n    for (let i = 0; i < a.length; i++) {\n        const andrea = `${a[i]}`;\n        const maria = `${m[i]}`;\n        \n        for (let j = 0; j< andrea.\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":499,"fileType":"javascript","requestStartTime":1517992349553}}
{"body": {"column":26,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    if (!a || !m || a.length !== m.length) return 0;\n    \n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        const andrea = `${a[i]}`;\n        const maria = `${m[i]}`;\n        \n        for (let j = 0; j< andrea.length; j++) {\n            count += Math.\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":559,"fileType":"javascript","requestStartTime":1517992386406}}
{"body": {"column":37,"line":24,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction minimumMoves(a, m) {\n    if (!a || !m || a.length !== m.length) return 0;\n    \n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        const andrea = `${a[i]}`;\n        const maria = `${m[i]}`;\n        \n        for (let j = 0; j< andrea.length; j++) {\n            count += Math.abs(andrea.)\n        }\n    }\n    return count;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var a;\n    var a_size = 0;\n    a_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var a = [];\n    var a_item;\n    for (var a_i = 0; a_i < a_size; a_i++) {\n        var a_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        a.push(a_item);\n    }\n\n    var m;\n    var m_size = 0;\n    m_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var m = [];\n    var m_item;\n    for (var m_i = 0; m_i < m_size; m_i++) {\n        var m_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        m.push(m_item);\n    }\n\n\n    res = minimumMoves(a, m);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":570,"fileType":"javascript","requestStartTime":1517992391022}}
{"body": {"column":12,"line":97,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getKPos(board) {\n    for( var i = 0; i < 8; ++i )\n        for( var j = 0; j < 8; ++j )\n            if( board[i][j] === 'k' )\n                return [i,j];\n}\n\nfunction checkOnLine(board, p_pos, k_pos, vector) {\n    var i = vector[0], j = vector[1];\n    while( p_pos[0]+i >= 0 && p_pos[0]+i < 8 && p_pos[1]+j >= 0 && p_pos[1]+j < 8 ) {\n        if( board[p_pos[0]+i][p_pos[1]+j] === '#' ) {\n            i += vector[0];\n            j += vector[1];\n            continue;\n        }\n        if( board[p_pos[0]+i][p_pos[1]+j] !== 'k' )\n            break;\n        if( p_pos[0]+i === k_pos[0] && p_pos[1]+j === k_pos[1] )\n            return true;\n    }\n    return false;\n}\n\nfunction turningIntoRook(board, p_pos, k_pos) {\n    // on left\n    if( checkOnLine(board, p_pos, k_pos, [0,-1]) )\n        return true;\n    // on top - no need\n    if( checkOnLine(board, p_pos, k_pos, [-1,0]) )\n        return true;\n    // on right\n    if( checkOnLine(board, p_pos, k_pos, [0,1]) )\n        return true;\n    // on bottom\n    if( checkOnLine(board, p_pos, k_pos, [1,0]) )\n        return true;\n    return false;\n}\n\nfunction turningIntoBishop(board, p_pos, k_pos) {\n    // on top-left - no need\n    if( checkOnLine(board, p_pos, k_pos, [-1,-1]) )\n        return true;\n    // on top-right - no need\n    if( checkOnLine(board, p_pos, k_pos, [-1,1]) )\n        return true;\n    // on bottom-right\n    if( checkOnLine(board, p_pos, k_pos, [1,1]) )\n        return true;\n    // on bottom-right\n    if( checkOnLine(board, p_pos, k_pos, [1,-1]) )\n        return true;\n    return false;\n}\n\nfunction turningIntoKnight(board, p_pos, k_pos) {\n    var vectors = [\n        [-2,-1],\n        [-1,-2],\n        [-2, 1],\n        [-1,2],\n        [2, 1],\n        [1, 2],\n        [2,-1],\n        [1, -2],\n    ];\n    for( var i = 0, n = vectors.length; i < n; ++i ) {\n        if(p_pos[0]+vectors[i][0] === k_pos[0] && p_pos[1]+vectors[i][1] === k_pos[1])\n            return true;\n    }\n    return false;\n}\n\nfunction getWays(board, p_pos, k_pos) {\n    console.\n    board[1][p_pos[1]] = '#';\n    board[0][p_pos[1]] = 'P';\n    var sum = 0;\n    for( var i = 0; i < 8; ++i ) {\n        for( var j = 0; j < 8; ++j ) {\n            if( board[i][j] === 'P' ) {\n                if(  (i-1 === k_pos[0] && j-1 === k_pos[1] )\n                  || (i-1 === k_pos[0] && j+1 === k_pos[1] )\n                ) {\n                    sum += 1;\n                }\n            } else if ( board[i][j] === 'R' ) {\n                if( turningIntoRook(board, [i,j], k_pos) )\n                    sum += 1;\n            } else if ( board[i][j] === 'B' ) {\n                if( turningIntoBishop(board, [i,j], k_pos) )\n                    sum += 1;\n            } else if ( board[i][j] === 'N' ) {\n                if( turningIntoKnight(board, [i,j], k_pos) )\n                    sum += 1;\n            } else if ( board[i][j] === 'Q' ) {\n                if( turningIntoRook(board, [i,j], k_pos) )\n                    sum += 1;\n                if( turningIntoBishop(board, [i,j], k_pos) )\n                    sum += 1;\n            }\n        }\n    }\n    \n    if( turningIntoRook(board, p_pos, k_pos) ) {\n        sum += 2; // rook + queen\n    }\n    if( turningIntoBishop(board, p_pos, k_pos) ) {\n        sum += 2; // bishop + queen\n    }\n    if( turningIntoKnight(board, p_pos, k_pos) ) {\n        sum += 1;\n    }\n    return sum;\n}\n\nfunction waysToGiveACheck(board) {\n    var k_pos = getKPos(board);\n    var sum = 0;\n    for( var j = 0; j < 8; ++j ) {\n        if( board[1][j] === 'P' ) {\n            if( board[0][j] === '#' )\n                sum += getWays(JSON.parse(JSON.stringify(board)), [0,j], k_pos);\n            if( j > 0 && ['p', 'b', 'n', 'r', 'q'].indexOf(board[0][j-1]) != -1 )\n                sum += getWays(JSON.parse(JSON.stringify(board)), [0,j-1], k_pos);\n            if( j < 8 && ['p', 'b', 'n', 'r', 'q'].indexOf(board[0][j+1]) != -1 )\n                sum += getWays(JSON.parse(JSON.stringify(board)), [0,j+1], k_pos);\n        }\n    }\n    return sum;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":2478,"fileType":"javascript","requestStartTime":1517992592689}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":534,"fileType":"javascript","requestStartTime":1517992804868}}
{"body": {"column":16,"line":69,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    if(row.indexOf('P') !== -1){\n                        prawn = [count - 1, row.indexOf('P')];\n  \n                    }\n\n                    if(row.indexOf('k') !== -1){\n                        king = [count, row.indexOf('k')];\n                    }\n                    });\n        });\n    \n    if(king.length > 0){\n        if((king[0] === prawn[0]) || (king[1] === prawn[1])){   \n        //tower\n            ways += 1;\n        }\n\n        //horse\n        if((king[0] - 1 === prawn[0]) && \n           ((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1]))\n           ){\n            ways += 1;\n        }\n\n         //queen\n        if(\n            ((king[0] === prawn[0]) || (king[1] === prawn[1])) || \n                (((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])) \n                 && (king[0] - 2 === prawn[0])\n                )\n        ){\n            ways += 1;\n        }\n        \n        //bishop\n        if(MATH.((king[1] - king[0]) / (prawn[1] - prawn[0])) === 0) ){\n            console.log(prawn[1] % king[1]);\n            ways += 1;\n        }\n    }\n    \n    return ways;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1668,"fileType":"javascript","requestStartTime":1517992894207}}
{"body": {"column":7,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":529,"fileType":"javascript","requestStartTime":1517992897608}}
{"body": {"column":7,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":529,"fileType":"javascript","requestStartTime":1517992925622}}
{"body": {"column":28,"line":48,"wordToComplete":"","code":"\nvar btn0 = document.getElementById('btn0');\nbtn0.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = res.innerHTML + \"0\";\n}\nvar btn1 = document.getElementById('btn1');\nbtn1.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = res.innerHTML + \"1\";\n}\nvar btnClr = document.getElementById('btnClr');\nbtnClr.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = \"\";\n}\nvar btnSum = document.getElementById('btnSum');\nbtnSum.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = res.innerHTML + \"+\";\n}\nvar btnSub = document.getElementById('btnSub');\nbtnSub.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = res.innerHTML + \"-\";\n}\nvar btnMul = document.getElementById('btnMul');\nbtnMul.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = res.innerHTML + \"*\";\n}\nvar btnDiv = document.getElementById('btnDiv');\nbtnDiv.onclick = function()\n{\n    var res = document.getElementById('res');\n    res.innerHTML = res.innerHTML + \"/\";\n}\nvar btnEql = document.getElementById('btnEql');\nbtnSum.onclick = function()\n{\n    var res = document.getElementById('res');\n    var str = res.innerHTML;\n    for (let i = 0; i < str.)\n}\n\n\n","offset":1323,"fileType":"javascript","requestStartTime":1517992938529}}
{"body": {"column":16,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    ar.forEach(function(item) {\n   \n        console.\n\n    })\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":574,"fileType":"javascript","requestStartTime":1517992957781}}
{"body": {"column":20,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    var lines = input.split(\"\\n\");\n    var linesIterator = 0;\n    var testCaseCount = parseInt(lines[linesIterator]);\n    linesIterator++;\n    for(var i = 0; i < testCaseCount; i++){\n        var nodeCount = parseInt(lines[linesIterator]);\n        linesIterator++;\n        var nodes = lines[linesIterator].split(\" \");\n        linesIterator++;\n        \n        if(isPreOrderTransversalOfBST(nodeCount, nodes)){\n            process.stdout.write(\"YES\\n\");\n        }else{\n            process.stdout.write(\"NO\\n\");\n        }    \n    }\n});\n\nfunction isPreOrderTransversalOfBST(nodeCount, nodes){\n    \n    var passedStack = [];\n    var activeNode = nodes[0];\n    for(var i = 0; i < nodeCount; i++){\n        log(\"PASS \" + i);\n        var node = nodes[0];\n        log(\"operating on node \" + node);\n        if(node < activeNode){\n            log(node + \" is less than \" + activeNode);\n            return false;\n        }\n        \n        while(!passedStack.empty() && passedStack[passedStack.length - 1] < node){ // Burns down the stack\n            activeNode = passedStack.pop();\n            log(\"switching activeNode to \" + activeNode);\n        }\n        \n        passedStack.\n            \n    }\n}\n\nfunction log(string){\n    console.log(\">\" + string);\n}\n\n","offset":1351,"fileType":"javascript","requestStartTime":1517993114201}}
{"body": {"column":17,"line":8,"wordToComplete":"","code":"\n// Add your javascript here\nvar i=0;\nvar container_dom = document.getElementById('container');\nfor(i=0;i<20;i++){\n    var button = document.createElement(\"input\");\n    button.type = \"button\";\n    button.value = \"im a button\";\n   container_dom.\n    \n}\nvar btn_list = document.getElementsByClassName(\"btn\");\nvar i=0;\nfor (i = 0;i < btn_list.length;i++) {\n   (function(index){\n        btn_list[i].onclick = function(){\n              alert(index+1)  ;\n        }    \n    })(i);\n}\n\n","offset":245,"fileType":"javascript","requestStartTime":1517993422708}}
{"body": {"column":12,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getTotalX(a, b) {\n    console.\n}\n\nfunction findGCD(arr) {\n    for (i = 0; i < arr.length; i++) { \n        \n    }\n}\n\nfunction gcd(a,b){\n    if(a == 0)\n        return b;\n    return gcd(b%a, a);\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    b = readLine().split(' ');\n    b = b.map(Number);\n    var total = getTotalX(a, b);\n    process.stdout.write(\"\" + total + \"\\n\");\n\n}\n\n\n","offset":498,"fileType":"javascript","requestStartTime":1517993391426}}
{"body": {"column":21,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getTotalX(a, b) {\n    console.log(this.)\n}\n\nfunction findGCD(arr) {\n    for (i = 0; i < arr.length; i++) { \n        \n    }\n}\n\nfunction gcd(a,b){\n    if(a == 0)\n        return b;\n    return gcd(b%a, a);\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    b = readLine().split(' ');\n    b = b.map(Number);\n    var total = getTotalX(a, b);\n    process.stdout.write(\"\" + total + \"\\n\");\n\n}\n\n\n","offset":507,"fileType":"javascript","requestStartTime":1517993394945}}
{"body": {"column":11,"line":7,"wordToComplete":"","code":"\n// Add your javascript here\nvar i=0;\nvar container_dom = document.getElementById('container');\nfor(i=0;i<20;i++){\n    var button = document.createElement(\"input\");\n    button.type = \"button\";\n    button.\n    container_dom.appendChild(button);\n    \n}\nvar btn_list = document.getElementsByClassName(\"btn\");\nvar i=0;\nfor (i = 0;i < btn_list.length;i++) {\n   (function(index){\n        btn_list[i].onclick = function(){\n              alert(index+1)  ;\n        }    \n    })(i);\n}\n\n","offset":205,"fileType":"javascript","requestStartTime":1517993478533}}
{"body": {"column":14,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    return ar.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":536,"fileType":"javascript","requestStartTime":1517994217841}}
{"body": {"column":10,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    var array = ar.split(' ')\n    var sum = 0\n    array.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":578,"fileType":"javascript","requestStartTime":1517994313707}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction simpleArraySum(n, ar) {\n    // Complete this function\n    var array = String(ar).split(' ')\n    console.\n    var sum = 0\n    for (var i = 0; i < n; i++) {\n        sum += array[i];\n    }\n    return sum\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = simpleArraySum(n, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":572,"fileType":"javascript","requestStartTime":1517994595593}}
{"body": {"column":21,"line":3,"wordToComplete":"","code":"\nlet button0 = document.getElementById(\"btn0\");\nlet button1 = document.getElementById(\"btn1\");\nlet clear = document.\n\n","offset":117,"fileType":"javascript","requestStartTime":1517994877194}}
{"body": {"column":24,"line":50,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nlet isKnightCheck = ([x, y], [kingX, kingY]) => {\n    return x - 2 === kingX && y - 1 === kingY\n        || x - 1 === kingX &&  y - 2 === kingY\n        || x - 2 === kingX && y + 1 === kingY\n        || x - 1 === kingX &&  y + 2 === kingY;\n}\n\nfunction waysToGiveACheck(board) {\n    let pawnPosition, kingPosition, whiteKingPosition;\n\n    for(let i = 0; i < board.length && !( pawnPosition && kingPosition && whiteKingPosition ); i++) {\n\n        if (board[i].includes('P')) {\n            pawnPosition = [i + 1, board[i].indexOf('P')];\n        }\n        \n        if (board[i].includes('k')) {\n            kingPosition = [i, board[i].indexOf('k')];\n        }\n        \n        if (board[i].includes('K')) {\n            whiteKingPosition = [i, board[i].indexOf('K')];\n        }\n    }\n    \n    let isWhiteKingBetween = () => {\n        if (pawnPosition[0] === kingPosition[0] && pawnPosition[0] === whiteKingPosition[0]) {\n            return Math.;\n        }\n        \n        if (pawnPosition[1] === kingPosition[1] && pawnPosition[1] === whiteKingPosition[1]) {\n            return ;\n        }\n    }\n\n    let isSameLine = pawnPosition[0] === kingPosition[0];\n    let isSameRow = pawnPosition[1] === kingPosition[1];\n    let isSameDiagonal = pawnPosition[0] - kingPosition[0] === pawnPosition[1] - kingPosition[1];\n    \n    let scenariosCnt = 0;\n    \n    if (isKnightCheck(pawnPosition, kingPosition)) scenariosCnt++;\n    if ((isSameLine || isSameRow || isSameDiagonal) && !isWhiteKingBetween()) scenariosCnt += 2;\n    \n    return scenariosCnt;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ')[0];\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1396,"fileType":"javascript","requestStartTime":1517995825579}}
{"body": {"column":8,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(arr) {\n    // Complete this function\n    let result = 0\n\n    let pawnPosition = [0, arr[1].findIndex(e => e === 'P')]\n    let kingPosition = []\n    for(let i = 0; i < 8; i++) {\n      let line = arr[i]\n      for(let j = 0; j < 8; j++) {\n        if(line[j] !== '#') {\n          if(line[j] === 'k') {\n            kingPosition = [i, j]\n            break\n          }\n        }\n      }\n      if(kingPosition) {\n        break\n      }\n    }\nconsole.\n    if(kingPosition[1] === pawnPosition[1] || kingPosition[0] === 0) {\n      // check rook and queen\n      if(kingPosition[1] === pawnPosition[1]) {\n        let ok = true\n        for(let i = kingPosition[0] - 1; i > 0; i--) {\n          if(arr[i][kingPosition[1]] !== '#') {\n            ok = false\n            break\n          }\n        }\n        if(ok) {\n          result += 2\n        }\n      } else if (kingPosition[0] === 0) {\n        let ok = true\n        let start = 0, end = 0\n        if(kingPosition[1] > pawnPosition[1]) {\n          start = pawnPosition[1] + 1\n          end = kingPosition[1]\n\n        } else {\n          start = kingPosition[1] + 1\n          end = pawnPosition[1]\n        }\n        for(let i = start; i > end; i++) {\n          if(arr[0][i] !== '#') {\n            ok = false\n            break\n          }\n        }\n        if(ok) {\n          result += 2\n        }\n      }\n    }\n\n    if(kingPosition[0] > 0 && kingPosition[0] - Math.abs(kingPosition[1] - pawnPosition[1]) === 0) {\n      // check bishop and queen\n      let ok = true\n      if(kingPosition[1] > pawnPosition[1]) {\n        for(let i = 1; i < kingPosition[0]; i++) {\n          if(arr[kingPosition[1] - i][kingPosition[1] + i] !== '#') {\n            ok = false\n            break\n          }\n        }\n      } else {\n        for(let i = 1; i < kingPosition[0]; i++) {\n          if(arr[kingPosition[1] - i][kingPosition[1] - i] !== '#') {\n            ok = false\n            break\n          }\n        }\n      }\n      if(ok) {\n        result += 2\n      }\n    }\n\n    if(kingPosition[0] === 1 || kingPosition[0] === 2) {\n      // check knight\n      if(kingPosition[0] === 1 && Math.abs(kingPosition[1] - pawnPosition[1]) === 2) {\n        result++\n      } else if (kingPosition[0] === 2 && Math.abs(kingPosition[1] - pawnPosition[1]) === 1) {\n        result++\n      }\n    }\n\n\n    return result\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":926,"fileType":"javascript","requestStartTime":1517998077487}}
{"body": {"column":16,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    return nums.\n}\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":628,"fileType":"javascript","requestStartTime":1517998253496}}
{"body": {"column":24,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    return nums.map(x =>)\n}\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":636,"fileType":"javascript","requestStartTime":1517998259960}}
{"body": {"column":10,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n  console.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":504,"fileType":"javascript","requestStartTime":1517998993812}}
{"body": {"column":42,"line":24,"wordToComplete":"","code":"\nlet result = document.getElementById(\"res\");\nlet button0 = document.getElementById(\"btn0\");\nlet button1 = document.getElementById(\"btn1\");\nlet clearB = document.getElementById(\"btnClr\");\nlet equalB = document.getElementById(\"btnEql\");\nlet sumB = document.getElementById(\"btnSum\");\nlet subB = document.getElementById(\"btnSub\");\nlet mulB = document.getElementById(\"btnMul\");\nlet divB = document.getElementById(\"btnDiv\");\nlet stored = 0;\nlet operand = 0;\nlet add0 = function() {\n    if (result.innerHTML !== \"\") {\n        result.innerHTML += \"0\";\n    }\n}\nlet add1 = function() {\n    result.innerHTML += \"1\";\n}\nlet clear = function() {\n    result.innerHTML = \"\";\n}\nlet equal = function() {\n    result.innerHTML = (stored + operand).\n}\n\n\n","offset":730,"fileType":"javascript","requestStartTime":1517999134683}}
{"body": {"column":18,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    let rp = 0;\n    let rm = 0;\n    let rz = 0;\n    for (let item of arr){\n        if (item >)\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":608,"fileType":"javascript","requestStartTime":1517999350501}}
{"body": {"column":16,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    let rp = 0;\n    let rm = 0;\n    let rz = 0;\n    for (let item of arr){\n        if (item > 0) rp++;\n        if (item < 0) rm++;\n        if (item === 0) rz++;\n    }\n    rp = rp/arr.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":698,"fileType":"javascript","requestStartTime":1517999402179}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction plusMinus(arr) {\n    // Complete this function\n    let rp = 0;\n    let rm = 0;\n    let rz = 0;\n    for (let item of arr){\n        if (item > 0) rp++;\n        if (item < 0) rm++;\n        if (item === 0) rz++;\n    }\n    rp = rp/arr.length;\n    rm = rp/arr.length;\n    rz = rp/arr.length;\n    console.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(' ');\n    arr = arr.map(Number);\n    plusMinus(arr);\n\n}\n\n\n","offset":766,"fileType":"javascript","requestStartTime":1517999423642}}
{"body": {"column":18,"line":28,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = +(readLine());\n    \n    let PI = Math.\n    \n    // Print the area of the circle:\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":591,"fileType":"javascript","requestStartTime":1517999473731}}
{"body": {"column":30,"line":26,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).;\n    \n    let PI = Math.PI;\n    \n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    \n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":569,"fileType":"javascript","requestStartTime":1517999622730}}
{"body": {"column":10,"line":28,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).toFixed(3);\n    \n    if(r >)\n    \n    let PI = Math.PI;\n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    \n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":596,"fileType":"javascript","requestStartTime":1517999695421}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).toFixed(3);\n    \n    if(r > 100 || r < 1)\n        console.\n    \n    let PI = Math.PI;\n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    \n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":627,"fileType":"javascript","requestStartTime":1517999703944}}
{"body": {"column":64,"line":29,"wordToComplete":"The number you have entered is not valid.\"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).toFixed(3);\n    \n    if(r > 100 || r < 1)\n        console.error(\"The number you have entered is not valid.\")\n    \n    let PI = Math.PI;\n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    \n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":675,"fileType":"javascript","requestStartTime":1517999718388}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).toFixed(3);\n    \n    if(r > 100 || r < 1)\n        console.error(\"The number you have entered is not valid.\")\n    \n    let PI = Math.PI;\n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    console.\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":788,"fileType":"javascript","requestStartTime":1517999726293}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.;\n}\n\n\n","offset":649,"fileType":"javascript","requestStartTime":1517999729389}}
{"body": {"column":12,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).toFixed(3);\n    \n    if(r > 100 || r < 1)\n        console.error(\"The number you have entered is not valid.\")\n    \n    let PI = Math.PI;\n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    console.log(area);\n    \n    // Print the perimeter of the circle:\n    console.\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":858,"fileType":"javascript","requestStartTime":1517999750052}}
{"body": {"column":15,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfuncrtion shiftElementsLeft(arr) {\n    return arr.[]\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    for (x = 0; )\n}\n\n\n","offset":509,"fileType":"javascript","requestStartTime":1518000047254}}
{"body": {"column":12,"line":41,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    const r = (+(readLine())).toFixed(3);\n    \n    if(r > 100 || r < 1)\n        console.error(\"The number you have entered is not valid.\")\n    \n    let PI = Math.PI;\n    let perimeter = 2 * PI * r;\n    let area = PI * (r * r);\n    \n    // Print the area of the circle:\n    console.log(area);\n    \n    // Print the perimeter of the circle:\n    console.log(perimeter);\n    \n    console.\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":923,"fileType":"javascript","requestStartTime":1518000101740}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementsLeft(arr) {\n    return arr;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.shiftElementsLeft(n_temp);\n}\n\n\n","offset":702,"fileType":"javascript","requestStartTime":1518000106911}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementsLeft(arr) {\n    return arr;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console..shiftElementsLeft(n_temp);\n}\n\n\n","offset":703,"fileType":"javascript","requestStartTime":1518000107089}}
{"body": {"column":30,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promo_rf, whiteKing_rf, board) {\n    for (var r = 1; r < board.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":585,"fileType":"javascript","requestStartTime":1518000117180}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf, board) {\n    for (var r = 1; r <= 8; r++) {\n        if (r = promoPawn_rf.)\n        for ()\n    }\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":623,"fileType":"javascript","requestStartTime":1518000229336}}
{"body": {"column":15,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementsLeft(arr) {\n    return arr.;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.log( n_temp );\n}\n\n\n","offset":508,"fileType":"javascript","requestStartTime":1518000297932}}
{"body": {"column":23,"line":24,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementsLeft(arr) {\n    return arr.shift().;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.log( n_temp );\n}\n\n\n","offset":516,"fileType":"javascript","requestStartTime":1518000308556}}
{"body": {"column":15,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementsLeft(arr) {\n    let firstEl = arr.shift();\n    return arr.;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.log( shiftElementsLeft(a) );\n}\n\n\n","offset":539,"fileType":"javascript","requestStartTime":1518000470447}}
{"body": {"column":24,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementsLeft(arr) {\n    let firstEl = arr.shift();\n    return arr.push(arr.);\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.log( shiftElementsLeft(a) );\n}\n\n\n","offset":548,"fileType":"javascript","requestStartTime":1518000479044}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftElementLeft(arr) {\n    return arr.push(arr.shift());\n    console.\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    console.log( shiftElementLeft(a) );\n}\n\n\n","offset":538,"fileType":"javascript","requestStartTime":1518000571689}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction shiftArrayElementsLeft(arr) {\n    var firstEl = arr.shift();\n    return arr.push(firstEl);\n}\n\nfunction main() {\n    console.\n    \n    //var n_temp = readLine().split(' ');\n    //var n = parseInt(n_temp[0]);\n    //var k = parseInt(n_temp[1]);\n    //a = readLine().split(' ');\n    //a = a.map(Number);\n    //console.log( shiftArrayElementsLeft(a) );\n}\n\n\n","offset":592,"fileType":"javascript","requestStartTime":1518000808746}}
{"body": {"column":21,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    if (promoPawn_rf.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":573,"fileType":"javascript","requestStartTime":1518001049671}}
{"body": {"column":38,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    if (promoPawn_rf.r = blackKing_rf.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":590,"fileType":"javascript","requestStartTime":1518001066648}}
{"body": {"column":28,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false;\n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.)\n    \n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":666,"fileType":"javascript","requestStartTime":1518001136012}}
{"body": {"column":14,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction rf_diff(rf1, rf2) {\n    d1 = Math.\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":738,"fileType":"javascript","requestStartTime":1518001291180}}
{"body": {"column":22,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction rf_diff(rf1, rf2) {\n    d1 = Math.abs(rf1.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":746,"fileType":"javascript","requestStartTime":1518001298813}}
{"body": {"column":30,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction diagCheck(rf1, rf2) {\n    d1 = Math.abs(rf1.r - rf1.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":756,"fileType":"javascript","requestStartTime":1518001397429}}
{"body": {"column":14,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction diagCheck(rf1, rf2) {\n    d1 = Math.abs(rf1.r - rf1.f);\n    d2 = Math.\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":774,"fileType":"javascript","requestStartTime":1518001410105}}
{"body": {"column":22,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction diagCheck(rf1, rf2) {\n    d1 = Math.abs(rf1.r - rf1.f);\n    d2 = Math.abs(rf2.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":782,"fileType":"javascript","requestStartTime":1518001416682}}
{"body": {"column":30,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction diagCheck(rf1, rf2) {\n    d1 = Math.abs(rf1.r - rf1.f);\n    d2 = Math.abs(rf2.r - rf2.)\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":790,"fileType":"javascript","requestStartTime":1518001422383}}
{"body": {"column":15,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":741,"fileType":"javascript","requestStartTime":1518001568377}}
{"body": {"column":24,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    \n}\n\nfunction queenCheck(promoPawn_rf, blackKing_rf) {\n    result = false; \n    if (promoPawn_rf.r = blackKing_rf.r) {\n        result = true;\n    } else if (blackKing_rf.r - blackKing_rf.f)\n    \n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nQRBK\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":750,"fileType":"javascript","requestStartTime":1518001573020}}
{"body": {"column":10,"line":146,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction canKnightGiveCheck(board, pawnCol) {\n  if (pawnCol > 1 && board[2][pawnCol - 1] === 'k'\n    || pawnCol < 7 && board[2][pawnCol + 1] === 'k'\n    || pawnCol > 2 && board[1][pawnCol - 2] === 'k'\n    || pawnCol < 6 && board[1][pawnCol + 2] === 'k') {\n    return true\n  }\n}\n\nfunction canRookGiveCheck(board, pawnCol) {\n  let col = pawnCol\n\n  while (col > 0) {\n    col--\n\n    if (board[0][col] === 'k') {\n      return true\n    }\n\n    if (board[0][col] !== '#') {\n      break\n    }\n  }\n\n  col = pawnCol\n\n  while (col < 7) {\n    col++\n\n    if (board[0][col] === 'k') {\n      return true\n    }\n\n    if (board[0][col] !== '#') {\n      break\n    }\n  }\n\n  let row = 0\n\n  while (row < 7) {\n    row++\n\n    if (board[row][pawnCol] === 'k') {\n      return true\n    }\n\n    if (board[row][pawnCol] !== '#') {\n      break\n    }\n  }\n\n  return false\n}\n\nfunction canBishopGiveCheck(board, pawnCol) {\n  let row = 0\n  let col = pawnCol\n\n  while (col > 0) {\n    col--\n    row++\n\n    if (board[row][col] === 'k') {\n      return true\n    }\n\n    if (board[row][col] !== '#') {\n      break\n    }\n  }\n\n  col = pawnCol\n  row = 0\n\n  while (col < 7) {\n    col++\n    row++\n\n    if (board[row][col] === 'k') {\n      return true\n    }\n\n    if (board[row][col] !== '#') {\n      break\n    }\n  }\n\n  return false\n}\n\nfunction canGiveCheck(board, promotedPiece, pawnCol) {\n  switch (promotedPiece) {\n    case 'N':\n      if (canKnightGiveCheck(board, pawnCol)) {\n        return true\n      }\n      break\n    case 'R':\n      if (canRookGiveCheck(board, pawnCol)) {\n        return true\n      }\n      break\n    case 'B':\n      if (canBishopGiveCheck(board, pawnCol)) {\n        return true\n      }\n      break\n    case 'Q':\n      if (canRookGiveCheck(board, pawnCol) || canBishopGiveCheck(board, pawnCol)) {\n        return true\n      }\n  }\n\n  return false\n}\n\nfunction waysToGiveACheck(board) {\n  board = board.map(row => row[0].split(''))\n  let pawnCol = board[1].indexOf('P')\n\n  board[1][pawnCol] = '#'\n  \n  console.\n\n  let promotedPieces = ['Q', 'N', 'R', 'B']\n\n  let result = 0\n\n  for (let key in promotedPieces) {\n    if (canGiveCheck(board, promotedPieces[key], pawnCol)) {\n      result++\n    }\n  }\n\n  return result\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":2437,"fileType":"javascript","requestStartTime":1518002055575}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\n// Add your javascript here\n// Your API Endpoint would be: https://8g1mbztla2.execute-api.us-east-1.amazonaws.com/teams\n$(document).\n\n","offset":134,"fileType":"javascript","requestStartTime":1518002189916}}
{"body": {"column":8,"line":4,"wordToComplete":"","code":"\n// Add your javascript here\n// Your API Endpoint would be: https://8g1mbztla2.execute-api.us-east-1.amazonaws.com/teams\n$(document).ready(function(){\n      $.\n});\n\n","offset":160,"fileType":"javascript","requestStartTime":1518002205628}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n    let lines = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":54,"fileType":"javascript","requestStartTime":1518003492613}}
{"body": {"column":26,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.;\n    \n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":93,"fileType":"javascript","requestStartTime":1518003532057}}
{"body": {"column":17,"line":5,"wordToComplete":"","code":"\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n    \n    while (lines.)\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":124,"fileType":"javascript","requestStartTime":1518003548887}}
{"body": {"column":32,"line":6,"wordToComplete":"","code":"\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n    \n    while (lines.length) {\n        let instruction = lines.\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":166,"fileType":"javascript","requestStartTime":1518003582314}}
{"body": {"column":40,"line":6,"wordToComplete":"","code":"\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n    \n    while (lines.length) {\n        let instruction = lines.shift().;\n        \n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":174,"fileType":"javascript","requestStartTime":1518003593170}}
{"body": {"column":9,"line":2,"wordToComplete":"","code":"\nfunction Edge() {\n    this.\n}\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":29,"fileType":"javascript","requestStartTime":1518003792026}}
{"body": {"column":12,"line":135,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n\n            //tower\n            if(tower(king, prawn[i])) ways += 1; \n               \n            //horse\n            if(horse(king, prawn[i]))  ways += 1;\n  \n             //queen\n            if(queen(king,prawn[i]))  ways += 1; \n\n            //bishop\n            if(bishop(king,prawn[i]))  ways += 1;   \n            \n            //move pawn back \n            let pawn = prawn[i];\n            \n            pawn[0] = pawn[0] + 1;          \n            \n            if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr)))  ways += 1;        \n\n            if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr)))  ways += 1;\n         \n            if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  ways += 1;\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    console.\n    if((Math.abs(king[1] - prawn[1]) === 1) && (Math.abs(king[0] - prawn[0]) == 2 )\n        || (Math.abs(king[1] - prawn[1]) === 2) && (Math.abs(king[0] - prawn[0]) == 1 ))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":3809,"fileType":"javascript","requestStartTime":1518003792208}}
{"body": {"column":9,"line":3,"wordToComplete":"","code":"\nfunction Edge() {\n    this.children = [];\n    this.\n}\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":53,"fileType":"javascript","requestStartTime":1518003830670}}
{"body": {"column":10,"line":7,"wordToComplete":"","code":"\nfunction Edge() {\n    this.next = null;\n    this.data = null;\n}\n\nfunction Node() {\n    this,.\n}\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":95,"fileType":"javascript","requestStartTime":1518003929824}}
{"body": {"column":9,"line":7,"wordToComplete":"","code":"\nfunction Edge() {\n    this.next = null;\n    this.data = null;\n}\n\nfunction Node() {\n    this.\n}\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":94,"fileType":"javascript","requestStartTime":1518003931699}}
{"body": {"column":9,"line":11,"wordToComplete":"","code":"\nfunction Edge() {\n    this.next = null;\n    this.data = null;\n}\n\nfunction Node() {\n    this.edges = [];\n}\n\nfunction Trie() {\n    this.\n}\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":136,"fileType":"javascript","requestStartTime":1518003961850}}
{"body": {"column":14,"line":72,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nvar characters = ['k', 'K', 'p', 'P'];\n    var pawnhor;\n    var pawnver;\n    var kinghor;\n    var kingver;\n    var kingB;\n    var c = 0;\n    var al = 0, kn = 0, rk = 0, bs = 0;\n    function waysToGiveACheck(board) {\n      for(var i=0; i<board.length; i++){\n        for(var k=0; k<characters.length; k++){\n            if(board[i].toString().match(characters[k])){\n              if(characters[k] === 'P' || characters[k] === 'p'){\n                pawnhor = (i-1);\n                pawnver = board[i].toString().indexOf(characters[k]);\n                kingB = characters[k];\n              }\n            }\n          }\n        }\n        if(kingB > 92){\n          for(var i=0; i<board.length; i++){\n            for(var k=0; k<characters.length; k++){\n              if(board[i].toString().match(characters[k])){\n                if(characters[k] === 'K'){\n                  kinghor = i;\n                  kingver = board[i].toString().indexOf(characters[k]);\n                }\n              }\n            }\n          }\n        } else {\n          for(var i=0; i<board.length; i++){\n            for(var k=0; k<characters.length; k++){\n              if(board[i].toString().match(characters[k])){\n                if(characters[k] === 'k'){\n                  kinghor = i;\n                  kingver = board[i].toString().indexOf(characters[k]);\n                }\n              }\n            }\n          }\n        }\n        checkIfqueen(pawnhor, pawnver, kinghor, kingver);\n        checkIfKnight(pawnhor, pawnver, kinghor, kingver);\n        checkIfRook(pawnhor, pawnver, kinghor, kingver);\n        checkIfBishop(pawnhor, pawnver, kinghor, kingver);\n        // c = al+kn+rk+bs;\n        // return c;\n      console.\n        c = 0;\n      }\n\n    //  var pawnhor = 0, pawnver = 3, kinghor = 1, kingver = 3;\n\n      function checkIfqueen(pawnhor, pawnver, kinghor, kingver){\n        //check horizontal\n        if(kinghor === pawnhor){\n          al++;\n\n        }\n        //check vertical\n        if(kingver === pawnver){\n          al++;\n        }\n        //check diagonals\n        for(var i=0; i<=kinghor; i++){\n          if(kinghor === i && kingver === pawnver-i){\n            al++;\n          }\n        }\n        for(var k=0; k<=kinghor; k++){\n          if(kinghor === k && kingver === pawnver+k){\n            al++;\n          }\n        }\n        return al;\n      }\n      function checkIfKnight(pawnhor, pawnver, kinghor, kingver){\n        if(kinghor === (pawnhor+1) && kingver === (pawnver-2)){\n          kn++;\n        } else if(kinghor === (pawnhor+2) && kingver === (pawnver-1)){\n          kn++;\n        } else if(kinghor === (pawnhor+2) && kingver === (pawnver+1)){\n          kn++;\n        } else if(kinghor === (pawnhor+1) && kingver === (pawnver+2)){\n          kn++;\n        }\n        return kn;\n      }\n    function checkIfRook(pawnhor, pawnver, kinghor, kingver){\n      if(kinghor === pawnhor){\n        rk++;\n      } else if(kingver === pawnver){\n        rk++;\n      }\n      return rk;\n    }\n    function checkIfBishop(pawnhor, pawnver, kinghor, kingver){\n      for(var i=0; i<=kinghor; i++){\n        if(kinghor === i && kingver === pawnver-i){\n          bs++;\n        }\n      }\n      for(var k=0; k<=kinghor; k++){\n        if(kinghor === k && kingver === pawnver+k){\n          bs++;\n        }\n      }\n      return bs;\n    }\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":2155,"fileType":"javascript","requestStartTime":1518003972822}}
{"body": {"column":9,"line":12,"wordToComplete":"","code":"\nfunction Edge() {\n    this.next = null;\n    this.data = null;\n}\n\nfunction Node() {\n    this.edges = [];\n}\n\nfunction Trie() {\n    this.head = null;\n    this.\n}\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":158,"fileType":"javascript","requestStartTime":1518004045599}}
{"body": {"column":5,"line":15,"wordToComplete":"","code":"\nfunction Edge() {\n    this.next = null;\n    this.data = null;\n}\n\nfunction Node() {\n    this.edges = [];\n}\n\nfunction Trie() {\n    this.head = null;\n    this.children = [];\n}\n\nTrie.\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":181,"fileType":"javascript","requestStartTime":1518004063050}}
{"body": {"column":15,"line":15,"wordToComplete":"","code":"\nfunction Edge() {\n    this.next = null;\n    this.data = null;\n}\n\nfunction Node() {\n    this.edges = [];\n}\n\nfunction Trie() {\n    this.head = null;\n    this.children = [];\n}\n\nTrie.prototype.\n\nfunction processData(input) {\n    let lines = input.split('\\n');\n    let firstLine = lines.shift();\n        \n    \n    while (lines.length) {\n        let instruction = lines.shift().split(' ');\n        if (instruction[0] === 'add') {\n            add()\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":191,"fileType":"javascript","requestStartTime":1518004066757}}
{"body": {"column":20,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n\n            console.\n            //tower\n            if(tower(king, prawn[i])) ways += 1; \n               \n            //horse\n            if(horse(king, prawn[i]))  ways += 1;\n  \n             //queen\n            if(queen(king,prawn[i]))  ways += 1; \n\n            //bishop\n            if(bishop(king,prawn[i]))  ways += 1;   \n            \n            //move pawn back \n            let pawn = prawn[i];\n            \n            pawn[0] = pawn[0] + 1;          \n            \n            if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr)))  ways += 1;        \n\n            if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr)))  ways += 1;\n         \n            if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  ways += 1;\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(king[0] - king[1]) == (Math.abs(prawn[1] - prawn[1])))\n        || (Math.abs(king[0] + king[1]) == (Math.abs(prawn[1] + prawn[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2027,"fileType":"javascript","requestStartTime":1518004913794}}
{"body": {"column":17,"line":27,"wordToComplete":"3.","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r = readLine();\n    const PI = 3.\n    // Print the area of the circle:\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":580,"fileType":"javascript","requestStartTime":1518005081940}}
{"body": {"column":20,"line":27,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r = readLine();\n    const PI = Math.\n    // Print the area of the circle:\n    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":583,"fileType":"javascript","requestStartTime":1518005093423}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r = readLine();\n    r= parseInt(r);\n    const PI = Math.PI;\n    \n    // Print the area of the circle:\n    console.    \n    // Print the perimeter of the circle:\n    \n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":661,"fileType":"javascript","requestStartTime":1518005120395}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction main() {\n    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.\n    let r = readLine();\n    r= parseInt(r);\n    const PI = Math.PI;\n    \n    // Print the area of the circle:\n    console.log(PI*r*r);    \n    // Print the perimeter of the circle:\n    console.\n    try {    \n        // Attempt to redefine the value of constant variable PI\n        PI = 0;\n        // Attempt to print the value of PI\n        console.log(PI);\n    } catch(error) {\n        console.error(\"You correctly declared 'PI' as a constant.\");\n    }\n}\n","offset":732,"fileType":"javascript","requestStartTime":1518005215628}}
{"body": {"column":19,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getLuckyFloorNumber(n) {\n    for (let i=0; i<n; 1++){\n        if (n + ''.)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = getLuckyFloorNumber(n);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":342,"fileType":"javascript","requestStartTime":1518005335431}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getLuckyFloorNumber(n) {\n    const avoided = ['4', '13'];\n    for (let i=0; i<n; 1++){\n        let valid = avoided.\n        if ((n + '').indexOf(3)) {\n            \n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = getLuckyFloorNumber(n);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":384,"fileType":"javascript","requestStartTime":1518005424543}}
{"body": {"column":14,"line":44,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getTotalX(a, b) {\n    var res = 0;\n    var max_a = 0;\n    var min_b = 100;\n\n    for(var x = 0; x<a.length;x++){\n        if(a[x]>max_a)max_a = a[x];\n    }\n\n    for(var x = 0; x<b.length;x++){\n        if(b[x]<min_b)min_b = b[x];\n    }\n       \n    for(var i = 0; i < a.length; i++){\n        while(max_a%a[i]!=0){\n            max_a += max_a;\n        }\n    }\n  console.log(\"min_b = \" + min_b);\n //  for(var i = 0; i<b.length ; i++){\n    var i = 0;\n    while(i<b.)\n       while(b[0]%min_b!=0 && b[2]%min_b!=0){\n           min_b -= max_a; \n       }\n //   }\n    \n console.log(\"max_a = \" + max_a);\n console.log(\"min_b = \" + min_b);\n    \n        var f = max_a;\n        while(f<=min_b){\n            if(min_b%f==0){\n                res++;\n                console.log(\"f = \" + f);\n            }\n            f += max_a;\n        }\n    \n    return res;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    b = readLine().split(' ');\n    b = b.map(Number);\n    var total = getTotalX(a, b);\n    process.stdout.write(\"\" + total + \"\\n\");\n\n}\n\n\n","offset":925,"fileType":"javascript","requestStartTime":1518005447945}}
{"body": {"column":24,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction getLuckyFloorNumber(n) {\n    const avoided = ['4', '13'];\n    for (let i=0; i<n; 1++){\n        let floor = n + '';\n        let valid = avoided.some(c => {\n           return floor.\n        });\n       \n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = getLuckyFloorNumber(n);\n    wstream.write(res + \"\\n\");\n\n    wstream.end();\n});\n\n","offset":448,"fileType":"javascript","requestStartTime":1518005471333}}
{"body": {"column":34,"line":45,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getTotalX(a, b) {\n    var res = 0;\n    var max_a = 0;\n    var min_b = 100;\n\n    for(var x = 0; x<a.length;x++){\n        if(a[x]>max_a)max_a = a[x];\n    }\n\n    for(var x = 0; x<b.length;x++){\n        if(b[x]<min_b)min_b = b[x];\n    }\n       \n    for(var i = 0; i < a.length; i++){\n        while(max_a%a[i]!=0){\n            max_a += max_a;\n        }\n    }\n  console.log(\"min_b = \" + min_b);\n //  for(var i = 0; i<b.length ; i++){\n    var i = 0;\n    while(i<b.length){\n       while(b[0]%min_b!=0 && b[b.length]%min_b!=0){\n           min_b--; \n       }\n    }\n \n //   }\n    \n console.log(\"max_a = \" + max_a);\n console.log(\"min_b = \" + min_b);\n    \n        var f = max_a;\n        while(f<=min_b){\n            if(min_b%f==0){\n                res++;\n                console.log(\"f = \" + f);\n            }\n            f += max_a;\n        }\n    \n    return res;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    b = readLine().split(' ');\n    b = b.map(Number);\n    var total = getTotalX(a, b);\n    process.stdout.write(\"\" + total + \"\\n\");\n\n}\n\n\n","offset":968,"fileType":"javascript","requestStartTime":1518005552512}}
{"body": {"column":30,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    for (index = 0; index < a.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":552,"fileType":"javascript","requestStartTime":1518005573626}}
{"body": {"column":30,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    for (index = 0; index < a.\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":552,"fileType":"javascript","requestStartTime":1518005583119}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    let diff = 0;\n    for (index = 0; index < a.length; index++) {\n        diff -= a[index][index];\n    }\n    \n    return Math.abs(diff)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":649,"fileType":"javascript","requestStartTime":1518005730005}}
{"body": {"column":5,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    .\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":293,"fileType":"javascript","requestStartTime":1518005830861}}
{"body": {"column":6,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    ..\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":294,"fileType":"javascript","requestStartTime":1518005831053}}
{"body": {"column":8,"line":16,"wordToComplete":"1.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":296,"fileType":"javascript","requestStartTime":1518005833248}}
{"body": {"column":8,"line":18,"wordToComplete":"2.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    \n    //2.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":324,"fileType":"javascript","requestStartTime":1518005840644}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction diagonalDifference(a) {\n    // Complete this function\n    let diag1 = 0;\n    let diag2 = 0;\n    \n    for (index = 0; index < a.length; index++) {\n        diag1 += a[index][index];\n        diag2 += a[a.]\n    }\n    \n    return Math.abs(diff)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var a = [];\n    for(a_i = 0; a_i < n; a_i++){\n       a[a_i] = readLine().split(' ');\n       a[a_i] = a[a_i].map(Number);\n    }\n    var result = diagonalDifference(a);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":669,"fileType":"javascript","requestStartTime":1518006022742}}
{"body": {"column":6,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    s.\n    //2.complete reversed string\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":317,"fileType":"javascript","requestStartTime":1518006025327}}
{"body": {"column":17,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction packNumbers(arr) {\n    let len =arr.\n    for(let i=0; i<len; i++)\n\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = packNumbers(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":305,"fileType":"javascript","requestStartTime":1518006105429}}
{"body": {"column":15,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let empty_array = [];\n    let splited = s.split(\",\");\n    for (i < s.)\n    //2.complete reversed string\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":404,"fileType":"javascript","requestStartTime":1518006231547}}
{"body": {"column":16,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction packNumbers(arr) {\n    let len = arr.length;\n    let res = [];\n    let count = 0;\n    let lastNum;\n    for(let i=0; i<len; i++) {\n        let cur = arr[i];\n        if (cur === lastNum) {\n            count++;\n        } else if (lastNum) {\n            res.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = packNumbers(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":523,"fileType":"javascript","requestStartTime":1518006245820}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction packNumbers(arr) {\n    let len = arr.length;\n    let res = [];\n    let count = 0;\n    let lastNum;\n    for(let i=0; i<len; i++) {\n        let cur = arr[i];\n        if (cur === lastNum) {\n            count++;\n        } else if (lastNum) {\n            res.push(lastNum + ':' + count);\n            count = 0;\n            lastNum = undefined;\n        } else {\n            res.\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = packNumbers(arr);\n    for(var res_i = 0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n\n    wstream.end();\n});\n\n","offset":641,"fileType":"javascript","requestStartTime":1518006280644}}
{"body": {"column":9,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nvar a = function greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}console.\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":910,"fileType":"javascript","requestStartTime":1518006369935}}
{"body": {"column":28,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [].\n    let splitted = s.split(\",\");\n    for (let i < s.length; i > 0; i--) {\n        splitted[i]\n    }\n    //2.complete reversed string\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":359,"fileType":"javascript","requestStartTime":1518006370747}}
{"body": {"column":15,"line":38,"wordToComplete":"Welcome.\"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nvar a = function greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}console.log(a);\nprint(\"Welcome.\")\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":933,"fileType":"javascript","requestStartTime":1518006384916}}
{"body": {"column":13,"line":21,"wordToComplete":"reversplitted","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i < s.length; i > 0; i--) {\n        reversplitted[i]\n    }\n    //2.complete reversed string\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":447,"fileType":"javascript","requestStartTime":1518006393090}}
{"body": {"column":23,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i < s.length; i > 0; i--) {\n        reversed_array.splitted[i]\n    }\n    //2.complete reversed string\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":457,"fileType":"javascript","requestStartTime":1518006396134}}
{"body": {"column":9,"line":49,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction getTotalX(a, b) {\n    var res = 0;\n    var max_a = 0;\n    var min_b = 100;\n\n    for(var x = 0; x<a.length;x++){\n        if(a[x]>max_a)max_a = a[x];\n    }\n\n    for(var x = 0; x<b.length;x++){\n        if(b[x]<min_b)min_b = b[x];\n    }\n       \n    for(var i = 0; i < a.length; i++){\n        while(max_a%a[i]!=0){\n            max_a += max_a;\n        }\n    }\n\n    var i = 0;\n    while(i<b.length){\n       while(b[0]%min_b!=0 || b[b.length-1]%min_b!=0 || b[i]%min_b!=0){\n           min_b--;\n       }\n        i++;\n    }\n console.   \nif(max_a<=min_b){\n        var f = max_a;\n        while(f<=min_b){\n            if(min_b%f==0){\n                res++;\n                console.log(\"f = \" + f);\n            }\n            f += max_a;\n        }\n}\n    else{\n        res = 0;\n    }\n    return res;\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var m = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    b = readLine().split(' ');\n    b = b.map(Number);\n    var total = getTotalX(a, b);\n    process.stdout.write(\"\" + total + \"\\n\");\n\n}\n\n\n","offset":990,"fileType":"javascript","requestStartTime":1518006514827}}
{"body": {"column":8,"line":37,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \nconsole.\n\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":901,"fileType":"javascript","requestStartTime":1518006516525}}
{"body": {"column":32,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = reversed_array.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":577,"fileType":"javascript","requestStartTime":1518006532703}}
{"body": {"column":4,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n\narr.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":295,"fileType":"javascript","requestStartTime":1518006546937}}
{"body": {"column":33,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = 0; j < reversed.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":578,"fileType":"javascript","requestStartTime":1518006572962}}
{"body": {"column":33,"line":25,"wordToComplete":"reversed_","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = 0; j < reversed_)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":578,"fileType":"javascript","requestStartTime":1518006574127}}
{"body": {"column":39,"line":25,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = 0; j < reversed_array.)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":584,"fileType":"javascript","requestStartTime":1518006575691}}
{"body": {"column":41,"line":25,"wordToComplete":"le","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = 0; j < reversed_array.le)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":586,"fileType":"javascript","requestStartTime":1518006576773}}
{"body": {"column":14,"line":26,"wordToComplete":"rev","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = 0; j < reversed_array.length; i++) {\n        if(rev)\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":613,"fileType":"javascript","requestStartTime":1518006603535}}
{"body": {"column":17,"line":27,"wordToComplete":"rever","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    for (let j = 0; j < reversed_array.length; i++) {\n        if(reversed_array[j] == A) {\n            rever\n        }\n    }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":653,"fileType":"javascript","requestStartTime":1518006666492}}
{"body": {"column":12,"line":17,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n\narr.filter(function(item){\n    console.\n    if(item === k){\n        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n})\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":330,"fileType":"javascript","requestStartTime":1518006736360}}
{"body": {"column":36,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    \n    for (let j = 0; j < reversed_array.length; i++) {\n        if(reversed_array[j] == 'A') {\n            completed_array[j] = 'T';\n        } else if (reversed_array[j] == 'T') {\n            completed_array[j] = 'A';\n        } else if (reversed_array[j] == 'G') {\n            completed_array[j] = 'C';\n        } else if (reversed_array[j] == 'C') {\n            completed_array[j] = 'G';\n        }\n    }\n    \n    let complete string = completed.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":993,"fileType":"javascript","requestStartTime":1518006849370}}
{"body": {"column":42,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    \n    for (let j = 0; j < reversed_array.length; i++) {\n        if(reversed_array[j] == 'A') {\n            completed_array[j] = 'T';\n        } else if (reversed_array[j] == 'T') {\n            completed_array[j] = 'A';\n        } else if (reversed_array[j] == 'G') {\n            completed_array[j] = 'C';\n        } else if (reversed_array[j] == 'C') {\n            completed_array[j] = 'G';\n        }\n    }\n    \n    let complete string = completed_array.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":999,"fileType":"javascript","requestStartTime":1518006862336}}
{"body": {"column":47,"line":38,"wordToComplete":"toStr","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let new_s = '';\n    let reversed_array = [];\n    let splitted = s.split(\",\");\n    for (let i = s.length; i > 0; i--) {\n        reversed_array.push(splitted[i]);\n    }\n    //2.complete reversed string\n    let completed_array = [];\n    \n    for (let j = 0; j < reversed_array.length; i++) {\n        if(reversed_array[j] == 'A') {\n            completed_array[j] = 'T';\n        } else if (reversed_array[j] == 'T') {\n            completed_array[j] = 'A';\n        } else if (reversed_array[j] == 'G') {\n            completed_array[j] = 'C';\n        } else if (reversed_array[j] == 'C') {\n            completed_array[j] = 'G';\n        }\n    }\n    \n    let complete string = completed_array.toStr\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":1004,"fileType":"javascript","requestStartTime":1518006868761}}
{"body": {"column":16,"line":65,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nvar characters = ['k', 'K', 'p', 'P'];\n    var pawnhor = 0;\n    var pawnver;\n    var kinghor;\n    var kingver;\n    var kingB;\n    var al = 0;\n    function waysToGiveACheck(board) {\n      for(var i=0; i<board.length; i++){\n        for(var k=0; k<characters.length; k++){\n            if(board[i].toString().match(characters[k])){\n              if(characters[k] === 'P' || characters[k] === 'p'){\n                pawnver = board[i].toString().indexOf(characters[k]);\n                kingB = characters[k];\n              }\n            }\n          }\n        }\n        if(kingB > 92){\n          for(var i=0; i<board.length; i++){\n            for(var k=0; k<characters.length; k++){\n              if(board[i].toString().match(characters[k])){\n                if(characters[k] === 'K'){\n                  kinghor = i;\n                  kingver = board[i].toString().indexOf(characters[k]);\n                }\n              }\n            }\n          }\n        } else {\n          for(var i=0; i<board.length; i++){\n            for(var k=0; k<characters.length; k++){\n              if(board[i].toString().match(characters[k])){\n                if(characters[k] === 'k'){\n                  kinghor = i;\n                  kingver = board[i].toString().indexOf(characters[k]);\n                }\n              }\n            }\n          }\n        }\n        countChecks(pawnhor, pawnver, kinghor, kingver);\n        console. al;\n      }\n\n      function countChecks(pawnhor, pawnver, kinghor, kingver){\n        //check horizontal\n        if(kinghor === pawnhor){\n          al++;\n        }\n        if(kinghor === pawnhor){\n          al++;\n        }\n        //check vertical\n        if(kingver === pawnver){\n          al++;\n        }\n        if(kingver === pawnver){\n          al++;\n        }\n        //check diagonals\n        for(var i=1; i<=kinghor; i++){\n          if(kinghor === i && kingver === pawnver-i){\n            al++;\n          }\n        }\n        for(var k=1; k<=kinghor; k++){\n          if(kinghor === k && kingver === pawnver+k){\n            al++;\n          }\n        }\n        for(var i=1; i<=kinghor; i++){\n          if(kinghor === i && kingver === pawnver-i){\n            al++;\n          }\n        }\n        for(var k=1; k<=kinghor; k++){\n          if(kinghor === k && kingver === pawnver+k){\n            al++;\n          }\n        }\n        //check knight turn\n        if(kinghor === (pawnhor+1) && kingver === (pawnver-2)){\n          al++;\n          console.log('knightturn1');\n        } else if(kinghor === (pawnhor+2) && kingver === (pawnver-1)){\n          al++;\n          console.log('knightturn2');\n        } else if(kinghor === (pawnhor+2) && kingver === (pawnver+1)){\n          al++;\n          console.log('knightturn3');\n        } else if(kinghor === (pawnhor+1) && kingver === (pawnver+2)){\n          al++;\n          console.log('knightturn4');\n        }\n        return al;\n      }\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n    }\n\n}\n\n\n","offset":1864,"fileType":"javascript","requestStartTime":1518006904218}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n    console.\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \nconsole.log(parameterVariable);\n\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":812,"fileType":"javascript","requestStartTime":1518006908249}}
{"body": {"column":16,"line":9,"wordToComplete":"","code":"\nvar btn = document.getElementById(\"btn5\");\n/* This sets the action to perform on a click event */\nbtn.addEventListener(\"click\", function() {\n    /* This changes the button's label */\n    var array = [1, 2, 3, 6, 9, 8, 7, 4];\n    \n    for(var i=0; i<array.length; i++){\n        var element = (\"btn\" + array[i]);\n        console.\n        var loopBtn = document.getElementById(element);\n        var loopContent = loopBtn.innerHTML;\n        alert(loopContent);\n        switch(loopContent):\n            case(1): \n                loopBtn.innerHTML = 4;\n                break;\n            case(2): \n                loopBtn.innerHTML = 1;\n                break;\n            case(3): \n                loopBtn.innerHTML = 2;\n                break; \n            case(4): \n                loopBtn.innerHTML = 7;\n                break;\n            case(6): \n                loopBtn.innerHTML = 3;\n                break; \n            case(7): \n                loopBtn.innerHTML = 8;\n                break; \n            case(8): \n                loopBtn.innerHTML = 9;\n                break; \n            case(9): \n                loopBtn.innerHTML = 6;\n                break; \n    }\n});\n\n","offset":329,"fileType":"javascript","requestStartTime":1518006996311}}
{"body": {"column":29,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    const filtered = objects.\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":652,"fileType":"javascript","requestStartTime":1518007005677}}
{"body": {"column":47,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    const filtered = objects.filter(obj => obj.)\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":670,"fileType":"javascript","requestStartTime":1518007023393}}
{"body": {"column":56,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    const filtered = objects.filter(obj => obj.x == obj.)\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":679,"fileType":"javascript","requestStartTime":1518007025494}}
{"body": {"column":20,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    const filtered = objects.filter(obj => obj.x == obj.yy)\n    return filtered.\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":703,"fileType":"javascript","requestStartTime":1518007033962}}
{"body": {"column":21,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    Print ('Hello, World!');\n    Print (\"Welcome to 10 days of Javascript!\");\n}\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \nconsole.log(greeting.);\n\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":904,"fileType":"javascript","requestStartTime":1518007121734}}
{"body": {"column":12,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    console. ('Hello, World!');\n    Print (\"Welcome to 10 days of Javascript!\");\n}\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \nconsole.log(greeting.parameterVariable);\n\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":722,"fileType":"javascript","requestStartTime":1518007143232}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    console.log('Hello, World!');\n    console. (\"Welcome to 10 days of Javascript!\");\n}\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \nconsole.log(greeting.parameterVariable);\n\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":756,"fileType":"javascript","requestStartTime":1518007151490}}
{"body": {"column":8,"line":40,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    console.log('Hello, World!');\n    console.log(\"Welcome to 10 days of Javascript!\");\n}\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \nvar parameterVariable = function greeting;\n\nconsole.\n\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":945,"fileType":"javascript","requestStartTime":1518007338292}}
{"body": {"column":30,"line":18,"wordToComplete":"split","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let splitted = s.split(\"\");\n    let reversed_array = split\n    //2.complete reversed string\n    let completed_array = [];\n    \n    for (let j = 0; j < reversed_array.length; j++) {\n        if(reversed_array[j] == 'A') {\n            completed_array[j] = 'T';\n        } else if (reversed_array[j] == 'T') {\n            completed_array[j] = 'A';\n        } else if (reversed_array[j] == 'G') {\n            completed_array[j] = 'C';\n        } else if (reversed_array[j] == 'C') {\n            completed_array[j] = 'G';\n        }\n    }\n    \n    let complete_string = completed_array.toString();\n    return complete_string;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":373,"fileType":"javascript","requestStartTime":1518007510456}}
{"body": {"column":34,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let splitted = s.split(\"\");\n    let reversed_array = splitted.\n    //2.complete reversed string\n    let completed_array = [];\n    \n    for (let j = 0; j < reversed_array.length; j++) {\n        if(reversed_array[j] == 'A') {\n            completed_array[j] = 'T';\n        } else if (reversed_array[j] == 'T') {\n            completed_array[j] = 'A';\n        } else if (reversed_array[j] == 'G') {\n            completed_array[j] = 'C';\n        } else if (reversed_array[j] == 'C') {\n            completed_array[j] = 'G';\n        }\n    }\n    \n    let complete_string = completed_array.toString();\n    return complete_string;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":377,"fileType":"javascript","requestStartTime":1518007516726}}
{"body": {"column":46,"line":34,"wordToComplete":"join","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction dnaComplement(s) {\n    //1.reverse string\n    let splitted = s.split(\"\");\n    let reversed_array = splitted.reverse();\n    //2.complete reversed string\n    let completed_array = [];\n    \n    for (let j = 0; j < reversed_array.length; j++) {\n        if(reversed_array[j] == 'A') {\n            completed_array[j] = 'T';\n        } else if (reversed_array[j] == 'T') {\n            completed_array[j] = 'A';\n        } else if (reversed_array[j] == 'G') {\n            completed_array[j] = 'C';\n        } else if (reversed_array[j] == 'C') {\n            completed_array[j] = 'G';\n        }\n    }\n    \n    let complete_string = completed_array.join\n    return complete_string;\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var s;\n    var s = __input_stdin_array[__input_currentline].trim();\n    __input_currentline += 1;\n\n\n    res = dnaComplement(s);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":909,"fileType":"javascript","requestStartTime":1518007540365}}
{"body": {"column":55,"line":36,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P_rf = {};\n    var k_rf = {};\n    var other_rf = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P_rf.r = 9 - i;\n                P_rf.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k_rf.r = 8 - i;\n                k_rf.f = j + 1;\n            } else if (board[i][j] != \"#\" || /[qnbrp]/.board[]) {\n                \n            }\n        }\n    }\n    if (queenCheck(P_rf, k_rf)) result++;\n    if (rookCheck(P_rf, k_rf)) result++;\n    if (bishopCheck(P_rf, k_rf)) result++;\n    if (knightCheck(P_rf, k_rf)) result++;\n    return result;\n}\n\nfunction queenCheck(P_rf, k_rf) { \n    return horiCheck(P_rf, k_rf) || vertCheck(P_rf, k_rf) || diagCheck(P_rf, k_rf);\n}\n\nfunction rookCheck(P_rf, k_rf) { \n    return horiCheck(P_rf, k_rf) || vertCheck(P_rf, k_rf);\n}\n\nfunction bishopCheck(P_rf, k_rf) { \n    return diagCheck(P_rf, k_rf);\n}\n\nfunction knightCheck(P_rf, k_rf) { \n    var dr = Math.abs(P_rf.r - k_rf.r);\n    var df = Math.abs(P_rf.f - k_rf.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2; \n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n    \nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":939,"fileType":"javascript","requestStartTime":1518007756373}}
{"body": {"column":25,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P_rf = {};\n    var k_rf = {};\n    var other_rf = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P_rf.r = 9 - i;\n                P_rf.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k_rf.r = 8 - i;\n                k_rf.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                other_rf.\n            }\n        }\n    }\n    if (queenCheck(P_rf, k_rf)) result++;\n    if (rookCheck(P_rf, k_rf)) result++;\n    if (bishopCheck(P_rf, k_rf)) result++;\n    if (knightCheck(P_rf, k_rf)) result++;\n    return result;\n}\n\nfunction queenCheck(P_rf, k_rf) { \n    return horiCheck(P_rf, k_rf) || vertCheck(P_rf, k_rf) || diagCheck(P_rf, k_rf);\n}\n\nfunction rookCheck(P_rf, k_rf) { \n    return horiCheck(P_rf, k_rf) || vertCheck(P_rf, k_rf);\n}\n\nfunction bishopCheck(P_rf, k_rf) { \n    return diagCheck(P_rf, k_rf);\n}\n\nfunction knightCheck(P_rf, k_rf) { \n    var dr = Math.abs(P_rf.r - k_rf.r);\n    var df = Math.abs(P_rf.f - k_rf.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2; \n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n    \nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":963,"fileType":"javascript","requestStartTime":1518007801376}}
{"body": {"column":24,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    for(i = 0; i <= arr.)\n\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":314,"fileType":"javascript","requestStartTime":1518008238419}}
{"body": {"column":18,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    return false;\n    if (diagCheck(P, k)) {\n        for (var rf in o) {\n            o[rf].\n        }\n    }\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n\nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1510,"fileType":"javascript","requestStartTime":1518008298979}}
{"body": {"column":12,"line":41,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    \n    var totalTip = (meal_cost * tip_percent) / 100;\n    var totalTax = (meal_cost * tax_percent) / 100;\n    var total = meal_cost + totalTip + totalTax;\n    console.\n    \n}\n\n}\n","offset":1069,"fileType":"javascript","requestStartTime":1518008385548}}
{"body": {"column":49,"line":41,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    \n    var totalTip = (meal_cost * tip_percent) / 100;\n    var totalTax = (meal_cost * tax_percent) / 100;\n    var total = meal_cost + totalTip + totalTax;\n    console.log('The total meal cost is ' + Math.)\n    \n}\n\n}\n","offset":1106,"fileType":"javascript","requestStartTime":1518008408465}}
{"body": {"column":18,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    let vovel = s.\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":571,"fileType":"javascript","requestStartTime":1518008421479}}
{"body": {"column":6,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(n, s, d, m){\n    // Complete this function\n    s.\n    let sum=0,counter=0;\n    for(let i = 0; i<n; i++) {\n      for(let j=i;j<i+m;j++) {\n        sum+=s[j]\n      }\n      if(sum==d) counter++\n      sum=0\n    }\n  return counter\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    s = readLine().split(' ');\n    s = s.map(Number);\n    var d_temp = readLine().split(' ');\n    var d = parseInt(d_temp[0]);\n    var m = parseInt(d_temp[1]);\n    var result = solve(n, s, d, m);\n    process.stdout.write(\"\"+result+\"\\n\");\n\n}\n\n\n","offset":523,"fileType":"javascript","requestStartTime":1518008482593}}
{"body": {"column":22,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    let vovel = s.match(/[aeiou]/gi);\n    len consonants =s.\n}\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":613,"fileType":"javascript","requestStartTime":1518008489703}}
{"body": {"column":21,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            \n            if(prawn.)\n\n   \n            //tower\n            if(tower(king, prawn[i])) ways += 1; \n               \n            //horse\n            if(horse(king, prawn[i]))  ways += 1;\n            \n             //queen\n            if(queen(king,prawn[i]))  ways += 1; \n\n            //bishop\n            if(bishop(king,prawn[i]))  ways += 1;   \n\n            //move pawn back \n            let pawn = prawn[i];\n            \n            pawn[0] = pawn[0] + 1;          \n            \n            if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr)))  ways += 1;        \n\n            if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr)))  ways += 1;\n         \n           if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  ways += 1;\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":2040,"fileType":"javascript","requestStartTime":1518008513131}}
{"body": {"column":21,"line":70,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            \n            if(prawn.)\n\n   \n            //tower\n            if(tower(king, prawn[i])) ways += 1; \n               \n            //horse\n            if(horse(king, prawn[i]))  ways += 1;\n            \n             //queen\n            if(queen(king,prawn[i]))  ways += 1; \n\n            //bishop\n            if(bishop(king,prawn[i]))  ways += 1;   \n\n            //move pawn back \n            let pawn = prawn[i];\n            \n            pawn[0] = pawn[0] + 1;          \n            \n            if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr)))  ways += 1;        \n\n            if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr)))  ways += 1;\n         \n           if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  ways += 1;\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":2040,"fileType":"javascript","requestStartTime":1518008516867}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the vowelsAndConsonants function.\n * Print your output using 'console.log()'.\n */\nfunction vowelsAndConsonants(s) {\n    let vovel = s.match(/[aeiou]/gi);\n    let consonants =s.match(/[^aeiou]/gi)\n    console.\n    }\n\nfunction main() {\n    const s = readLine();\n    \n    vowelsAndConsonants(s);\n}\n","offset":645,"fileType":"javascript","requestStartTime":1518008522376}}
{"body": {"column":30,"line":62,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    var reuslt = true;\n    if (diagCheck(P, k)) {\n        for (var i = 0; i < o.) {\n            o[rf];\n        }\n    }\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n\nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1499,"fileType":"javascript","requestStartTime":1518008589480}}
{"body": {"column":21,"line":40,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    \n    var totalTip = (meal_cost * tip_percent) / 100;\n    var totalTax = (meal_cost * tax_percent) / 100;\n    var total = Math.meal_cost + totalTip + totalTax;\n    \n    console.log('The total meal cost is ' + Math.round(total) + ' dolars' )\n    \n}\n\n}\n","offset":1029,"fileType":"javascript","requestStartTime":1518008591421}}
{"body": {"column":13,"line":33,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    var x = 2;\n    var y = 3;\n     console.\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":666,"fileType":"javascript","requestStartTime":1518008648726}}
{"body": {"column":16,"line":11,"wordToComplete":"","code":"\nvar res = document.getElementById('res');\nvar result = 999; \nvar operand1;\nvar operand2;\nconst operate = (event) => {\n    let oper = event.target.innerHTML;\n    switch(oper) {\n      case '0':\n        res.innerHTML += '0';\n        operand = parseInt(res.innerHTML,2);\n        console.\n        break;\n      case '1':\n        res.innerHTML += '1';\n        operand = parseInt(res.innerHTML,2);\n        break;\n      case 'C':\n        res.innerHTML = 0;\n        result = 0;\n        operand1 = 0;\n        operand2 = 0;\n        break;\n      case '=':\n        break;\n      case '+':\n        break;\n      case '-':\n        break;\n      case '*':\n        break;\n      case '/':\n        break;\n      default:\n        alert(\"Houston, we have a problem\");\n        break;\n    }\n  }\n\n","offset":285,"fileType":"javascript","requestStartTime":1518008666666}}
{"body": {"column":11,"line":27,"wordToComplete":"","code":"\nlet result = document.getElementById(\"res\");\nlet button0 = document.getElementById(\"btn0\");\nlet button1 = document.getElementById(\"btn1\");\nlet clearB = document.getElementById(\"btnClr\");\nlet equalB = document.getElementById(\"btnEql\");\nlet sumB = document.getElementById(\"btnSum\");\nlet subB = document.getElementById(\"btnSub\");\nlet mulB = document.getElementById(\"btnMul\");\nlet divB = document.getElementById(\"btnDiv\");\nlet stored = 0;\nlet stored2 = 0;\nlet operator = null;\nlet add0 = function() {\n    if (result.innerHTML !== \"\") {\n        result.innerHTML += \"0\";\n    }\n    if (operator !== null) stored2 = stored2 << 1 + 0;\n}\nlet add1 = function() {\n    result.innerHTML += \"1\";\n    if (operator != null) stored2 = stored2 << 1 + 1;\n}\nlet abababa = function() {\n    stored = 0;\n    stored2 = 0;\n    operator = null;\n    result.\n}\nlet equal = function() {\n    let operand = stored2;\n    let ans;\n    switch (operator) {\n        case \"+\":\n            ans = stored + operand;\n            break;\n        case \"-\":\n            ans = stored - operand;\n            break;\n        case \"/\":\n            ans = Math.floor(stored / operand);\n            break;\n        default:\n            ans = stored * operand;\n        \n    }\n    let ansString = ans.toString(2);\n    result.innerHTML = ansString;\n    stored = 0;\n    stored2 = 0;\n    operator = null;\n}\nlet sum = function() {\n    if (result.innerHTML === \"\") return;\n    stored = parseInt(result.innerHTML, 2);\n    operator = \"+\";\n    let display = result.innerHTML + \"+\";\n    result.innerHTML = display;\n}\nlet sub = function() {\n    if (result.innerHTML === \"\") return;\n    stored = parseInt(result.innerHTML, 2);\n    operator = \"-\";\n    let display = result.innerHTML + \"-\";\n    result.innerHTML = display;\n}\nlet mul = function() {\n    if (result.innerHTML === \"\") return;\n    stored = parseInt(result.innerHTML, 2);\n    operator = \"*\";\n    let display = result.innerHTML + \"*\";\n    result.innerHTML = display;\n}\nlet div = function() {\n    if (result.innerHTML === \"\") return;\n    stored = parseInt(result.innerHTML, 2);\n    operator = \"/\";\n    let display = result.innerHTML + \"/\";\n    result.innerHTML = display;\n}\n\n\n","offset":831,"fileType":"javascript","requestStartTime":1518008692433}}
{"body": {"column":21,"line":64,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    var result = true;\n    if (diagCheck(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diagCheck(P, o[i])) {\n                o[i].\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n\nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1573,"fileType":"javascript","requestStartTime":1518008750948}}
{"body": {"column":27,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction solve(n, s, d, m){\n    // Complete this function\n    s.filter((x,index)=> s.)\n    let sum=0,counter=0;\n    for(let i = 0; i<n; i++) {\n      for(let j=i;j<i+m;j++) {\n        sum+=s[j]\n      }\n      if(sum==d) counter++\n      sum=0\n    }\n  return counter\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    s = readLine().split(' ');\n    s = s.map(Number);\n    var d_temp = readLine().split(' ');\n    var d = parseInt(d_temp[0]);\n    var m = parseInt(d_temp[1]);\n    var result = solve(n, s, d, m);\n    process.stdout.write(\"\"+result+\"\\n\");\n\n}\n\n\n","offset":544,"fileType":"javascript","requestStartTime":1518008795867}}
{"body": {"column":10,"line":27,"wordToComplete":"","code":"\nvar res = document.getElementById('res');\nvar result = 999; \nvar operand1;\nvar operand2;\nconst operate = (event) => {\n  let oper = event.target.innerHTML;\n  switch(oper) {\n    case '0':\n      res.innerHTML += '0';\n      operand = parseInt(res.innerHTML,2);\n      console.log(operand);\n      break;\n    case '1':\n      res.innerHTML += '1';\n      operand = parseInt(res.innerHTML,2);\n      console.log(operand);\n      break;\n    case 'C':\n      res.innerHTML = '';\n      result = 0;\n      operand1 = 0;\n      operand2 = 0;\n      break;\n    case '=':\n      break;\n    case '+':\n      res.\n      break;\n    case '-':\n      break;\n    case '*':\n      break;\n    case '/':\n      break;\n    default:\n      alert(\"Houston, we have a problem\");\n      break;\n  }\n}\n\n\n","offset":588,"fileType":"javascript","requestStartTime":1518008896610}}
{"body": {"column":43,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    var result = true;\n    if (diagCheck(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diagCheck(P, o[i]) && o[i].) {\n                o[i].r\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n\nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction diagDiff(rf1, rf2) {\n    \n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1557,"fileType":"javascript","requestStartTime":1518009167445}}
{"body": {"column":49,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    var result = true;\n    if (diagCheck(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diagCheck(P, o[i]) && o[i].r > k.) {\n                o[i].r\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(rf1, rf2) {\n    return rf1.r == rf2.r;\n}\n\nfunction vertCheck(rf1, rf2) {\n    return rf1.f == rf2.f;\n}\n\nfunction diagCheck(rf1, rf2) {\n    var d1 = Math.abs(rf1.r - rf1.f);\n    var d2 = Math.abs(rf2.r - rf2.f);\n    return d1 == d2;\n}\n\nfunction diagDiff(rf1, rf2) {\n    \n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1563,"fileType":"javascript","requestStartTime":1518009182770}}
{"body": {"column":9,"line":34,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n \nvar object = 'o';\n    \n    name.\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":657,"fileType":"javascript","requestStartTime":1518009365637}}
{"body": {"column":10,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction divisibleSumPairs(n, k, ar) {\n    // Complete this function\n  console.\n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    ar = readLine().split(' ');\n    ar = ar.map(Number);\n    var result = divisibleSumPairs(n, k, ar);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":538,"fileType":"javascript","requestStartTime":1518009440120}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n for(var i = l; i = r; i++) {\n     var result = [];\n     if(!i%2===0) {\n         result.i;\n         return result;\n     }\n }\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":376,"fileType":"javascript","requestStartTime":1518009482894}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction getMinPrice(requiredSeats, seatPrices) {\nreturn seatPrices.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _requiredSeats = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices_rows = 0;\n    var _seatPrices_cols = 0;\n    var _seatPrices_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _seatPrices_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices = Array(_seatPrices_rows);\n    for(var _seatPrices_i=0; _seatPrices_i<_seatPrices_rows; _seatPrices_i++) {\n      _seatPrices[_seatPrices_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      _seatPrices[_seatPrices_i] = _seatPrices[_seatPrices_i].map(Number);\n    }\n    \n    res = getMinPrice(_requiredSeats, _seatPrices);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":328,"fileType":"javascript","requestStartTime":1518009522132}}
{"body": {"column":18,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction getMinPrice(requiredSeats, seatPrices) {\nreturn seatPrices.\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _requiredSeats = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices_rows = 0;\n    var _seatPrices_cols = 0;\n    var _seatPrices_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _seatPrices_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices = Array(_seatPrices_rows);\n    for(var _seatPrices_i=0; _seatPrices_i<_seatPrices_rows; _seatPrices_i++) {\n      _seatPrices[_seatPrices_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      _seatPrices[_seatPrices_i] = _seatPrices[_seatPrices_i].map(Number);\n    }\n    \n    res = getMinPrice(_requiredSeats, _seatPrices);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":328,"fileType":"javascript","requestStartTime":1518009600185}}
{"body": {"column":19,"line":29,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// The days of the week are: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\nfunction getDayName(dateString) {\n    let dayName;\n    // Write your code here\n    let date= new Date(dateString);\n    let day = date.\n    return dayName;\n}\n\nfunction main() {\n    const d = +(readLine());\n    \n    for (let i = 0; i < d; i++) {\n        const date = readLine();\n        \n        console.log(getDayName(date));\n    }\n}\n","offset":662,"fileType":"javascript","requestStartTime":1518009666239}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction getMinPrice(requiredSeats, seatPrices) {\nconst newArr = seatPrices.\nreturn newArr\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _requiredSeats = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices_rows = 0;\n    var _seatPrices_cols = 0;\n    var _seatPrices_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _seatPrices_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices = Array(_seatPrices_rows);\n    for(var _seatPrices_i=0; _seatPrices_i<_seatPrices_rows; _seatPrices_i++) {\n      _seatPrices[_seatPrices_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      _seatPrices[_seatPrices_i] = _seatPrices[_seatPrices_i].map(Number);\n    }\n    \n    res = getMinPrice(_requiredSeats, _seatPrices);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":336,"fileType":"javascript","requestStartTime":1518009711416}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1518009779401}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n// The days of the week are: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\nfunction getDayName(dateString) {\n    let dayName;\n    // Write your code here\n    let date= new Date(dateString);\n    let day = date.getDay;\n    console.\n    switch(day) {\n        case 0 :\n            dayName=\"Sunday\";\n            break;\n        case 1 :\n            dayName=\"Monday\";\n            break;\n        case 2 :\n            dayName=\"Tuesday\";\n            break;\n        case 3 :\n            dayName=\"Wednesday\";\n            break;   \n        case 4 :\n            dayName=\"Thursday\";\n            break;\n        case 5 :\n            dayName=\"Friday\";\n            break;\n        case 6 :\n            dayName=\"Saturday\";\n            break;\n    }\n    return dayName;\n}\n\nfunction main() {\n    const d = +(readLine());\n    \n    for (let i = 0; i < d; i++) {\n        const date = readLine();\n        \n        console.log(getDayName(date));\n    }\n}\n","offset":682,"fileType":"javascript","requestStartTime":1518009792747}}
{"body": {"column":26,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction getMinPrice(requiredSeats, seatPrices) {\nconst newArr = seatPrices.\nreturn newArr\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _requiredSeats = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices_rows = 0;\n    var _seatPrices_cols = 0;\n    var _seatPrices_rows = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    var _seatPrices_cols = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _seatPrices = Array(_seatPrices_rows);\n    for(var _seatPrices_i=0; _seatPrices_i<_seatPrices_rows; _seatPrices_i++) {\n      _seatPrices[_seatPrices_i] = __input_stdin_array[__input_currentline].trim().split(' ')\n      __input_currentline += 1;\n      _seatPrices[_seatPrices_i] = _seatPrices[_seatPrices_i].map(Number);\n    }\n    \n    res = getMinPrice(_requiredSeats, _seatPrices);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":336,"fileType":"javascript","requestStartTime":1518009890005}}
{"body": {"column":28,"line":89,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i];\n\n            pawn[0] = pawn[0] + 1; \n            let moveMadeCheck = false\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    console.()\n\n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1; \n\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1;   \n \n             }\n          }\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":2837,"fileType":"javascript","requestStartTime":1518009911671}}
{"body": {"column":64,"line":33,"wordToComplete":"","code":"\nvar res = document.getElementById('res');\nvar result = 999; \nvar operand = 0;\nvar operand1 = 0;\nvar operand2 = 0;\nconst display = (text) => {\n  console.log(text);\n  console.log(\"operand: \" + operand);\n  console.log(\"operand1: \" + operand1);\n  console.log(\"oeprand2: \" + operand2);\n}\nconst rIn = (token) => { res.innerHTML += token; }\nconst operate = (event) => {\n  let oper = event.target.innerHTML;\n  switch(oper) {\n    case '0':\n      rIn('0');\n      operand = parseInt(res.innerHTML,2);\n      break;\n    case '1':\n      rIn('1');\n      operand = parseInt(res.innerHTML,2);\n      break;\n    case 'C':\n      res.innerHTML = '';\n      result = 0;\n      operand1 = 0;\n      operand2 = 0;\n      break;\n    case '=':\n      display'= in');'\n      operand2 = operand;\n      result = evan (operand1.toString(2) + operator + operand2. paseInt(operand2,2))\n      break;\n    case '+':\n      rIn('+');\n      display(\"+ in\");\n      operand1 = operand;\n      operator = '+';\n      operand=0;\n      display(\"+ out\");\n      break;\n    case '-':\n      rIn('-');\n      operand1 = operand;\n      operator = '-';\n      operand=0;\n      break;\n    case '*':\n      rIn('*');\n      operand1 = operand;\n      operator = '*';\n      operand=0;\n      break;\n    case '/':\n      rIn('/');\n      operand1 = operand;\n      operator = '/';\n      operand=0;\n      break;\n    default:\n      alert(\"Houston, we have a problem\");\n      break;\n  }\n}\n\n","offset":829,"fileType":"javascript","requestStartTime":1518009951867}}
{"body": {"column":34,"line":71,"wordToComplete":"let pawn = prawn[i].;","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            //let pawn = prawn[i].;\n            //pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    console.log(ways);\n\n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                    console.log(ways);\n\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    console.log(ways);\n\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n                    console.log(ways);\n \n             }\n          }\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":2109,"fileType":"javascript","requestStartTime":1518010054839}}
{"body": {"column":32,"line":71,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            move pawn back \n            let pawn = prawn[i].;\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    console.log(ways);\n\n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                    console.log(ways);\n\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    console.log(ways);\n\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n                    console.log(ways);\n \n             }\n          }\n        }\n        \n        \n        \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":2105,"fileType":"javascript","requestStartTime":1518010064920}}
{"body": {"column":33,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    var applesPositions = apples.\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":589,"fileType":"javascript","requestStartTime":1518010606828}}
{"body": {"column":17,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction findDigits(n) {\n    // Complete this function\n    var toto = n.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        var result = findDigits(n);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":531,"fileType":"javascript","requestStartTime":1518010613586}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    console.\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":692,"fileType":"javascript","requestStartTime":1518010736114}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction findDigits(n) {\n    // Complete this function\n    var toto = n.toString();\n    var tata = toto.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        var result = findDigits(n);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":563,"fileType":"javascript","requestStartTime":1518010737105}}
{"body": {"column":9,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction findDigits(n) {\n    // Complete this function\n    var toto = n.toString();\n    var tata = toto.split('');\n    var cpt = 0;\n    tata.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        var result = findDigits(n);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":600,"fileType":"javascript","requestStartTime":1518010752921}}
{"body": {"column":16,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction findDigits(n) {\n    // Complete this function\n    var toto = n.toString();\n    var tata = toto.split('');\n    var cpt = 0;\n    return tata.\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        var result = findDigits(n);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":607,"fileType":"javascript","requestStartTime":1518010777059}}
{"body": {"column":20,"line":76,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    var absDiff = function (x, y) {\n        return Math.\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && o[i].f > k.f) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1804,"fileType":"javascript","requestStartTime":1518010803084}}
{"body": {"column":26,"line":76,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    var absDiff = function (x, y) {\n        return Math.abs(x.)\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && o[i].f > k.f) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1810,"fileType":"javascript","requestStartTime":1518010811115}}
{"body": {"column":35,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    var orangesPositions = oranges.\n    \n    console.log(applesPositions);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":715,"fileType":"javascript","requestStartTime":1518010816682}}
{"body": {"column":20,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    var orangesPositions = oranges.map((distance) => a + distance);\n    \n    //now check how much fruit are in\n    applesPositions.\n    \n    \n    \n    console.log(applesPositions);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":811,"fileType":"javascript","requestStartTime":1518010879012}}
{"body": {"column":32,"line":76,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k)) result++;\n    if (rookCheck(P, k)) result++;\n    if (bishopCheck(P, k)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k) || diagCheck(P, k);\n}\n\nfunction rookCheck(P, k) {\n    return horiCheck(P, k) || vertCheck(P, k);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    var absDiff = function (x) {\n        return Math.abs(P.f - x.)\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && o[i].f > k.f) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1813,"fileType":"javascript","requestStartTime":1518010901501}}
{"body": {"column":12,"line":6,"wordToComplete":"","code":"\nfunction processData(inputString) {\n    // This line of code prints the first line of output\n    console.log(\"Hello, World.\");\n    \n    // Write the second line of output that prints the contents of 'inputString' here.\n    console.\n} \n\n\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n","offset":233,"fileType":"javascript","requestStartTime":1518011015380}}
{"body": {"column":45,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    var orangesPositions = oranges.map((distance) => a + distance);\n    \n    //now check how much fruit are in\n    applesPositions.forEach((apple) => () ? :  )\n    \n    \n    \n    console.log(applesPositions);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":836,"fileType":"javascript","requestStartTime":1518011039545}}
{"body": {"column":47,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    var orangesPositions = oranges.map((distance) => a + distance);\n    \n    //now check how much fruit are in\n    applesPositions.forEach((apple) => () ?  :    )\n    \n    \n    \n    console.log(applesPositions);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":838,"fileType":"javascript","requestStartTime":1518011045935}}
{"body": {"column":15,"line":28,"wordToComplete":"4.","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i = 3;\n    var _d = 4.\n\n    // Read and save an integer, double, and String to your variables.\n\n    // Print the sum of both integer variables on a new line.\n\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":598,"fileType":"javascript","requestStartTime":1518011207088}}
{"body": {"column":11,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    var orangesPositions = oranges.map((distance) => a + distance);\n    \n    //now check how much fruit are in\n    var appleInHouse = 0;\n    applesPositions.forEach((apple) => (apple >= s && apple <= t ) ? appleInHouse++  : null   );\n    \n    var orangesInHouse = 0;\n    orangesPositions.forEach((orange) => (orange >= s && orange <= t ) ? orangesInHouse++  : null   );\n   \n    \n    console.log(appleInHouse);\n    conseo.\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":1101,"fileType":"javascript","requestStartTime":1518011221851}}
{"body": {"column":12,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesPositions = apples.map( (distance) => a + distance  );\n    \n    var orangesPositions = oranges.map((distance) => a + distance);\n    \n    //now check how much fruit are in\n    var appleInHouse = 0;\n    applesPositions.forEach((apple) => (apple >= s && apple <= t ) ? appleInHouse++  : null   );\n    \n    var orangesInHouse = 0;\n    orangesPositions.forEach((orange) => (orange >= s && orange <= t ) ? orangesInHouse++  : null   );\n   \n    \n    console.log(appleInHouse);\n    console.\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":1102,"fileType":"javascript","requestStartTime":1518011225362}}
{"body": {"column":12,"line":34,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i = 3;\n    var _d = 4.0;\n    var _s = \"is the best\";\n\n    // Read and save an integer, double, and String to your variables.\n    \n    // Print the sum of both integer variables on a new line.\n    console.\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":780,"fileType":"javascript","requestStartTime":1518011240546}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i = 3;\n    var _d = 4.0;\n    var _s = \"is the best\";\n\n    // Read and save an integer, double, and String to your variables.\n    \n    // Print the sum of both integer variables on a new line.\n    console.log(i + _i);\n    // Print the sum of the double variables on a new line.\n    cosnole.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":865,"fileType":"javascript","requestStartTime":1518011255217}}
{"body": {"column":12,"line":40,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i = 3;\n    var _d = 4.0;\n    var _s = \"is the best\";\n\n    // Read and save an integer, double, and String to your variables.\n    \n    // Print the sum of both integer variables on a new line.\n    console.log(i + _i);\n    // Print the sum of the double variables on a new line.\n    cosnole.log(d + _d);\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    console.\n    \n\n}\n","offset":1010,"fileType":"javascript","requestStartTime":1518011271904}}
{"body": {"column":9,"line":28,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction findDigits(n) {\n    // Complete this function\n    var toto = n.toString();\n    var tata = toto.split('');\n    var cpt = 0;\n    tata.\n    return (\n        tata.reduce((acc, x) => {\n            if (n % parseInt(x) === 0) return acc++;\n        }, 0)\n    );\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var n = parseInt(readLine());\n        var result = findDigits(n);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":600,"fileType":"javascript","requestStartTime":1518011515728}}
{"body": {"column":32,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesInDahouse = apples.map( (distance) => ((a + distance) >= s && (a + distance) <= t ) ? \"I'm a fruit\"  : null );\n    var orangesInDahouse = oranges.map( (distance) => ((a + distance) >= s && (a + distance) <= t ) ? \"I'm a fruit\"  : null );\n\n    \n    console.log(applesInDahouse.);\n    console.log(orangesInDahouse);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":896,"fileType":"javascript","requestStartTime":1518011824963}}
{"body": {"column":33,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    // Complete this function\n    \n    //calculate the final position for each fruit\n    var applesInDahouse = apples.map( (distance) => ((a + distance) >= s && (a + distance) <= t ) ? \"I'm a fruit\"  : null );\n    var orangesInDahouse = oranges.map( (distance) => ((a + distance) >= s && (a + distance) <= t ) ? \"I'm a fruit\"  : null );\n\n    \n    console.log(applesInDahouse.length);\n    console.log(orangesInDahouse.);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":938,"fileType":"javascript","requestStartTime":1518011829677}}
{"body": {"column":8,"line":38,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    \n}\nconsole.\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":903,"fileType":"javascript","requestStartTime":1518011828562}}
{"body": {"column":31,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i;\n    var _d;\n    var _s;\n\n    // Read and save an integer, double, and String to your variables.\n    _i = readLine();\n    _d = readLine();\n    _s = readLine();\n    // Print the sum of both integer variables on a new line.\n    console.log(i + Number(_i));\n    // Print the sum of the double variables on a new line.\n    console.log(d + Number(_d).);\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    console.log(s + _s);\n    \n\n}\n","offset":924,"fileType":"javascript","requestStartTime":1518011892983}}
{"body": {"column":23,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let prawn = [];\n    let king = [];\n    let queenArr = [];\n    let rookArr = [];\n    let knightArr = [];\n    let bishopArr = [];\n    \n     let blocker = false;\n    \n    let locations = {}.\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':   \n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":722,"fileType":"javascript","requestStartTime":1518011921209}}
{"body": {"column":26,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i;\n    var _d;\n    var _s;\n\n    // Read and save an integer, double, and String to your variables.\n    _i = readLine();\n    _d = readLine();\n    _s = readLine();\n    // Print the sum of both integer variables on a new line.\n    console.log(i + Number(_i));\n    // Print the sum of the double variables on a new line.\n    console.log(Number(d). + Number(_d).toFixed(1));\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    console.log(s + _s);\n    \n\n}\n","offset":919,"fileType":"javascript","requestStartTime":1518011941971}}
{"body": {"column":42,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.\n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":1012,"fileType":"javascript","requestStartTime":1518012020162}}
{"body": {"column":48,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.\n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":1018,"fileType":"javascript","requestStartTime":1518012021602}}
{"body": {"column":53,"line":40,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.\n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":1023,"fileType":"javascript","requestStartTime":1518012029458}}
{"body": {"column":42,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x = rowcount;\n                                locations.\n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":1079,"fileType":"javascript","requestStartTime":1518012044066}}
{"body": {"column":48,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x = rowcount;\n                                locations.black.\n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":1085,"fileType":"javascript","requestStartTime":1518012045994}}
{"body": {"column":53,"line":41,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x = rowcount;\n                                locations.black.king.\n                                king = [count, rowCount];\n                                break;\n                            case 'P':\n                                prawn.push([count -1 , rowCount]);\n                                break;\n                            case 'Q': \n                                queenArr = [count, rowCount];\n                                break;\n                            case 'N': \n                                knightArr = [count, rowCount];\n                                break;\n                            case 'B':\n                                bishopArr = [count, rowCount];\n                                break;\n                            case 'R':\n                                rookArr = [count, rowCount];\n                                break;\n                        }\n                    });\n                    \n        });\n    \n    });\n    if(king.length > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":1090,"fileType":"javascript","requestStartTime":1518012051314}}
{"body": {"column":12,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n    console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":44,"fileType":"javascript","requestStartTime":1518012074066}}
{"body": {"column":22,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n    console.log(input.)\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":54,"fileType":"javascript","requestStartTime":1518012097435}}
{"body": {"column":6,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(\"\").\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":867,"fileType":"javascript","requestStartTime":1518012093887}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    \n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1667,"fileType":"javascript","requestStartTime":1518012102534}}
{"body": {"column":18,"line":2,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":50,"fileType":"javascript","requestStartTime":1518012121260}}
{"body": {"column":45,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":108,"fileType":"javascript","requestStartTime":1518012148148}}
{"body": {"column":9,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(\"\").click(function () {\n   $(\"\").    \n});\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":896,"fileType":"javascript","requestStartTime":1518012147806}}
{"body": {"column":12,"line":51,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger);\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1874,"fileType":"javascript","requestStartTime":1518012151476}}
{"body": {"column":12,"line":54,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger);\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal);\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":2101,"fileType":"javascript","requestStartTime":1518012171628}}
{"body": {"column":47,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i;\n    var _d;\n    var _s;\n\n    // Read and save an integer, double, and String to your variables.\n    _i = readLine();\n    _d = readLine();\n    _s = readLine();\n    // Print the sum of both integer variables on a new line.\n    console.log(i + parseInt(_i));\n    // Print the sum of the double variables on a new line.\n    console.log(parseFloat(d) + parseFloat(_d).);\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    console.log(s + _s);\n    \n\n}\n","offset":942,"fileType":"javascript","requestStartTime":1518012221485}}
{"body": {"column":30,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i;\n    var _d;\n    var _s;\n\n    // Read and save an integer, double, and String to your variables.\n    _i = readLine();\n    _d = readLine();\n    _s = readLine();\n    // Print the sum of both integer variables on a new line.\n    console.log(i + parseInt(_i));\n    // Print the sum of the double variables on a new line.\n    console.log(parseFloat(d). + parseFloat(_d).toFixed(1));\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    console.log(s + _s);\n    \n\n}\n","offset":925,"fileType":"javascript","requestStartTime":1518012232045}}
{"body": {"column":34,"line":7,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ');\n    \n    var n = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=n;i++) seqArr.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":205,"fileType":"javascript","requestStartTime":1518012247825}}
{"body": {"column":28,"line":42,"wordToComplete":"4.","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n    const secondDecimal = 4.\n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    console.log(firstInteger + secondInteger);\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    console.log(firstDecimal + secondDecimal);\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.log(firstString + secondString);\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1393,"fileType":"javascript","requestStartTime":1518012243737}}
{"body": {"column":6,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n$(\"\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":843,"fileType":"javascript","requestStartTime":1518012284772}}
{"body": {"column":9,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n$(\"\").click(function () {\n   $(\"\"). \n});\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":872,"fileType":"javascript","requestStartTime":1518012311083}}
{"body": {"column":56,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').;\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        \n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":119,"fileType":"javascript","requestStartTime":1518012329056}}
{"body": {"column":29,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n// If a door is locked and you unlock it, then\n// if the next consecutive door is locked, it will automatically get unlocked.\n// if the next consecutive door is already unlocked, nothing will happen.\n// there will be no effect on any following door.\n\nfunction revisedRussianRoulette(doors) {\n    for(let i = 0; i < doors.)\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":780,"fileType":"javascript","requestStartTime":1518012349735}}
{"body": {"column":6,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n$(\"\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1034,"fileType":"javascript","requestStartTime":1518012357531}}
{"body": {"column":19,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var xf = x.\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2559,"fileType":"javascript","requestStartTime":1518012355160}}
{"body": {"column":25,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f > y.\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2565,"fileType":"javascript","requestStartTime":1518012376018}}
{"body": {"column":10,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n$(\"\").click(function (){\n    $(\"\").\n}\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1063,"fileType":"javascript","requestStartTime":1518012380443}}
{"body": {"column":32,"line":34,"wordToComplete":"un.","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n// If a door is locked and you unlock it, then\n// if the next consecutive door is locked, it will automatically get unlocked.\n// if the next consecutive door is already unlocked, nothing will happen.\n// there will be no effect on any following door.\n\nfunction revisedRussianRoulette(doors) {\n    let min = 0;\n    let max = 0;\n    for(let i = 0; i < doors.length-1; i++) {\n        // if the door is locked\n        if(doors[i] == 1) {\n            doors[i] = 0; // un.\n        }\n    }\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":924,"fileType":"javascript","requestStartTime":1518012448446}}
{"body": {"column":12,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    \n    console.apples.filter( (distance) => ((a + distance) >= s && (a + distance) <= t ) ).length;\n    var orangesInDahouse = oranges.filter( (distance) => ((b + distance) >= s && (b + distance) <= t ) ).length;\n\n    console.log(applesInDahouse);\n    console.log(orangesInDahouse);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":538,"fileType":"javascript","requestStartTime":1518012463170}}
{"body": {"column":12,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction countApplesAndOranges(s, t, a, b, apples, oranges) {\n    \n    console.log(apples.filter( (distance) => ((a + distance) >= s && (a + distance) <= t ) ).length);\n    console.oranges.filter( (distance) => ((b + distance) >= s && (b + distance) <= t ) ).length;\n\n    console.log(applesInDahouse);\n    console.log(orangesInDahouse);\n    \n}\n\nfunction main() {\n    var s_temp = readLine().split(' ');\n    var s = parseInt(s_temp[0]);\n    var t = parseInt(s_temp[1]);\n    var a_temp = readLine().split(' ');\n    var a = parseInt(a_temp[0]);\n    var b = parseInt(a_temp[1]);\n    var m_temp = readLine().split(' ');\n    var m = parseInt(m_temp[0]);\n    var n = parseInt(m_temp[1]);\n    apple = readLine().split(' ');\n    apple = apple.map(Number);\n    orange = readLine().split(' ');\n    orange = orange.map(Number);\n    countApplesAndOranges(s, t, a, b, apple, orange);\n\n}\n\n\n","offset":640,"fileType":"javascript","requestStartTime":1518012476177}}
{"body": {"column":25,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = y.f > x.?\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2565,"fileType":"javascript","requestStartTime":1518012484503}}
{"body": {"column":31,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = y.f > x.f ? y.\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2571,"fileType":"javascript","requestStartTime":1518012528564}}
{"body": {"column":41,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = y.f > x.f ? 8 - y.f : y.\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2581,"fileType":"javascript","requestStartTime":1518012538598}}
{"body": {"column":22,"line":53,"wordToComplete":"4.","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.\n*   Print three lines:\n*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.\n*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.\n*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).\n*\n*\tParameter(s):\n*   secondInteger - The string representation of an integer.\n*   secondDecimal - The string representation of a floating-point number.\n*   secondString - A string consisting of one or more space-separated words.\n**/\nfunction performOperation(secondInteger, secondDecimal, secondString) {\n    // Declare a variable named 'firstInteger' and initialize with integer value 4.\n    const firstInteger = 4;\n    \n    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.\n    const firstDecimal = 4.0;\n   \n    \n    // Declare a variable named 'firstString' and initialize with the string \"HackerRank\".\n    const firstString = 'HackerRank ';\n    \n    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.\n    secondIntiger = 12;\n    console.log(firstInteger + secondInteger);\n    \n    \n    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.\n    secondDecimal = 4.\n    console.log(firstDecimal + secondDecimal);\n    \n    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.\n    console.log(firstString + secondString);\n    \n}\n\nfunction main() {\n    const secondInteger = readLine();\n    const secondDecimal = readLine();\n    const secondString = readLine();\n    \n    performOperation(secondInteger, secondDecimal, secondString);\n}\n","offset":1912,"fileType":"javascript","requestStartTime":1518012620874}}
{"body": {"column":28,"line":17,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').map(Number);\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        var type = input[i][0];\n        var x = input[i][1];\n        var y = input[i][2];\n        if (type==1) {\n            var nextSeq = x^lastAnswer;\n            seqArr[nextSeq].\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":491,"fileType":"javascript","requestStartTime":1518012684326}}
{"body": {"column":35,"line":20,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').map(Number);\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        var type = input[i][0];\n        var x = input[i][1];\n        var y = input[i][2];\n        var nextSeq = x^lastAnswer;\n        if (type==1) {\n            seqArr[nextSeq].push(y);\n        }\n        else {\n            lastAnswer = y%nextSeq.\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":556,"fileType":"javascript","requestStartTime":1518012733317}}
{"body": {"column":43,"line":20,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').map(Number);\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        var type = input[i][0];\n        var x = input[i][1];\n        var y = input[i][2];\n        var nextSeq = x^lastAnswer;\n        if (type==1) {\n            seqArr[nextSeq].push(y);\n        }\n        else {\n            lastAnswer = y%seqArr[nextSeq].\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":564,"fileType":"javascript","requestStartTime":1518012746956}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').map(Number);\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        var type = input[i][0];\n        var x = input[i][1];\n        var y = input[i][2];\n        var nextSeq = x^lastAnswer;\n        if (type==1) {\n            seqArr[nextSeq].push(y);\n        }\n        else {\n            lastAnswer = y % seqArr[nextSeq].length;\n            console.\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":594,"fileType":"javascript","requestStartTime":1518012753797}}
{"body": {"column":17,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n// If a door is locked and you unlock it, then\n// if the next consecutive door is locked, it will automatically get unlocked.\n// if the next consecutive door is already unlocked, nothing will happen.\n// there will be no effect on any following door.\n\nfunction revisedRussianRoulette(doors) {\n    let min = 0;\n    let max = 0;\n    for(let i = 0; i < doors.length; i++) {\n        if(doors.)\n        \n        // if the door is locked\n        if(doors[i] == 1) {\n            doors[i] = 0; // unlock it\n            min++; // increment the min\n            max++; // increment the max\n            // check next door\n            if(doors[i+1] == 1) {\n                doors[i+1] = 0; // unlock it\n                max++; // increment the max\n            }\n        }\n    }\n    return [min, max];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":846,"fileType":"javascript","requestStartTime":1518012789477}}
{"body": {"column":22,"line":32,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n// If a door is locked and you unlock it, then\n// if the next consecutive door is locked, it will automatically get unlocked.\n// if the next consecutive door is already unlocked, nothing will happen.\n// there will be no effect on any following door.\n\nfunction revisedRussianRoulette(doors) {\n    let min = 0;\n    let max = 0;\n    for(let i = 0; i < doors.length; i++) {\n        if(i == doors.)\n        \n        // if the door is locked\n        if(doors[i] == 1) {\n            doors[i] = 0; // unlock it\n            min++; // increment the min\n            max++; // increment the max\n            // check next door\n            if(doors[i+1] == 1) {\n                doors[i+1] = 0; // unlock it\n                max++; // increment the max\n            }\n        }\n    }\n    return [min, max];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":851,"fileType":"javascript","requestStartTime":1518012804085}}
{"body": {"column":8,"line":33,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\nvar ii = 3;\nvar dd = 3.0;\nvar ss = 'is here';\n    // Read and save an integer, double, and String to your variables.\n\n    // Print the sum of both integer variables on a new line.\nconsole.\n    // Print the sum of the double variables on a new line.\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    \n\n}\n","offset":755,"fileType":"javascript","requestStartTime":1518012804528}}
{"body": {"column":6,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(\"\").\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":867,"fileType":"javascript","requestStartTime":1518012813637}}
{"body": {"column":20,"line":18,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').map(Number);\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        var type = input[i][0];\n        var x = input[i][1];\n        var y = input[i][2];\n        var nextSeq = x^lastAnswer % N;\n        if (type==1) {\n            seqArr[nextSeq].push(y);\n            console.\n        }\n        else {\n            lastAnswer = y % seqArr[nextSeq].length;\n            console.log(lastAnswer)\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":520,"fileType":"javascript","requestStartTime":1518012833269}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"\nfunction processData(input) {\n    input = input.split('\\n');\n    for (var i in input) input[i] = input[i].split(' ').map(Number);\n    \n    var N = input[0][0];\n    var seqArr = [];\n    for (var i=1;i<=N;i++) seqArr.push([]);\n    \n    var Q = input[0][1];\n    var lastAnswer = 0;\n    for (var i=1;i<=Q;i++) {\n        var type = input[i][0];\n        var x = input[i][1];\n        var y = input[i][2];\n        var nextSeq = x^lastAnswer % N;\n        if (type==1) {\n            seqArr[nextSeq].push(y);\n        }\n        else {\n            console.\n            lastAnswer = y % seqArr[nextSeq].length;\n            console.log(lastAnswer)\n        }\n    }\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":545,"fileType":"javascript","requestStartTime":1518012870907}}
{"body": {"column":33,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n// If a door is locked and you unlock it, then\n// if the next consecutive door is locked, it will automatically get unlocked.\n// if the next consecutive door is already unlocked, nothing will happen.\n// there will be no effect on any following door.\n\nfunction revisedRussianRoulette(doors) {\n    let min = 0;\n    let max = 0;\n    for(let i = 0; i < doors.length; i++) {  \n        // if the door is locked\n        if(doors[i] == 1) {\n            doors[i] = 0; // unlock it\n            min++; // increment the min\n            max++; // increment the max\n            // check next door, exclude last index\n            if(doors[i] != doors.doors[i+1] == 1) {\n                doors[i+1] = 0; // unlock it\n                max++; // increment the max\n            }\n        }\n    }\n    return [min, max];\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    doors = readLine().split(' ');\n    doors = doors.map(Number);\n    var result = revisedRussianRoulette(doors);\n    console.log(result.join(\" \"));\n\n\n\n}\n\n\n","offset":1095,"fileType":"javascript","requestStartTime":1518012899621}}
{"body": {"column":30,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction super_reduced_string(s){\n    // Complete this function\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    let output = [];\n    do {\n        reducing = false;\n        for (let i = 0; i < s. ++$i) {\n            if ($i + 1 > $end - 1 || $input[$i] !== $input[$i + 1]) {\n                $output[] = $input[$i];\n            } else {\n                $go = true;\n                ++$i;\n            }\n        }\n\n        if ( ! empty($output)) {\n            $input = implode(\"\", $output);\n            $output = [];\n        } else {\n            $input = \"Empty String\"; \n            break;\n        }\n    } while ($go);\n\n    echo $input;\n}\n\nfunction main() {\n    var s = readLine();\n    var result = super_reduced_string(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":687,"fileType":"javascript","requestStartTime":1518013269754}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    console.\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":635,"fileType":"javascript","requestStartTime":1518013430622}}
{"body": {"column":12,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction super_reduced_string(s){\n    // Complete this function\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    let output = '';\n    do {\n        reducing = false;\n        for (let i = 0; i < s.length; ++i) {\n            if (i + 1 > s.length - 1 || s[i] !== s[i + 1]) {\n                output = s[i];\n            } else {\n                reducing = true;\n                ++i;\n            }\n        }\n\n        if ( ! empty($output)) {\n            $input = implode(\"\", $output);\n            $output = [];\n        if ( ! output) {\n            $input = \"Empty String\"; \n            break;\n        }\n    } while ($go);\n\n    console.\n}\n\nfunction main() {\n    var s = readLine();\n    var result = super_reduced_string(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1120,"fileType":"javascript","requestStartTime":1518013431240}}
{"body": {"column":13,"line":47,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction super_reduced_string(s){\n    // Complete this function\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    let output = '';\n    do {\n        reducing = false;\n        for (let i = 0; i < s.length; ++i) {\n            if (i + 1 > s.length - 1 || s[i] !== s[i + 1]) {\n                output = s[i];\n            } else {\n                reducing = true;\n                ++i;\n            }\n        }\n\n        if ( ! empty($output)) {\n            $input = implode(\"\", $output);\n            $output = [];\n        if ( ! output) {\n            $input = \"Empty String\"; \n            break;\n        }\n    } while ($go);\n\n    console..\n}\n\nfunction main() {\n    var s = readLine();\n    var result = super_reduced_string(s);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1121,"fileType":"javascript","requestStartTime":1518013431433}}
{"body": {"column":25,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\n    var _i;\n    var _d;\n    var _s;\n\n    // Read and save an integer, double, and String to your variables.\n    _i = readLine();\n    _d = parseFloat(readLine());\n    _s = readLine();\n    Number(i,_i,d,_d);\n    // Print the sum of both integer variables on a new line.\n    console.log(i + parseInt(_i));\n    // Print the sum of the double variables on a new line.\n    console.log((d + _d).);\n\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n    console.log(s + _s);\n    \n\n}\n","offset":955,"fileType":"javascript","requestStartTime":1518013454308}}
{"body": {"column":18,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    console.log(x.objects[1])\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":641,"fileType":"javascript","requestStartTime":1518013457263}}
{"body": {"column":28,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    let dictionary = {};\n    for (let i=0, len=input.)\n});\n\n","offset":237,"fileType":"javascript","requestStartTime":1518013466887}}
{"body": {"column":23,"line":10,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    let dictionary = {};\n    for (let i=0, len=input.length; i<len; i++) {\n        if(!dictionary.)\n    }\n});\n\n","offset":282,"fileType":"javascript","requestStartTime":1518013491052}}
{"body": {"column":9,"line":38,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"#id\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":793,"fileType":"javascript","requestStartTime":1518013508899}}
{"body": {"column":24,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    console.log(objects.[x1])\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":647,"fileType":"javascript","requestStartTime":1518013522312}}
{"body": {"column":12,"line":35,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var position = 0;\n    var mul = 0;\n    while(position <= 1000){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        mul ++;\n    }\n    \n    console.\n    \n\n    \n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":737,"fileType":"javascript","requestStartTime":1518013531957}}
{"body": {"column":16,"line":18,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    let dictionary = {};\n    for (let i=0, len=input.length; i<len; i++) {\n        if(!dictionary[input[i]]) {\n            dictionary[input[i]] = 1;\n        }\n        else {\n            dictionary[input[i]]++;\n        }\n    }\n    for (key in dictionary) {\n        console.\n    }\n});\n\n","offset":456,"fileType":"javascript","requestStartTime":1518013545161}}
{"body": {"column":20,"line":33,"wordToComplete":"e","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var position = 0;\n    var mul = 0;\n    while(position <= 1000){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n            consol.e\n        }\n        \n        mul ++;\n    }\n    \n    console.log('NO');\n    \n\n    \n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":757,"fileType":"javascript","requestStartTime":1518013563502}}
{"body": {"column":20,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var position = 0;\n    var mul = 0;\n    while(position <= 1000){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n            console.\n        }\n        \n        mul ++;\n    }\n    \n    console.log('NO');\n    \n\n    \n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":757,"fileType":"javascript","requestStartTime":1518013565601}}
{"body": {"column":10,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    for(var i= 0; i<k; i++  ){\n        a.\n    }\n\n}\n\n\n","offset":678,"fileType":"javascript","requestStartTime":1518013573773}}
{"body": {"column":18,"line":9,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    let dictionary = {};\n    input = input.\n    for (let i=0, len=input.length; i<len; i++) {\n        if(!dictionary[input[i]]) {\n            dictionary[input[i]] = 1;\n        }\n        else {\n            dictionary[input[i]]++;\n        }\n    }\n    for (key in dictionary) {\n        console.log(dictionary[key]);\n    }\n});\n\n","offset":227,"fileType":"javascript","requestStartTime":1518013603184}}
{"body": {"column":10,"line":31,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    for(var i= 0; i<k; i++  ){\n     let  b= a.shift();\n        a.\n    }\n\n}\n\n\n","offset":702,"fileType":"javascript","requestStartTime":1518013605745}}
{"body": {"column":10,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":904,"fileType":"javascript","requestStartTime":1518013653767}}
{"body": {"column":27,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    console.log(objects[1].)\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":650,"fileType":"javascript","requestStartTime":1518013660085}}
{"body": {"column":12,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    for(var i= 0; i<k; i++  ){\n     let  b= a.shift();\n        a.push(b);\n    }\n    console.\n\n}\n\n\n","offset":729,"fileType":"javascript","requestStartTime":1518013663393}}
{"body": {"column":18,"line":33,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    a = readLine().split(' ');\n    a = a.map(Number);\n    for(var i= 0; i<k; i++  ){\n     let  b= a.shift();\n        a.push(b);\n    }\n    console.log(a.)\n\n}\n\n\n","offset":735,"fileType":"javascript","requestStartTime":1518013689869}}
{"body": {"column":27,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for(let i=0; i<objects.)\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":650,"fileType":"javascript","requestStartTime":1518013705916}}
{"body": {"column":22,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for(let i=0; i<objects.length(); i++){\n        if(objects[i].)\n    }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":688,"fileType":"javascript","requestStartTime":1518013740258}}
{"body": {"column":38,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for(let i=0; i<objects.length(); i++){\n        if(objects[i].x == objects[i].)\n    }\n    \n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":704,"fileType":"javascript","requestStartTime":1518013747220}}
{"body": {"column":20,"line":43,"wordToComplete":"p.\"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n//Type your code below this line\n$(\"#one\").html(\"</p.\")\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":914,"fileType":"javascript","requestStartTime":1518013750667}}
{"body": {"column":20,"line":20,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n    for (let i=i; i<=n; i++) {\n        const rem3 = n%3;\n        const rem5 = n%5;\n        if(!rem3 && !rem5) {\n            console.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":415,"fileType":"javascript","requestStartTime":1518013754221}}
{"body": {"column":20,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n    for (let i=i; i<=n; i++) {\n        const rem3 = n%3;\n        const rem5 = n%5;\n        if(!rem3 && !rem5) {\n            console.log(\"FizzBuzz\");\n        }\n        else if(!rem3) {\n            console.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":487,"fileType":"javascript","requestStartTime":1518013772894}}
{"body": {"column":20,"line":26,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n    for (let i=i; i<=n; i++) {\n        const rem3 = n%3;\n        const rem5 = n%5;\n        if(!rem3 && !rem5) {\n            console.log(\"FizzBuzz\");\n        }\n        else if(!rem3) {\n            console.log(\"Fizz\");\n        }\n        else if(!rem5) {\n            console.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":555,"fileType":"javascript","requestStartTime":1518013789400}}
{"body": {"column":20,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n    for (let i=i; i<=n; i++) {\n        const rem3 = n%3;\n        const rem5 = n%5;\n        if(!rem3 && !rem5) {\n            console.log(\"FizzBuzz\");\n        }\n        else if(!rem3) {\n            console.log(\"Fizz\");\n        }\n        else if(!rem5) {\n            console.log(\"Buzz\");\n        }\n        else {\n            console.\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":613,"fileType":"javascript","requestStartTime":1518013796194}}
{"body": {"column":12,"line":45,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    var tip = 0;\n    var tax = 0;\n    var totalCost = 0;\n    \n    tip = meal_cost * (tip_percent / 100);\n    tax = meal_cost * (tax_percent / 100)\n    totalCost = meal_cost + tip + tax;\n    \n    console.\n\n}\n\n}\n","offset":1102,"fileType":"javascript","requestStartTime":1518013810391}}
{"body": {"column":27,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Return a count of the total number of objects 'o' satisfying o.x == o.y.\n * \n * Parameter(s):\n * objects: an array of objects with integer properties 'x' and 'y'\n */\nfunction getCount(objects) {\n    for(let i=0; i<objects.\n        let counter = 0;\n        if(objects[i].x == objects[i].y){\n            counter = counter +1;\n        }\n    }\n    return counter;\n}\n\nfunction main() {\n    const n = +(readLine());\n    let objects = [];\n    \n    for (let i = 0; i < n; i++) {\n        const [a, b] = readLine().split(' ');\n        \n        objects.push({x: +(a), y: +(b)});\n    }\n    \n    console.log(getCount(objects));\n}\n","offset":650,"fileType":"javascript","requestStartTime":1518013816683}}
{"body": {"column":66,"line":45,"wordToComplete":"dollars.\"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    var tip = 0;\n    var tax = 0;\n    var totalCost = 0;\n    \n    tip = meal_cost * (tip_percent / 100);\n    tax = meal_cost * (tax_percent / 100)\n    totalCost = meal_cost + tip + tax;\n    \n    console.log(\"The total meal cost is \" + totalCost + \" dollars.\")\n\n}\n\n}\n","offset":1156,"fileType":"javascript","requestStartTime":1518013832067}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction fizzBuzz(n) {\n    for (let i=1; i<=n; i++) {\n        const rem3 = n%3;\n        const rem5 = n%5;\n        console.\n        if(!rem3 && !rem5) {\n            console.log(\"FizzBuzz\");\n        }\n        else if(!rem3) {\n            console.log(\"Fizz\");\n        }\n        else if(!rem5) {\n            console.log(\"Buzz\");\n        }\n        else {\n            console.log(n);\n        }\n    }\n}\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var n;\n    var n = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = fizzBuzz(n);\n    \n});\n\n","offset":382,"fileType":"javascript","requestStartTime":1518013841275}}
{"body": {"column":9,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":881,"fileType":"javascript","requestStartTime":1518013872420}}
{"body": {"column":9,"line":44,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    var tip;\n    var tax;\n    var totalCost;\n    \n    tip = meal_cost * (tip_percent / 100);\n    tax = meal_cost * (tax_percent / 100)\n    totalCost = meal_cost + tip + tax;\n    Math.\n    \n    console.log(\"The total meal cost is \" + totalCost + \" dollars.\");\n\n}\n\n}\n","offset":1082,"fileType":"javascript","requestStartTime":1518013905720}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"\n/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n    if (head === null) {\n        return head;\n    } else {\n        let curr = head;\n        while (curr !== null) {\nconsole.\n            const temp = curr.prev;\n            curr.prev = curr.next;\n            curr.next = temp;\n\n            curr = curr.prev;\n        }\n        return curr;\n    }\n}\n\n\n\n","offset":442,"fileType":"javascript","requestStartTime":1518013919312}}
{"body": {"column":12,"line":43,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"button\").\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":884,"fileType":"javascript","requestStartTime":1518013926754}}
{"body": {"column":42,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = y.f > x.f ? y.f - 2 * (x.) : y.f;\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2582,"fileType":"javascript","requestStartTime":1518013941375}}
{"body": {"column":48,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = y.f > x.f ? y.f - 2 * (x.f - y.) : y.f;\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2588,"fileType":"javascript","requestStartTime":1518013946960}}
{"body": {"column":48,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = y.f > x.f ? y.f - 2 * (x.r - x.) : y.f;\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            } \n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2588,"fileType":"javascript","requestStartTime":1518013956540}}
{"body": {"column":1,"line":45,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"button\").click(function();\n    $(\"div\")\n.\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":916,"fileType":"javascript","requestStartTime":1518013984779}}
{"body": {"column":13,"line":44,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"button\").click(function();\n    $(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":915,"fileType":"javascript","requestStartTime":1518013986835}}
{"body": {"column":12,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":300,"fileType":"javascript","requestStartTime":1518014003273}}
{"body": {"column":18,"line":16,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.\n    for (let i=)\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":306,"fileType":"javascript","requestStartTime":1518014026759}}
{"body": {"column":10,"line":38,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    \n    print.\n    console.log(\"The total meal cost is dollars.\");\n\n}\n\n}\n","offset":914,"fileType":"javascript","requestStartTime":1518014070458}}
{"body": {"column":12,"line":38,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    \n    console.\n    console.log(\"The total meal cost is dollars.\");\n\n}\n\n}\n","offset":916,"fileType":"javascript","requestStartTime":1518014074450}}
{"body": {"column":9,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1070,"fileType":"javascript","requestStartTime":1518014085185}}
{"body": {"column":12,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.length;\n    let sum = 0;\n    for (let i=0; i<n; i++) {\n        for (let j=0; j<i; j++) {\n            \n        }\n    }\n    console.\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":436,"fileType":"javascript","requestStartTime":1518014091053}}
{"body": {"column":12,"line":37,"wordToComplete":"","code":"'use strict';\n\nvar _input = '';\nvar _index = 0;\nprocess.stdin.on('data', (data) => { _input += data; });\nprocess.stdin.on('end', () => {\n\t_input = _input.split(new RegExp('[\\n ]+'));\n\tmain(+(_input[0]), +(_input[1]), +(_input[2]));    \n});\n\nfunction main(mealCost, tipPercent, taxPercent) {\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n    var meal_cost = parseFloat(readLine());\n    var tip_percent = parseInt(readLine());\n    var tax_percent = parseInt(readLine());\n    console.\n\n}\n\n}\n","offset":911,"fileType":"javascript","requestStartTime":1518014096473}}
{"body": {"column":19,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2557,"fileType":"javascript","requestStartTime":1518014209292}}
{"body": {"column":1,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n.\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":862,"fileType":"javascript","requestStartTime":1518014212097}}
{"body": {"column":25,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2563,"fileType":"javascript","requestStartTime":1518014215433}}
{"body": {"column":72,"line":37,"wordToComplete":"if a kangaroo is faster then other, cannot meet the other.","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var difference = 0;\n    var mul = 0;\n    \n    while(1){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n           return 'YES';\n        }else{\n            \n            //if a kangaroo is faster then other, cannot meet the other.\n            if((k1position - k2position) > difference){\n                \n            }else{\n                \n            }\n            \n        }\n \n        mul ++;\n    }\n    \n    return 'NO';\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":854,"fileType":"javascript","requestStartTime":1518014259163}}
{"body": {"column":31,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y. \n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2569,"fileType":"javascript","requestStartTime":1518014259783}}
{"body": {"column":42,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.) \n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2580,"fileType":"javascript","requestStartTime":1518014268683}}
{"body": {"column":48,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.r - y.) \n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2586,"fileType":"javascript","requestStartTime":1518014274357}}
{"body": {"column":55,"line":109,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (board[i][j] == \"P\" && board[i - 1][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            }\n        }\n    }\n    if (queenCheck(P, k, o)) result++;\n    if (rookCheck(P, k, o)) result++;\n    if (bishopCheck(P, k, o)) result++;\n    if (knightCheck(P, k)) result++;\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.r - y.r) : y. \n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - y.f);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":2593,"fileType":"javascript","requestStartTime":1518014285667}}
{"body": {"column":9,"line":46,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"div\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1070,"fileType":"javascript","requestStartTime":1518014320492}}
{"body": {"column":10,"line":39,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a != \"h1\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    return new jObj();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n// Write your code below this line\n$(\"h1\").click(function){\n  $(\"h1\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":819,"fileType":"javascript","requestStartTime":1518014348946}}
{"body": {"column":17,"line":20,"wordToComplete":"","code":"\n/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n    if (head === null) {\n        return head;\n    } else {\n        let curr = head;\n        while (curr.next !== null) {\n            curr.\n\n            const temp = curr.prev;\n            curr.prev = curr.next;\n            curr.next = temp;\n\n            curr = curr.prev;\n        }\n        return curr;\n    }\n}\n\n\n\n","offset":456,"fileType":"javascript","requestStartTime":1518014362987}}
{"body": {"column":20,"line":47,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar input = \"classified\";\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n    this.css = function(a,b) {\n        if (a === 'background' || a === 'background-color') {\n            console.log(\"background-\" + input);\n        } else {\n            console.log('Incorrect css property');\n        }\n        console.log(b + \"-\" + input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"div\") \n        return new jObj();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n//Type your code below this line\n$(\"div\").click(function(){\n    $(\"background\").\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n\n","offset":1108,"fileType":"javascript","requestStartTime":1518014388074}}
{"body": {"column":3,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(.)\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":864,"fileType":"javascript","requestStartTime":1518014396384}}
{"body": {"column":21,"line":38,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var difference = 0;\n    var mul = 0;\n    \n    while(1){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n           return 'YES';\n        }else{\n            \n            //if a kangaroo is faster then other, cannot meet the other.\n            if( Math.abs(k1position - k2position) > difference ){\n                return 'NO';\n            }else{\n                difference = abs(k1position - k2position);\n            }\n            \n        }\n \n        mul ++;\n    }\n\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":876,"fileType":"javascript","requestStartTime":1518014405001}}
{"body": {"column":3,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(.)\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":864,"fileType":"javascript","requestStartTime":1518014402119}}
{"body": {"column":15,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.length;\n    let sum = 0;\n    for (let i=1; i<=n; i++) {\n        for (let j=0; j<=i; j++) {\n                    for (let k=0; k<i; k++) {\n            sum += arr[k];\n        }\n        }\n    }\n    return sum;\n}\n\nfunction reducer(arr, start, end) {\n    return arr.\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":566,"fileType":"javascript","requestStartTime":1518014417179}}
{"body": {"column":8,"line":42,"wordToComplete":"one).","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(#one).\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":869,"fileType":"javascript","requestStartTime":1518014422439}}
{"body": {"column":20,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var difference = 0;\n    var mul = 0;\n    \n    while(1){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n           return 'YES';\n        }else{\n            \n            console.\n            \n            //if a kangaroo is faster then other, cannot meet the other.\n            if( Math.abs(k1position - k2position) > difference ){\n                return 'NO';\n            }else{\n                difference = abs(k1position - k2position);\n            }\n            \n        }\n \n        mul ++;\n    }\n\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":802,"fileType":"javascript","requestStartTime":1518014430898}}
{"body": {"column":17,"line":21,"wordToComplete":"","code":"\n/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n    if (head === null) {\n        return head;\n    } else {\n        let curr = head;\n        while (curr.next !== null) {\n            const next = curr.next;\n            next.\n\n            const temp = curr.prev;\n            curr.prev = curr.next;\n            curr.next = temp;\n\n            curr = curr.prev;\n        }\n        return curr;\n    }\n}\n\n\n\n","offset":492,"fileType":"javascript","requestStartTime":1518014451300}}
{"body": {"column":34,"line":43,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var difference = 0;\n    var mul = 0;\n    \n    while(1){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n           return 'YES';\n        }else{\n            \n            console.log(abs(k1position - k2position));\n            \n            //if a kangaroo is faster then other, cannot meet the other.\n            if( Math.abs(k1position - k2position) > difference ){\n                return 'NO';\n            }else{\n                difference = Math.abs(k1position - k2position);\n            }\n            \n        }\n \n        mul ++;\n    }\n\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1071,"fileType":"javascript","requestStartTime":1518014458354}}
{"body": {"column":30,"line":37,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var difference = 0;\n    var mul = 0;\n    \n    while(1){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n           return 'YES';\n        }else{\n            \n            console.log( Math.abs(k1position - k2position));\n            \n            //if a kangaroo is faster then other, cannot meet the other.\n            if( Math.abs(k1position - k2position) > difference ){\n                return 'NO';\n            }else{\n                difference = Math.abs(k1position - k2position);\n            }\n            \n        }\n \n        mul ++;\n    }\n\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":812,"fileType":"javascript","requestStartTime":1518014464358}}
{"body": {"column":10,"line":43,"wordToComplete":"one).","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$().show();\n  $(#one).\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":883,"fileType":"javascript","requestStartTime":1518014464888}}
{"body": {"column":15,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.length;\n    let sum = 0;\n    for (let i=1; i<=n; i++) {\n        for (let j=0; j<=i; j++) {\n                    for (let k=0; k<i; k++) {\n            sum += arr[k];\n        }\n        }\n    }\n    return sum;\n}\n\nfunction reducer(arr, start, end) {\n    return arr.lice(start, end).reduce(\n        (a, b) => a+b;                           \n    );\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":566,"fileType":"javascript","requestStartTime":1518014474042}}
{"body": {"column":28,"line":79,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.put({'x' : rowncount, 'y' : count})\n               \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.put({'x' : rowncount, 'y' : count})\n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    if(locations.black.king. > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3004,"fileType":"javascript","requestStartTime":1518014487473}}
{"body": {"column":28,"line":79,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.put({'x' : rowncount, 'y' : count})\n               \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.put({'x' : rowncount, 'y' : count})\n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    if(locations.black.king. > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3004,"fileType":"javascript","requestStartTime":1518014488343}}
{"body": {"column":17,"line":23,"wordToComplete":"","code":"\n/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n    if (head === null) {\n        return head;\n    } else {\n        let curr = head;\n        while (curr.next !== null) {\n            const next = curr.next;\n            const temp = next.prev;\n            next.prev = next.next;\n            next.\n            next.prev = null;\n\n            const temp = curr.prev;\n            curr.prev = curr.next;\n            curr.next = temp;\n\n            curr = curr.prev;\n        }\n        return curr;\n    }\n}\n\n\n\n","offset":563,"fileType":"javascript","requestStartTime":1518014490204}}
{"body": {"column":28,"line":79,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.put({'x' : rowncount, 'y' : count})\n               \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.put({'x' : rowncount, 'y' : count})\n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    if(locations.black.king. > 0){\n        for(let i = 0; i < prawn.length; i++){\n            let moveMadeCheck = false;\n            //move pawn back \n            let pawn = prawn[i].slice(0);\n            pawn[0] = pawn[0] + 1;\n                      \n            if(prawn[i][0] < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3004,"fileType":"javascript","requestStartTime":1518014490832}}
{"body": {"column":39,"line":83,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.put({'x' : rowncount, 'y' : count})\n               \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.put({'x' : rowncount, 'y' : count})\n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    if(locations.black.king.length > 0){\n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            if(locations.white.pawn[i]. < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,rookArr)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3180,"fileType":"javascript","requestStartTime":1518014558233}}
{"body": {"column":3,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nvar selector1 = \"\";\nvar words = \"\";\nvar jObj = function() {\n    this.append = function(c) {\n        words = c;\n    }\n    this.html = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n    this.text = function(c) {\n        if('undefined' != typeof c) {\n            words = c.replace(\"Hello\", \"\");\n        }\n        else\n            return \"Hello\";\n    }\n}\nvar $ = function(a) {\n    if(a != \"#one\") {\n        console.log(\"ID \" + a + \" not found!\");\n        throw Error();\n    }\n    selector1 = a;\n    return new jObj();\n};\n\nvar jQuery = $;\n$(.).show();\n  $(#one).hide();\n\n\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    //abc();\n    \n    console.log(selector1);\n    console.log(words);\n});\n","offset":864,"fileType":"javascript","requestStartTime":1518014578159}}
{"body": {"column":71,"line":86,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.put({'x' : rowncount, 'y' : count})\n               \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.put({'x' : rowncount, 'y' : count})\n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    if(locations.black.king.length > 0){\n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];\n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.)) && (tower(king,rookArr))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,queenArr)) && (queen(king,queenArr))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,bishopArr)) && (bishop(king,bishopArr)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3304,"fileType":"javascript","requestStartTime":1518014622953}}
{"body": {"column":30,"line":20,"wordToComplete":"","code":"\n/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n    if (head === null) {\n        return head;\n    } else {\n        let curr = head;\n        while (curr.next !== null) {\n            const next = curr.\n            const temp = next.prev;\n            next.prev = next.next;\n            next.next = temp;\n        }\n        return curr;\n    }\n}\n\n\n\n","offset":469,"fileType":"javascript","requestStartTime":1518014651621}}
{"body": {"column":8,"line":15,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction findNumber(arr, k) {\n    arr.\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _arr_size = 0;\n    _arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _arr = [];\n    var _arr_item;\n    for(var _arr_i = 0; _arr_i < _arr_size; _arr_i++) {\n        var _arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        _arr.push(_arr_item);\n    }\n    \n    var _k = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = findNumber(_arr, _k);\n    wstream.write(res+\"\\n\");\n    \n    wstream.end();\n});\n\n","offset":298,"fileType":"javascript","requestStartTime":1518014742882}}
{"body": {"column":1,"line":42,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input = \"classified\";\n\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\n\nvar jObj = function() {\n    this.click = function(c) {\n        console.log(\"onclick called-\"+input);\n        var inputtype = typeof c\n        if(inputtype != 'function') {\n            console.log(\"Must be a function-\"+input);\n            throw Error();\n        }\n        else\n            console.log(inputtype+\"-\"+input);\n        c();\n    }\n}\n\nvar jObj2 = function() {\n    this.hide = function() {\n        console.log(\"hide called-\"+input);\n    }\n}\n\nvar $ = function(a) {\n    if(a == \"button\")\n        return new jObj();\n    else if(a == \"div\") \n        return new jObj2();\n    \n    console.log(\"ID \" + a + \" not found!\");\n    throw Error();\n}\n\nvar jQuery = $;\n\nfunction abc() {\n.\n\n\n}\n\nprocess.stdin.on('end', function () {\n    abc();\n    \n});\n","offset":838,"fileType":"javascript","requestStartTime":1518014770990}}
{"body": {"column":24,"line":42,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction kangaroo(x1, v1, x2, v2) {\n    // Complete this function\n    var difference = Math.abs(x1 - x2);\n    var mul = 0;\n    \n    while(1){\n           \n        var k1position = x1 + (v1 * mul);\n        var k2position = x2 + (v2 * mul);\n        \n        if(k1position === k2position){\n           return 'YES';\n        }else{\n            \n            //if a kangaroo is faster then other, cannot meet the other.\n            if( Math.abs(k1position - k2position) > difference ){\n                return 'NO';\n            }else{\n                difference = Math.abs(k1position - k2position);\n                console.\n            }\n            \n        }\n \n        mul ++;\n    }\n\n}\n\nfunction main() {\n    var x1_temp = readLine().split(' ');\n    var x1 = parseInt(x1_temp[0]);\n    var v1 = parseInt(x1_temp[1]);\n    var x2 = parseInt(x1_temp[2]);\n    var v2 = parseInt(x1_temp[3]);\n    var result = kangaroo(x1, v1, x2, v2);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":1073,"fileType":"javascript","requestStartTime":1518014796587}}
{"body": {"column":17,"line":83,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing. > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(king,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(king,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(king,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(king, prawn[i])) ways += 1; \n                    //horse\n                    if(horse(king, prawn[i]))  ways += 1;\n                     //queen\n                    if(queen(king,prawn[i]))  ways += 1;\n                    //bishop\n                    if(bishop(king,prawn[i]))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3175,"fileType":"javascript","requestStartTime":1518014874411}}
{"body": {"column":33,"line":46,"wordToComplete":"","code":"\nvar res = document.getElementById('res');\nvar result = 999; \nvar display = '';\nvar operand = '';\nvar operand1 = 0;\nvar operand2 = 0;\nvar operator = '';\nconst dLog = (text) => {\n  console.log(text);\n  console.log(\"operand: \" + operand);\n  console.log(\"operand1: \" + operand1);\n  console.log(\"operand2: \" + operand2);\n}\nconst rIn = (token) => { \n  display = display.concat(token);\n  operand = operand.concat(token); \n  res.innerHTML = display;\n}\nconst operate = (event) => {\n  let oper = event.target.innerHTML;\n  switch(oper) {\n    case '0':\n      rIn('0');\n      //res.innerHTML = display;\n      dLog('0');\n      break;\n    case '1':\n      rIn('1');\n      //res.innerHTML = display;\n      dLog('1');\n      break;\n    case 'C':\n      display='';\n      res.innerHTML = display;\n      result = 0;\n      operand1 = 0;\n      operator = '';\n      operand2 = 0;\n      break;\n    case '=':\n      dLog('= in');\n      operand2 = parseInt(operand,2);\n      dLog('= update');\n      var operation = operand1.concat(operator,operand2);\n      console.log(operation);\n      result = (eval (operation).;\n      console.log(\"result: \" + result);\n      break;\n    case '+':\n      rIn('+');\n      dLog(\"+ in\");\n      operand1 = parseInt(operand,2);\n      operator = '+';\n      operand='';\n      dLog(\"+ out\");\n      break;\n    case '-':\n      rIn('-');\n      operand1 = operand;\n      operator = '-';\n      operand='';\n      break;\n    case '*':\n      rIn('*');\n      operand1 = operand;\n      operator = '*';\n      operand='';\n      break;\n    case '/':\n      rIn('/');\n      operand1 = operand;\n      operator = '/';\n      operand='';\n      break;\n    default:\n      alert(\"Houston, we have a problem\");\n      break;\n  }\n}\n\n\n","offset":1087,"fileType":"javascript","requestStartTime":1518014991089}}
{"body": {"column":8,"line":20,"wordToComplete":"","code":"\n/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n    if (head === null) {\n        return head;\n    } else {\n        let prev = head;\n        let curr = head;\nconsole.\n        while (curr.next !== null) {\n            prev = curr;\n            curr = curr.next;\n            \n            const temp = prev.prev;\n            prev.prev = prev.next;\n            prev.next = temp;\n        }\nconsole.log(prev.data);\n        return prev;\n    }\n}\n\n\n\n","offset":435,"fileType":"javascript","requestStartTime":1518015035868}}
{"body": {"column":13,"line":127,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king. + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4822,"fileType":"javascript","requestStartTime":1518015040669}}
{"body": {"column":42,"line":127,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn[1]) || (king. - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king[0] - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4851,"fileType":"javascript","requestStartTime":1518015047613}}
{"body": {"column":47,"line":128,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn[1]) || (king.y - 2 === prawn[1])){\n        if((king[0] + 1 === prawn[0]) || (king. - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4920,"fileType":"javascript","requestStartTime":1518015052365}}
{"body": {"column":17,"line":128,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn[1]) || (king.y - 2 === prawn[1])){\n        if((king. + 1 === prawn[0]) || (king.x - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4890,"fileType":"javascript","requestStartTime":1518015057813}}
{"body": {"column":29,"line":127,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.) || (king.y - 2 === prawn[1])){\n        if((king.x + 1 === prawn[0]) || (king.x - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4838,"fileType":"javascript","requestStartTime":1518015064326}}
{"body": {"column":57,"line":127,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.)){\n        if((king.x + 1 === prawn[0]) || (king.x - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4866,"fileType":"javascript","requestStartTime":1518015068870}}
{"body": {"column":33,"line":18,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\n/*\n * Complete the function below.\n */\nfunction oddNumbers(l, r) {\n   let oddNum = [];\n    \n   for(let i=l; i<r; i++){\n       ((i % 2) !== 0) ?  oddNum.;\n   };\n    \n    return oddNum\n\n}\n\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n\n    var _l = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _r = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = oddNumbers(_l, _r);\n    for(var res_i=0; res_i < res.length; res_i++) {\n        wstream.write(res[res_i]+\"\\n\");\n    }\n    \n    wstream.end();\n});\n\n","offset":373,"fileType":"javascript","requestStartTime":1518015067974}}
{"body": {"column":33,"line":128,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.) || (king.x - 1 === prawn[0])){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4904,"fileType":"javascript","requestStartTime":1518015074294}}
{"body": {"column":61,"line":128,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.y) || (king.x - 1 === prawn.)){\n            return true;\n           }\n       }\n    \n    if((king[1] + 1 === prawn[1]) || (king[1] - 1 === prawn[1])){\n        if((king[1] + 2 === prawn[1]) || (king[1] - 2 === prawn[1])){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn[0] - king[0]) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4932,"fileType":"javascript","requestStartTime":1518015079502}}
{"body": {"column":16,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.length;\n    let sum = 0;\n    for (let i=1; i<=n; i++) {\n        console.\n        for (let j=0; j<=n-i; j++) {\n            for (let k=j; k<i; k++) {\n                sum += arr[k];\n            }\n        }\n    }\n    return sum;\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":378,"fileType":"javascript","requestStartTime":1518015131975}}
{"body": {"column":23,"line":151,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - kingx) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5376,"fileType":"javascript","requestStartTime":1518015139463}}
{"body": {"column":32,"line":151,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn[1] - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5385,"fileType":"javascript","requestStartTime":1518015141694}}
{"body": {"column":20,"line":21,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.length;\n    let sum = 0;\n    for (let i=1; i<=n; i++) {\n        console.log(\"length\", i);\n        for (let j=0; j<=n-i; j++) {\n            console.\n            for (let k=j; k<i; k++) {\n                sum += arr[k];\n            }\n        }\n    }\n    return sum;\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":453,"fileType":"javascript","requestStartTime":1518015142694}}
{"body": {"column":55,"line":151,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn. - king[1])))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5408,"fileType":"javascript","requestStartTime":1518015145535}}
{"body": {"column":64,"line":151,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.)))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king[1]))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5417,"fileType":"javascript","requestStartTime":1518015151310}}
{"body": {"column":24,"line":23,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction subarraySum(arr) {\n    const n = arr.length;\n    let sum = 0;\n    for (let i=1; i<=n; i++) {\n        console.log(\"length\", i);\n        for (let j=0; j<=n-i; j++) {\n            console.log(\"starting\", j);\n            for (let k=j; k<i; k++) {\n                console.\n                sum += arr[k];\n            }\n        }\n    }\n    return sum;\n}\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var arr;\n    var arr_size = 0;\n    arr_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var arr = [];\n    var arr_item;\n    for (var arr_i = 0; arr_i < arr_size; arr_i++) {\n        var arr_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        arr.push(arr_item);\n    }\n\n\n    res = subarraySum(arr);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":535,"fileType":"javascript","requestStartTime":1518015151569}}
{"body": {"column":71,"line":152,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn[1] + king.))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5493,"fileType":"javascript","requestStartTime":1518015156085}}
{"body": {"column":61,"line":152,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn[0] + king[0]) === (Math.abs(prawn. + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5483,"fileType":"javascript","requestStartTime":1518015159935}}
{"body": {"column":27,"line":152,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn. + king[0]) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5449,"fileType":"javascript","requestStartTime":1518015164198}}
{"body": {"column":37,"line":152,"wordToComplete":"x","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5459,"fileType":"javascript","requestStartTime":1518015168521}}
{"body": {"column":10,"line":49,"wordToComplete":"","code":"\nvar res = document.getElementById('res');\nvar result = 999; \nvar display = '';\nvar operand = '';\nvar operand1 = 0;\nvar operand2 = 0;\nvar operator = '';\nconst dLog = (text) => {\n  console.log(text);\n  console.log(\"operand: \" + operand);\n  console.log(\"operand1: \" + operand1);\n  console.log(\"operand2: \" + operand2);\n}\nconst rIn = (token) => { \n  display = display.concat(token);\n  operand = operand.concat(token); \n  res.innerHTML = display;\n}\nconst operate = (event) => {\n  let oper = event.target.innerHTML;\n  switch(oper) {\n    case '0':\n      rIn('0');\n      //res.innerHTML = display;\n      dLog('0');\n      break;\n    case '1':\n      rIn('1');\n      //res.innerHTML = display;\n      dLog('1');\n      break;\n    case 'C':\n      display='';\n      res.innerHTML = display;\n      result = 0;\n      operand1 = 0;\n      operator = '';\n      operand2 = 0;\n      break;\n    case '=':\n      dLog('= in');\n      operand2 = parseInt(operand,2);\n      dLog('= update');\n      var operation = operand1.toString().concat(operator,operand2.toString());\n      console.log(operation);\n      result = (eval (operation).toString(2));\n      console.log(\"result: \" + result);\n      display=result.toString(2);\n      res.\n      break;\n    case '+':\n      rIn('+');\n      dLog(\"+ in\");\n      operand1 = parseInt(operand,2);\n      operator = '+';\n      operand='';\n      dLog(\"+ out\");\n      break;\n    case '-':\n      rIn('-');\n      operand1 = operand;\n      operator = '-';\n      operand='';\n      break;\n    case '*':\n      rIn('*');\n      operand1 = operand;\n      operator = '*';\n      operand='';\n      break;\n    case '/':\n      rIn('/');\n      operand1 = operand;\n      operator = '/';\n      operand='';\n      break;\n    default:\n      alert(\"Houston, we have a problem\");\n      break;\n  }\n}\n\n\n","offset":1207,"fileType":"javascript","requestStartTime":1518015287847}}
{"body": {"column":40,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToCheckFrom(target, source, figures) {}\n\nfunction waysToGiveACheck(board) {\n    const figures = [];\n    const target = [];\n    \n    board.forEach((row, i) => {\n        row.split('').forEach((cell, j) => {\n            if (cell === '#') {\n                return;\n            }\n            const figure = cell.toLowerCase();\n            const isBlack = cell === figure;\n            if (isBlack && figure === 'k') {\n                target = [8 - i, j];\n                return;\n            }\n            figures.push({\n                figure,\n                isBlack,\n                c: [i, j],\n            });\n        });\n    });\n    \n    return figures\n        .filter(({ figure, isBlack, c }) => figure === 'p' && !isBlack && c[0] === 7)\n        .reduce((acc, figure) => {\n            const figuresClone = [...figures];\n            figuresClone.splice(figures.);\n            return acc + waysToCheckFrom(target, [8, c[1]]);\n        }, 0);\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1330,"fileType":"javascript","requestStartTime":1518015295589}}
{"body": {"column":97,"line":52,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToCheckFrom(target, source, figures) {}\n\nfunction waysToGiveACheck(board) {\n    const figures = [];\n    const target = [];\n    \n    board.forEach((row, i) => {\n        row.split('').forEach((cell, j) => {\n            if (cell === '#') {\n                return;\n            }\n            const figure = cell.toLowerCase();\n            const isBlack = cell === figure;\n            if (isBlack && figure === 'k') {\n                target = [8 - i, j];\n                return;\n            }\n            figures.push({\n                figure,\n                isBlack,\n                c: [i, j],\n            });\n        });\n    });\n    \n    return figures\n        .filter(({ figure, isBlack, c }) => figure === 'p' && !isBlack && c[0] === 7)\n        .reduce((acc, figure) => {\n            const figuresClone = [...figures];\n            figuresClone.splice(figures.findIndex((c) => c[0] === figure.c[0] && c[1] === figure.));\n            return acc + waysToCheckFrom(target, [8, c[1]]);\n        }, 0);\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":1387,"fileType":"javascript","requestStartTime":1518015317141}}
{"body": {"column":16,"line":29,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\n// Reads complete line from STDIN\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\nfunction main() {\n    var i = 4\n    var d = 4.0\n    var s = \"HackerRank \"\n\n    // Declare second integer, double, and String variables.\nvar ii, dd, ss;\n    // Read and save an integer, double, and String to your variables.\nii = readLine(). + 12;\n    // Print the sum of both integer variables on a new line.\nconsole.log(ii);\n    // Print the sum of the double variables on a new line.\n//console.log(dd.toFixed(1));\n    // Concatenate and print the String variables on a new line\n    // The 's' variable above should be printed first.\n//console.log(ss);\n\n}\n","offset":670,"fileType":"javascript","requestStartTime":1518015399112}}
{"body": {"column":34,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nconst promoteTypes = ['q', 'r', 'b', 'k'];\nfunction waysToCheckFrom(target, source, figures) {\n    const distanceToTarget = Math.\n}\n\nfunction waysToGiveACheck(board) {\n    const figures = [];\n    const target = [];\n    \n    board.forEach((row, i) => {\n        row.split('').forEach((cell, j) => {\n            if (cell === '#') {\n                return;\n            }\n            const figure = cell.toLowerCase();\n            const isBlack = cell === figure;\n            if (isBlack && figure === 'k') {\n                target = [8 - i, j];\n                return;\n            }\n            figures.push({\n                figure,\n                isBlack,\n                c: [i, j],\n            });\n        });\n    });\n    \n    return figures\n        .filter(({ figure, isBlack, c }) => figure === 'p' && !isBlack && c[0] === 7)\n        .reduce((acc, figure) => {\n            const figuresClone = [...figures];\n            figuresClone.splice(figures.findIndex((c) => c[0] === figure.c[0] && c[1] === figure.c[1]), 1);\n            return acc + waysToCheckFrom(target, [8, c[1]], figuresClone);\n        }, 0);\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n\n\n","offset":588,"fileType":"javascript","requestStartTime":1518015485999}}
{"body": {"column":16,"line":129,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                if((rookArr.length > 0) && (tower(pawn,locations.white.rook)) && (tower(blackKing,locations.white.rook))) moveMadeCheck = true;        \n\n                if((queenArr.length > 0) && (queen(pawn,locations.white.rook)) && (queen(blackKing,locations.white.rook))) moveMadeCheck = true;\n\n                if((bishopArr.length > 0) && (bishop(pawn,locations.white.rook)) && (bishop(blackKing,locations.white.rook)))  moveMadeCheck = true;\n                \n                if(moveMadeCheck){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    switch(type){\n        case \"knight\":\n            arr.\n            break;\n        case \"rook\":\n            break;\n        case \"queen\":\n            break;\n        case \"bishop\":\n            break;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4880,"fileType":"javascript","requestStartTime":1518015827892}}
{"body": {"column":6,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    ㄌㄡ\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":540,"fileType":"javascript","requestStartTime":1518015896093}}
{"body": {"column":12,"line":3,"wordToComplete":"","code":"\nfunction processData(input) {\n    //Enter your code here\n    console.\n} \n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n_input = \"\";\nprocess.stdin.on(\"data\", function (input) {\n    _input += input;\n});\n\nprocess.stdin.on(\"end\", function () {\n   processData(_input);\n});\n\n\n","offset":71,"fileType":"javascript","requestStartTime":1518015932443}}
{"body": {"column":6,"line":25,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":540,"fileType":"javascript","requestStartTime":1518015949225}}
{"body": {"column":27,"line":32,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    \n    var x = []\n    while(var i = 0; i < x.)\n}\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":658,"fileType":"javascript","requestStartTime":1518015976258}}
{"body": {"column":23,"line":26,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort()\n    var max = x[0]-x[x.]\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":570,"fileType":"javascript","requestStartTime":1518015999350}}
{"body": {"column":10,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort()\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x.\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":628,"fileType":"javascript","requestStartTime":1518016170429}}
{"body": {"column":71,"line":97,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if(isPeonMoveCheck(\"rook\", locations.white.rook, pawn >){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3812,"fileType":"javascript","requestStartTime":1518016343772}}
{"body": {"column":78,"line":98,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) >)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn))){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3896,"fileType":"javascript","requestStartTime":1518016413269}}
{"body": {"column":84,"line":99,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) >)){\n                    ways += 4;\n                }else{\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":3984,"fileType":"javascript","requestStartTime":1518016422357}}
{"body": {"column":29,"line":102,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){\n               \n                \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    let pawn.\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4073,"fileType":"javascript","requestStartTime":1518016440518}}
{"body": {"column":36,"line":101,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    let pawn = pawn.\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4064,"fileType":"javascript","requestStartTime":1518016458230}}
{"body": {"column":39,"line":101,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    let pawn = pawn x .\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4067,"fileType":"javascript","requestStartTime":1518016470502}}
{"body": {"column":36,"line":101,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    let pawn = pawn.\n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4064,"fileType":"javascript","requestStartTime":1518016475390}}
{"body": {"column":30,"line":101,"wordToComplete":"x","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    let pawn.x = pawn.x \n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4058,"fileType":"javascript","requestStartTime":1518016481117}}
{"body": {"column":26,"line":101,"wordToComplete":"x","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    pawn.x = pawn.x -1;\n                    \n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king[1] === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":4054,"fileType":"javascript","requestStartTime":1518016563472}}
{"body": {"column":13,"line":171,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    pawn.x = pawn.x -1;\n                    \n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king. === prawn[1]) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5916,"fileType":"javascript","requestStartTime":1518016591479}}
{"body": {"column":25,"line":171,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    pawn.x = pawn.x -1;\n                    \n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king.y === prawn.) || (king[0] === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5928,"fileType":"javascript","requestStartTime":1518016602448}}
{"body": {"column":37,"line":171,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    pawn.x = pawn.x -1;\n                    \n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king.y === prawn.y) || (king. === prawn[0])){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5940,"fileType":"javascript","requestStartTime":1518016606600}}
{"body": {"column":49,"line":171,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    let ways = 0;\n    let count = 0;\n    let blocker = false;\n    \n    let locations = {\"white\" : {}, \"black\": {}};\n    \n    board.forEach(function(scenaraio){\n            scenaraio.forEach(function(row){\n                    count ++;\n                    let rowCount = 0;\n               \n                    row.split('').forEach(function(col){\n                        rowCount++;\n                        switch(col){\n                            case 'k':  \n                                locations.black.king.x =  rowncount;\n                                locations.black.king.y =  count;             \n                                break;\n                           case 'p':\n                                locations.black.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'r': \n                                locations.black.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'q': \n                                locations.black.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'n':\n                                locations.black.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'b':\n                                locations.black.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'K':\n                                locations.white.king.x =  rowncount;\n                                locations.white.king.y =  count;    \n                            case 'P':\n                                locations.white.pawn.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'R': \n                                locations.white.rook.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'Q': \n                                locations.white.queen.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'N':\n                                locations.white.knight.put({'x' : rowncount, 'y' : count})\n                                break;\n                            case 'B':\n                                locations.white.bishop.put({'x' : rowncount, 'y' : count})\n                                break;\n                        }\n                    });    \n        });\n    \n    });\n    \n    let blackKing =  locations.black.king;\n    let whiteKing =  locations.black.king;\n    if(blackKing.length > 0){\n                                   \n        for(let i = 0; i < locations.white.pawn.length; i++){\n            let moveMadeCheck = false;\n                      \n            let pawn = locations.white.pawn[i];       \n            if(pawn.x < 2){ \n               \n                ways = ways \n                    + isPeonMoveCheck(\"rook\", locations.white.rook, pawn) \n                    + isPeonMoveCheck(\"queen\", locations.white.queen, pawn) \n                    + isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn);\n                \n                if((isPeonMoveCheck(\"rook\", locations.white.rook, pawn) > 0)\n                   || (isPeonMoveCheck(\"queen\", locations.white.queen, pawn) > 0)\n                       || (isPeonMoveCheck(\"bishop\", locations.white.bishop, pawn) > 0)){\n                    ways += 4;\n                }else{\n                    pawn.x = pawn.x -1;\n                    \n                     //tower\n                    if(tower(blackKing, pawn)) ways += 1; \n                    //horse\n                    if(horse(blackKing, pawn))  ways += 1;\n                     //queen\n                    if(queen(blackKing,pawn))  ways += 1;\n                    //bishop\n                    if(bishop(blackKing,pawn))  ways += 1; \n             }\n          }\n        }\n     \n        //check if the peon was blocking \n        \n       // if((rookArr.length > 0) && (tower(king,rookArr)))  ways += 1;\n       // if((queenArr.length > 0) && (queen(king,queenArr)))  ways += 1;\n       // if((bishopArr.length > 0) && (bishop(king,bishopArr)))  ways += 1;\n       // if((knightArr.length > 0) && (horse(king,knightArr)))  ways += 1;\n\n    }\n    \n\n    return ways;\n}\n\n\nfunction isPeonMoveCheck(type, arr, pawn ){\n    let count = 0;\n    switch(type){\n        case \"rook\":\n            arr.forEach(function(entry){\n                if tower(pawn,entry) count += 1;\n            }\n            break;\n        case \"queen\":\n            arr.forEach(function(entry){\n                if queen(pawn,entry) count += 1;\n            }\n            break;\n        case \"bishop\":\n            arr.forEach(function(entry){\n                if bishop(pawn,entry) count += 1;\n            }\n            break;\n                        \n    }finally(){\n                return count;\n    }\n    \n}\n\nfunction horse(king, prawn){ \n    if((king.y + 2 === prawn.y) || (king.y - 2 === prawn.y)){\n        if((king.x + 1 === prawn.x) || (king.x - 1 === prawn.x)){\n            return true;\n           }\n       }\n    \n    if((king.x + 2 === prawn.x) || (king.x - 2 === prawn.x)){\n        if((king.y + 1 === prawn.y) || (king.y - 1 === prawn.y)){\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nfunction tower(king, prawn){\n    if((king.y === prawn.y) || (king.x === prawn.)){\n      return true;\n     }\n    \n    return false;\n}\n\nfunction bishop(king, prawn){\n    if((Math.abs(prawn.x - king.x) === (Math.abs(prawn.y - king.y)))\n        || (Math.abs(prawn.x + king.x) === (Math.abs(prawn.y + king.y))))\n    {\n      return true;\n     }\n    \n    return false;\n}\n\nfunction queen(king, prawn){\n    if(tower(king,prawn)){\n      return true;\n    } else if (bishop(king,prawn)){\n      return true;\n    }\n    \n    return false;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for(var a0 = 0; a0 < t; a0++){\n        var board = [];\n        for(board_i = 0; board_i < 8; board_i++){\n           board[board_i] = readLine().split(' ');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n","offset":5952,"fileType":"javascript","requestStartTime":1518016609848}}
{"body": {"column":24,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    for(var i; i < nums.)\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":635,"fileType":"javascript","requestStartTime":1518016724784}}
{"body": {"column":10,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x>\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":638,"fileType":"javascript","requestStartTime":1518016791063}}
{"body": {"column":13,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        if(x.)\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":641,"fileType":"javascript","requestStartTime":1518016798856}}
{"body": {"column":10,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x.\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":638,"fileType":"javascript","requestStartTime":1518016814428}}
{"body": {"column":12,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x=x.\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":640,"fileType":"javascript","requestStartTime":1518016816652}}
{"body": {"column":24,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x=x.filter(num=>x[0])\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":652,"fileType":"javascript","requestStartTime":1518016845336}}
{"body": {"column":28,"line":29,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x=x.filter(num=>num>x[0])\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":656,"fileType":"javascript","requestStartTime":1518016854767}}
{"body": {"column":13,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x=x.filter(num=>num>(x[0]+2*k*i))\n        if(x.)\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":683,"fileType":"javascript","requestStartTime":1518016886336}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    \n    for(var i=1;i<=max;i++){\n        x=x.filter(num=>num>(x[0]+2*k*i))\n        if(x.length)>\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":691,"fileType":"javascript","requestStartTime":1518016891008}}
{"body": {"column":97,"line":1,"wordToComplete":"tool like a shit!!! please add <meta name=\"viewport\" content=\"width=device-width\" /> in <head>","code":"\n// tool like a shit!!! please add <meta name=\"viewport\" content=\"width=device-width\" /> in <head>\n\n","offset":99,"fileType":"javascript","requestStartTime":1518016954725}}
{"body": {"column":12,"line":27,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[0]-x[x.length-1])/k\n    console.\n    \n    for(var i=1;i<=max;i++){\n        x=x.filter(num=>num>(x[0]+2*k*i))\n        if(x.length==0){\n            return i\n        }\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":606,"fileType":"javascript","requestStartTime":1518017123932}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":623,"fileType":"javascript","requestStartTime":1518017160650}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.log(nums.)\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":632,"fileType":"javascript","requestStartTime":1518017173937}}
{"body": {"column":16,"line":30,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction hackerlandRadioTransmitters(x, k) {\n    // Complete this function\n    x.sort((a,b)=>a>b)\n    var max = (x[x.length-1]-x[0])/k\n    \n    for(var i=1;i<=max;i++){\n        x=x.filter(num=>num>(x[0]+2*k*i))\n        console.\n        if(x.length==0){\n            return i\n        }\n    }\n    \n}\n\nfunction main() {\n    var n_temp = readLine().split(' ');\n    var n = parseInt(n_temp[0]);\n    var k = parseInt(n_temp[1]);\n    x = readLine().split(' ');\n    x = x.map(Number);\n    var result = hackerlandRadioTransmitters(x, k);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n\n\n","offset":686,"fileType":"javascript","requestStartTime":1518017218265}}
{"body": {"column":26,"line":62,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    var O = [];\n    var checks = {\n        q: queenCheck,\n        n: knightCheck,\n        b: bishopCheck,\n        r: rookCheck\n    };\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (i == 1 && board[1][j] == \"P\" && board[0][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            } else if (/[QNBR]/.test(board[i][j])) {\n                O.push({\n                    p: board[i][j],\n                    rf: {\n                        r: 8 - i,\n                        f: j + 1\n                    }\n                })\n            }\n        }\n    }\n    for (let c in checks) {\n        if (checks[c](P, k, o)) result++;\n    }\n    for (let i = 0; i < O.) {\n        \n    }\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.r - y.r) : y.f\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - yf);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1536,"fileType":"javascript","requestStartTime":1518017346223}}
{"body": {"column":12,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":623,"fileType":"javascript","requestStartTime":1518017353039}}
{"body": {"column":21,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.log(nums.)\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":632,"fileType":"javascript","requestStartTime":1518017360663}}
{"body": {"column":12,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.log(nums.length)\n    console.\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":652,"fileType":"javascript","requestStartTime":1518017379159}}
{"body": {"column":12,"line":36,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/**\n*   A line of code that prints \"Hello, World!\" on a new line is provided in the editor. \n*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.\n*\n*\tParameter:\n*   parameterVariable - A string of text.\n**/\nfunction greeting(parameterVariable) {\n    // This line prints 'Hello, World!' to the console:\n    console.log('Hello, World!');\n\n    // Write a line of code that prints parameterVariable to stdout using console.log:\n    console.\n    \n}\n\nfunction main() {\n    const parameterVariable = readLine();\n    \n    greeting(parameterVariable);\n}\n","offset":900,"fileType":"javascript","requestStartTime":1518017387250}}
{"body": {"column":21,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    var O = [];\n    var checks = {\n        q: queenCheck,\n        n: knightCheck,\n        b: bishopCheck,\n        r: rookCheck\n    };\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (i == 1 && board[1][j] == \"P\" && board[0][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            } else if (/[QNBR]/.test(board[i][j])) {\n                O.push({\n                    p: board[i][j],\n                    rf: {\n                        r: 8 - i,\n                        f: j + 1\n                    }\n                })\n            }\n        }\n    }\n    for (let c in checks) {\n        if (checks[c](P, k, o)) result++;\n    }\n    for (let i = 0; i < O.length; i++) {\n        if (checks[O.])\n    }\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.r - y.r) : y.f\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - yf);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1572,"fileType":"javascript","requestStartTime":1518017397294}}
{"body": {"column":23,"line":63,"wordToComplete":"","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    var O = [];\n    var checks = {\n        q: queenCheck,\n        n: knightCheck,\n        b: bishopCheck,\n        r: rookCheck\n    };\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (i == 1 && board[1][j] == \"P\" && board[0][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            } else if (/[QNBR]/.test(board[i][j])) {\n                O.push({\n                    p: board[i][j],\n                    rf: {\n                        r: 8 - i,\n                        f: j + 1\n                    }\n                })\n            }\n        }\n    }\n    for (let c in checks) {\n        if (checks[c](P, k, o)) result++;\n    }\n    for (let i = 0; i < O.length; i++) {\n        if (checks[O.p.])\n    }\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.r - y.r) : y.f\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - yf);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1574,"fileType":"javascript","requestStartTime":1518017402407}}
{"body": {"column":21,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.log(nums.length)\n    console.log(nums.)\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":661,"fileType":"javascript","requestStartTime":1518017406453}}
{"body": {"column":21,"line":31,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    console.log(nums.length)\n    console.log(nums.\n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":661,"fileType":"javascript","requestStartTime":1518017509439}}
{"body": {"column":47,"line":63,"wordToComplete":"r","code":"\nprocess.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction waysToGiveACheck(board) {\n    var result = 0;\n    var P = {};\n    var k = {};\n    var o = [];\n    var O = [];\n    var checks = {\n        q: queenCheck,\n        n: knightCheck,\n        b: bishopCheck,\n        r: rookCheck\n    };\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n            if (i == 1 && board[1][j] == \"P\" && board[0][j] == \"#\") {\n                P.r = 9 - i;\n                P.f = j + 1;\n            } else if (board[i][j] == \"k\") {\n                k.r = 8 - i;\n                k.f = j + 1;\n            } else if (/[qnbrp]/.test(board[i][j])) {\n                o.push({\n                    r: 8 - i,\n                    f: j + 1\n                })\n            } else if (/[QNBR]/.test(board[i][j])) {\n                O.push({\n                    p: board[i][j],\n                    rf: {\n                        r: 8 - i,\n                        f: j + 1\n                    }\n                })\n            }\n        }\n    }\n    for (let c in checks) {\n        if (checks[c](P, k, o)) result++;\n    }\n    for (let i = 0; i < O.length; i++) {\n        if (checks[O[i].p.toLowerCase()](O[i].r))\n    }\n    return result;\n}\n\nfunction queenCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o) || diagCheck(P, k, o);\n}\n\nfunction rookCheck(P, k, o) {\n    return horiCheck(P, k, o) || vertCheck(P, k, o);\n}\n\nfunction bishopCheck(P, k, o) {\n    return diagCheck(P, k, o);\n}\n\nfunction knightCheck(P, k) {\n    var dr = Math.abs(P.r - k.r);\n    var df = Math.abs(P.f - k.f);\n    var result = [dr, df].sort();\n    return result[0] == 1 && result[1] == 2;\n}\n\nfunction horiCheck(P, k, o) {\n    var result = true;\n    var hori = function (x, y) {\n        return x.r == y.r;\n    }\n    if (hori(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (hori(P, o[i]) && Math.abs(P.f - o[i].f) < Math.abs(P.f - k.f)) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction vertCheck(P, k, o) {\n    var result = true;\n    var vert = function (x, y) {\n        return x.f == y.f;\n    }\n    if (vert(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (vert(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction diagCheck(P, k, o) {\n    var result = true;\n    var diag = function (x, y) {\n        var yf = x.f < y.f ? y.f - 2 * (x.r - y.r) : y.f\n        var d1 = Math.abs(x.r - x.f);\n        var d2 = Math.abs(y.r - yf);\n        return d1 == d2;\n    }\n    if (diag(P, k)) {\n        for (var i = 0; i < o.length; i++) {\n            if (diag(P, o[i]) && o[i].r > k.r) {\n                result = false;\n                break;\n            }\n        }\n    } else {\n        result = false;\n    }\n    return result;\n}\n\nfunction main() {\n    var t = parseInt(readLine());\n    for (var a0 = 0; a0 < t; a0++) {\n        var board = [];\n        for (board_i = 0; board_i < 8; board_i++) {\n            board[board_i] = readLine().split('');\n        }\n        var result = waysToGiveACheck(board);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n}\n\n\n","offset":1598,"fileType":"javascript","requestStartTime":1518017510763}}
{"body": {"column":19,"line":19,"wordToComplete":"","code":"process.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function(data) {\n    __input_stdin += data;\n});\n\n\n/*\n * Complete the function below.\n */\nfunction waitingTime(tickets, p) {\n    var taille_tab = p;\n    var pos  = 0;\n    var temp_value = 0;\n    var second = 0;\n    \n    while(taille_tab > 0)\n        {\n            if (tickets[0] > 1)\n                {\n                    temp_value = tickets[0];\n                    for (pos = 0; pos < taille_tab; pos++)\n                        tickets[pos] = tickets[pos + 1];\n                    ticket[pos] = temp_value;\n                }\n            else \n                {\n                }\n            \n        }\n}\n\nvar fs = require('fs');\nvar wstream = fs.createWriteStream(process.env.OUTPUT_PATH);\n\nprocess.stdin.on('end', function() {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var tickets;\n    var tickets_size = 0;\n    tickets_size = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n    var tickets = [];\n    var tickets_item;\n    for (var tickets_i = 0; tickets_i < tickets_size; tickets_i++) {\n        var tickets_item = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n        __input_currentline += 1;\n        tickets.push(tickets_item);\n    }\n\n    var p;\n    var p = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n\n\n    res = waitingTime(tickets, p);\n    wstream.write(res+\"\\n\");\n\n    wstream.end();\n});\n\n","offset":380,"fileType":"javascript","requestStartTime":1518017726753}}
{"body": {"column":24,"line":30,"wordToComplete":"","code":"'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.trim().split('\\n').map(string => {\n        return string.trim();\n    });\n    \n    main();    \n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n/*\n * Modify and return the array so that all even elements are doubled and all odd elements are tripled.\n * \n * Parameter(s):\n * nums: An array of numbers.\n */\nfunction modifyArray(nums) {\n    for(var i; i < nums.)\n    \n    \n}\n\n\n\n\nfunction main() {\n    const n = +(readLine());\n    const a = readLine().split(' ').map(Number);\n    \n    console.log(modifyArray(a).toString().split(',').join(' '));\n}\n","offset":635,"fileType":"javascript","requestStartTime":1518018036819}}
